
Minorca_lufa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  000054ea  0000557e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000054ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a8  00800138  00800138  000055b6  2**0
                  ALLOC
  3 .noinit       00000004  008001e0  008001e0  000055b6  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  000055b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000090  00000000  00000000  00005e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00005f00  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000b30  00000000  00000000  00005f18  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00010c65  00000000  00000000  00006a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000405f  00000000  00000000  000176ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00005b67  00000000  00000000  0001b70c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001c3c  00000000  00000000  00021274  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000474f  00000000  00000000  00022eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008ce3  00000000  00000000  000275ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000be8  00000000  00000000  000302e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__ctors_end>
       4:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
       8:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
       c:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
      10:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
      14:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
      18:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
      1c:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
      20:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
      24:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
      28:	0c 94 20 0e 	jmp	0x1c40	; 0x1c40 <__vector_10>
      2c:	0c 94 f2 0e 	jmp	0x1de4	; 0x1de4 <__vector_11>
      30:	0c 94 4c 1d 	jmp	0x3a98	; 0x3a98 <__vector_12>
      34:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
      3c:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
      40:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
      44:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      48:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
      4c:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
      50:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	0c 94 bf 1d 	jmp	0x3b7e	; 0x3b7e <__vector_21>
      58:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
      5c:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
      60:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      64:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
      68:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>

	ParserData->TotalDeviceReports = 1;
      6c:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
      70:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
      74:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
      78:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
      7c:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
      84:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
      88:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      90:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
      94:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
      98:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      9c:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
      a0:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
      a4:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      a8:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__bad_interrupt>
      ac:	57 0f       	add	r21, r23
      ae:	79 0f       	add	r23, r25
      b0:	64 10       	cpse	r6, r4
      b2:	79 0f       	add	r23, r25
      b4:	64 10       	cpse	r6, r4
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      b6:	bb 0f       	add	r27, r27
      b8:	de 0f       	add	r29, r30
      ba:	64 10       	cpse	r6, r4
      bc:	33 10       	cpse	r3, r3
      be:	46 10       	cpse	r4, r6
      c0:	9e 13       	cpse	r25, r30
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      c2:	9e 13       	cpse	r25, r30
      c4:	cc 13       	cpse	r28, r28
      c6:	cc 13       	cpse	r28, r28
      c8:	28 14       	cp	r2, r8
      ca:	64 14       	cp	r6, r4
      cc:	55 16       	cp	r5, r21
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      ce:	55 16       	cp	r5, r21
      d0:	7c 14       	cp	r7, r12
      d2:	55 16       	cp	r5, r21
      d4:	73 15       	cp	r23, r3
	{
		uint8_t  HIDReportItem  = *ReportData;
      d6:	73 15       	cp	r23, r3
      d8:	2f 16       	cp	r2, r31
      da:	55 16       	cp	r5, r21
      dc:	55 16       	cp	r5, r21
      de:	43 16       	cp	r4, r19

000000e0 <__trampolines_end>:
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e0:	f1 a1       	ldd	r31, Z+33	; 0x21
      e2:	33 a2       	std	Z+35, r3	; 0x23
      e4:	f1 a3       	std	Z+33, r31	; 0x21
      e6:	29 21       	and	r18, r9

000000e8 <keymaps>:
      e8:	2b 14 1a 08 15 17 1c 18 0c 12 13 2a c3 04 16 07     +..........*....
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
      f8:	09 0a 0b 0d 0e 0f 00 c1 e1 00 1d 1b 06 19 05 11     ................

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     108:	10 36 37 38 c0 e2 00 e3 28 00 2c 00 00 c2 34 e5     .678....(.,...4.
     118:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     128:	01 01 50 51 52 4f 00 01 01 00 01 01 01 01 01 01     ..PQRO..........
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     138:	01 01 01 01 c0 01 00 01 01 00 01 00 00 01 01 01     ................
				ReportSize     -= 4;
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     148:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     158:	01 01 01 01 01 01 00 c1 01 00 01 01 01 01 01 01     ................
				ReportSize     -= 2;
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     168:	01 01 01 01 01 01 00 01 01 00 01 00 00 01 01 01     ................
				ReportSize     -= 1;
				ReportData     += 1;
     178:	01 1e 1f 20 21 22 23 24 25 26 27 01 01 01 01 01     ... !"#$%&'.....
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     188:	01 01 01 01 01 01 00 01 01 00 01 01 01 01 01 01     ................
     198:	01 01 01 bf 01 01 00 01 01 00 01 00 00 c2 01 01     ................

000001a8 <__c.1891>:

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1a8:	0a 00                                               ..

000001aa <__c.1889>:
     1aa:	25 30 31 36 62 00                                   %016b.

000001b0 <__c.1887>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b0:	3a 20 00                                            : .

000001b3 <__c.1885>:
     1b3:	25 30 32 58 00                                      %02X.

000001b8 <__c.1882>:
     1b8:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
     1c8:	42 43 44 45 46 0a 00                                BCDEF..

000001cf <__c.1860>:
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1cf:	0a 00                                               ..

000001d1 <__c.1858>:
     1d1:	25 30 32 58 00                                      %02X.

000001d6 <__c.1856>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1d6:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

000001e0 <__c.4770>:
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e0:	5b 73 5d 00                                         [s].

000001e4 <__c.4768>:
				break;
     1e4:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1f4:	00                                                  .

000001f5 <__c.4766>:
     1f5:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     205:	00                                                  .

00000206 <__c.4664>:
     206:	5b 57 5d 00                                         [W].

0000020a <__c.4660>:
     20a:	5b 53 5d 00                                         [S].

0000020e <__c.4656>:
     20e:	5b 52 5d 00                                         [R].

00000212 <__c.4651>:
     212:	5b 44 5d 00                                         [D].

00000216 <__c.4646>:
     216:	5b 43 5d 00                                         [C].

0000021a <ProductString>:
     21a:	10 03 4d 00 69 00 6e 00 6f 00 72 00 63 00 61 00     ..M.i.n.o.r.c.a.
     22a:	00 00                                               ..

0000022c <ManufacturerString>:
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     22c:	22 03 50 00 61 00 6e 00 63 00 20 00 49 00 6e 00     ".P.a.n.c. .I.n.
     23c:	74 00 65 00 72 00 61 00 63 00 74 00 69 00 76 00     t.e.r.a.c.t.i.v.
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     24c:	65 00 00 00                                         e...

00000250 <LanguageString>:
     250:	04 03 09 04                                         ....

00000254 <ConfigurationDescriptor>:
     254:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     264:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     274:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     284:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     294:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
				break;
     2a4:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;
     2b4:	01 00 01 22 20 00 07 05 84 03 20 00 01 07 05 04     ..." ..... .....
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;
     2c4:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     2d4:	01 00 01 22 39 00 07 05 85 03 10 00 01              ..."9........

000002e1 <DeviceDescriptor>:
     2e1:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2f1:	00 01                                               ..

000002f3 <NKROReport>:
     2f3:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     303:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     313:	91 02 95 01 75 03 91 01 05 07 19 00 29 77 15 00     ....u.......)w..
     323:	25 01 95 78 75 01 81 02 c0                          %..xu....

0000032c <ConsoleReport>:
     32c:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33c:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

0000034c <ExtrakeyReport>:
     34c:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     35c:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     37c:	10 95 01 81 00 c0                                   ......

00000382 <MouseReport>:
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     382:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     392:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     3a2:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3c2:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

000003cf <KeyboardReport>:
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     3cf:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3df:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3ef:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     3ff:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

0000040e <__c.4396>:
				}

				CurrCollectionPath->Type       = ReportItemData;
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     40e:	0a 00                                               ..

00000410 <__c.4391>:
     410:	25 30 32 58 20 00                                   %02X .

00000416 <__c.4388>:
     416:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     426:	20 00                                                .

00000428 <__c.4751>:
     428:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

00000433 <__c.4536>:
     433:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can

					for (uint8_t i = 1; i < UsageListSize; i++)
     443:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

00000451 <__c.4531>:
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     451:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     461:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

0000046f <__c.4701>:
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46f:	64 6f 6e 65 2e 0a 00                                done...

00000476 <__c.4695>:
     476:	62 6f 6f 74 6d 61 67 69 63 20 73 63 61 6e 3a 20     bootmagic scan: 
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     486:	2e 2e 2e 20 00                                      ... .

0000048b <__c.4468>:
     48b:	29 0a 00                                            )..

0000048e <__c.4466>:
     48e:	25 75 00                                            %u.

00000491 <__c.4464>:
     491:	2f 00                                               /.

00000493 <__c.4462>:
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     493:	25 75 00                                            %u.

00000496 <__c.4460>:
     496:	5d 28 00                                            ](.

00000499 <__c.4458>:
     499:	25 64 00                                            %d.

0000049c <__c.4456>:
     49c:	20 00                                                .

0000049e <__c.4454>:
     49e:	25 64 00                                            %d.

000004a1 <__c.4452>:
     4a1:	20 00                                                .

000004a3 <__c.4450>:
     4a3:	25 64 00                                            %d.

000004a6 <__c.4448>:
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4a6:	20 00                                                .

000004a8 <__c.4446>:
     4a8:	25 64 00                                            %d.

000004ab <__c.4444>:
     4ab:	7c 00                                               |.

000004ad <__c.4442>:
     4ad:	25 30 32 58 00                                      %02X.

000004b2 <__c.4440>:
     4b2:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4c2:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     4d2:	20 5b 00                                             [.

000004d5 <__c.5065>:
     4d5:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e5:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

000004f0 <__c.5062>:
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
					NewReportItem.CollectionPath = CurrCollectionPath;
     500:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000509 <__c.5059>:
     509:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
					NewReportItem.ReportID       = CurrStateTable->ReportID;

					if (UsageListSize)
     519:	20 25 64 0a 00                                       %d..

0000051e <__c.5056>:
     51e:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     52e:	64 0a 00                                            d..

00000531 <__c.5053>:
     531:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d

						for (uint8_t i = 1; i < UsageListSize; i++)
     541:	0a 00                                               ..

00000543 <__c.5049>:
						  UsageList[i - 1] = UsageList[i];
     543:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000552 <__c.5042>:

						UsageListSize--;
     552:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     562:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

0000056d <__c.5039>:
     56d:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     57d:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000586 <__c.5036>:
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     586:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     596:	20 25 64 0a 00                                       %d..

0000059b <__c.5033>:
     59b:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ab:	64 0a 00                                            d..

000005ae <__c.5030>:
     5ae:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5be:	0a 00                                               ..

000005c0 <__c.5026>:
     5c0:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

000005cf <__c.5019>:
     5cf:	0a 00                                               ..

000005d1 <__c.5017>:
     5d1:	25 75 00                                            %u.

000005d4 <__c.5015>:
     5d4:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     5e4:	5f 6d 61 78 3a 20 00                                _max: .

000005eb <__c.5013>:
     5eb:	0a 00                                               ..

000005ed <__c.5011>:

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5ed:	25 75 00                                            %u.

000005f0 <__c.5009>:
     5f0:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     600:	65 64 3a 20 00                                      ed: .

00000605 <__c.5007>:
     605:	0a 00                                               ..

00000607 <__c.5005>:
     607:	25 75 00                                            %u.

0000060a <__c.5003>:
     60a:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     61a:	00                                                  .

0000061b <__c.5001>:
     61b:	0a 00                                               ..

0000061d <__c.4999>:
     61d:	25 75 00                                            %u.

00000620 <__c.4997>:
     620:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

0000062f <__c.4995>:
     62f:	0a 00                                               ..

00000631 <__c.4993>:
     631:	25 75 00                                            %u.

00000634 <__c.4991>:
     634:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     644:	20 00                                                .

00000646 <__c.4989>:
     646:	0a 00                                               ..

00000648 <__c.4987>:
     648:	25 75 00                                            %u.

0000064b <__c.4985>:
     64b:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     65b:	20 00                                                .

0000065d <__c.4983>:
     65d:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

0000066b <__c.5103>:
     66b:	4d 3e 00                                            M>.

0000066e <__c.5101>:
     66e:	4d 25 64 3e 20 00                                   M%d> .

00000674 <__c.5099>:
     674:	3f 00                                               ?.

00000676 <__c.5096>:
     676:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

00000683 <__c.5082>:
					  ParserData->TotalReportItems++;
     683:	43 3e 20 00                                         C> .

00000687 <__c.5072>:
     687:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     697:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
			UsageListSize       = 0;
     6a7:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6b7:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6c7:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

000006d5 <__c.5070>:

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d5:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     6e5:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     6f5:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     705:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     715:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     725:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     735:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     745:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     755:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     765:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     775:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     785:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     795:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     7a5:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     7b5:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     7c5:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

000007d0 <__c.4975>:
     7d0:	3f 00                                               ?.

000007d2 <__c.4972>:
     7d2:	4d 3e 20 00                                         M> .

000007d6 <__c.4977>:
     7d6:	43 3e 20 00                                         C> .

000007da <__c.5121>:
     7da:	4c 25 64 0a 00                                      L%d..

000007df <__c.4961>:
     7df:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     7ef:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     7ff:	73 65 6b 65 79 0a 00                                sekey..

00000806 <__c.4786>:
     806:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     816:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     826:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     836:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     846:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     856:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     866:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     876:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     886:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     896:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 6e 3a 09 4e     r.e:.eeprom.n:.N
     8a6:	4b 52 4f 0a 00                                      KRO..

000008ab <__c.4881>:
     8ab:	0a 00                                               ..

000008ad <__c.4879>:
     8ad:	25 75 00                                            %u.

000008b0 <__c.4877>:
     8b0:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

000008b8 <__c.4875>:
     8b8:	0a 00                                               ..

000008ba <__c.4873>:
     8ba:	25 75 00                                            %u.

000008bd <__c.4871>:
     8bd:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     8cd:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

000008d9 <__c.4869>:
     8d9:	0a 00                                               ..

000008db <__c.4867>:
     8db:	25 75 00                                            %u.

000008de <__c.4865>:
     8de:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     8ee:	20 00                                                .

000008f0 <__c.4863>:
     8f0:	0a 00                                               ..

000008f2 <__c.4861>:
     8f2:	25 75 00                                            %u.

000008f5 <__c.4859>:
     8f5:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

000008ff <__c.4857>:
     8ff:	0a 00                                               ..

00000901 <__c.4855>:
     901:	25 75 00                                            %u.

00000904 <__c.4853>:
     904:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     914:	20 00                                                .

00000916 <__c.4851>:
     916:	0a 00                                               ..

00000918 <__c.4849>:
     918:	25 75 00                                            %u.

0000091b <__c.4847>:
     91b:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     92b:	20 00                                                .

0000092d <__c.4845>:
     92d:	0a 00                                               ..

0000092f <__c.4843>:
     92f:	25 75 00                                            %u.

00000932 <__c.4841>:
     932:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     942:	74 72 6f 6c 3a 20 00                                trol: .

00000949 <__c.4839>:
     949:	0a 00                                               ..

0000094b <__c.4837>:
     94b:	25 75 00                                            %u.

0000094e <__c.4835>:
     94e:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     95e:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

00000967 <__c.4833>:
     967:	0a 00                                               ..

00000969 <__c.4831>:
     969:	25 30 32 58 00                                      %02X.

0000096e <__c.4829>:
     96e:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     97e:	77 3a 20 00                                         w: .

00000982 <__c.4826>:
     982:	0a 00                                               ..

00000984 <__c.4824>:
     984:	25 75 00                                            %u.

00000987 <__c.4822>:
     987:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

00000990 <__c.4820>:
     990:	0a 00                                               ..

00000992 <__c.4818>:
     992:	25 75 00                                            %u.

00000995 <__c.4816>:
     995:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

000009a1 <__c.4814>:
     9a1:	0a 00                                               ..

000009a3 <__c.4812>:
     9a3:	25 75 00                                            %u.

000009a6 <__c.4810>:
     9a6:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

000009b0 <__c.4808>:
     9b0:	0a 00                                               ..

000009b2 <__c.4806>:
     9b2:	25 75 00                                            %u.

000009b5 <__c.4804>:
     9b5:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

000009bf <__c.4802>:
     9bf:	0a 00                                               ..

000009c1 <__c.4800>:
     9c1:	25 30 32 58 00                                      %02X.

000009c6 <__c.4798>:
     9c6:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     9d6:	3a 20 00                                            : .

000009d9 <__c.4795>:
     9d9:	0a 00                                               ..

000009db <__c.4793>:
     9db:	25 75 00                                            %u.

000009de <__c.4791>:
     9de:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

000009ee <__c.4956>:
     9ee:	3f 00                                               ?.

000009f0 <__c.4947>:
     9f0:	4e 4b 52 4f 3a 20 6f 66 66 0a 00                    NKRO: off..

000009fb <__c.4945>:
     9fb:	4e 4b 52 4f 3a 20 6f 6e 0a 00                       NKRO: on..

00000a05 <__c.4942>:
     a05:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     a15:	25 30 34 6c 58 0a 00                                %04lX..

00000a1c <__c.4940>:
     a1c:	6b 65 79 62 6f 61 72 64 5f 6e 6b 72 6f 3a 20 25     keyboard_nkro: %
     a2c:	58 0a 00                                            X..

00000a2f <__c.4938>:
     a2f:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     a3f:	58 0a 00                                            X..

00000a42 <__c.4936>:
     a42:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     a52:	6c 3a 20 25 58 0a 00                                l: %X..

00000a59 <__c.4934>:
     a59:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     a69:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000a73 <__c.4932>:
     a73:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

00000a81 <__c.4929>:
     a81:	47 43 43 3a 20 34 2e 38 2e 31 20 41 56 52 2d 4c     GCC: 4.8.1 AVR-L
     a91:	49 42 43 3a 20 31 2e 38 2e 30 73 76 6e 20 41 56     IBC: 1.8.0svn AV
     aa1:	52 5f 41 52 43 48 3a 20 61 76 72 35 0a 00           R_ARCH: avr5..

00000aaf <__c.4927>:
     aaf:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     abf:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     acf:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     adf:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 34     E COMMAND NKRO 4
     aef:	30 39 36 0a 00                                      096..

00000af4 <__c.4925>:
     af4:	42 55 49 4c 44 3a 20 39 62 62 35 62 66 65 2d 64     BUILD: 9bb5bfe-d
     b04:	69 72 74 79 20 28 31 31 3a 31 32 3a 30 31 20 53     irty (11:12:01 S
     b14:	65 70 20 31 31 20 32 30 31 36 29 0a 00              ep 11 2016)..

00000b21 <__c.4923>:
     b21:	56 49 44 3a 20 30 78 46 45 45 44 28 50 61 6e 63     VID: 0xFEED(Panc
     b31:	20 49 6e 74 65 72 61 63 74 69 76 65 29 20 50 49      Interactive) PI
     b41:	44 3a 20 30 78 36 30 36 30 28 4d 69 6e 6f 72 63     D: 0x6060(Minorc
     b51:	61 29 20 56 45 52 3a 20 30 78 30 30 30 31 0a 00     a) VER: 0x0001..

00000b61 <__c.4921>:
     b61:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     b71:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     b81:	6f 72 20 4d 69 6e 6f 72 63 61 0a 00                 or Minorca..

00000b8d <__c.4919>:
     b8d:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000b9c <__c.4916>:
     b9c:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000ba9 <__c.4914>:
     ba9:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000bb5 <__c.4911>:
     bb5:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000bc5 <__c.4909>:
     bc5:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000bd4 <__c.4906>:
     bd4:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000be2 <__c.4904>:
     be2:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000bef <__c.4901>:
     bef:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000bfb <__c.4899>:
     bfb:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000c08 <__c.4896>:
     c08:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     c18:	00                                                  .

00000c19 <__c.4893>:
     c19:	43 3e 20 00                                         C> .

00000c1d <__c.4887>:
     c1d:	65 65 63 6f 6e 66 69 67 3a 0a 00                    eeconfig:..

00000c28 <__ctors_end>:
     c28:	11 24       	eor	r1, r1
     c2a:	1f be       	out	0x3f, r1	; 63
     c2c:	cf ef       	ldi	r28, 0xFF	; 255
     c2e:	da e0       	ldi	r29, 0x0A	; 10
     c30:	de bf       	out	0x3e, r29	; 62
     c32:	cd bf       	out	0x3d, r28	; 61

00000c34 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     c34:	04 b6       	in	r0, 0x34	; 52
     c36:	03 fe       	sbrs	r0, 3
     c38:	24 c0       	rjmp	.+72     	; 0xc82 <__do_copy_data>
     c3a:	80 91 e0 01 	lds	r24, 0x01E0
     c3e:	90 91 e1 01 	lds	r25, 0x01E1
     c42:	a0 91 e2 01 	lds	r26, 0x01E2
     c46:	b0 91 e3 01 	lds	r27, 0x01E3
     c4a:	87 30       	cpi	r24, 0x07	; 7
     c4c:	90 4b       	sbci	r25, 0xB0	; 176
     c4e:	a7 40       	sbci	r26, 0x07	; 7
     c50:	b0 4b       	sbci	r27, 0xB0	; 176
     c52:	b9 f4       	brne	.+46     	; 0xc82 <__do_copy_data>
        reset_key = 0;
     c54:	10 92 e0 01 	sts	0x01E0, r1
     c58:	10 92 e1 01 	sts	0x01E1, r1
     c5c:	10 92 e2 01 	sts	0x01E2, r1
     c60:	10 92 e3 01 	sts	0x01E3, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     c64:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     c66:	84 b7       	in	r24, 0x34	; 52
     c68:	87 7f       	andi	r24, 0xF7	; 247
     c6a:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     c6c:	88 e1       	ldi	r24, 0x18	; 24
     c6e:	0f b6       	in	r0, 0x3f	; 63
     c70:	f8 94       	cli
     c72:	80 93 60 00 	sts	0x0060, r24
     c76:	10 92 60 00 	sts	0x0060, r1
     c7a:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     c7c:	e0 e0       	ldi	r30, 0x00	; 0
     c7e:	f8 e3       	ldi	r31, 0x38	; 56
     c80:	09 95       	icall

00000c82 <__do_copy_data>:
     c82:	11 e0       	ldi	r17, 0x01	; 1
     c84:	a0 e0       	ldi	r26, 0x00	; 0
     c86:	b1 e0       	ldi	r27, 0x01	; 1
     c88:	ea ee       	ldi	r30, 0xEA	; 234
     c8a:	f4 e5       	ldi	r31, 0x54	; 84
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <__do_copy_data+0x10>
     c8e:	05 90       	lpm	r0, Z+
     c90:	0d 92       	st	X+, r0
     c92:	a8 33       	cpi	r26, 0x38	; 56
     c94:	b1 07       	cpc	r27, r17
     c96:	d9 f7       	brne	.-10     	; 0xc8e <__do_copy_data+0xc>

00000c98 <__do_clear_bss>:
     c98:	21 e0       	ldi	r18, 0x01	; 1
     c9a:	a8 e3       	ldi	r26, 0x38	; 56
     c9c:	b1 e0       	ldi	r27, 0x01	; 1
     c9e:	01 c0       	rjmp	.+2      	; 0xca2 <.do_clear_bss_start>

00000ca0 <.do_clear_bss_loop>:
     ca0:	1d 92       	st	X+, r1

00000ca2 <.do_clear_bss_start>:
     ca2:	a0 3e       	cpi	r26, 0xE0	; 224
     ca4:	b2 07       	cpc	r27, r18
     ca6:	e1 f7       	brne	.-8      	; 0xca0 <.do_clear_bss_loop>
     ca8:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <main>
     cac:	0c 94 73 2a 	jmp	0x54e6	; 0x54e6 <_exit>

00000cb0 <__bad_interrupt>:
     cb0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000cb4 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     cb4:	ff 93       	push	r31
	push	ZL
     cb6:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     cb8:	e0 91 38 01 	lds	r30, 0x0138
	lds	ZH, xfunc_out+1	;/
     cbc:	f0 91 39 01 	lds	r31, 0x0139
	sbiw	ZL, 0		;Skip if null
     cc0:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     cc2:	09 f0       	breq	.+2      	; 0xcc6 <xputc+0x12>
	icall
     cc4:	09 95       	icall
2:	pop	ZL
     cc6:	ef 91       	pop	r30
	pop	ZH
     cc8:	ff 91       	pop	r31
	ret
     cca:	08 95       	ret

00000ccc <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     ccc:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     cce:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     cd0:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     cd2:	11 f0       	breq	.+4      	; 0xcd8 <xputs+0xc>
	rcall	xputc
     cd4:	ef df       	rcall	.-34     	; 0xcb4 <xputc>
	rjmp	1b
     cd6:	fb cf       	rjmp	.-10     	; 0xcce <xputs+0x2>
2:	ret
     cd8:	08 95       	ret

00000cda <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     cda:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     cdc:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     cde:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     ce0:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     ce2:	0c c0       	rjmp	.+24     	; 0xcfc <xitoa+0x22>
	neg	r20		;
     ce4:	41 95       	neg	r20
	sbrs	r25, 7		;
     ce6:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     ce8:	09 c0       	rjmp	.+18     	; 0xcfc <xitoa+0x22>
	ldi	r30, '-'	;
     cea:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     cec:	60 95       	com	r22
	com	r23		;
     cee:	70 95       	com	r23
	com	r24		;
     cf0:	80 95       	com	r24
	com	r25		;
     cf2:	90 95       	com	r25
	adc	r22, r1		;
     cf4:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     cf6:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     cf8:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     cfa:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     cfc:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <xitoa+0x2a>
	neg	r18		;
     d00:	21 95       	neg	r18
	ldi	r19, '0'	;/
     d02:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     d04:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     d06:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     d08:	66 0f       	add	r22, r22
	rol	r23		;
     d0a:	77 1f       	adc	r23, r23
	rol	r24		;
     d0c:	88 1f       	adc	r24, r24
	rol	r25		;
     d0e:	99 1f       	adc	r25, r25
	rol	r26		;
     d10:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     d12:	a4 17       	cp	r26, r20
	brcs	3f		;
     d14:	10 f0       	brcs	.+4      	; 0xd1a <xitoa+0x40>
	sub	r26, r20	;
     d16:	a4 1b       	sub	r26, r20
	inc	r22		;
     d18:	63 95       	inc	r22
3:	dec	r21		;
     d1a:	5a 95       	dec	r21
	brne	2b		;/
     d1c:	a9 f7       	brne	.-22     	; 0xd08 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     d1e:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     d20:	08 f0       	brcs	.+2      	; 0xd24 <xitoa+0x4a>
	subi	r26, -7		;
     d22:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     d24:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     d26:	af 93       	push	r26
	inc	r31		;/
     d28:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     d2a:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     d2c:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     d2e:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     d30:	91 05       	cpc	r25, r1
	brne	1b		;/
     d32:	41 f7       	brne	.-48     	; 0xd04 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     d34:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     d36:	11 f4       	brne	.+4      	; 0xd3c <xitoa+0x62>
	push	r30		;
     d38:	ef 93       	push	r30
	inc	r31		;/
     d3a:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     d3c:	f2 17       	cp	r31, r18
	brcc	6f		;
     d3e:	18 f4       	brcc	.+6      	; 0xd46 <xitoa+0x6c>
	push	r19		;
     d40:	3f 93       	push	r19
	inc	r31		;
     d42:	f3 95       	inc	r31
	rjmp	5b		;/
     d44:	fb cf       	rjmp	.-10     	; 0xd3c <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     d46:	8f 91       	pop	r24
	rcall	xputc		;
     d48:	b5 df       	rcall	.-150    	; 0xcb4 <xputc>
	dec	r31		;
     d4a:	fa 95       	dec	r31
	brne	6b		;/
     d4c:	e1 f7       	brne	.-8      	; 0xd46 <xitoa+0x6c>

	ret
     d4e:	08 95       	ret

00000d50 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     d50:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     d52:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     d54:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     d56:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     d58:	21 f0       	breq	.+8      	; 0xd62 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     d5a:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     d5c:	19 f0       	breq	.+6      	; 0xd64 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     d5e:	aa df       	rcall	.-172    	; 0xcb4 <xputc>
	rjmp	0b		;/
     d60:	f9 cf       	rjmp	.-14     	; 0xd54 <xvprintf+0x4>
90:	ret
     d62:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     d64:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     d66:	e8 94       	clt
	_LPMI	r21		;Get flags
     d68:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     d6a:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     d6c:	c1 f3       	breq	.-16     	; 0xd5e <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     d6e:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     d70:	11 f4       	brne	.+4      	; 0xd76 <xvprintf+0x26>
	set			;/
     d72:	68 94       	set
22:	_LPMI	r21		;Get width
     d74:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     d76:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     d78:	48 f4       	brcc	.+18     	; 0xd8c <xvprintf+0x3c>
	subi	r21, '0'	;
     d7a:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     d7c:	90 f3       	brcs	.-28     	; 0xd62 <xvprintf+0x12>
	lsl	r18		;
     d7e:	22 0f       	add	r18, r18
	mov	r0, r18		;
     d80:	02 2e       	mov	r0, r18
	lsl	r18		;
     d82:	22 0f       	add	r18, r18
	lsl	r18		;
     d84:	22 0f       	add	r18, r18
	add	r18, r0		;
     d86:	20 0d       	add	r18, r0
	add	r18, r21	;
     d88:	25 0f       	add	r18, r21
	rjmp	22b		;/
     d8a:	f4 cf       	rjmp	.-24     	; 0xd74 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     d8c:	0e f4       	brtc	.+2      	; 0xd90 <xvprintf+0x40>
	neg	r18		;
     d8e:	21 95       	neg	r18
25:	ld	r24, Y+		;
     d90:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     d92:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     d94:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     d96:	19 f3       	breq	.-58     	; 0xd5e <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     d98:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     d9a:	29 f1       	breq	.+74     	; 0xde6 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     d9c:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     d9e:	59 f1       	breq	.+86     	; 0xdf6 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     da0:	bc 01       	movw	r22, r24
	clr	r24		;
     da2:	88 27       	eor	r24, r24
	clr	r25		;
     da4:	99 27       	eor	r25, r25
	clt			;/
     da6:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     da8:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     daa:	21 f4       	brne	.+8      	; 0xdb4 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     dac:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     dae:	99 91       	ld	r25, Y+
	set			;
     db0:	68 94       	set
	_LPMI	r21		;/
     db2:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     db4:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     db6:	39 f4       	brne	.+14     	; 0xdc6 <xvprintf+0x76>
	ldi	r20, -10	;
     db8:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     dba:	7e f0       	brts	.+30     	; 0xdda <xvprintf+0x8a>
	sbrs	r23, 7		;
     dbc:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     dbe:	0d c0       	rjmp	.+26     	; 0xdda <xvprintf+0x8a>
	ldi	r24, -1		;
     dc0:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     dc2:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     dc4:	0a c0       	rjmp	.+20     	; 0xdda <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     dc6:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     dc8:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     dca:	39 f0       	breq	.+14     	; 0xdda <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     dcc:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     dce:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     dd0:	21 f0       	breq	.+8      	; 0xdda <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     dd2:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     dd4:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     dd6:	09 f0       	breq	.+2      	; 0xdda <xvprintf+0x8a>
	ret			;abort
     dd8:	08 95       	ret
40:	push	ZH		;Output the value
     dda:	ff 93       	push	r31
	push	ZL		;
     ddc:	ef 93       	push	r30
	rcall	xitoa		;
     dde:	7d df       	rcall	.-262    	; 0xcda <xitoa>
42:	pop	ZL		;
     de0:	ef 91       	pop	r30
	pop	ZH		;
     de2:	ff 91       	pop	r31
	rjmp	0b		;/
     de4:	b7 cf       	rjmp	.-146    	; 0xd54 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     de6:	ff 93       	push	r31
	push	ZL
     de8:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     dea:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     dec:	81 91       	ld	r24, Z+
	cpi	r24, 0
     dee:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     df0:	b9 f3       	breq	.-18     	; 0xde0 <xvprintf+0x90>
	rcall	xputc
     df2:	60 df       	rcall	.-320    	; 0xcb4 <xputc>
	rjmp	51b
     df4:	fb cf       	rjmp	.-10     	; 0xdec <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     df6:	ff 93       	push	r31
	push	ZL
     df8:	ef 93       	push	r30
	rcall	xputs
     dfa:	68 df       	rcall	.-304    	; 0xccc <xputs>
	rjmp	42b
     dfc:	f1 cf       	rjmp	.-30     	; 0xde0 <xvprintf+0x90>

00000dfe <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     dfe:	df 93       	push	r29
	push	YL
     e00:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     e02:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     e04:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     e06:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     e08:	a3 df       	rcall	.-186    	; 0xd50 <xvprintf>
	pop	YL
     e0a:	cf 91       	pop	r28
	pop	YH
     e0c:	df 91       	pop	r29
	ret
     e0e:	08 95       	ret

00000e10 <keymap_key_to_keycode>:


/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
     e10:	9c e0       	ldi	r25, 0x0C	; 12
     e12:	79 9f       	mul	r23, r25
     e14:	f0 01       	movw	r30, r0
     e16:	11 24       	eor	r1, r1
     e18:	90 e3       	ldi	r25, 0x30	; 48
     e1a:	89 9f       	mul	r24, r25
     e1c:	e0 0d       	add	r30, r0
     e1e:	f1 1d       	adc	r31, r1
     e20:	11 24       	eor	r1, r1
     e22:	e6 0f       	add	r30, r22
     e24:	f1 1d       	adc	r31, r1
     e26:	e8 51       	subi	r30, 0x18	; 24
     e28:	ff 4f       	sbci	r31, 0xFF	; 255
     e2a:	84 91       	lpm	r24, Z
}
     e2c:	08 95       	ret

00000e2e <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
     e2e:	e8 2f       	mov	r30, r24
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	ee 0f       	add	r30, r30
     e34:	ff 1f       	adc	r31, r31
     e36:	e0 5a       	subi	r30, 0xA0	; 160
     e38:	f0 40       	sbci	r31, 0x00	; 0
}
     e3a:	85 91       	lpm	r24, Z+
     e3c:	94 91       	lpm	r25, Z
     e3e:	08 95       	ret

00000e40 <unselect_rows>:
 * pin: F0  F1  F4  F5 
 */
static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRF  &= ~0b00110011;
     e40:	80 b3       	in	r24, 0x10	; 16
     e42:	8c 7c       	andi	r24, 0xCC	; 204
     e44:	80 bb       	out	0x10, r24	; 16
    PORTF &= ~0b00110011;
     e46:	81 b3       	in	r24, 0x11	; 17
     e48:	8c 7c       	andi	r24, 0xCC	; 204
     e4a:	81 bb       	out	0x11, r24	; 17
     e4c:	08 95       	ret

00000e4e <matrix_init>:
}

void matrix_init(void)
{
    // initialize row and col
    unselect_rows();
     e4e:	0e 94 20 07 	call	0xe40	; 0xe40 <unselect_rows>
 * pin: F6  F7  B6  B5  B4  D7  C7  C6  D3  D2  D1  D0  
 */
static void  init_cols(void)
{
    // Input with pull-up(DDR:0, PORT:1)
    DDRF  &= ~(1<<6 | 1<<7);
     e52:	80 b3       	in	r24, 0x10	; 16
     e54:	8f 73       	andi	r24, 0x3F	; 63
     e56:	80 bb       	out	0x10, r24	; 16
    PORTF |=  (1<<6 | 1<<7);
     e58:	81 b3       	in	r24, 0x11	; 17
     e5a:	80 6c       	ori	r24, 0xC0	; 192
     e5c:	81 bb       	out	0x11, r24	; 17
    DDRB  &= ~(1<<7 | 1<<6 | 1<< 5 | 1<<4);
     e5e:	84 b1       	in	r24, 0x04	; 4
     e60:	8f 70       	andi	r24, 0x0F	; 15
     e62:	84 b9       	out	0x04, r24	; 4
    PORTB |=  (1<<6 | 1<<5 | 1<<4);
     e64:	85 b1       	in	r24, 0x05	; 5
     e66:	80 67       	ori	r24, 0x70	; 112
     e68:	85 b9       	out	0x05, r24	; 5
    DDRD  &= ~(1<<7 | 1<<3 | 1<<2| 1<<1 | 1<<0 );
     e6a:	8a b1       	in	r24, 0x0a	; 10
     e6c:	80 77       	andi	r24, 0x70	; 112
     e6e:	8a b9       	out	0x0a, r24	; 10
    PORTD |=  (1<<7 | 1<<3 | 1<<2| 1<<1 | 1<<0 );
     e70:	8b b1       	in	r24, 0x0b	; 11
     e72:	8f 68       	ori	r24, 0x8F	; 143
     e74:	8b b9       	out	0x0b, r24	; 11
    DDRC  &= ~(1<<7 | 1<<6);
     e76:	87 b1       	in	r24, 0x07	; 7
     e78:	8f 73       	andi	r24, 0x3F	; 63
     e7a:	87 b9       	out	0x07, r24	; 7
    PORTC |=  (1<<7 | 1<<6);
     e7c:	88 b1       	in	r24, 0x08	; 8
     e7e:	80 6c       	ori	r24, 0xC0	; 192
     e80:	88 b9       	out	0x08, r24	; 8
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     e82:	10 92 43 01 	sts	0x0143, r1
     e86:	10 92 42 01 	sts	0x0142, r1
        matrix_debouncing[i] = 0;
     e8a:	10 92 3b 01 	sts	0x013B, r1
     e8e:	10 92 3a 01 	sts	0x013A, r1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     e92:	10 92 45 01 	sts	0x0145, r1
     e96:	10 92 44 01 	sts	0x0144, r1
        matrix_debouncing[i] = 0;
     e9a:	10 92 3d 01 	sts	0x013D, r1
     e9e:	10 92 3c 01 	sts	0x013C, r1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     ea2:	10 92 47 01 	sts	0x0147, r1
     ea6:	10 92 46 01 	sts	0x0146, r1
        matrix_debouncing[i] = 0;
     eaa:	10 92 3f 01 	sts	0x013F, r1
     eae:	10 92 3e 01 	sts	0x013E, r1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     eb2:	10 92 49 01 	sts	0x0149, r1
     eb6:	10 92 48 01 	sts	0x0148, r1
        matrix_debouncing[i] = 0;
     eba:	10 92 41 01 	sts	0x0141, r1
     ebe:	10 92 40 01 	sts	0x0140, r1
     ec2:	08 95       	ret

00000ec4 <matrix_scan>:
    }
}

uint8_t matrix_scan(void)
{
     ec4:	bf 92       	push	r11
     ec6:	cf 92       	push	r12
     ec8:	df 92       	push	r13
     eca:	ef 92       	push	r14
     ecc:	ff 92       	push	r15
     ece:	0f 93       	push	r16
     ed0:	1f 93       	push	r17
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	ca e3       	ldi	r28, 0x3A	; 58
     ed8:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     eda:	d1 2c       	mov	r13, r1
    PORTC |=  (1<<7 | 1<<6);
}

static matrix_row_t read_cols(void)
{
    return (PINF&(1<<6) ? 0 : (1<<0)) |
     edc:	cc 24       	eor	r12, r12
     ede:	c3 94       	inc	r12
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
            }
            debouncing = DEBOUNCE;
     ee0:	a5 e0       	ldi	r26, 0x05	; 5
     ee2:	ba 2e       	mov	r11, r26
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
     ee4:	b1 ed       	ldi	r27, 0xD1	; 209
     ee6:	eb 2e       	mov	r14, r27
     ee8:	b1 e0       	ldi	r27, 0x01	; 1
     eea:	fb 2e       	mov	r15, r27
}

static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
    switch (row) {
     eec:	82 e0       	ldi	r24, 0x02	; 2
     eee:	d8 16       	cp	r13, r24
     ef0:	61 f0       	breq	.+24     	; 0xf0a <matrix_scan+0x46>
     ef2:	93 e0       	ldi	r25, 0x03	; 3
     ef4:	d9 16       	cp	r13, r25
     ef6:	61 f0       	breq	.+24     	; 0xf10 <matrix_scan+0x4c>
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	d8 16       	cp	r13, r24
     efc:	19 f0       	breq	.+6      	; 0xf04 <matrix_scan+0x40>
        case 0:
            DDRF  |= (1<<0);
     efe:	80 9a       	sbi	0x10, 0	; 16
            PORTF &= ~(1<<0);
     f00:	88 98       	cbi	0x11, 0	; 17
     f02:	08 c0       	rjmp	.+16     	; 0xf14 <matrix_scan+0x50>
            break;
        case 1:
            DDRF  |= (1<<1);
     f04:	81 9a       	sbi	0x10, 1	; 16
            PORTF &= ~(1<<1);
     f06:	89 98       	cbi	0x11, 1	; 17
     f08:	05 c0       	rjmp	.+10     	; 0xf14 <matrix_scan+0x50>
            break;
        case 2:
            DDRF  |= (1<<4);
     f0a:	84 9a       	sbi	0x10, 4	; 16
            PORTF &= ~(1<<4);
     f0c:	8c 98       	cbi	0x11, 4	; 17
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <matrix_scan+0x50>
            break;
        case 3:
            DDRF  |= (1<<5);
     f10:	85 9a       	sbi	0x10, 5	; 16
            PORTF &= ~(1<<5);
     f12:	8d 98       	cbi	0x11, 5	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f14:	90 ea       	ldi	r25, 0xA0	; 160
     f16:	9a 95       	dec	r25
     f18:	f1 f7       	brne	.-4      	; 0xf16 <matrix_scan+0x52>
    PORTC |=  (1<<7 | 1<<6);
}

static matrix_row_t read_cols(void)
{
    return (PINF&(1<<6) ? 0 : (1<<0)) |
     f1a:	8f b1       	in	r24, 0x0f	; 15
     f1c:	82 95       	swap	r24
     f1e:	86 95       	lsr	r24
     f20:	86 95       	lsr	r24
     f22:	83 70       	andi	r24, 0x03	; 3
     f24:	8c 25       	eor	r24, r12
     f26:	08 2f       	mov	r16, r24
     f28:	01 70       	andi	r16, 0x01	; 1
     f2a:	10 e0       	ldi	r17, 0x00	; 0
           (PINF&(1<<7) ? 0 : (1<<1)) |
     f2c:	8f b1       	in	r24, 0x0f	; 15
     f2e:	99 27       	eor	r25, r25
     f30:	87 fd       	sbrc	r24, 7
     f32:	90 95       	com	r25
     f34:	80 95       	com	r24
     f36:	90 95       	com	r25
     f38:	88 27       	eor	r24, r24
     f3a:	99 0f       	add	r25, r25
     f3c:	88 1f       	adc	r24, r24
     f3e:	99 27       	eor	r25, r25
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
    PORTC |=  (1<<7 | 1<<6);
}

static matrix_row_t read_cols(void)
{
    return (PINF&(1<<6) ? 0 : (1<<0)) |
     f44:	80 2b       	or	r24, r16
     f46:	91 2b       	or	r25, r17
           (PINF&(1<<7) ? 0 : (1<<1)) |
           (PINB&(1<<6) ? 0 : (1<<2)) |
     f48:	1e 9b       	sbis	0x03, 6	; 3
     f4a:	03 c0       	rjmp	.+6      	; 0xf52 <matrix_scan+0x8e>
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <matrix_scan+0x92>
     f52:	24 e0       	ldi	r18, 0x04	; 4
     f54:	30 e0       	ldi	r19, 0x00	; 0
}

static matrix_row_t read_cols(void)
{
    return (PINF&(1<<6) ? 0 : (1<<0)) |
           (PINF&(1<<7) ? 0 : (1<<1)) |
     f56:	82 2b       	or	r24, r18
     f58:	93 2b       	or	r25, r19
           (PINB&(1<<6) ? 0 : (1<<2)) |
           (PINB&(1<<5) ? 0 : (1<<3)) |
     f5a:	1d 9b       	sbis	0x03, 5	; 3
     f5c:	03 c0       	rjmp	.+6      	; 0xf64 <matrix_scan+0xa0>
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <matrix_scan+0xa4>
     f64:	28 e0       	ldi	r18, 0x08	; 8
     f66:	30 e0       	ldi	r19, 0x00	; 0

static matrix_row_t read_cols(void)
{
    return (PINF&(1<<6) ? 0 : (1<<0)) |
           (PINF&(1<<7) ? 0 : (1<<1)) |
           (PINB&(1<<6) ? 0 : (1<<2)) |
     f68:	82 2b       	or	r24, r18
     f6a:	93 2b       	or	r25, r19
           (PINB&(1<<5) ? 0 : (1<<3)) |
           (PINB&(1<<4) ? 0 : (1<<4)) |
     f6c:	1c 9b       	sbis	0x03, 4	; 3
     f6e:	03 c0       	rjmp	.+6      	; 0xf76 <matrix_scan+0xb2>
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <matrix_scan+0xb6>
     f76:	20 e1       	ldi	r18, 0x10	; 16
     f78:	30 e0       	ldi	r19, 0x00	; 0
static matrix_row_t read_cols(void)
{
    return (PINF&(1<<6) ? 0 : (1<<0)) |
           (PINF&(1<<7) ? 0 : (1<<1)) |
           (PINB&(1<<6) ? 0 : (1<<2)) |
           (PINB&(1<<5) ? 0 : (1<<3)) |
     f7a:	82 2b       	or	r24, r18
     f7c:	93 2b       	or	r25, r19
           (PINB&(1<<4) ? 0 : (1<<4)) |
           (PIND&(1<<7) ? 0 : (1<<5)) |
     f7e:	29 b1       	in	r18, 0x09	; 9
     f80:	33 27       	eor	r19, r19
     f82:	27 fd       	sbrc	r18, 7
     f84:	30 95       	com	r19
     f86:	20 95       	com	r18
     f88:	30 95       	com	r19
     f8a:	22 27       	eor	r18, r18
     f8c:	33 0f       	add	r19, r19
     f8e:	22 1f       	adc	r18, r18
     f90:	33 27       	eor	r19, r19
     f92:	55 e0       	ldi	r21, 0x05	; 5
     f94:	22 0f       	add	r18, r18
     f96:	33 1f       	adc	r19, r19
     f98:	5a 95       	dec	r21
     f9a:	e1 f7       	brne	.-8      	; 0xf94 <matrix_scan+0xd0>
{
    return (PINF&(1<<6) ? 0 : (1<<0)) |
           (PINF&(1<<7) ? 0 : (1<<1)) |
           (PINB&(1<<6) ? 0 : (1<<2)) |
           (PINB&(1<<5) ? 0 : (1<<3)) |
           (PINB&(1<<4) ? 0 : (1<<4)) |
     f9c:	82 2b       	or	r24, r18
     f9e:	93 2b       	or	r25, r19
           (PIND&(1<<7) ? 0 : (1<<5)) |
           (PINC&(1<<7) ? 0 : (1<<6)) |
     fa0:	26 b1       	in	r18, 0x06	; 6
     fa2:	33 27       	eor	r19, r19
     fa4:	27 fd       	sbrc	r18, 7
     fa6:	30 95       	com	r19
     fa8:	20 95       	com	r18
     faa:	30 95       	com	r19
     fac:	22 27       	eor	r18, r18
     fae:	33 0f       	add	r19, r19
     fb0:	22 1f       	adc	r18, r18
     fb2:	33 27       	eor	r19, r19
     fb4:	76 e0       	ldi	r23, 0x06	; 6
     fb6:	22 0f       	add	r18, r18
     fb8:	33 1f       	adc	r19, r19
     fba:	7a 95       	dec	r23
     fbc:	e1 f7       	brne	.-8      	; 0xfb6 <matrix_scan+0xf2>
    return (PINF&(1<<6) ? 0 : (1<<0)) |
           (PINF&(1<<7) ? 0 : (1<<1)) |
           (PINB&(1<<6) ? 0 : (1<<2)) |
           (PINB&(1<<5) ? 0 : (1<<3)) |
           (PINB&(1<<4) ? 0 : (1<<4)) |
           (PIND&(1<<7) ? 0 : (1<<5)) |
     fbe:	82 2b       	or	r24, r18
     fc0:	93 2b       	or	r25, r19
           (PINC&(1<<7) ? 0 : (1<<6)) |
           (PINC&(1<<6) ? 0 : (1<<7)) |
     fc2:	36 9b       	sbis	0x06, 6	; 6
     fc4:	03 c0       	rjmp	.+6      	; 0xfcc <matrix_scan+0x108>
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <matrix_scan+0x10c>
     fcc:	60 e8       	ldi	r22, 0x80	; 128
     fce:	70 e0       	ldi	r23, 0x00	; 0
           (PINF&(1<<7) ? 0 : (1<<1)) |
           (PINB&(1<<6) ? 0 : (1<<2)) |
           (PINB&(1<<5) ? 0 : (1<<3)) |
           (PINB&(1<<4) ? 0 : (1<<4)) |
           (PIND&(1<<7) ? 0 : (1<<5)) |
           (PINC&(1<<7) ? 0 : (1<<6)) |
     fd0:	86 2b       	or	r24, r22
     fd2:	97 2b       	or	r25, r23
           (PINC&(1<<6) ? 0 : (1<<7)) |
           (PIND&(1<<3) ? 0 : (1<<8)) |
     fd4:	4b 9b       	sbis	0x09, 3	; 9
     fd6:	03 c0       	rjmp	.+6      	; 0xfde <matrix_scan+0x11a>
     fd8:	60 e0       	ldi	r22, 0x00	; 0
     fda:	70 e0       	ldi	r23, 0x00	; 0
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <matrix_scan+0x11e>
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	71 e0       	ldi	r23, 0x01	; 1
           (PINB&(1<<6) ? 0 : (1<<2)) |
           (PINB&(1<<5) ? 0 : (1<<3)) |
           (PINB&(1<<4) ? 0 : (1<<4)) |
           (PIND&(1<<7) ? 0 : (1<<5)) |
           (PINC&(1<<7) ? 0 : (1<<6)) |
           (PINC&(1<<6) ? 0 : (1<<7)) |
     fe2:	86 2b       	or	r24, r22
     fe4:	97 2b       	or	r25, r23
           (PIND&(1<<3) ? 0 : (1<<8)) |
           (PIND&(1<<2) ? 0 : (1<<9)) |
     fe6:	4a 9b       	sbis	0x09, 2	; 9
     fe8:	03 c0       	rjmp	.+6      	; 0xff0 <matrix_scan+0x12c>
     fea:	40 e0       	ldi	r20, 0x00	; 0
     fec:	50 e0       	ldi	r21, 0x00	; 0
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <matrix_scan+0x130>
     ff0:	40 e0       	ldi	r20, 0x00	; 0
     ff2:	52 e0       	ldi	r21, 0x02	; 2
           (PINB&(1<<5) ? 0 : (1<<3)) |
           (PINB&(1<<4) ? 0 : (1<<4)) |
           (PIND&(1<<7) ? 0 : (1<<5)) |
           (PINC&(1<<7) ? 0 : (1<<6)) |
           (PINC&(1<<6) ? 0 : (1<<7)) |
           (PIND&(1<<3) ? 0 : (1<<8)) |
     ff4:	84 2b       	or	r24, r20
     ff6:	95 2b       	or	r25, r21
           (PIND&(1<<2) ? 0 : (1<<9)) |
           (PIND&(1<<1) ? 0 : (1<<10)) |
     ff8:	49 9b       	sbis	0x09, 1	; 9
     ffa:	03 c0       	rjmp	.+6      	; 0x1002 <matrix_scan+0x13e>
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <matrix_scan+0x142>
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	34 e0       	ldi	r19, 0x04	; 4
           (PINB&(1<<4) ? 0 : (1<<4)) |
           (PIND&(1<<7) ? 0 : (1<<5)) |
           (PINC&(1<<7) ? 0 : (1<<6)) |
           (PINC&(1<<6) ? 0 : (1<<7)) |
           (PIND&(1<<3) ? 0 : (1<<8)) |
           (PIND&(1<<2) ? 0 : (1<<9)) |
    1006:	82 2b       	or	r24, r18
    1008:	93 2b       	or	r25, r19
           (PIND&(1<<1) ? 0 : (1<<10)) |
           (PIND&(1<<0) ? 0 : (1<<11)) ;
    100a:	48 9b       	sbis	0x09, 0	; 9
    100c:	03 c0       	rjmp	.+6      	; 0x1014 <matrix_scan+0x150>
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <matrix_scan+0x154>
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	38 e0       	ldi	r19, 0x08	; 8
           (PIND&(1<<7) ? 0 : (1<<5)) |
           (PINC&(1<<7) ? 0 : (1<<6)) |
           (PINC&(1<<6) ? 0 : (1<<7)) |
           (PIND&(1<<3) ? 0 : (1<<8)) |
           (PIND&(1<<2) ? 0 : (1<<9)) |
           (PIND&(1<<1) ? 0 : (1<<10)) |
    1018:	82 2b       	or	r24, r18
    101a:	93 2b       	or	r25, r19
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
    101c:	28 81       	ld	r18, Y
    101e:	39 81       	ldd	r19, Y+1	; 0x01
    1020:	28 17       	cp	r18, r24
    1022:	39 07       	cpc	r19, r25
    1024:	41 f1       	breq	.+80     	; 0x1076 <matrix_scan+0x1b2>
            matrix_debouncing[i] = cols;
    1026:	99 83       	std	Y+1, r25	; 0x01
    1028:	88 83       	st	Y, r24
            if (debouncing) {
    102a:	80 91 00 01 	lds	r24, 0x0100
    102e:	88 23       	and	r24, r24
    1030:	01 f1       	breq	.+64     	; 0x1072 <matrix_scan+0x1ae>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    1032:	80 91 c1 01 	lds	r24, 0x01C1
    1036:	80 ff       	sbrs	r24, 0
    1038:	04 c0       	rjmp	.+8      	; 0x1042 <matrix_scan+0x17e>
    103a:	86 ed       	ldi	r24, 0xD6	; 214
    103c:	91 e0       	ldi	r25, 0x01	; 1
    103e:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    1042:	80 91 c1 01 	lds	r24, 0x01C1
    1046:	80 ff       	sbrs	r24, 0
    1048:	0c c0       	rjmp	.+24     	; 0x1062 <matrix_scan+0x19e>
    104a:	80 91 00 01 	lds	r24, 0x0100
    104e:	1f 92       	push	r1
    1050:	8f 93       	push	r24
    1052:	ff 92       	push	r15
    1054:	ef 92       	push	r14
    1056:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	80 91 c1 01 	lds	r24, 0x01C1
    1066:	80 ff       	sbrs	r24, 0
    1068:	04 c0       	rjmp	.+8      	; 0x1072 <matrix_scan+0x1ae>
    106a:	8f ec       	ldi	r24, 0xCF	; 207
    106c:	91 e0       	ldi	r25, 0x01	; 1
    106e:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
            }
            debouncing = DEBOUNCE;
    1072:	b0 92 00 01 	sts	0x0100, r11
        }
        unselect_rows();
    1076:	0e 94 20 07 	call	0xe40	; 0xe40 <unselect_rows>
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    107a:	d3 94       	inc	r13
    107c:	22 96       	adiw	r28, 0x02	; 2
    107e:	84 e0       	ldi	r24, 0x04	; 4
    1080:	d8 12       	cpse	r13, r24
    1082:	34 cf       	rjmp	.-408    	; 0xeec <matrix_scan+0x28>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
    1084:	80 91 00 01 	lds	r24, 0x0100
    1088:	88 23       	and	r24, r24
    108a:	61 f1       	breq	.+88     	; 0x10e4 <matrix_scan+0x220>
        if (--debouncing) {
    108c:	81 50       	subi	r24, 0x01	; 1
    108e:	80 93 00 01 	sts	0x0100, r24
    1092:	88 23       	and	r24, r24
    1094:	39 f0       	breq	.+14     	; 0x10a4 <matrix_scan+0x1e0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1096:	8f e9       	ldi	r24, 0x9F	; 159
    1098:	9f e0       	ldi	r25, 0x0F	; 15
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	f1 f7       	brne	.-4      	; 0x109a <matrix_scan+0x1d6>
    109e:	00 c0       	rjmp	.+0      	; 0x10a0 <matrix_scan+0x1dc>
    10a0:	00 00       	nop
    10a2:	20 c0       	rjmp	.+64     	; 0x10e4 <matrix_scan+0x220>
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
    10a4:	80 91 3a 01 	lds	r24, 0x013A
    10a8:	90 91 3b 01 	lds	r25, 0x013B
    10ac:	90 93 43 01 	sts	0x0143, r25
    10b0:	80 93 42 01 	sts	0x0142, r24
    10b4:	80 91 3c 01 	lds	r24, 0x013C
    10b8:	90 91 3d 01 	lds	r25, 0x013D
    10bc:	90 93 45 01 	sts	0x0145, r25
    10c0:	80 93 44 01 	sts	0x0144, r24
    10c4:	80 91 3e 01 	lds	r24, 0x013E
    10c8:	90 91 3f 01 	lds	r25, 0x013F
    10cc:	90 93 47 01 	sts	0x0147, r25
    10d0:	80 93 46 01 	sts	0x0146, r24
    10d4:	80 91 40 01 	lds	r24, 0x0140
    10d8:	90 91 41 01 	lds	r25, 0x0141
    10dc:	90 93 49 01 	sts	0x0149, r25
    10e0:	80 93 48 01 	sts	0x0148, r24
            }
        }
    }

    return 1;
}
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	1f 91       	pop	r17
    10ec:	0f 91       	pop	r16
    10ee:	ff 90       	pop	r15
    10f0:	ef 90       	pop	r14
    10f2:	df 90       	pop	r13
    10f4:	cf 90       	pop	r12
    10f6:	bf 90       	pop	r11
    10f8:	08 95       	ret

000010fa <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    10fa:	e8 2f       	mov	r30, r24
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	ee 0f       	add	r30, r30
    1100:	ff 1f       	adc	r31, r31
    1102:	ee 5b       	subi	r30, 0xBE	; 190
    1104:	fe 4f       	sbci	r31, 0xFE	; 254
}
    1106:	80 81       	ld	r24, Z
    1108:	91 81       	ldd	r25, Z+1	; 0x01
    110a:	08 95       	ret

0000110c <matrix_print>:

void matrix_print(void)
{
    110c:	cf 92       	push	r12
    110e:	df 92       	push	r13
    1110:	ef 92       	push	r14
    1112:	ff 92       	push	r15
    1114:	0f 93       	push	r16
    1116:	1f 93       	push	r17
    1118:	cf 93       	push	r28
    111a:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
    111c:	88 eb       	ldi	r24, 0xB8	; 184
    111e:	91 e0       	ldi	r25, 0x01	; 1
    1120:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    1124:	22 e4       	ldi	r18, 0x42	; 66
    1126:	e2 2e       	mov	r14, r18
    1128:	21 e0       	ldi	r18, 0x01	; 1
    112a:	f2 2e       	mov	r15, r18
    112c:	c0 e0       	ldi	r28, 0x00	; 0
    112e:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    1130:	33 eb       	ldi	r19, 0xB3	; 179
    1132:	c3 2e       	mov	r12, r19
    1134:	31 e0       	ldi	r19, 0x01	; 1
    1136:	d3 2e       	mov	r13, r19
        pbin_reverse16(matrix_get_row(row));
    1138:	0a ea       	ldi	r16, 0xAA	; 170
    113a:	11 e0       	ldi	r17, 0x01	; 1

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	df 92       	push	r13
    1142:	cf 92       	push	r12
    1144:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    1148:	80 eb       	ldi	r24, 0xB0	; 176
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
        pbin_reverse16(matrix_get_row(row));
    1150:	f7 01       	movw	r30, r14
    1152:	81 91       	ld	r24, Z+
    1154:	91 91       	ld	r25, Z+
    1156:	7f 01       	movw	r14, r30
    1158:	0e 94 de 1c 	call	0x39bc	; 0x39bc <bitrev16>
    115c:	9f 93       	push	r25
    115e:	8f 93       	push	r24
    1160:	1f 93       	push	r17
    1162:	0f 93       	push	r16
    1164:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
        print("\n");
    1168:	88 ea       	ldi	r24, 0xA8	; 168
    116a:	91 e0       	ldi	r25, 0x01	; 1
    116c:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    1170:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    1172:	8d b7       	in	r24, 0x3d	; 61
    1174:	9e b7       	in	r25, 0x3e	; 62
    1176:	08 96       	adiw	r24, 0x08	; 8
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	9e bf       	out	0x3e, r25	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	8d bf       	out	0x3d, r24	; 61
    1182:	c4 30       	cpi	r28, 0x04	; 4
    1184:	d1 05       	cpc	r29, r1
    1186:	d1 f6       	brne	.-76     	; 0x113c <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	1f 91       	pop	r17
    118e:	0f 91       	pop	r16
    1190:	ff 90       	pop	r15
    1192:	ef 90       	pop	r14
    1194:	df 90       	pop	r13
    1196:	cf 90       	pop	r12
    1198:	08 95       	ret

0000119a <led_set>:
#include "led.h"


void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
    119a:	81 ff       	sbrs	r24, 1
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <led_set+0x8>
        // output low
        DDRB |= (1<<2);
    119e:	22 9a       	sbi	0x04, 2	; 4
    11a0:	01 c0       	rjmp	.+2      	; 0x11a4 <led_set+0xa>
        PORTB &= ~(1<<2);
    } else {
        // Hi-Z
        DDRB &= ~(1<<2);
    11a2:	22 98       	cbi	0x04, 2	; 4
        PORTB &= ~(1<<2);
    11a4:	2a 98       	cbi	0x05, 2	; 5
    11a6:	08 95       	ret

000011a8 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    11a8:	80 91 5d 01 	lds	r24, 0x015D
    11ac:	08 95       	ret

000011ae <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    11ae:	9f b7       	in	r25, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	10 92 4c 01 	sts	0x014C, r1
    11b6:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    11b8:	90 91 d6 01 	lds	r25, 0x01D6
    11bc:	94 30       	cpi	r25, 0x04	; 4
    11be:	09 f0       	breq	.+2      	; 0x11c2 <sendchar+0x14>
    11c0:	58 c0       	rjmp	.+176    	; 0x1272 <sendchar+0xc4>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    11c2:	90 91 e9 00 	lds	r25, 0x00E9
    11c6:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    11c8:	20 91 ec 00 	lds	r18, 0x00EC
    11cc:	20 ff       	sbrs	r18, 0
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <sendchar+0x26>
    11d0:	20 e8       	ldi	r18, 0x80	; 128
    11d2:	01 c0       	rjmp	.+2      	; 0x11d6 <sendchar+0x28>
    11d4:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    11d6:	29 2b       	or	r18, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11d8:	94 e0       	ldi	r25, 0x04	; 4
    11da:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    11de:	90 91 eb 00 	lds	r25, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    11e2:	90 ff       	sbrs	r25, 0
    11e4:	43 c0       	rjmp	.+134    	; 0x126c <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    11e6:	90 91 ee 00 	lds	r25, 0x00EE
    11ea:	97 ff       	sbrs	r25, 7
    11ec:	3f c0       	rjmp	.+126    	; 0x126c <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    11ee:	90 91 4a 01 	lds	r25, 0x014A
    11f2:	99 23       	and	r25, r25
    11f4:	21 f0       	breq	.+8      	; 0x11fe <sendchar+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    11f6:	90 91 e8 00 	lds	r25, 0x00E8
    11fa:	95 ff       	sbrs	r25, 5
    11fc:	37 c0       	rjmp	.+110    	; 0x126c <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    timeouted = false;
    11fe:	10 92 4a 01 	sts	0x014A, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    1202:	96 e0       	ldi	r25, 0x06	; 6
    1204:	30 91 e8 00 	lds	r19, 0x00E8
    1208:	35 fd       	sbrc	r19, 5
    120a:	15 c0       	rjmp	.+42     	; 0x1236 <sendchar+0x88>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    120c:	30 91 d6 01 	lds	r19, 0x01D6
    1210:	34 30       	cpi	r19, 0x04	; 4
    1212:	61 f5       	brne	.+88     	; 0x126c <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1214:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    1218:	35 fd       	sbrc	r19, 5
    121a:	28 c0       	rjmp	.+80     	; 0x126c <sendchar+0xbe>
    121c:	91 50       	subi	r25, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    121e:	21 f4       	brne	.+8      	; 0x1228 <sendchar+0x7a>
            timeouted = true;
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	80 93 4a 01 	sts	0x014A, r24
            goto ERROR_EXIT;
    1226:	22 c0       	rjmp	.+68     	; 0x126c <sendchar+0xbe>
    1228:	ef e9       	ldi	r30, 0x9F	; 159
    122a:	ff e0       	ldi	r31, 0x0F	; 15
    122c:	31 97       	sbiw	r30, 0x01	; 1
    122e:	f1 f7       	brne	.-4      	; 0x122c <sendchar+0x7e>
    1230:	00 c0       	rjmp	.+0      	; 0x1232 <sendchar+0x84>
    1232:	00 00       	nop
    1234:	e7 cf       	rjmp	.-50     	; 0x1204 <sendchar+0x56>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1236:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    123a:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    123e:	85 fd       	sbrc	r24, 5
    1240:	0a c0       	rjmp	.+20     	; 0x1256 <sendchar+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1242:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
    1246:	80 ff       	sbrs	r24, 0
    1248:	fc cf       	rjmp	.-8      	; 0x1242 <sendchar+0x94>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    124a:	80 91 e8 00 	lds	r24, 0x00E8
    124e:	8e 77       	andi	r24, 0x7E	; 126
    1250:	80 93 e8 00 	sts	0x00E8, r24
    1254:	06 c0       	rjmp	.+12     	; 0x1262 <sendchar+0xb4>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
    1256:	8f b7       	in	r24, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	91 e0       	ldi	r25, 0x01	; 1
    125c:	90 93 4c 01 	sts	0x014C, r25
    1260:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1262:	2f 70       	andi	r18, 0x0F	; 15
    1264:	20 93 e9 00 	sts	0x00E9, r18
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	08 95       	ret
    126c:	2f 70       	andi	r18, 0x0F	; 15
    126e:	20 93 e9 00 	sts	0x00E9, r18
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    1272:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    1274:	08 95       	ret

00001276 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	00 d0       	rcall	.+0      	; 0x127c <send_consumer+0x6>
    127c:	1f 92       	push	r1
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1282:	20 91 d6 01 	lds	r18, 0x01D6
    1286:	24 30       	cpi	r18, 0x04	; 4
    1288:	19 f5       	brne	.+70     	; 0x12d0 <send_consumer+0x5a>
        return;

    report_extra_t r = {
    128a:	23 e0       	ldi	r18, 0x03	; 3
    128c:	29 83       	std	Y+1, r18	; 0x01
    128e:	9b 83       	std	Y+3, r25	; 0x03
    1290:	8a 83       	std	Y+2, r24	; 0x02
    1292:	20 93 e9 00 	sts	0x00E9, r18
    1296:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1298:	90 91 e8 00 	lds	r25, 0x00E8
    129c:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    129e:	95 fd       	sbrc	r25, 5
    12a0:	06 c0       	rjmp	.+12     	; 0x12ae <send_consumer+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12a2:	95 ed       	ldi	r25, 0xD5	; 213
    12a4:	9a 95       	dec	r25
    12a6:	f1 f7       	brne	.-4      	; 0x12a4 <send_consumer+0x2e>
    12a8:	00 00       	nop
    12aa:	81 11       	cpse	r24, r1
    12ac:	f5 cf       	rjmp	.-22     	; 0x1298 <send_consumer+0x22>
    12ae:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    12b2:	85 ff       	sbrs	r24, 5
    12b4:	0d c0       	rjmp	.+26     	; 0x12d0 <send_consumer+0x5a>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    12b6:	40 e0       	ldi	r20, 0x00	; 0
    12b8:	50 e0       	ldi	r21, 0x00	; 0
    12ba:	63 e0       	ldi	r22, 0x03	; 3
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	ce 01       	movw	r24, r28
    12c0:	01 96       	adiw	r24, 0x01	; 1
    12c2:	0e 94 13 0c 	call	0x1826	; 0x1826 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12c6:	80 91 e8 00 	lds	r24, 0x00E8
    12ca:	8e 77       	andi	r24, 0x7E	; 126
    12cc:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	08 95       	ret

000012dc <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <send_system+0x6>
    12e2:	1f 92       	push	r1
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    12e8:	20 91 d6 01 	lds	r18, 0x01D6
    12ec:	24 30       	cpi	r18, 0x04	; 4
    12ee:	21 f5       	brne	.+72     	; 0x1338 <send_system+0x5c>
        return;

    report_extra_t r = {
    12f0:	22 e0       	ldi	r18, 0x02	; 2
    12f2:	29 83       	std	Y+1, r18	; 0x01
    12f4:	9b 83       	std	Y+3, r25	; 0x03
    12f6:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12f8:	83 e0       	ldi	r24, 0x03	; 3
    12fa:	80 93 e9 00 	sts	0x00E9, r24
    12fe:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1300:	90 91 e8 00 	lds	r25, 0x00E8
    1304:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1306:	95 fd       	sbrc	r25, 5
    1308:	06 c0       	rjmp	.+12     	; 0x1316 <send_system+0x3a>
    130a:	95 ed       	ldi	r25, 0xD5	; 213
    130c:	9a 95       	dec	r25
    130e:	f1 f7       	brne	.-4      	; 0x130c <send_system+0x30>
    1310:	00 00       	nop
    1312:	81 11       	cpse	r24, r1
    1314:	f5 cf       	rjmp	.-22     	; 0x1300 <send_system+0x24>
    1316:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    131a:	85 ff       	sbrs	r24, 5
    131c:	0d c0       	rjmp	.+26     	; 0x1338 <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    131e:	40 e0       	ldi	r20, 0x00	; 0
    1320:	50 e0       	ldi	r21, 0x00	; 0
    1322:	63 e0       	ldi	r22, 0x03	; 3
    1324:	70 e0       	ldi	r23, 0x00	; 0
    1326:	ce 01       	movw	r24, r28
    1328:	01 96       	adiw	r24, 0x01	; 1
    132a:	0e 94 13 0c 	call	0x1826	; 0x1826 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    132e:	80 91 e8 00 	lds	r24, 0x00E8
    1332:	8e 77       	andi	r24, 0x7E	; 126
    1334:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	08 95       	ret

00001344 <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1344:	20 91 d6 01 	lds	r18, 0x01D6
    1348:	24 30       	cpi	r18, 0x04	; 4
    134a:	f1 f4       	brne	.+60     	; 0x1388 <send_mouse+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    134c:	22 e0       	ldi	r18, 0x02	; 2
    134e:	20 93 e9 00 	sts	0x00E9, r18
    1352:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1354:	30 91 e8 00 	lds	r19, 0x00E8
    1358:	21 50       	subi	r18, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    135a:	35 fd       	sbrc	r19, 5
    135c:	06 c0       	rjmp	.+12     	; 0x136a <send_mouse+0x26>
    135e:	35 ed       	ldi	r19, 0xD5	; 213
    1360:	3a 95       	dec	r19
    1362:	f1 f7       	brne	.-4      	; 0x1360 <send_mouse+0x1c>
    1364:	00 00       	nop
    1366:	21 11       	cpse	r18, r1
    1368:	f5 cf       	rjmp	.-22     	; 0x1354 <send_mouse+0x10>
    136a:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    136e:	25 ff       	sbrs	r18, 5
    1370:	0b c0       	rjmp	.+22     	; 0x1388 <send_mouse+0x44>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    1372:	40 e0       	ldi	r20, 0x00	; 0
    1374:	50 e0       	ldi	r21, 0x00	; 0
    1376:	65 e0       	ldi	r22, 0x05	; 5
    1378:	70 e0       	ldi	r23, 0x00	; 0
    137a:	0e 94 13 0c 	call	0x1826	; 0x1826 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    137e:	80 91 e8 00 	lds	r24, 0x00E8
    1382:	8e 77       	andi	r24, 0x7E	; 126
    1384:	80 93 e8 00 	sts	0x00E8, r24
    1388:	08 95       	ret

0000138a <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    138a:	cf 93       	push	r28
    138c:	df 93       	push	r29
    138e:	ec 01       	movw	r28, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1390:	80 91 d6 01 	lds	r24, 0x01D6
    1394:	84 30       	cpi	r24, 0x04	; 4
    1396:	09 f0       	breq	.+2      	; 0x139a <send_keyboard+0x10>
    1398:	47 c0       	rjmp	.+142    	; 0x1428 <send_keyboard+0x9e>
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    139a:	80 91 0b 01 	lds	r24, 0x010B
    139e:	88 23       	and	r24, r24
    13a0:	e1 f0       	breq	.+56     	; 0x13da <send_keyboard+0x50>
    13a2:	80 91 0c 01 	lds	r24, 0x010C
    13a6:	88 23       	and	r24, r24
    13a8:	c1 f0       	breq	.+48     	; 0x13da <send_keyboard+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13aa:	85 e0       	ldi	r24, 0x05	; 5
    13ac:	80 93 e9 00 	sts	0x00E9, r24
    13b0:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    13b2:	90 91 e8 00 	lds	r25, 0x00E8
    13b6:	81 50       	subi	r24, 0x01	; 1
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    13b8:	95 fd       	sbrc	r25, 5
    13ba:	06 c0       	rjmp	.+12     	; 0x13c8 <send_keyboard+0x3e>
    13bc:	95 e1       	ldi	r25, 0x15	; 21
    13be:	9a 95       	dec	r25
    13c0:	f1 f7       	brne	.-4      	; 0x13be <send_keyboard+0x34>
    13c2:	00 00       	nop
    13c4:	81 11       	cpse	r24, r1
    13c6:	f5 cf       	rjmp	.-22     	; 0x13b2 <send_keyboard+0x28>
    13c8:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    13cc:	85 ff       	sbrs	r24, 5
    13ce:	2c c0       	rjmp	.+88     	; 0x1428 <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    13d0:	40 e0       	ldi	r20, 0x00	; 0
    13d2:	50 e0       	ldi	r21, 0x00	; 0
    13d4:	60 e1       	ldi	r22, 0x10	; 16
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	17 c0       	rjmp	.+46     	; 0x1408 <send_keyboard+0x7e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	80 93 e9 00 	sts	0x00E9, r24
    13e0:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    13e2:	90 91 e8 00 	lds	r25, 0x00E8
    13e6:	81 50       	subi	r24, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    13e8:	95 fd       	sbrc	r25, 5
    13ea:	06 c0       	rjmp	.+12     	; 0x13f8 <send_keyboard+0x6e>
    13ec:	95 ed       	ldi	r25, 0xD5	; 213
    13ee:	9a 95       	dec	r25
    13f0:	f1 f7       	brne	.-4      	; 0x13ee <send_keyboard+0x64>
    13f2:	00 00       	nop
    13f4:	81 11       	cpse	r24, r1
    13f6:	f5 cf       	rjmp	.-22     	; 0x13e2 <send_keyboard+0x58>
    13f8:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    13fc:	85 ff       	sbrs	r24, 5
    13fe:	14 c0       	rjmp	.+40     	; 0x1428 <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    1400:	40 e0       	ldi	r20, 0x00	; 0
    1402:	50 e0       	ldi	r21, 0x00	; 0
    1404:	68 e0       	ldi	r22, 0x08	; 8
    1406:	70 e0       	ldi	r23, 0x00	; 0
    1408:	ce 01       	movw	r24, r28
    140a:	0e 94 13 0c 	call	0x1826	; 0x1826 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    140e:	80 91 e8 00 	lds	r24, 0x00E8
    1412:	8e 77       	andi	r24, 0x7E	; 126
    1414:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    1418:	80 e1       	ldi	r24, 0x10	; 16
    141a:	fe 01       	movw	r30, r28
    141c:	ad e4       	ldi	r26, 0x4D	; 77
    141e:	b1 e0       	ldi	r27, 0x01	; 1
    1420:	01 90       	ld	r0, Z+
    1422:	0d 92       	st	X+, r0
    1424:	8a 95       	dec	r24
    1426:	e1 f7       	brne	.-8      	; 0x1420 <send_keyboard+0x96>
}
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	08 95       	ret

0000142e <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    142e:	86 e1       	ldi	r24, 0x16	; 22
    1430:	92 e0       	ldi	r25, 0x02	; 2
    1432:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    1436:	80 91 d5 01 	lds	r24, 0x01D5
    143a:	81 11       	cpse	r24, r1
    143c:	09 c0       	rjmp	.+18     	; 0x1450 <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    143e:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <USB_Disable>
        USB_Init();
    1442:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    1446:	80 91 e2 00 	lds	r24, 0x00E2
    144a:	84 60       	ori	r24, 0x04	; 4
    144c:	80 93 e2 00 	sts	0x00E2, r24
    1450:	08 95       	ret

00001452 <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    1452:	82 e1       	ldi	r24, 0x12	; 18
    1454:	92 e0       	ldi	r25, 0x02	; 2
    1456:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    145a:	10 92 d5 01 	sts	0x01D5, r1
    145e:	08 95       	ret

00001460 <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    1460:	8e e0       	ldi	r24, 0x0E	; 14
    1462:	92 e0       	ldi	r25, 0x02	; 2
    1464:	0c 94 66 06 	jmp	0xccc	; 0xccc <xputs>

00001468 <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    1468:	80 91 4b 01 	lds	r24, 0x014B
    146c:	8f 5f       	subi	r24, 0xFF	; 255
    146e:	80 93 4b 01 	sts	0x014B, r24
    1472:	62 e3       	ldi	r22, 0x32	; 50
    1474:	0e 94 08 2a 	call	0x5410	; 0x5410 <__udivmodqi4>
    1478:	91 11       	cpse	r25, r1
    147a:	35 c0       	rjmp	.+106    	; 0x14e6 <EVENT_USB_Device_StartOfFrame+0x7e>
    count = 0;
    147c:	10 92 4b 01 	sts	0x014B, r1

    if (!console_flush) return;
    1480:	80 91 4c 01 	lds	r24, 0x014C
    1484:	88 23       	and	r24, r24
    1486:	79 f1       	breq	.+94     	; 0x14e6 <EVENT_USB_Device_StartOfFrame+0x7e>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1488:	80 91 d6 01 	lds	r24, 0x01D6
    148c:	84 30       	cpi	r24, 0x04	; 4
    148e:	49 f5       	brne	.+82     	; 0x14e2 <EVENT_USB_Device_StartOfFrame+0x7a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1490:	80 91 e9 00 	lds	r24, 0x00E9
    1494:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1496:	90 91 ec 00 	lds	r25, 0x00EC
    149a:	90 ff       	sbrs	r25, 0
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <EVENT_USB_Device_StartOfFrame+0x3a>
    149e:	90 e8       	ldi	r25, 0x80	; 128
    14a0:	01 c0       	rjmp	.+2      	; 0x14a4 <EVENT_USB_Device_StartOfFrame+0x3c>
    14a2:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    14a4:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14a6:	84 e0       	ldi	r24, 0x04	; 4
    14a8:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    14ac:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    14b0:	80 ff       	sbrs	r24, 0
    14b2:	14 c0       	rjmp	.+40     	; 0x14dc <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    14b4:	80 91 ee 00 	lds	r24, 0x00EE
    14b8:	87 ff       	sbrs	r24, 7
    14ba:	10 c0       	rjmp	.+32     	; 0x14dc <EVENT_USB_Device_StartOfFrame+0x74>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    14bc:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    14c0:	85 ff       	sbrs	r24, 5
    14c2:	03 c0       	rjmp	.+6      	; 0x14ca <EVENT_USB_Device_StartOfFrame+0x62>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    14c4:	10 92 f1 00 	sts	0x00F1, r1
    14c8:	f9 cf       	rjmp	.-14     	; 0x14bc <EVENT_USB_Device_StartOfFrame+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    14ca:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    14ce:	80 ff       	sbrs	r24, 0
    14d0:	05 c0       	rjmp	.+10     	; 0x14dc <EVENT_USB_Device_StartOfFrame+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14d2:	80 91 e8 00 	lds	r24, 0x00E8
    14d6:	8e 77       	andi	r24, 0x7E	; 126
    14d8:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14dc:	9f 70       	andi	r25, 0x0F	; 15
    14de:	90 93 e9 00 	sts	0x00E9, r25
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    14e2:	10 92 4c 01 	sts	0x014C, r1
    14e6:	08 95       	ret

000014e8 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    14e8:	42 e0       	ldi	r20, 0x02	; 2
    14ea:	61 ec       	ldi	r22, 0xC1	; 193
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <Endpoint_ConfigureEndpoint_Prv>
    14f2:	42 e0       	ldi	r20, 0x02	; 2
    14f4:	61 ec       	ldi	r22, 0xC1	; 193
    14f6:	82 e0       	ldi	r24, 0x02	; 2
    14f8:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <Endpoint_ConfigureEndpoint_Prv>
    14fc:	42 e0       	ldi	r20, 0x02	; 2
    14fe:	61 ec       	ldi	r22, 0xC1	; 193
    1500:	83 e0       	ldi	r24, 0x03	; 3
    1502:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <Endpoint_ConfigureEndpoint_Prv>
    1506:	42 e2       	ldi	r20, 0x22	; 34
    1508:	61 ec       	ldi	r22, 0xC1	; 193
    150a:	84 e0       	ldi	r24, 0x04	; 4
    150c:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <Endpoint_ConfigureEndpoint_Prv>
    1510:	42 e1       	ldi	r20, 0x12	; 18
    1512:	61 ec       	ldi	r22, 0xC1	; 193
    1514:	85 e0       	ldi	r24, 0x05	; 5
    1516:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <Endpoint_ConfigureEndpoint_Prv>

0000151a <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    151a:	80 91 d8 01 	lds	r24, 0x01D8
    151e:	83 30       	cpi	r24, 0x03	; 3
    1520:	09 f4       	brne	.+2      	; 0x1524 <EVENT_USB_Device_ControlRequest+0xa>
    1522:	55 c0       	rjmp	.+170    	; 0x15ce <EVENT_USB_Device_ControlRequest+0xb4>
    1524:	30 f4       	brcc	.+12     	; 0x1532 <EVENT_USB_Device_ControlRequest+0x18>
    1526:	81 30       	cpi	r24, 0x01	; 1
    1528:	71 f0       	breq	.+28     	; 0x1546 <EVENT_USB_Device_ControlRequest+0x2c>
    152a:	82 30       	cpi	r24, 0x02	; 2
    152c:	09 f4       	brne	.+2      	; 0x1530 <EVENT_USB_Device_ControlRequest+0x16>
    152e:	8e c0       	rjmp	.+284    	; 0x164c <EVENT_USB_Device_ControlRequest+0x132>
    1530:	08 95       	ret
    1532:	8a 30       	cpi	r24, 0x0A	; 10
    1534:	09 f4       	brne	.+2      	; 0x1538 <EVENT_USB_Device_ControlRequest+0x1e>
    1536:	7a c0       	rjmp	.+244    	; 0x162c <EVENT_USB_Device_ControlRequest+0x112>
    1538:	8b 30       	cpi	r24, 0x0B	; 11
    153a:	09 f4       	brne	.+2      	; 0x153e <EVENT_USB_Device_ControlRequest+0x24>
    153c:	60 c0       	rjmp	.+192    	; 0x15fe <EVENT_USB_Device_ControlRequest+0xe4>
    153e:	89 30       	cpi	r24, 0x09	; 9
    1540:	09 f0       	breq	.+2      	; 0x1544 <EVENT_USB_Device_ControlRequest+0x2a>
    1542:	9c c0       	rjmp	.+312    	; 0x167c <EVENT_USB_Device_ControlRequest+0x162>
    1544:	20 c0       	rjmp	.+64     	; 0x1586 <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1546:	80 91 d7 01 	lds	r24, 0x01D7
    154a:	81 3a       	cpi	r24, 0xA1	; 161
    154c:	09 f0       	breq	.+2      	; 0x1550 <EVENT_USB_Device_ControlRequest+0x36>
    154e:	96 c0       	rjmp	.+300    	; 0x167c <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1550:	80 91 e8 00 	lds	r24, 0x00E8
    1554:	87 7f       	andi	r24, 0xF7	; 247
    1556:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    155a:	80 91 db 01 	lds	r24, 0x01DB
    155e:	90 91 dc 01 	lds	r25, 0x01DC
    1562:	89 2b       	or	r24, r25
    1564:	21 f0       	breq	.+8      	; 0x156e <EVENT_USB_Device_ControlRequest+0x54>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    1566:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	03 c0       	rjmp	.+6      	; 0x1574 <EVENT_USB_Device_ControlRequest+0x5a>
                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    156e:	60 e1       	ldi	r22, 0x10	; 16

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    1570:	8d e4       	ldi	r24, 0x4D	; 77
    1572:	91 e0       	ldi	r25, 0x01	; 1
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1574:	70 e0       	ldi	r23, 0x00	; 0
    1576:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    157a:	80 91 e8 00 	lds	r24, 0x00E8
    157e:	8b 77       	andi	r24, 0x7B	; 123
    1580:	80 93 e8 00 	sts	0x00E8, r24
    1584:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1586:	80 91 d7 01 	lds	r24, 0x01D7
    158a:	81 32       	cpi	r24, 0x21	; 33
    158c:	09 f0       	breq	.+2      	; 0x1590 <EVENT_USB_Device_ControlRequest+0x76>
    158e:	76 c0       	rjmp	.+236    	; 0x167c <EVENT_USB_Device_ControlRequest+0x162>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1590:	80 91 db 01 	lds	r24, 0x01DB
    1594:	90 91 dc 01 	lds	r25, 0x01DC
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	19 f0       	breq	.+6      	; 0x15a2 <EVENT_USB_Device_ControlRequest+0x88>
    159c:	04 97       	sbiw	r24, 0x04	; 4
    159e:	09 f0       	breq	.+2      	; 0x15a2 <EVENT_USB_Device_ControlRequest+0x88>
    15a0:	6d c0       	rjmp	.+218    	; 0x167c <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    15a2:	80 91 e8 00 	lds	r24, 0x00E8
    15a6:	87 7f       	andi	r24, 0xF7	; 247
    15a8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    15ac:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    15b0:	82 fd       	sbrc	r24, 2
    15b2:	05 c0       	rjmp	.+10     	; 0x15be <EVENT_USB_Device_ControlRequest+0xa4>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    15b4:	80 91 d6 01 	lds	r24, 0x01D6
    15b8:	81 11       	cpse	r24, r1
    15ba:	f8 cf       	rjmp	.-16     	; 0x15ac <EVENT_USB_Device_ControlRequest+0x92>
    15bc:	5f c0       	rjmp	.+190    	; 0x167c <EVENT_USB_Device_ControlRequest+0x162>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    15be:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    15c2:	80 93 5d 01 	sts	0x015D, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    15c6:	80 91 e8 00 	lds	r24, 0x00E8
    15ca:	8b 77       	andi	r24, 0x7B	; 123
    15cc:	53 c0       	rjmp	.+166    	; 0x1674 <EVENT_USB_Device_ControlRequest+0x15a>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    15ce:	80 91 d7 01 	lds	r24, 0x01D7
    15d2:	81 3a       	cpi	r24, 0xA1	; 161
    15d4:	09 f0       	breq	.+2      	; 0x15d8 <EVENT_USB_Device_ControlRequest+0xbe>
    15d6:	52 c0       	rjmp	.+164    	; 0x167c <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    15d8:	80 91 db 01 	lds	r24, 0x01DB
    15dc:	90 91 dc 01 	lds	r25, 0x01DC
    15e0:	89 2b       	or	r24, r25
    15e2:	09 f0       	breq	.+2      	; 0x15e6 <EVENT_USB_Device_ControlRequest+0xcc>
    15e4:	4b c0       	rjmp	.+150    	; 0x167c <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    15e6:	80 91 e8 00 	lds	r24, 0x00E8
    15ea:	87 7f       	andi	r24, 0xF7	; 247
    15ec:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    15f0:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    15f4:	80 ff       	sbrs	r24, 0
    15f6:	fc cf       	rjmp	.-8      	; 0x15f0 <EVENT_USB_Device_ControlRequest+0xd6>
                    Endpoint_Write_8(keyboard_protocol);
    15f8:	80 91 0b 01 	lds	r24, 0x010B
    15fc:	36 c0       	rjmp	.+108    	; 0x166a <EVENT_USB_Device_ControlRequest+0x150>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    15fe:	80 91 d7 01 	lds	r24, 0x01D7
    1602:	81 32       	cpi	r24, 0x21	; 33
    1604:	d9 f5       	brne	.+118    	; 0x167c <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1606:	80 91 db 01 	lds	r24, 0x01DB
    160a:	90 91 dc 01 	lds	r25, 0x01DC
    160e:	89 2b       	or	r24, r25
    1610:	a9 f5       	brne	.+106    	; 0x167c <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1612:	80 91 e8 00 	lds	r24, 0x00E8
    1616:	87 7f       	andi	r24, 0xF7	; 247
    1618:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    161c:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    1620:	80 91 d9 01 	lds	r24, 0x01D9
    1624:	80 93 0b 01 	sts	0x010B, r24
                    clear_keyboard();
    1628:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    162c:	80 91 d7 01 	lds	r24, 0x01D7
    1630:	81 32       	cpi	r24, 0x21	; 33
    1632:	21 f5       	brne	.+72     	; 0x167c <EVENT_USB_Device_ControlRequest+0x162>
    1634:	80 91 e8 00 	lds	r24, 0x00E8
    1638:	87 7f       	andi	r24, 0xF7	; 247
    163a:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    163e:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    1642:	80 91 da 01 	lds	r24, 0x01DA
    1646:	80 93 5e 01 	sts	0x015E, r24
    164a:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    164c:	80 91 d7 01 	lds	r24, 0x01D7
    1650:	81 3a       	cpi	r24, 0xA1	; 161
    1652:	a1 f4       	brne	.+40     	; 0x167c <EVENT_USB_Device_ControlRequest+0x162>
    1654:	80 91 e8 00 	lds	r24, 0x00E8
    1658:	87 7f       	andi	r24, 0xF7	; 247
    165a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    165e:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    1662:	80 ff       	sbrs	r24, 0
    1664:	fc cf       	rjmp	.-8      	; 0x165e <EVENT_USB_Device_ControlRequest+0x144>
                Endpoint_Write_8(keyboard_idle);
    1666:	80 91 5e 01 	lds	r24, 0x015E
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    166a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    166e:	80 91 e8 00 	lds	r24, 0x00E8
    1672:	8e 77       	andi	r24, 0x7E	; 126
    1674:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    1678:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <Endpoint_ClearStatusStage>
    167c:	08 95       	ret

0000167e <hook_early_init>:
}


/* hooks */
__attribute__((weak))
void hook_early_init(void) {}
    167e:	08 95       	ret

00001680 <hook_late_init>:

__attribute__((weak))
void hook_late_init(void) {}
    1680:	08 95       	ret

00001682 <hook_usb_suspend_entry>:

 __attribute__((weak))
void hook_usb_suspend_entry(void)
{
    1682:	08 95       	ret

00001684 <EVENT_USB_Device_Suspend>:
    print("[R]");
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    1684:	8a e0       	ldi	r24, 0x0A	; 10
    1686:	92 e0       	ldi	r25, 0x02	; 2
    1688:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    hook_usb_suspend_entry();
    168c:	0c 94 41 0b 	jmp	0x1682	; 0x1682 <hook_usb_suspend_entry>

00001690 <hook_usb_suspend_loop>:
}

__attribute__((weak))
void hook_usb_suspend_loop(void)
{
    suspend_power_down();
    1690:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <suspend_power_down>
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1694:	80 91 d4 01 	lds	r24, 0x01D4
    1698:	88 23       	and	r24, r24
    169a:	29 f0       	breq	.+10     	; 0x16a6 <hook_usb_suspend_loop+0x16>
    169c:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <suspend_wakeup_condition>
    16a0:	81 11       	cpse	r24, r1
            USB_Device_SendRemoteWakeup();
    16a2:	0c 94 fd 0b 	jmp	0x17fa	; 0x17fa <USB_Device_SendRemoteWakeup>
    16a6:	08 95       	ret

000016a8 <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    16a8:	84 b7       	in	r24, 0x34	; 52
    16aa:	87 7f       	andi	r24, 0xF7	; 247
    16ac:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    16ae:	88 e1       	ldi	r24, 0x18	; 24
    16b0:	0f b6       	in	r0, 0x3f	; 63
    16b2:	f8 94       	cli
    16b4:	80 93 60 00 	sts	0x0060, r24
    16b8:	10 92 60 00 	sts	0x0060, r1
    16bc:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	80 e8       	ldi	r24, 0x80	; 128
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	f8 94       	cli
    16c6:	80 93 61 00 	sts	0x0061, r24
    16ca:	90 93 61 00 	sts	0x0061, r25
    16ce:	0f be       	out	0x3f, r0	; 63

int main(void)  __attribute__ ((weak));
int main(void)
{
    setup_mcu();
    hook_early_init();
    16d0:	0e 94 3f 0b 	call	0x167e	; 0x167e <hook_early_init>
    keyboard_setup();
    16d4:	0e 94 0a 11 	call	0x2214	; 0x2214 <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    16d8:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <USB_Disable>

    USB_Init();
    16dc:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <USB_Init>
    16e0:	80 91 e2 00 	lds	r24, 0x00E2
    16e4:	84 60       	ori	r24, 0x04	; 4
    16e6:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    16ea:	87 ed       	ldi	r24, 0xD7	; 215
    16ec:	98 e0       	ldi	r25, 0x08	; 8
    16ee:	0e 94 c7 1c 	call	0x398e	; 0x398e <print_set_sendchar>
{
    setup_mcu();
    hook_early_init();
    keyboard_setup();
    setup_usb();
    sei();
    16f2:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    16f4:	80 91 d6 01 	lds	r24, 0x01D6
    16f8:	84 30       	cpi	r24, 0x04	; 4
    16fa:	e1 f7       	brne	.-8      	; 0x16f4 <main+0x4c>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    16fc:	85 ef       	ldi	r24, 0xF5	; 245
    16fe:	91 e0       	ldi	r25, 0x01	; 1
    1700:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>

    /* init modules */
    keyboard_init();
    1704:	0e 94 0c 11 	call	0x2218	; 0x2218 <keyboard_init>
    host_set_driver(&lufa_driver);
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	91 e0       	ldi	r25, 0x01	; 1
    170c:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    1710:	84 ee       	ldi	r24, 0xE4	; 228
    1712:	91 e0       	ldi	r25, 0x01	; 1
    1714:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    hook_late_init();
    1718:	0e 94 40 0b 	call	0x1680	; 0x1680 <hook_late_init>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    171c:	80 91 d6 01 	lds	r24, 0x01D6
    1720:	85 30       	cpi	r24, 0x05	; 5
    1722:	39 f4       	brne	.+14     	; 0x1732 <main+0x8a>
            print("[s]");
    1724:	80 ee       	ldi	r24, 0xE0	; 224
    1726:	91 e0       	ldi	r25, 0x01	; 1
    1728:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
            hook_usb_suspend_loop();
    172c:	0e 94 48 0b 	call	0x1690	; 0x1690 <hook_usb_suspend_loop>
    1730:	f5 cf       	rjmp	.-22     	; 0x171c <main+0x74>
        }

        keyboard_task();
    1732:	0e 94 12 11 	call	0x2224	; 0x2224 <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    1736:	f2 cf       	rjmp	.-28     	; 0x171c <main+0x74>

00001738 <hook_usb_wakeup>:
}

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
    1738:	0c 94 4a 1d 	jmp	0x3a94	; 0x3a94 <suspend_wakeup_init>

0000173c <EVENT_USB_Device_WakeUp>:
    hook_usb_suspend_entry();
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    173c:	86 e0       	ldi	r24, 0x06	; 6
    173e:	92 e0       	ldi	r25, 0x02	; 2
    1740:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    hook_usb_wakeup();
    1744:	0c 94 9c 0b 	jmp	0x1738	; 0x1738 <hook_usb_wakeup>

00001748 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    1748:	29 2f       	mov	r18, r25
    174a:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    174c:	23 30       	cpi	r18, 0x03	; 3
    174e:	31 05       	cpc	r19, r1
    1750:	a9 f0       	breq	.+42     	; 0x177c <CALLBACK_USB_GetDescriptor+0x34>
    1752:	6c f4       	brge	.+26     	; 0x176e <CALLBACK_USB_GetDescriptor+0x26>
    1754:	21 30       	cpi	r18, 0x01	; 1
    1756:	31 05       	cpc	r19, r1
    1758:	09 f4       	brne	.+2      	; 0x175c <CALLBACK_USB_GetDescriptor+0x14>
    175a:	42 c0       	rjmp	.+132    	; 0x17e0 <CALLBACK_USB_GetDescriptor+0x98>
    175c:	22 30       	cpi	r18, 0x02	; 2
    175e:	31 05       	cpc	r19, r1
    1760:	09 f0       	breq	.+2      	; 0x1764 <CALLBACK_USB_GetDescriptor+0x1c>
    1762:	43 c0       	rjmp	.+134    	; 0x17ea <CALLBACK_USB_GetDescriptor+0xa2>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    1764:	8d e8       	ldi	r24, 0x8D	; 141
    1766:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    1768:	24 e5       	ldi	r18, 0x54	; 84
    176a:	32 e0       	ldi	r19, 0x02	; 2
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    176c:	42 c0       	rjmp	.+132    	; 0x17f2 <CALLBACK_USB_GetDescriptor+0xaa>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    176e:	21 32       	cpi	r18, 0x21	; 33
    1770:	31 05       	cpc	r19, r1
    1772:	c9 f0       	breq	.+50     	; 0x17a6 <CALLBACK_USB_GetDescriptor+0x5e>
    1774:	22 32       	cpi	r18, 0x22	; 34
    1776:	31 05       	cpc	r19, r1
    1778:	19 f1       	breq	.+70     	; 0x17c0 <CALLBACK_USB_GetDescriptor+0x78>
    177a:	37 c0       	rjmp	.+110    	; 0x17ea <CALLBACK_USB_GetDescriptor+0xa2>
    177c:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	91 05       	cpc	r25, r1
    1782:	41 f0       	breq	.+16     	; 0x1794 <CALLBACK_USB_GetDescriptor+0x4c>
    1784:	82 30       	cpi	r24, 0x02	; 2
    1786:	91 05       	cpc	r25, r1
    1788:	41 f0       	breq	.+16     	; 0x179a <CALLBACK_USB_GetDescriptor+0x52>
    178a:	89 2b       	or	r24, r25
    178c:	71 f5       	brne	.+92     	; 0x17ea <CALLBACK_USB_GetDescriptor+0xa2>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    178e:	e0 e5       	ldi	r30, 0x50	; 80
    1790:	f2 e0       	ldi	r31, 0x02	; 2
    1792:	05 c0       	rjmp	.+10     	; 0x179e <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1794:	ec e2       	ldi	r30, 0x2C	; 44
    1796:	f2 e0       	ldi	r31, 0x02	; 2
    1798:	02 c0       	rjmp	.+4      	; 0x179e <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    179a:	ea e1       	ldi	r30, 0x1A	; 26
    179c:	f2 e0       	ldi	r31, 0x02	; 2
    179e:	84 91       	lpm	r24, Z
    17a0:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    17a2:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    17a4:	26 c0       	rjmp	.+76     	; 0x17f2 <CALLBACK_USB_GetDescriptor+0xaa>
    17a6:	65 30       	cpi	r22, 0x05	; 5
    17a8:	00 f5       	brcc	.+64     	; 0x17ea <CALLBACK_USB_GetDescriptor+0xa2>
    17aa:	e6 2f       	mov	r30, r22
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	ee 0f       	add	r30, r30
    17b0:	ff 1f       	adc	r31, r31
    17b2:	ec 5d       	subi	r30, 0xDC	; 220
    17b4:	fe 4f       	sbci	r31, 0xFE	; 254
    17b6:	20 81       	ld	r18, Z
    17b8:	31 81       	ldd	r19, Z+1	; 0x01
    17ba:	89 e0       	ldi	r24, 0x09	; 9
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	19 c0       	rjmp	.+50     	; 0x17f2 <CALLBACK_USB_GetDescriptor+0xaa>
    17c0:	65 30       	cpi	r22, 0x05	; 5
    17c2:	98 f4       	brcc	.+38     	; 0x17ea <CALLBACK_USB_GetDescriptor+0xa2>
    17c4:	e6 2f       	mov	r30, r22
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	df 01       	movw	r26, r30
    17ca:	aa 0f       	add	r26, r26
    17cc:	bb 1f       	adc	r27, r27
    17ce:	a6 5e       	subi	r26, 0xE6	; 230
    17d0:	be 4f       	sbci	r27, 0xFE	; 254
    17d2:	2d 91       	ld	r18, X+
    17d4:	3c 91       	ld	r19, X
    17d6:	eb 5e       	subi	r30, 0xEB	; 235
    17d8:	fe 4f       	sbci	r31, 0xFE	; 254
    17da:	80 81       	ld	r24, Z
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	09 c0       	rjmp	.+18     	; 0x17f2 <CALLBACK_USB_GetDescriptor+0xaa>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    17e0:	82 e1       	ldi	r24, 0x12	; 18
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    17e4:	21 ee       	ldi	r18, 0xE1	; 225
    17e6:	32 e0       	ldi	r19, 0x02	; 2
    17e8:	04 c0       	rjmp	.+8      	; 0x17f2 <CALLBACK_USB_GetDescriptor+0xaa>
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    17f2:	fa 01       	movw	r30, r20
    17f4:	31 83       	std	Z+1, r19	; 0x01
    17f6:	20 83       	st	Z, r18
    return Size;
}
    17f8:	08 95       	ret

000017fa <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    17fa:	80 e1       	ldi	r24, 0x10	; 16
    17fc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    17fe:	82 e1       	ldi	r24, 0x12	; 18
    1800:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1802:	09 b4       	in	r0, 0x29	; 41
    1804:	00 fe       	sbrs	r0, 0
    1806:	fd cf       	rjmp	.-6      	; 0x1802 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1808:	80 91 d8 00 	lds	r24, 0x00D8
    180c:	8f 7d       	andi	r24, 0xDF	; 223
    180e:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    1812:	80 91 e0 00 	lds	r24, 0x00E0
    1816:	82 60       	ori	r24, 0x02	; 2
    1818:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    181c:	80 91 e0 00 	lds	r24, 0x00E0
    1820:	81 fd       	sbrc	r24, 1
    1822:	fc cf       	rjmp	.-8      	; 0x181c <USB_Device_SendRemoteWakeup+0x22>
}
    1824:	08 95       	ret

00001826 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1826:	cf 92       	push	r12
    1828:	df 92       	push	r13
    182a:	ef 92       	push	r14
    182c:	ff 92       	push	r15
    182e:	0f 93       	push	r16
    1830:	1f 93       	push	r17
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	7c 01       	movw	r14, r24
    1838:	8b 01       	movw	r16, r22
    183a:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    183c:	0e 94 75 0d 	call	0x1aea	; 0x1aea <Endpoint_WaitUntilReady>
    1840:	81 11       	cpse	r24, r1
    1842:	31 c0       	rjmp	.+98     	; 0x18a6 <Endpoint_Write_Stream_LE+0x80>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1844:	20 97       	sbiw	r28, 0x00	; 0
    1846:	31 f0       	breq	.+12     	; 0x1854 <Endpoint_Write_Stream_LE+0x2e>
	{
		Length -= *BytesProcessed;
    1848:	88 81       	ld	r24, Y
    184a:	99 81       	ldd	r25, Y+1	; 0x01
    184c:	08 1b       	sub	r16, r24
    184e:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1850:	e8 0e       	add	r14, r24
    1852:	f9 1e       	adc	r15, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1854:	c1 2c       	mov	r12, r1
    1856:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1858:	01 15       	cp	r16, r1
    185a:	11 05       	cpc	r17, r1
    185c:	19 f1       	breq	.+70     	; 0x18a4 <Endpoint_Write_Stream_LE+0x7e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    185e:	80 91 e8 00 	lds	r24, 0x00E8
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1862:	85 fd       	sbrc	r24, 5
    1864:	14 c0       	rjmp	.+40     	; 0x188e <Endpoint_Write_Stream_LE+0x68>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1866:	80 91 e8 00 	lds	r24, 0x00E8
    186a:	8e 77       	andi	r24, 0x7E	; 126
    186c:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1870:	20 97       	sbiw	r28, 0x00	; 0
    1872:	41 f0       	breq	.+16     	; 0x1884 <Endpoint_Write_Stream_LE+0x5e>
			{
				*BytesProcessed += BytesInTransfer;
    1874:	88 81       	ld	r24, Y
    1876:	99 81       	ldd	r25, Y+1	; 0x01
    1878:	8c 0d       	add	r24, r12
    187a:	9d 1d       	adc	r25, r13
    187c:	99 83       	std	Y+1, r25	; 0x01
    187e:	88 83       	st	Y, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1880:	85 e0       	ldi	r24, 0x05	; 5
    1882:	11 c0       	rjmp	.+34     	; 0x18a6 <Endpoint_Write_Stream_LE+0x80>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1884:	0e 94 75 0d 	call	0x1aea	; 0x1aea <Endpoint_WaitUntilReady>
    1888:	88 23       	and	r24, r24
    188a:	31 f3       	breq	.-52     	; 0x1858 <Endpoint_Write_Stream_LE+0x32>
    188c:	0c c0       	rjmp	.+24     	; 0x18a6 <Endpoint_Write_Stream_LE+0x80>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    188e:	f7 01       	movw	r30, r14
    1890:	81 91       	ld	r24, Z+
    1892:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1894:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1898:	01 50       	subi	r16, 0x01	; 1
    189a:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    189c:	ff ef       	ldi	r31, 0xFF	; 255
    189e:	cf 1a       	sub	r12, r31
    18a0:	df 0a       	sbc	r13, r31
    18a2:	da cf       	rjmp	.-76     	; 0x1858 <Endpoint_Write_Stream_LE+0x32>
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    18a4:	80 e0       	ldi	r24, 0x00	; 0
}
    18a6:	df 91       	pop	r29
    18a8:	cf 91       	pop	r28
    18aa:	1f 91       	pop	r17
    18ac:	0f 91       	pop	r16
    18ae:	ff 90       	pop	r15
    18b0:	ef 90       	pop	r14
    18b2:	df 90       	pop	r13
    18b4:	cf 90       	pop	r12
    18b6:	08 95       	ret

000018b8 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    18b8:	20 91 dd 01 	lds	r18, 0x01DD
    18bc:	30 91 de 01 	lds	r19, 0x01DE
    18c0:	26 17       	cp	r18, r22
    18c2:	37 07       	cpc	r19, r23
    18c4:	48 f0       	brcs	.+18     	; 0x18d8 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    18c6:	61 15       	cp	r22, r1
    18c8:	71 05       	cpc	r23, r1
    18ca:	39 f4       	brne	.+14     	; 0x18da <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18cc:	20 91 e8 00 	lds	r18, 0x00E8
    18d0:	2e 77       	andi	r18, 0x7E	; 126
    18d2:	20 93 e8 00 	sts	0x00E8, r18
    18d6:	01 c0       	rjmp	.+2      	; 0x18da <Endpoint_Write_Control_Stream_LE+0x22>
    18d8:	b9 01       	movw	r22, r18
    18da:	fc 01       	movw	r30, r24
    18dc:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    18de:	61 15       	cp	r22, r1
    18e0:	71 05       	cpc	r23, r1
    18e2:	b9 f1       	breq	.+110    	; 0x1952 <Endpoint_Write_Control_Stream_LE+0x9a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18e4:	80 91 d6 01 	lds	r24, 0x01D6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    18e8:	88 23       	and	r24, r24
    18ea:	09 f4       	brne	.+2      	; 0x18ee <Endpoint_Write_Control_Stream_LE+0x36>
    18ec:	40 c0       	rjmp	.+128    	; 0x196e <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18ee:	85 30       	cpi	r24, 0x05	; 5
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <Endpoint_Write_Control_Stream_LE+0x3c>
    18f2:	3f c0       	rjmp	.+126    	; 0x1972 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18f4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    18f8:	83 fd       	sbrc	r24, 3
    18fa:	3d c0       	rjmp	.+122    	; 0x1976 <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18fc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1900:	82 ff       	sbrs	r24, 2
    1902:	06 c0       	rjmp	.+12     	; 0x1910 <Endpoint_Write_Control_Stream_LE+0x58>
    1904:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1908:	82 ff       	sbrs	r24, 2
    190a:	26 c0       	rjmp	.+76     	; 0x1958 <Endpoint_Write_Control_Stream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1910:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    1914:	80 ff       	sbrs	r24, 0
    1916:	e3 cf       	rjmp	.-58     	; 0x18de <Endpoint_Write_Control_Stream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1918:	20 91 f3 00 	lds	r18, 0x00F3
    191c:	80 91 f2 00 	lds	r24, 0x00F2
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1924:	61 15       	cp	r22, r1
    1926:	71 05       	cpc	r23, r1
    1928:	51 f0       	breq	.+20     	; 0x193e <Endpoint_Write_Control_Stream_LE+0x86>
    192a:	88 30       	cpi	r24, 0x08	; 8
    192c:	91 05       	cpc	r25, r1
    192e:	38 f4       	brcc	.+14     	; 0x193e <Endpoint_Write_Control_Stream_LE+0x86>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1930:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1932:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1936:	61 50       	subi	r22, 0x01	; 1
    1938:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    193a:	01 96       	adiw	r24, 0x01	; 1
    193c:	f3 cf       	rjmp	.-26     	; 0x1924 <Endpoint_Write_Control_Stream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    193e:	21 e0       	ldi	r18, 0x01	; 1
    1940:	08 97       	sbiw	r24, 0x08	; 8
    1942:	09 f0       	breq	.+2      	; 0x1946 <Endpoint_Write_Control_Stream_LE+0x8e>
    1944:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1946:	80 91 e8 00 	lds	r24, 0x00E8
    194a:	8e 77       	andi	r24, 0x7E	; 126
    194c:	80 93 e8 00 	sts	0x00E8, r24
    1950:	c6 cf       	rjmp	.-116    	; 0x18de <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1952:	21 11       	cpse	r18, r1
    1954:	c7 cf       	rjmp	.-114    	; 0x18e4 <Endpoint_Write_Control_Stream_LE+0x2c>
    1956:	d6 cf       	rjmp	.-84     	; 0x1904 <Endpoint_Write_Control_Stream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1958:	80 91 d6 01 	lds	r24, 0x01D6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    195c:	88 23       	and	r24, r24
    195e:	39 f0       	breq	.+14     	; 0x196e <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1960:	85 30       	cpi	r24, 0x05	; 5
    1962:	39 f0       	breq	.+14     	; 0x1972 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1964:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1968:	83 ff       	sbrs	r24, 3
    196a:	cc cf       	rjmp	.-104    	; 0x1904 <Endpoint_Write_Control_Stream_LE+0x4c>
    196c:	04 c0       	rjmp	.+8      	; 0x1976 <Endpoint_Write_Control_Stream_LE+0xbe>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    196e:	82 e0       	ldi	r24, 0x02	; 2
    1970:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1972:	83 e0       	ldi	r24, 0x03	; 3
    1974:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1976:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1978:	08 95       	ret

0000197a <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    197a:	20 91 dd 01 	lds	r18, 0x01DD
    197e:	30 91 de 01 	lds	r19, 0x01DE
    1982:	26 17       	cp	r18, r22
    1984:	37 07       	cpc	r19, r23
    1986:	48 f0       	brcs	.+18     	; 0x199a <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1988:	61 15       	cp	r22, r1
    198a:	71 05       	cpc	r23, r1
    198c:	39 f4       	brne	.+14     	; 0x199c <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    198e:	20 91 e8 00 	lds	r18, 0x00E8
    1992:	2e 77       	andi	r18, 0x7E	; 126
    1994:	20 93 e8 00 	sts	0x00E8, r18
    1998:	01 c0       	rjmp	.+2      	; 0x199c <Endpoint_Write_Control_PStream_LE+0x22>
    199a:	b9 01       	movw	r22, r18
    199c:	fc 01       	movw	r30, r24
    199e:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    19a0:	61 15       	cp	r22, r1
    19a2:	71 05       	cpc	r23, r1
    19a4:	c1 f1       	breq	.+112    	; 0x1a16 <Endpoint_Write_Control_PStream_LE+0x9c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19a6:	80 91 d6 01 	lds	r24, 0x01D6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19aa:	88 23       	and	r24, r24
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <Endpoint_Write_Control_PStream_LE+0x36>
    19ae:	41 c0       	rjmp	.+130    	; 0x1a32 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    19b0:	85 30       	cpi	r24, 0x05	; 5
    19b2:	09 f4       	brne	.+2      	; 0x19b6 <Endpoint_Write_Control_PStream_LE+0x3c>
    19b4:	40 c0       	rjmp	.+128    	; 0x1a36 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    19b6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    19ba:	83 fd       	sbrc	r24, 3
    19bc:	3e c0       	rjmp	.+124    	; 0x1a3a <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19be:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    19c2:	82 ff       	sbrs	r24, 2
    19c4:	06 c0       	rjmp	.+12     	; 0x19d2 <Endpoint_Write_Control_PStream_LE+0x58>
    19c6:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    19ca:	82 ff       	sbrs	r24, 2
    19cc:	27 c0       	rjmp	.+78     	; 0x1a1c <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    19d2:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    19d6:	80 ff       	sbrs	r24, 0
    19d8:	e3 cf       	rjmp	.-58     	; 0x19a0 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    19da:	20 91 f3 00 	lds	r18, 0x00F3
    19de:	80 91 f2 00 	lds	r24, 0x00F2
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    19e6:	61 15       	cp	r22, r1
    19e8:	71 05       	cpc	r23, r1
    19ea:	59 f0       	breq	.+22     	; 0x1a02 <Endpoint_Write_Control_PStream_LE+0x88>
    19ec:	88 30       	cpi	r24, 0x08	; 8
    19ee:	91 05       	cpc	r25, r1
    19f0:	40 f4       	brcc	.+16     	; 0x1a02 <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    19f2:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    19f4:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    19f8:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    19fa:	61 50       	subi	r22, 0x01	; 1
    19fc:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    19fe:	01 96       	adiw	r24, 0x01	; 1
    1a00:	f2 cf       	rjmp	.-28     	; 0x19e6 <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1a02:	21 e0       	ldi	r18, 0x01	; 1
    1a04:	08 97       	sbiw	r24, 0x08	; 8
    1a06:	09 f0       	breq	.+2      	; 0x1a0a <Endpoint_Write_Control_PStream_LE+0x90>
    1a08:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a0a:	80 91 e8 00 	lds	r24, 0x00E8
    1a0e:	8e 77       	andi	r24, 0x7E	; 126
    1a10:	80 93 e8 00 	sts	0x00E8, r24
    1a14:	c5 cf       	rjmp	.-118    	; 0x19a0 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1a16:	21 11       	cpse	r18, r1
    1a18:	c6 cf       	rjmp	.-116    	; 0x19a6 <Endpoint_Write_Control_PStream_LE+0x2c>
    1a1a:	d5 cf       	rjmp	.-86     	; 0x19c6 <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a1c:	80 91 d6 01 	lds	r24, 0x01D6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a20:	88 23       	and	r24, r24
    1a22:	39 f0       	breq	.+14     	; 0x1a32 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a24:	85 30       	cpi	r24, 0x05	; 5
    1a26:	39 f0       	breq	.+14     	; 0x1a36 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a28:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1a2c:	83 ff       	sbrs	r24, 3
    1a2e:	cb cf       	rjmp	.-106    	; 0x19c6 <Endpoint_Write_Control_PStream_LE+0x4c>
    1a30:	04 c0       	rjmp	.+8      	; 0x1a3a <Endpoint_Write_Control_PStream_LE+0xc0>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1a32:	82 e0       	ldi	r24, 0x02	; 2
    1a34:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1a36:	83 e0       	ldi	r24, 0x03	; 3
    1a38:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1a3c:	08 95       	ret

00001a3e <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1a3e:	98 2f       	mov	r25, r24
    1a40:	97 30       	cpi	r25, 0x07	; 7
    1a42:	58 f5       	brcc	.+86     	; 0x1a9a <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a44:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1a48:	98 17       	cp	r25, r24
    1a4a:	39 f0       	breq	.+14     	; 0x1a5a <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1a4c:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1a50:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1a54:	50 91 f0 00 	lds	r21, 0x00F0
    1a58:	03 c0       	rjmp	.+6      	; 0x1a60 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    1a5a:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    1a5c:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1a5e:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1a60:	21 ff       	sbrs	r18, 1
    1a62:	19 c0       	rjmp	.+50     	; 0x1a96 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1a64:	30 91 eb 00 	lds	r19, 0x00EB
    1a68:	3e 7f       	andi	r19, 0xFE	; 254
    1a6a:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1a6e:	30 91 ed 00 	lds	r19, 0x00ED
    1a72:	3d 7f       	andi	r19, 0xFD	; 253
    1a74:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1a78:	30 91 eb 00 	lds	r19, 0x00EB
    1a7c:	31 60       	ori	r19, 0x01	; 1
    1a7e:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1a82:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1a86:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    1a8a:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1a8e:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1a92:	27 ff       	sbrs	r18, 7
    1a94:	07 c0       	rjmp	.+14     	; 0x1aa4 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1a96:	9f 5f       	subi	r25, 0xFF	; 255
    1a98:	d3 cf       	rjmp	.-90     	; 0x1a40 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a9a:	8f 70       	andi	r24, 0x0F	; 15
    1a9c:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1aa6:	08 95       	ret

00001aa8 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1aa8:	80 91 d7 01 	lds	r24, 0x01D7
    1aac:	87 fd       	sbrc	r24, 7
    1aae:	05 c0       	rjmp	.+10     	; 0x1aba <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ab0:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1ab4:	80 ff       	sbrs	r24, 0
    1ab6:	0e c0       	rjmp	.+28     	; 0x1ad4 <Endpoint_ClearStatusStage+0x2c>
    1ab8:	12 c0       	rjmp	.+36     	; 0x1ade <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1aba:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1abe:	82 fd       	sbrc	r24, 2
    1ac0:	05 c0       	rjmp	.+10     	; 0x1acc <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1ac2:	80 91 d6 01 	lds	r24, 0x01D6
    1ac6:	81 11       	cpse	r24, r1
    1ac8:	f8 cf       	rjmp	.-16     	; 0x1aba <Endpoint_ClearStatusStage+0x12>
    1aca:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1acc:	80 91 e8 00 	lds	r24, 0x00E8
    1ad0:	8b 77       	andi	r24, 0x7B	; 123
    1ad2:	08 c0       	rjmp	.+16     	; 0x1ae4 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1ad4:	80 91 d6 01 	lds	r24, 0x01D6
    1ad8:	81 11       	cpse	r24, r1
    1ada:	ea cf       	rjmp	.-44     	; 0x1ab0 <Endpoint_ClearStatusStage+0x8>
    1adc:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ade:	80 91 e8 00 	lds	r24, 0x00E8
    1ae2:	8e 77       	andi	r24, 0x7E	; 126
    1ae4:	80 93 e8 00 	sts	0x00E8, r24
    1ae8:	08 95       	ret

00001aea <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1aea:	80 91 e4 00 	lds	r24, 0x00E4
    1aee:	90 91 e5 00 	lds	r25, 0x00E5
    1af2:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1af4:	20 91 ec 00 	lds	r18, 0x00EC
    1af8:	20 ff       	sbrs	r18, 0
    1afa:	21 c0       	rjmp	.+66     	; 0x1b3e <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1afc:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1b00:	20 fd       	sbrc	r18, 0
    1b02:	21 c0       	rjmp	.+66     	; 0x1b46 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b04:	20 91 d6 01 	lds	r18, 0x01D6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b08:	22 23       	and	r18, r18
    1b0a:	89 f0       	breq	.+34     	; 0x1b2e <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b0c:	25 30       	cpi	r18, 0x05	; 5
    1b0e:	89 f0       	breq	.+34     	; 0x1b32 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1b10:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1b14:	25 fd       	sbrc	r18, 5
    1b16:	0f c0       	rjmp	.+30     	; 0x1b36 <Endpoint_WaitUntilReady+0x4c>
    1b18:	20 91 e4 00 	lds	r18, 0x00E4
    1b1c:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1b20:	28 17       	cp	r18, r24
    1b22:	39 07       	cpc	r19, r25
    1b24:	39 f3       	breq	.-50     	; 0x1af4 <Endpoint_WaitUntilReady+0xa>
    1b26:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1b28:	41 f0       	breq	.+16     	; 0x1b3a <Endpoint_WaitUntilReady+0x50>
    1b2a:	c9 01       	movw	r24, r18
    1b2c:	e3 cf       	rjmp	.-58     	; 0x1af4 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1b2e:	82 e0       	ldi	r24, 0x02	; 2
    1b30:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1b32:	83 e0       	ldi	r24, 0x03	; 3
    1b34:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    1b3a:	84 e0       	ldi	r24, 0x04	; 4
    1b3c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b3e:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1b42:	22 ff       	sbrs	r18, 2
    1b44:	df cf       	rjmp	.-66     	; 0x1b04 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	08 95       	ret

00001b4a <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1b4a:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1b4e:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1b52:	e0 ee       	ldi	r30, 0xE0	; 224
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	81 60       	ori	r24, 0x01	; 1
    1b5a:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1b5c:	e8 ed       	ldi	r30, 0xD8	; 216
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	8f 77       	andi	r24, 0x7F	; 127
    1b64:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1b66:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1b68:	a7 ed       	ldi	r26, 0xD7	; 215
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	8c 91       	ld	r24, X
    1b6e:	8e 7f       	andi	r24, 0xFE	; 254
    1b70:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1b72:	80 81       	ld	r24, Z
    1b74:	8f 7e       	andi	r24, 0xEF	; 239
    1b76:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1b78:	10 92 d5 01 	sts	0x01D5, r1
    1b7c:	08 95       	ret

00001b7e <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    1b7e:	0f 93       	push	r16
    1b80:	1f 93       	push	r17
    1b82:	cf 93       	push	r28
    1b84:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1b86:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1b8a:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1b8e:	c8 ed       	ldi	r28, 0xD8	; 216
    1b90:	d0 e0       	ldi	r29, 0x00	; 0
    1b92:	88 81       	ld	r24, Y
    1b94:	8f 77       	andi	r24, 0x7F	; 127
    1b96:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1b98:	88 81       	ld	r24, Y
    1b9a:	80 68       	ori	r24, 0x80	; 128
    1b9c:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1b9e:	88 81       	ld	r24, Y
    1ba0:	8f 7d       	andi	r24, 0xDF	; 223
    1ba2:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1ba4:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1ba6:	10 92 d6 01 	sts	0x01D6, r1
	USB_Device_ConfigurationNumber  = 0;
    1baa:	10 92 d2 01 	sts	0x01D2, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1bae:	10 92 d4 01 	sts	0x01D4, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1bb2:	10 92 d3 01 	sts	0x01D3, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1bb6:	00 ee       	ldi	r16, 0xE0	; 224
    1bb8:	10 e0       	ldi	r17, 0x00	; 0
    1bba:	f8 01       	movw	r30, r16
    1bbc:	80 81       	ld	r24, Z
    1bbe:	8b 7f       	andi	r24, 0xFB	; 251
    1bc0:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1bc2:	88 81       	ld	r24, Y
    1bc4:	81 60       	ori	r24, 0x01	; 1
    1bc6:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1bc8:	42 e0       	ldi	r20, 0x02	; 2
    1bca:	60 e0       	ldi	r22, 0x00	; 0
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1bd2:	e1 ee       	ldi	r30, 0xE1	; 225
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	8e 7f       	andi	r24, 0xFE	; 254
    1bda:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1bdc:	e2 ee       	ldi	r30, 0xE2	; 226
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	81 60       	ori	r24, 0x01	; 1
    1be4:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1be6:	80 81       	ld	r24, Z
    1be8:	88 60       	ori	r24, 0x08	; 8
    1bea:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1bec:	f8 01       	movw	r30, r16
    1bee:	80 81       	ld	r24, Z
    1bf0:	8e 7f       	andi	r24, 0xFE	; 254
    1bf2:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1bf4:	88 81       	ld	r24, Y
    1bf6:	80 61       	ori	r24, 0x10	; 16
    1bf8:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1bfa:	df 91       	pop	r29
    1bfc:	cf 91       	pop	r28
    1bfe:	1f 91       	pop	r17
    1c00:	0f 91       	pop	r16
    1c02:	08 95       	ret

00001c04 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1c04:	e8 ed       	ldi	r30, 0xD8	; 216
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	8f 7e       	andi	r24, 0xEF	; 239
    1c0c:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1c0e:	e7 ed       	ldi	r30, 0xD7	; 215
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	81 60       	ori	r24, 0x01	; 1
    1c16:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1c18:	84 e0       	ldi	r24, 0x04	; 4
    1c1a:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	80 93 d5 01 	sts	0x01D5, r24

	USB_ResetInterface();
    1c22:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <USB_ResetInterface>

00001c26 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1c26:	e8 ed       	ldi	r30, 0xD8	; 216
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	8e 7f       	andi	r24, 0xFE	; 254
    1c2e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1c30:	10 92 e2 00 	sts	0x00E2, r1
    1c34:	08 95       	ret

00001c36 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1c36:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1c3a:	10 92 e1 00 	sts	0x00E1, r1
    1c3e:	08 95       	ret

00001c40 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1c40:	1f 92       	push	r1
    1c42:	0f 92       	push	r0
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	0f 92       	push	r0
    1c48:	11 24       	eor	r1, r1
    1c4a:	2f 93       	push	r18
    1c4c:	3f 93       	push	r19
    1c4e:	4f 93       	push	r20
    1c50:	5f 93       	push	r21
    1c52:	6f 93       	push	r22
    1c54:	7f 93       	push	r23
    1c56:	8f 93       	push	r24
    1c58:	9f 93       	push	r25
    1c5a:	af 93       	push	r26
    1c5c:	bf 93       	push	r27
    1c5e:	ef 93       	push	r30
    1c60:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1c62:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1c66:	82 ff       	sbrs	r24, 2
    1c68:	0b c0       	rjmp	.+22     	; 0x1c80 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1c6a:	80 91 e2 00 	lds	r24, 0x00E2
    1c6e:	82 ff       	sbrs	r24, 2
    1c70:	07 c0       	rjmp	.+14     	; 0x1c80 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1c72:	80 91 e1 00 	lds	r24, 0x00E1
    1c76:	8b 7f       	andi	r24, 0xFB	; 251
    1c78:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1c7c:	0e 94 34 0a 	call	0x1468	; 0x1468 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1c80:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1c84:	80 ff       	sbrs	r24, 0
    1c86:	1f c0       	rjmp	.+62     	; 0x1cc6 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1c88:	80 91 d8 00 	lds	r24, 0x00D8
    1c8c:	80 ff       	sbrs	r24, 0
    1c8e:	1b c0       	rjmp	.+54     	; 0x1cc6 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1c90:	80 91 da 00 	lds	r24, 0x00DA
    1c94:	8e 7f       	andi	r24, 0xFE	; 254
    1c96:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1c9a:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1c9e:	80 ff       	sbrs	r24, 0
    1ca0:	0d c0       	rjmp	.+26     	; 0x1cbc <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1ca2:	80 e1       	ldi	r24, 0x10	; 16
    1ca4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1ca6:	82 e1       	ldi	r24, 0x12	; 18
    1ca8:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1caa:	09 b4       	in	r0, 0x29	; 41
    1cac:	00 fe       	sbrs	r0, 0
    1cae:	fd cf       	rjmp	.-6      	; 0x1caa <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	80 93 d6 01 	sts	0x01D6, r24
			EVENT_USB_Device_Connect();
    1cb6:	0e 94 17 0a 	call	0x142e	; 0x142e <EVENT_USB_Device_Connect>
    1cba:	05 c0       	rjmp	.+10     	; 0x1cc6 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1cbc:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1cbe:	10 92 d6 01 	sts	0x01D6, r1
			EVENT_USB_Device_Disconnect();
    1cc2:	0e 94 29 0a 	call	0x1452	; 0x1452 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1cc6:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1cca:	80 ff       	sbrs	r24, 0
    1ccc:	19 c0       	rjmp	.+50     	; 0x1d00 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1cce:	80 91 e2 00 	lds	r24, 0x00E2
    1cd2:	80 ff       	sbrs	r24, 0
    1cd4:	15 c0       	rjmp	.+42     	; 0x1d00 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1cd6:	80 91 e2 00 	lds	r24, 0x00E2
    1cda:	8e 7f       	andi	r24, 0xFE	; 254
    1cdc:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1ce0:	80 91 e2 00 	lds	r24, 0x00E2
    1ce4:	80 61       	ori	r24, 0x10	; 16
    1ce6:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1cea:	80 91 d8 00 	lds	r24, 0x00D8
    1cee:	80 62       	ori	r24, 0x20	; 32
    1cf0:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1cf4:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1cf6:	85 e0       	ldi	r24, 0x05	; 5
    1cf8:	80 93 d6 01 	sts	0x01D6, r24
		EVENT_USB_Device_Suspend();
    1cfc:	0e 94 42 0b 	call	0x1684	; 0x1684 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1d00:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1d04:	84 ff       	sbrs	r24, 4
    1d06:	30 c0       	rjmp	.+96     	; 0x1d68 <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1d08:	80 91 e2 00 	lds	r24, 0x00E2
    1d0c:	84 ff       	sbrs	r24, 4
    1d0e:	2c c0       	rjmp	.+88     	; 0x1d68 <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1d10:	80 e1       	ldi	r24, 0x10	; 16
    1d12:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1d14:	82 e1       	ldi	r24, 0x12	; 18
    1d16:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1d18:	09 b4       	in	r0, 0x29	; 41
    1d1a:	00 fe       	sbrs	r0, 0
    1d1c:	fd cf       	rjmp	.-6      	; 0x1d18 <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1d1e:	80 91 d8 00 	lds	r24, 0x00D8
    1d22:	8f 7d       	andi	r24, 0xDF	; 223
    1d24:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1d28:	80 91 e1 00 	lds	r24, 0x00E1
    1d2c:	8f 7e       	andi	r24, 0xEF	; 239
    1d2e:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1d32:	80 91 e2 00 	lds	r24, 0x00E2
    1d36:	8f 7e       	andi	r24, 0xEF	; 239
    1d38:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1d3c:	80 91 e2 00 	lds	r24, 0x00E2
    1d40:	81 60       	ori	r24, 0x01	; 1
    1d42:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1d46:	80 91 d2 01 	lds	r24, 0x01D2
    1d4a:	88 23       	and	r24, r24
    1d4c:	11 f0       	breq	.+4      	; 0x1d52 <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1d4e:	84 e0       	ldi	r24, 0x04	; 4
    1d50:	07 c0       	rjmp	.+14     	; 0x1d60 <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1d52:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1d56:	87 ff       	sbrs	r24, 7
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <__vector_10+0x11e>
    1d5a:	83 e0       	ldi	r24, 0x03	; 3
    1d5c:	01 c0       	rjmp	.+2      	; 0x1d60 <__vector_10+0x120>
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	80 93 d6 01 	sts	0x01D6, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1d64:	0e 94 9e 0b 	call	0x173c	; 0x173c <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1d68:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1d6c:	83 ff       	sbrs	r24, 3
    1d6e:	29 c0       	rjmp	.+82     	; 0x1dc2 <__vector_10+0x182>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1d70:	80 91 e2 00 	lds	r24, 0x00E2
    1d74:	83 ff       	sbrs	r24, 3
    1d76:	25 c0       	rjmp	.+74     	; 0x1dc2 <__vector_10+0x182>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1d78:	80 91 e1 00 	lds	r24, 0x00E1
    1d7c:	87 7f       	andi	r24, 0xF7	; 247
    1d7e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1d82:	82 e0       	ldi	r24, 0x02	; 2
    1d84:	80 93 d6 01 	sts	0x01D6, r24
		USB_Device_ConfigurationNumber = 0;
    1d88:	10 92 d2 01 	sts	0x01D2, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1d8c:	80 91 e1 00 	lds	r24, 0x00E1
    1d90:	8e 7f       	andi	r24, 0xFE	; 254
    1d92:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1d96:	80 91 e2 00 	lds	r24, 0x00E2
    1d9a:	8e 7f       	andi	r24, 0xFE	; 254
    1d9c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1da0:	80 91 e2 00 	lds	r24, 0x00E2
    1da4:	80 61       	ori	r24, 0x10	; 16
    1da6:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1daa:	42 e0       	ldi	r20, 0x02	; 2
    1dac:	60 e0       	ldi	r22, 0x00	; 0
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1db4:	80 91 f0 00 	lds	r24, 0x00F0
    1db8:	88 60       	ori	r24, 0x08	; 8
    1dba:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1dbe:	0e 94 30 0a 	call	0x1460	; 0x1460 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1dc2:	ff 91       	pop	r31
    1dc4:	ef 91       	pop	r30
    1dc6:	bf 91       	pop	r27
    1dc8:	af 91       	pop	r26
    1dca:	9f 91       	pop	r25
    1dcc:	8f 91       	pop	r24
    1dce:	7f 91       	pop	r23
    1dd0:	6f 91       	pop	r22
    1dd2:	5f 91       	pop	r21
    1dd4:	4f 91       	pop	r20
    1dd6:	3f 91       	pop	r19
    1dd8:	2f 91       	pop	r18
    1dda:	0f 90       	pop	r0
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	0f 90       	pop	r0
    1de0:	1f 90       	pop	r1
    1de2:	18 95       	reti

00001de4 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1de4:	1f 92       	push	r1
    1de6:	0f 92       	push	r0
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	0f 92       	push	r0
    1dec:	11 24       	eor	r1, r1
    1dee:	2f 93       	push	r18
    1df0:	3f 93       	push	r19
    1df2:	4f 93       	push	r20
    1df4:	5f 93       	push	r21
    1df6:	6f 93       	push	r22
    1df8:	7f 93       	push	r23
    1dfa:	8f 93       	push	r24
    1dfc:	9f 93       	push	r25
    1dfe:	af 93       	push	r26
    1e00:	bf 93       	push	r27
    1e02:	cf 93       	push	r28
    1e04:	ef 93       	push	r30
    1e06:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1e08:	c0 91 e9 00 	lds	r28, 0x00E9
    1e0c:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1e0e:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e12:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1e16:	80 91 f0 00 	lds	r24, 0x00F0
    1e1a:	87 7f       	andi	r24, 0xF7	; 247
    1e1c:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1e20:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1e22:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <USB_Device_ProcessControlRequest>
    1e26:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1e2a:	80 91 f0 00 	lds	r24, 0x00F0
    1e2e:	88 60       	ori	r24, 0x08	; 8
    1e30:	80 93 f0 00 	sts	0x00F0, r24
    1e34:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1e38:	ff 91       	pop	r31
    1e3a:	ef 91       	pop	r30
    1e3c:	cf 91       	pop	r28
    1e3e:	bf 91       	pop	r27
    1e40:	af 91       	pop	r26
    1e42:	9f 91       	pop	r25
    1e44:	8f 91       	pop	r24
    1e46:	7f 91       	pop	r23
    1e48:	6f 91       	pop	r22
    1e4a:	5f 91       	pop	r21
    1e4c:	4f 91       	pop	r20
    1e4e:	3f 91       	pop	r19
    1e50:	2f 91       	pop	r18
    1e52:	0f 90       	pop	r0
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	0f 90       	pop	r0
    1e58:	1f 90       	pop	r1
    1e5a:	18 95       	reti

00001e5c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1e5c:	1f 93       	push	r17
    1e5e:	cf 93       	push	r28
    1e60:	df 93       	push	r29
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
    1e66:	aa 97       	sbiw	r28, 0x2a	; 42
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	f8 94       	cli
    1e6c:	de bf       	out	0x3e, r29	; 62
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	cd bf       	out	0x3d, r28	; 61
    1e72:	e7 ed       	ldi	r30, 0xD7	; 215
    1e74:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1e76:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1e7a:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1e7c:	21 e0       	ldi	r18, 0x01	; 1
    1e7e:	ef 3d       	cpi	r30, 0xDF	; 223
    1e80:	f2 07       	cpc	r31, r18
    1e82:	c9 f7       	brne	.-14     	; 0x1e76 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1e84:	0e 94 8d 0a 	call	0x151a	; 0x151a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1e88:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1e8c:	83 ff       	sbrs	r24, 3
    1e8e:	1c c1       	rjmp	.+568    	; 0x20c8 <USB_Device_ProcessControlRequest+0x26c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1e90:	20 91 d7 01 	lds	r18, 0x01D7

		switch (USB_ControlRequest.bRequest)
    1e94:	30 91 d8 01 	lds	r19, 0x01D8
    1e98:	83 2f       	mov	r24, r19
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	8a 30       	cpi	r24, 0x0A	; 10
    1e9e:	91 05       	cpc	r25, r1
    1ea0:	08 f0       	brcs	.+2      	; 0x1ea4 <USB_Device_ProcessControlRequest+0x48>
    1ea2:	12 c1       	rjmp	.+548    	; 0x20c8 <USB_Device_ProcessControlRequest+0x26c>
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	ea 5a       	subi	r30, 0xAA	; 170
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1eae:	20 38       	cpi	r18, 0x80	; 128
    1eb0:	81 f0       	breq	.+32     	; 0x1ed2 <USB_Device_ProcessControlRequest+0x76>
    1eb2:	22 38       	cpi	r18, 0x82	; 130
    1eb4:	09 f0       	breq	.+2      	; 0x1eb8 <USB_Device_ProcessControlRequest+0x5c>
    1eb6:	08 c1       	rjmp	.+528    	; 0x20c8 <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1eb8:	80 91 db 01 	lds	r24, 0x01DB
    1ebc:	8f 70       	andi	r24, 0x0F	; 15
    1ebe:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1ec2:	80 91 eb 00 	lds	r24, 0x00EB
    1ec6:	85 fb       	bst	r24, 5
    1ec8:	88 27       	eor	r24, r24
    1eca:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ecc:	10 92 e9 00 	sts	0x00E9, r1
    1ed0:	06 c0       	rjmp	.+12     	; 0x1ede <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1ed2:	80 91 d3 01 	lds	r24, 0x01D3
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1ed6:	90 91 d4 01 	lds	r25, 0x01D4
    1eda:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1edc:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ede:	90 91 e8 00 	lds	r25, 0x00E8
    1ee2:	97 7f       	andi	r25, 0xF7	; 247
    1ee4:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1ee8:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1eec:	10 92 f1 00 	sts	0x00F1, r1
    1ef0:	c5 c0       	rjmp	.+394    	; 0x207c <USB_Device_ProcessControlRequest+0x220>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1ef2:	82 2f       	mov	r24, r18
    1ef4:	8d 7f       	andi	r24, 0xFD	; 253
    1ef6:	09 f0       	breq	.+2      	; 0x1efa <USB_Device_ProcessControlRequest+0x9e>
    1ef8:	e7 c0       	rjmp	.+462    	; 0x20c8 <USB_Device_ProcessControlRequest+0x26c>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1efa:	22 23       	and	r18, r18
    1efc:	19 f0       	breq	.+6      	; 0x1f04 <USB_Device_ProcessControlRequest+0xa8>
    1efe:	22 30       	cpi	r18, 0x02	; 2
    1f00:	61 f0       	breq	.+24     	; 0x1f1a <USB_Device_ProcessControlRequest+0xbe>
    1f02:	e2 c0       	rjmp	.+452    	; 0x20c8 <USB_Device_ProcessControlRequest+0x26c>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1f04:	80 91 d9 01 	lds	r24, 0x01D9
    1f08:	81 30       	cpi	r24, 0x01	; 1
    1f0a:	09 f0       	breq	.+2      	; 0x1f0e <USB_Device_ProcessControlRequest+0xb2>
    1f0c:	dd c0       	rjmp	.+442    	; 0x20c8 <USB_Device_ProcessControlRequest+0x26c>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1f0e:	33 30       	cpi	r19, 0x03	; 3
    1f10:	09 f0       	breq	.+2      	; 0x1f14 <USB_Device_ProcessControlRequest+0xb8>
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	80 93 d4 01 	sts	0x01D4, r24
    1f18:	28 c0       	rjmp	.+80     	; 0x1f6a <USB_Device_ProcessControlRequest+0x10e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1f1a:	80 91 d9 01 	lds	r24, 0x01D9
    1f1e:	81 11       	cpse	r24, r1
    1f20:	24 c0       	rjmp	.+72     	; 0x1f6a <USB_Device_ProcessControlRequest+0x10e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1f22:	20 91 db 01 	lds	r18, 0x01DB
    1f26:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1f28:	09 f4       	brne	.+2      	; 0x1f2c <USB_Device_ProcessControlRequest+0xd0>
    1f2a:	ce c0       	rjmp	.+412    	; 0x20c8 <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f2c:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1f30:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1f34:	80 ff       	sbrs	r24, 0
    1f36:	19 c0       	rjmp	.+50     	; 0x1f6a <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1f38:	80 91 eb 00 	lds	r24, 0x00EB
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1f3c:	33 30       	cpi	r19, 0x03	; 3
    1f3e:	11 f4       	brne	.+4      	; 0x1f44 <USB_Device_ProcessControlRequest+0xe8>
    1f40:	80 62       	ori	r24, 0x20	; 32
    1f42:	11 c0       	rjmp	.+34     	; 0x1f66 <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1f44:	80 61       	ori	r24, 0x10	; 16
    1f46:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	02 2e       	mov	r0, r18
    1f50:	01 c0       	rjmp	.+2      	; 0x1f54 <USB_Device_ProcessControlRequest+0xf8>
    1f52:	88 0f       	add	r24, r24
    1f54:	0a 94       	dec	r0
    1f56:	ea f7       	brpl	.-6      	; 0x1f52 <USB_Device_ProcessControlRequest+0xf6>
    1f58:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1f5c:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1f60:	80 91 eb 00 	lds	r24, 0x00EB
    1f64:	88 60       	ori	r24, 0x08	; 8
    1f66:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f6a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f6e:	80 91 e8 00 	lds	r24, 0x00E8
    1f72:	87 7f       	andi	r24, 0xF7	; 247
    1f74:	86 c0       	rjmp	.+268    	; 0x2082 <USB_Device_ProcessControlRequest+0x226>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1f76:	21 11       	cpse	r18, r1
    1f78:	a7 c0       	rjmp	.+334    	; 0x20c8 <USB_Device_ProcessControlRequest+0x26c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1f7a:	10 91 d9 01 	lds	r17, 0x01D9
    1f7e:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1f80:	80 91 e3 00 	lds	r24, 0x00E3
    1f84:	80 78       	andi	r24, 0x80	; 128
    1f86:	81 2b       	or	r24, r17
    1f88:	80 93 e3 00 	sts	0x00E3, r24
    1f8c:	80 91 e8 00 	lds	r24, 0x00E8
    1f90:	87 7f       	andi	r24, 0xF7	; 247
    1f92:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1f96:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f9a:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1f9e:	80 ff       	sbrs	r24, 0
    1fa0:	fc cf       	rjmp	.-8      	; 0x1f9a <USB_Device_ProcessControlRequest+0x13e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1fa2:	80 91 e3 00 	lds	r24, 0x00E3
    1fa6:	80 68       	ori	r24, 0x80	; 128
    1fa8:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1fac:	11 23       	and	r17, r17
    1fae:	11 f0       	breq	.+4      	; 0x1fb4 <USB_Device_ProcessControlRequest+0x158>
    1fb0:	83 e0       	ldi	r24, 0x03	; 3
    1fb2:	01 c0       	rjmp	.+2      	; 0x1fb6 <USB_Device_ProcessControlRequest+0x15a>
    1fb4:	82 e0       	ldi	r24, 0x02	; 2
    1fb6:	80 93 d6 01 	sts	0x01D6, r24
    1fba:	86 c0       	rjmp	.+268    	; 0x20c8 <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1fbc:	20 58       	subi	r18, 0x80	; 128
    1fbe:	22 30       	cpi	r18, 0x02	; 2
    1fc0:	08 f0       	brcs	.+2      	; 0x1fc4 <USB_Device_ProcessControlRequest+0x168>
    1fc2:	82 c0       	rjmp	.+260    	; 0x20c8 <USB_Device_ProcessControlRequest+0x26c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1fc4:	80 91 d9 01 	lds	r24, 0x01D9
    1fc8:	90 91 da 01 	lds	r25, 0x01DA
    1fcc:	8c 3d       	cpi	r24, 0xDC	; 220
    1fce:	23 e0       	ldi	r18, 0x03	; 3
    1fd0:	92 07       	cpc	r25, r18
    1fd2:	79 f5       	brne	.+94     	; 0x2032 <USB_Device_ProcessControlRequest+0x1d6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1fd4:	83 e0       	ldi	r24, 0x03	; 3
    1fd6:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1fd8:	8a e2       	ldi	r24, 0x2A	; 42
    1fda:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1fdc:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1fde:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1fe0:	de 01       	movw	r26, r28
    1fe2:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1fe6:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1fe8:	51 e2       	ldi	r21, 0x21	; 33
    1fea:	e3 2f       	mov	r30, r19
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	50 93 57 00 	sts	0x0057, r21
    1ff2:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1ff4:	20 ff       	sbrs	r18, 0
    1ff6:	03 c0       	rjmp	.+6      	; 0x1ffe <USB_Device_ProcessControlRequest+0x1a2>
					{
						SerialByte >>= 4;
    1ff8:	e2 95       	swap	r30
    1ffa:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1ffc:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1ffe:	ef 70       	andi	r30, 0x0F	; 15
    2000:	8e 2f       	mov	r24, r30
    2002:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    2004:	ea 30       	cpi	r30, 0x0A	; 10
    2006:	10 f0       	brcs	.+4      	; 0x200c <USB_Device_ProcessControlRequest+0x1b0>
    2008:	c7 96       	adiw	r24, 0x37	; 55
    200a:	01 c0       	rjmp	.+2      	; 0x200e <USB_Device_ProcessControlRequest+0x1b2>
    200c:	c0 96       	adiw	r24, 0x30	; 48
    200e:	8d 93       	st	X+, r24
    2010:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2012:	2f 5f       	subi	r18, 0xFF	; 255
    2014:	24 31       	cpi	r18, 0x14	; 20
    2016:	49 f7       	brne	.-46     	; 0x1fea <USB_Device_ProcessControlRequest+0x18e>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    2018:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    201a:	80 91 e8 00 	lds	r24, 0x00E8
    201e:	87 7f       	andi	r24, 0xF7	; 247
    2020:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    2024:	6a e2       	ldi	r22, 0x2A	; 42
    2026:	70 e0       	ldi	r23, 0x00	; 0
    2028:	ce 01       	movw	r24, r28
    202a:	01 96       	adiw	r24, 0x01	; 1
    202c:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <Endpoint_Write_Control_Stream_LE>
    2030:	14 c0       	rjmp	.+40     	; 0x205a <USB_Device_ProcessControlRequest+0x1fe>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    2032:	ae 01       	movw	r20, r28
    2034:	4f 5f       	subi	r20, 0xFF	; 255
    2036:	5f 4f       	sbci	r21, 0xFF	; 255
    2038:	60 91 db 01 	lds	r22, 0x01DB
    203c:	0e 94 a4 0b 	call	0x1748	; 0x1748 <CALLBACK_USB_GetDescriptor>
    2040:	00 97       	sbiw	r24, 0x00	; 0
    2042:	09 f4       	brne	.+2      	; 0x2046 <USB_Device_ProcessControlRequest+0x1ea>
    2044:	41 c0       	rjmp	.+130    	; 0x20c8 <USB_Device_ProcessControlRequest+0x26c>
    2046:	20 91 e8 00 	lds	r18, 0x00E8
    204a:	27 7f       	andi	r18, 0xF7	; 247
    204c:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    2050:	bc 01       	movw	r22, r24
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	9a 81       	ldd	r25, Y+2	; 0x02
    2056:	0e 94 bd 0c 	call	0x197a	; 0x197a <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    205a:	80 91 e8 00 	lds	r24, 0x00E8
    205e:	8b 77       	andi	r24, 0x7B	; 123
    2060:	80 93 e8 00 	sts	0x00E8, r24
    2064:	31 c0       	rjmp	.+98     	; 0x20c8 <USB_Device_ProcessControlRequest+0x26c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2066:	20 38       	cpi	r18, 0x80	; 128
    2068:	79 f5       	brne	.+94     	; 0x20c8 <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    206a:	80 91 e8 00 	lds	r24, 0x00E8
    206e:	87 7f       	andi	r24, 0xF7	; 247
    2070:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2074:	80 91 d2 01 	lds	r24, 0x01D2
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2078:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    207c:	80 91 e8 00 	lds	r24, 0x00E8
    2080:	8e 77       	andi	r24, 0x7E	; 126
    2082:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2086:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <Endpoint_ClearStatusStage>
    208a:	1e c0       	rjmp	.+60     	; 0x20c8 <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    208c:	21 11       	cpse	r18, r1
    208e:	1c c0       	rjmp	.+56     	; 0x20c8 <USB_Device_ProcessControlRequest+0x26c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    2090:	90 91 d9 01 	lds	r25, 0x01D9
    2094:	92 30       	cpi	r25, 0x02	; 2
    2096:	c0 f4       	brcc	.+48     	; 0x20c8 <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2098:	80 91 e8 00 	lds	r24, 0x00E8
    209c:	87 7f       	andi	r24, 0xF7	; 247
    209e:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    20a2:	90 93 d2 01 	sts	0x01D2, r25

	Endpoint_ClearStatusStage();
    20a6:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    20aa:	80 91 d2 01 	lds	r24, 0x01D2
    20ae:	81 11       	cpse	r24, r1
    20b0:	04 c0       	rjmp	.+8      	; 0x20ba <USB_Device_ProcessControlRequest+0x25e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    20b2:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    20b6:	87 ff       	sbrs	r24, 7
    20b8:	02 c0       	rjmp	.+4      	; 0x20be <USB_Device_ProcessControlRequest+0x262>
    20ba:	84 e0       	ldi	r24, 0x04	; 4
    20bc:	01 c0       	rjmp	.+2      	; 0x20c0 <USB_Device_ProcessControlRequest+0x264>
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	80 93 d6 01 	sts	0x01D6, r24

	EVENT_USB_Device_ConfigurationChanged();
    20c4:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    20c8:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    20cc:	83 ff       	sbrs	r24, 3
    20ce:	0a c0       	rjmp	.+20     	; 0x20e4 <USB_Device_ProcessControlRequest+0x288>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20d0:	80 91 e8 00 	lds	r24, 0x00E8
    20d4:	87 7f       	andi	r24, 0xF7	; 247
    20d6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    20da:	80 91 eb 00 	lds	r24, 0x00EB
    20de:	80 62       	ori	r24, 0x20	; 32
    20e0:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    20e4:	aa 96       	adiw	r28, 0x2a	; 42
    20e6:	0f b6       	in	r0, 0x3f	; 63
    20e8:	f8 94       	cli
    20ea:	de bf       	out	0x3e, r29	; 62
    20ec:	0f be       	out	0x3f, r0	; 63
    20ee:	cd bf       	out	0x3d, r28	; 61
    20f0:	df 91       	pop	r29
    20f2:	cf 91       	pop	r28
    20f4:	1f 91       	pop	r17
    20f6:	08 95       	ret

000020f8 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    20f8:	90 93 64 01 	sts	0x0164, r25
    20fc:	80 93 63 01 	sts	0x0163, r24
    2100:	08 95       	ret

00002102 <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    2102:	e0 91 63 01 	lds	r30, 0x0163
    2106:	f0 91 64 01 	lds	r31, 0x0164
    210a:	30 97       	sbiw	r30, 0x00	; 0
    210c:	21 f0       	breq	.+8      	; 0x2116 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    210e:	01 90       	ld	r0, Z+
    2110:	f0 81       	ld	r31, Z
    2112:	e0 2d       	mov	r30, r0
    2114:	09 94       	ijmp
}
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	08 95       	ret

0000211a <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    211a:	ff 92       	push	r15
    211c:	0f 93       	push	r16
    211e:	1f 93       	push	r17
    2120:	cf 93       	push	r28
    2122:	df 93       	push	r29
    2124:	8c 01       	movw	r16, r24
    if (!driver) return;
    2126:	e0 91 63 01 	lds	r30, 0x0163
    212a:	f0 91 64 01 	lds	r31, 0x0164
    212e:	30 97       	sbiw	r30, 0x00	; 0
    2130:	99 f1       	breq	.+102    	; 0x2198 <host_keyboard_send+0x7e>
    (*driver->send_keyboard)(report);
    2132:	02 80       	ldd	r0, Z+2	; 0x02
    2134:	f3 81       	ldd	r31, Z+3	; 0x03
    2136:	e0 2d       	mov	r30, r0
    2138:	09 95       	icall

    if (debug_keyboard) {
    213a:	80 91 c1 01 	lds	r24, 0x01C1
    213e:	82 ff       	sbrs	r24, 2
    2140:	2b c0       	rjmp	.+86     	; 0x2198 <host_keyboard_send+0x7e>
        dprint("keyboard_report: ");
    2142:	80 ff       	sbrs	r24, 0
    2144:	04 c0       	rjmp	.+8      	; 0x214e <host_keyboard_send+0x34>
    2146:	86 e1       	ldi	r24, 0x16	; 22
    2148:	94 e0       	ldi	r25, 0x04	; 4
    214a:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    214e:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    2150:	80 e1       	ldi	r24, 0x10	; 16
    2152:	f8 2e       	mov	r15, r24
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    2154:	00 e1       	ldi	r16, 0x10	; 16
    2156:	14 e0       	ldi	r17, 0x04	; 4
    2158:	80 91 c1 01 	lds	r24, 0x01C1
    215c:	80 ff       	sbrs	r24, 0
    215e:	0b c0       	rjmp	.+22     	; 0x2176 <host_keyboard_send+0x5c>
    2160:	88 81       	ld	r24, Y
    2162:	1f 92       	push	r1
    2164:	8f 93       	push	r24
    2166:	1f 93       	push	r17
    2168:	0f 93       	push	r16
    216a:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	0f 90       	pop	r0
    2176:	fa 94       	dec	r15
    2178:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    217a:	f1 10       	cpse	r15, r1
    217c:	ed cf       	rjmp	.-38     	; 0x2158 <host_keyboard_send+0x3e>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    217e:	80 91 c1 01 	lds	r24, 0x01C1
    2182:	80 ff       	sbrs	r24, 0
    2184:	09 c0       	rjmp	.+18     	; 0x2198 <host_keyboard_send+0x7e>
    2186:	8e e0       	ldi	r24, 0x0E	; 14
    2188:	94 e0       	ldi	r25, 0x04	; 4
    }
}
    218a:	df 91       	pop	r29
    218c:	cf 91       	pop	r28
    218e:	1f 91       	pop	r17
    2190:	0f 91       	pop	r16
    2192:	ff 90       	pop	r15
    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    2194:	0c 94 66 06 	jmp	0xccc	; 0xccc <xputs>
    }
}
    2198:	df 91       	pop	r29
    219a:	cf 91       	pop	r28
    219c:	1f 91       	pop	r17
    219e:	0f 91       	pop	r16
    21a0:	ff 90       	pop	r15
    21a2:	08 95       	ret

000021a4 <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    21a4:	e0 91 63 01 	lds	r30, 0x0163
    21a8:	f0 91 64 01 	lds	r31, 0x0164
    21ac:	30 97       	sbiw	r30, 0x00	; 0
    21ae:	21 f0       	breq	.+8      	; 0x21b8 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    21b0:	04 80       	ldd	r0, Z+4	; 0x04
    21b2:	f5 81       	ldd	r31, Z+5	; 0x05
    21b4:	e0 2d       	mov	r30, r0
    21b6:	09 94       	ijmp
    21b8:	08 95       	ret

000021ba <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    21ba:	20 91 61 01 	lds	r18, 0x0161
    21be:	30 91 62 01 	lds	r19, 0x0162
    21c2:	82 17       	cp	r24, r18
    21c4:	93 07       	cpc	r25, r19
    21c6:	71 f0       	breq	.+28     	; 0x21e4 <host_system_send+0x2a>
    last_system_report = report;
    21c8:	90 93 62 01 	sts	0x0162, r25
    21cc:	80 93 61 01 	sts	0x0161, r24

    if (!driver) return;
    21d0:	e0 91 63 01 	lds	r30, 0x0163
    21d4:	f0 91 64 01 	lds	r31, 0x0164
    21d8:	30 97       	sbiw	r30, 0x00	; 0
    21da:	21 f0       	breq	.+8      	; 0x21e4 <host_system_send+0x2a>
    (*driver->send_system)(report);
    21dc:	06 80       	ldd	r0, Z+6	; 0x06
    21de:	f7 81       	ldd	r31, Z+7	; 0x07
    21e0:	e0 2d       	mov	r30, r0
    21e2:	09 94       	ijmp
    21e4:	08 95       	ret

000021e6 <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    21e6:	20 91 5f 01 	lds	r18, 0x015F
    21ea:	30 91 60 01 	lds	r19, 0x0160
    21ee:	82 17       	cp	r24, r18
    21f0:	93 07       	cpc	r25, r19
    21f2:	71 f0       	breq	.+28     	; 0x2210 <host_consumer_send+0x2a>
    last_consumer_report = report;
    21f4:	90 93 60 01 	sts	0x0160, r25
    21f8:	80 93 5f 01 	sts	0x015F, r24

    if (!driver) return;
    21fc:	e0 91 63 01 	lds	r30, 0x0163
    2200:	f0 91 64 01 	lds	r31, 0x0164
    2204:	30 97       	sbiw	r30, 0x00	; 0
    2206:	21 f0       	breq	.+8      	; 0x2210 <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    2208:	00 84       	ldd	r0, Z+8	; 0x08
    220a:	f1 85       	ldd	r31, Z+9	; 0x09
    220c:	e0 2d       	mov	r30, r0
    220e:	09 94       	ijmp
    2210:	08 95       	ret

00002212 <matrix_setup>:
    return false;
}
#endif


__attribute__ ((weak)) void matrix_setup(void) {}
    2212:	08 95       	ret

00002214 <keyboard_setup>:
void keyboard_setup(void)
{
    matrix_setup();
    2214:	0c 94 09 11 	jmp	0x2212	; 0x2212 <matrix_setup>

00002218 <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    2218:	0e 94 75 1d 	call	0x3aea	; 0x3aea <timer_init>
    matrix_init();
    221c:	0e 94 27 07 	call	0xe4e	; 0xe4e <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    2220:	0c 94 96 1f 	jmp	0x3f2c	; 0x3f2c <bootmagic>

00002224 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    2224:	5f 92       	push	r5
    2226:	6f 92       	push	r6
    2228:	7f 92       	push	r7
    222a:	8f 92       	push	r8
    222c:	9f 92       	push	r9
    222e:	af 92       	push	r10
    2230:	bf 92       	push	r11
    2232:	cf 92       	push	r12
    2234:	df 92       	push	r13
    2236:	ef 92       	push	r14
    2238:	ff 92       	push	r15
    223a:	0f 93       	push	r16
    223c:	1f 93       	push	r17
    223e:	cf 93       	push	r28
    2240:	df 93       	push	r29
    2242:	00 d0       	rcall	.+0      	; 0x2244 <keyboard_task+0x20>
    2244:	00 d0       	rcall	.+0      	; 0x2246 <keyboard_task+0x22>
    2246:	1f 92       	push	r1
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    224c:	0e 94 62 07 	call	0xec4	; 0xec4 <matrix_scan>
    2250:	96 e6       	ldi	r25, 0x66	; 102
    2252:	c9 2e       	mov	r12, r25
    2254:	91 e0       	ldi	r25, 0x01	; 1
    2256:	d9 2e       	mov	r13, r25
    2258:	00 e0       	ldi	r16, 0x00	; 0
    225a:	10 e0       	ldi	r17, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    225c:	aa 24       	eor	r10, r10
    225e:	a3 94       	inc	r10
    2260:	b1 2c       	mov	r11, r1
    2262:	50 2e       	mov	r5, r16
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    2264:	80 2f       	mov	r24, r16
    2266:	0e 94 7d 08 	call	0x10fa	; 0x10fa <matrix_get_row>
    226a:	3c 01       	movw	r6, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    226c:	f6 01       	movw	r30, r12
    226e:	e1 90       	ld	r14, Z+
    2270:	f1 90       	ld	r15, Z+
    2272:	6f 01       	movw	r12, r30
    2274:	e8 26       	eor	r14, r24
    2276:	f9 26       	eor	r15, r25
        if (matrix_change) {
    2278:	e1 14       	cp	r14, r1
    227a:	f1 04       	cpc	r15, r1
    227c:	b1 f4       	brne	.+44     	; 0x22aa <keyboard_task+0x86>
    227e:	0f 5f       	subi	r16, 0xFF	; 255
    2280:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2282:	04 30       	cpi	r16, 0x04	; 4
    2284:	11 05       	cpc	r17, r1
    2286:	69 f7       	brne	.-38     	; 0x2262 <keyboard_task+0x3e>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    2288:	8f ef       	ldi	r24, 0xFF	; 255
    228a:	89 83       	std	Y+1, r24	; 0x01
    228c:	8a 83       	std	Y+2, r24	; 0x02
    228e:	1b 82       	std	Y+3, r1	; 0x03
    2290:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <timer_read>
    2294:	81 60       	ori	r24, 0x01	; 1
    2296:	78 2f       	mov	r23, r24
    2298:	9d 83       	std	Y+5, r25	; 0x05
    229a:	8c 83       	std	Y+4, r24	; 0x04
    229c:	49 81       	ldd	r20, Y+1	; 0x01
    229e:	5a 81       	ldd	r21, Y+2	; 0x02
    22a0:	6b 81       	ldd	r22, Y+3	; 0x03
    22a2:	8d 81       	ldd	r24, Y+5	; 0x05
    22a4:	0e 94 e5 11 	call	0x23ca	; 0x23ca <action_exec>
    22a8:	41 c0       	rjmp	.+130    	; 0x232c <keyboard_task+0x108>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    22aa:	80 91 c1 01 	lds	r24, 0x01C1
    22ae:	81 fd       	sbrc	r24, 1
    22b0:	0e 94 86 08 	call	0x110c	; 0x110c <matrix_print>
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    22b8:	45 01       	movw	r8, r10
    22ba:	02 2e       	mov	r0, r18
    22bc:	02 c0       	rjmp	.+4      	; 0x22c2 <keyboard_task+0x9e>
    22be:	88 0c       	add	r8, r8
    22c0:	99 1c       	adc	r9, r9
    22c2:	0a 94       	dec	r0
    22c4:	e2 f7       	brpl	.-8      	; 0x22be <keyboard_task+0x9a>
    22c6:	c4 01       	movw	r24, r8
    22c8:	8e 21       	and	r24, r14
    22ca:	9f 21       	and	r25, r15
    22cc:	89 2b       	or	r24, r25
    22ce:	41 f1       	breq	.+80     	; 0x2320 <keyboard_task+0xfc>
                    keyevent_t e = (keyevent_t){
    22d0:	29 83       	std	Y+1, r18	; 0x01
    22d2:	5a 82       	std	Y+2, r5	; 0x02
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    22d4:	68 20       	and	r6, r8
    22d6:	79 20       	and	r7, r9
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	67 28       	or	r6, r7
    22dc:	09 f4       	brne	.+2      	; 0x22e0 <keyboard_task+0xbc>
    22de:	80 e0       	ldi	r24, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    22e0:	8b 83       	std	Y+3, r24	; 0x03
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    22e2:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <timer_read>
    22e6:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    22e8:	78 2f       	mov	r23, r24
    22ea:	9d 83       	std	Y+5, r25	; 0x05
    22ec:	8c 83       	std	Y+4, r24	; 0x04
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    };
                    action_exec(e);
    22ee:	49 81       	ldd	r20, Y+1	; 0x01
    22f0:	5a 81       	ldd	r21, Y+2	; 0x02
    22f2:	6b 81       	ldd	r22, Y+3	; 0x03
    22f4:	8d 81       	ldd	r24, Y+5	; 0x05
    22f6:	0e 94 e5 11 	call	0x23ca	; 0x23ca <action_exec>
                    hook_matrix_change(e);
    22fa:	49 81       	ldd	r20, Y+1	; 0x01
    22fc:	5a 81       	ldd	r21, Y+2	; 0x02
    22fe:	6b 81       	ldd	r22, Y+3	; 0x03
    2300:	7c 81       	ldd	r23, Y+4	; 0x04
    2302:	8d 81       	ldd	r24, Y+5	; 0x05
    2304:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    2308:	f8 01       	movw	r30, r16
    230a:	ee 0f       	add	r30, r30
    230c:	ff 1f       	adc	r31, r31
    230e:	ea 59       	subi	r30, 0x9A	; 154
    2310:	fe 4f       	sbci	r31, 0xFE	; 254
    2312:	80 81       	ld	r24, Z
    2314:	91 81       	ldd	r25, Z+1	; 0x01
    2316:	88 25       	eor	r24, r8
    2318:	99 25       	eor	r25, r9
    231a:	91 83       	std	Z+1, r25	; 0x01
    231c:	80 83       	st	Z, r24
    231e:	06 c0       	rjmp	.+12     	; 0x232c <keyboard_task+0x108>
    2320:	2f 5f       	subi	r18, 0xFF	; 255
    2322:	3f 4f       	sbci	r19, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    2324:	2c 30       	cpi	r18, 0x0C	; 12
    2326:	31 05       	cpc	r19, r1
    2328:	39 f6       	brne	.-114    	; 0x22b8 <keyboard_task+0x94>
    232a:	a9 cf       	rjmp	.-174    	; 0x227e <keyboard_task+0x5a>
    // call with pseudo tick event when no real key event.
    action_exec(TICK);

MATRIX_LOOP_END:

    hook_keyboard_loop();
    232c:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    2330:	0e 94 1d 23 	call	0x463a	; 0x463a <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    2334:	10 91 65 01 	lds	r17, 0x0165
    2338:	0e 94 81 10 	call	0x2102	; 0x2102 <host_keyboard_leds>
    233c:	18 17       	cp	r17, r24
    233e:	71 f1       	breq	.+92     	; 0x239c <keyboard_task+0x178>
        led_status = host_keyboard_leds();
    2340:	0e 94 81 10 	call	0x2102	; 0x2102 <host_keyboard_leds>
    2344:	80 93 65 01 	sts	0x0165, r24
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    2348:	90 91 c1 01 	lds	r25, 0x01C1
    234c:	92 ff       	sbrs	r25, 2
    234e:	0e c0       	rjmp	.+28     	; 0x236c <keyboard_task+0x148>
    2350:	90 ff       	sbrs	r25, 0
    2352:	0c c0       	rjmp	.+24     	; 0x236c <keyboard_task+0x148>
    2354:	1f 92       	push	r1
    2356:	8f 93       	push	r24
    2358:	88 e2       	ldi	r24, 0x28	; 40
    235a:	94 e0       	ldi	r25, 0x04	; 4
    235c:	9f 93       	push	r25
    235e:	8f 93       	push	r24
    2360:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    236c:	80 91 65 01 	lds	r24, 0x0165
    }
}
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	df 91       	pop	r29
    237c:	cf 91       	pop	r28
    237e:	1f 91       	pop	r17
    2380:	0f 91       	pop	r16
    2382:	ff 90       	pop	r15
    2384:	ef 90       	pop	r14
    2386:	df 90       	pop	r13
    2388:	cf 90       	pop	r12
    238a:	bf 90       	pop	r11
    238c:	af 90       	pop	r10
    238e:	9f 90       	pop	r9
    2390:	8f 90       	pop	r8
    2392:	7f 90       	pop	r7
    2394:	6f 90       	pop	r6
    2396:	5f 90       	pop	r5

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
        hook_keyboard_leds_change(led_status);
    2398:	0c 94 0a 1d 	jmp	0x3a14	; 0x3a14 <hook_keyboard_leds_change>
    }
}
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	df 91       	pop	r29
    23a8:	cf 91       	pop	r28
    23aa:	1f 91       	pop	r17
    23ac:	0f 91       	pop	r16
    23ae:	ff 90       	pop	r15
    23b0:	ef 90       	pop	r14
    23b2:	df 90       	pop	r13
    23b4:	cf 90       	pop	r12
    23b6:	bf 90       	pop	r11
    23b8:	af 90       	pop	r10
    23ba:	9f 90       	pop	r9
    23bc:	8f 90       	pop	r8
    23be:	7f 90       	pop	r7
    23c0:	6f 90       	pop	r6
    23c2:	5f 90       	pop	r5
    23c4:	08 95       	ret

000023c6 <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    23c6:	0c 94 cd 08 	jmp	0x119a	; 0x119a <led_set>

000023ca <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    23ca:	cf 93       	push	r28
    23cc:	df 93       	push	r29
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
    23d2:	2b 97       	sbiw	r28, 0x0b	; 11
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	de bf       	out	0x3e, r29	; 62
    23da:	0f be       	out	0x3f, r0	; 63
    23dc:	cd bf       	out	0x3d, r28	; 61
    23de:	4f 83       	std	Y+7, r20	; 0x07
    23e0:	58 87       	std	Y+8, r21	; 0x08
    23e2:	69 87       	std	Y+9, r22	; 0x09
    23e4:	7a 87       	std	Y+10, r23	; 0x0a
    23e6:	8b 87       	std	Y+11, r24	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    23e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    23ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    23ec:	89 2b       	or	r24, r25
    23ee:	31 f0       	breq	.+12     	; 0x23fc <action_exec+0x32>
    23f0:	5f 3f       	cpi	r21, 0xFF	; 255
    23f2:	11 f0       	breq	.+4      	; 0x23f8 <action_exec+0x2e>
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	03 c0       	rjmp	.+6      	; 0x23fe <action_exec+0x34>
    23f8:	4f 3f       	cpi	r20, 0xFF	; 255
    23fa:	e1 f7       	brne	.-8      	; 0x23f4 <action_exec+0x2a>
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    if (!IS_NOEVENT(event)) {
    23fe:	81 11       	cpse	r24, r1
    2400:	07 c0       	rjmp	.+14     	; 0x2410 <action_exec+0x46>
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    2402:	4f 81       	ldd	r20, Y+7	; 0x07
    2404:	58 85       	ldd	r21, Y+8	; 0x08
    2406:	69 85       	ldd	r22, Y+9	; 0x09
    2408:	7a 85       	ldd	r23, Y+10	; 0x0a
    240a:	8b 85       	ldd	r24, Y+11	; 0x0b
    240c:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <hook_matrix_change>
    }

    keyrecord_t record = { .event = event };
    2410:	de 01       	movw	r26, r28
    2412:	11 96       	adiw	r26, 0x01	; 1
    2414:	86 e0       	ldi	r24, 0x06	; 6
    2416:	fd 01       	movw	r30, r26
    2418:	11 92       	st	Z+, r1
    241a:	8a 95       	dec	r24
    241c:	e9 f7       	brne	.-6      	; 0x2418 <action_exec+0x4e>
    241e:	85 e0       	ldi	r24, 0x05	; 5
    2420:	fe 01       	movw	r30, r28
    2422:	37 96       	adiw	r30, 0x07	; 7
    2424:	01 90       	ld	r0, Z+
    2426:	0d 92       	st	X+, r0
    2428:	8a 95       	dec	r24
    242a:	e1 f7       	brne	.-8      	; 0x2424 <action_exec+0x5a>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    242c:	49 81       	ldd	r20, Y+1	; 0x01
    242e:	5a 81       	ldd	r21, Y+2	; 0x02
    2430:	6b 81       	ldd	r22, Y+3	; 0x03
    2432:	7c 81       	ldd	r23, Y+4	; 0x04
    2434:	8d 81       	ldd	r24, Y+5	; 0x05
    2436:	9e 81       	ldd	r25, Y+6	; 0x06
    2438:	0e 94 42 19 	call	0x3284	; 0x3284 <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    243c:	2b 96       	adiw	r28, 0x0b	; 11
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	f8 94       	cli
    2442:	de bf       	out	0x3e, r29	; 62
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	cd bf       	out	0x3d, r28	; 61
    2448:	df 91       	pop	r29
    244a:	cf 91       	pop	r28
    244c:	08 95       	ret

0000244e <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    244e:	cf 93       	push	r28
    2450:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    2452:	88 23       	and	r24, r24
    2454:	09 f4       	brne	.+2      	; 0x2458 <register_code+0xa>
    2456:	cc c0       	rjmp	.+408    	; 0x25f0 <register_code+0x1a2>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2458:	82 38       	cpi	r24, 0x82	; 130
    245a:	59 f4       	brne	.+22     	; 0x2472 <register_code+0x24>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    245c:	0e 94 81 10 	call	0x2102	; 0x2102 <host_keyboard_leds>
    2460:	81 fd       	sbrc	r24, 1
    2462:	c6 c0       	rjmp	.+396    	; 0x25f0 <register_code+0x1a2>
#endif
        add_key(KC_CAPSLOCK);
    2464:	89 e3       	ldi	r24, 0x39	; 57
    2466:	0e 94 bf 1b 	call	0x377e	; 0x377e <add_key>
        send_keyboard_report();
    246a:	0e 94 a1 1c 	call	0x3942	; 0x3942 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    246e:	89 e3       	ldi	r24, 0x39	; 57
    2470:	0c c0       	rjmp	.+24     	; 0x248a <register_code+0x3c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    2472:	83 38       	cpi	r24, 0x83	; 131
    2474:	79 f4       	brne	.+30     	; 0x2494 <register_code+0x46>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    2476:	0e 94 81 10 	call	0x2102	; 0x2102 <host_keyboard_leds>
    247a:	80 fd       	sbrc	r24, 0
    247c:	b9 c0       	rjmp	.+370    	; 0x25f0 <register_code+0x1a2>
#endif
        add_key(KC_NUMLOCK);
    247e:	83 e5       	ldi	r24, 0x53	; 83
    2480:	0e 94 bf 1b 	call	0x377e	; 0x377e <add_key>
        send_keyboard_report();
    2484:	0e 94 a1 1c 	call	0x3942	; 0x3942 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    2488:	83 e5       	ldi	r24, 0x53	; 83
    248a:	0e 94 10 1c 	call	0x3820	; 0x3820 <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    248e:	cf 91       	pop	r28
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        del_key(KC_NUMLOCK);
        send_keyboard_report();
    2490:	0c 94 a1 1c 	jmp	0x3942	; 0x3942 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2494:	84 38       	cpi	r24, 0x84	; 132
    2496:	59 f4       	brne	.+22     	; 0x24ae <register_code+0x60>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    2498:	0e 94 81 10 	call	0x2102	; 0x2102 <host_keyboard_leds>
    249c:	82 fd       	sbrc	r24, 2
    249e:	a8 c0       	rjmp	.+336    	; 0x25f0 <register_code+0x1a2>
#endif
        add_key(KC_SCROLLLOCK);
    24a0:	87 e4       	ldi	r24, 0x47	; 71
    24a2:	0e 94 bf 1b 	call	0x377e	; 0x377e <add_key>
        send_keyboard_report();
    24a6:	0e 94 a1 1c 	call	0x3942	; 0x3942 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    24aa:	87 e4       	ldi	r24, 0x47	; 71
    24ac:	ee cf       	rjmp	.-36     	; 0x248a <register_code+0x3c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    24ae:	8c ef       	ldi	r24, 0xFC	; 252
    24b0:	8c 0f       	add	r24, r28
    24b2:	81 3a       	cpi	r24, 0xA1	; 161
    24b4:	48 f4       	brcc	.+18     	; 0x24c8 <register_code+0x7a>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    24b6:	8c 2f       	mov	r24, r28
    24b8:	0e 94 94 27 	call	0x4f28	; 0x4f28 <command_proc>
    24bc:	81 11       	cpse	r24, r1
    24be:	98 c0       	rjmp	.+304    	; 0x25f0 <register_code+0x1a2>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    24c0:	8c 2f       	mov	r24, r28
    24c2:	0e 94 bf 1b 	call	0x377e	; 0x377e <add_key>
    24c6:	e3 cf       	rjmp	.-58     	; 0x248e <register_code+0x40>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    24c8:	80 e2       	ldi	r24, 0x20	; 32
    24ca:	8c 0f       	add	r24, r28
    24cc:	88 30       	cpi	r24, 0x08	; 8
    24ce:	48 f4       	brcc	.+18     	; 0x24e2 <register_code+0x94>
        add_mods(MOD_BIT(code));
    24d0:	c7 70       	andi	r28, 0x07	; 7
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	01 c0       	rjmp	.+2      	; 0x24d8 <register_code+0x8a>
    24d6:	88 0f       	add	r24, r24
    24d8:	ca 95       	dec	r28
    24da:	ea f7       	brpl	.-6      	; 0x24d6 <register_code+0x88>
    24dc:	0e 94 65 1c 	call	0x38ca	; 0x38ca <add_mods>
    24e0:	d6 cf       	rjmp	.-84     	; 0x248e <register_code+0x40>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    24e2:	8b e5       	ldi	r24, 0x5B	; 91
    24e4:	8c 0f       	add	r24, r28
    24e6:	83 30       	cpi	r24, 0x03	; 3
    24e8:	78 f4       	brcc	.+30     	; 0x2508 <register_code+0xba>
        host_system_send(KEYCODE2SYSTEM(code));
    24ea:	c5 3a       	cpi	r28, 0xA5	; 165
    24ec:	29 f0       	breq	.+10     	; 0x24f8 <register_code+0xaa>
    24ee:	c6 3a       	cpi	r28, 0xA6	; 166
    24f0:	31 f4       	brne	.+12     	; 0x24fe <register_code+0xb0>
    24f2:	82 e8       	ldi	r24, 0x82	; 130
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	05 c0       	rjmp	.+10     	; 0x2502 <register_code+0xb4>
    24f8:	81 e8       	ldi	r24, 0x81	; 129
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	02 c0       	rjmp	.+4      	; 0x2502 <register_code+0xb4>
    24fe:	83 e8       	ldi	r24, 0x83	; 131
    2500:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2502:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    2504:	0c 94 dd 10 	jmp	0x21ba	; 0x21ba <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2508:	88 e5       	ldi	r24, 0x58	; 88
    250a:	8c 0f       	add	r24, r28
    250c:	85 31       	cpi	r24, 0x15	; 21
    250e:	08 f0       	brcs	.+2      	; 0x2512 <register_code+0xc4>
    2510:	6f c0       	rjmp	.+222    	; 0x25f0 <register_code+0x1a2>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2512:	c8 3a       	cpi	r28, 0xA8	; 168
    2514:	61 f1       	breq	.+88     	; 0x256e <register_code+0x120>
    2516:	c9 3a       	cpi	r28, 0xA9	; 169
    2518:	69 f1       	breq	.+90     	; 0x2574 <register_code+0x126>
    251a:	ca 3a       	cpi	r28, 0xAA	; 170
    251c:	71 f1       	breq	.+92     	; 0x257a <register_code+0x12c>
    251e:	cb 3a       	cpi	r28, 0xAB	; 171
    2520:	79 f1       	breq	.+94     	; 0x2580 <register_code+0x132>
    2522:	cc 3a       	cpi	r28, 0xAC	; 172
    2524:	81 f1       	breq	.+96     	; 0x2586 <register_code+0x138>
    2526:	cd 3a       	cpi	r28, 0xAD	; 173
    2528:	89 f1       	breq	.+98     	; 0x258c <register_code+0x13e>
    252a:	ce 3a       	cpi	r28, 0xAE	; 174
    252c:	91 f1       	breq	.+100    	; 0x2592 <register_code+0x144>
    252e:	cf 3a       	cpi	r28, 0xAF	; 175
    2530:	99 f1       	breq	.+102    	; 0x2598 <register_code+0x14a>
    2532:	c1 3b       	cpi	r28, 0xB1	; 177
    2534:	a1 f1       	breq	.+104    	; 0x259e <register_code+0x150>
    2536:	c0 3b       	cpi	r28, 0xB0	; 176
    2538:	a9 f1       	breq	.+106    	; 0x25a4 <register_code+0x156>
    253a:	c2 3b       	cpi	r28, 0xB2	; 178
    253c:	b1 f1       	breq	.+108    	; 0x25aa <register_code+0x15c>
    253e:	c3 3b       	cpi	r28, 0xB3	; 179
    2540:	b9 f1       	breq	.+110    	; 0x25b0 <register_code+0x162>
    2542:	c4 3b       	cpi	r28, 0xB4	; 180
    2544:	c1 f1       	breq	.+112    	; 0x25b6 <register_code+0x168>
    2546:	c5 3b       	cpi	r28, 0xB5	; 181
    2548:	c9 f1       	breq	.+114    	; 0x25bc <register_code+0x16e>
    254a:	c6 3b       	cpi	r28, 0xB6	; 182
    254c:	d1 f1       	breq	.+116    	; 0x25c2 <register_code+0x174>
    254e:	c7 3b       	cpi	r28, 0xB7	; 183
    2550:	d9 f1       	breq	.+118    	; 0x25c8 <register_code+0x17a>
    2552:	c8 3b       	cpi	r28, 0xB8	; 184
    2554:	e1 f1       	breq	.+120    	; 0x25ce <register_code+0x180>
    2556:	c9 3b       	cpi	r28, 0xB9	; 185
    2558:	e9 f1       	breq	.+122    	; 0x25d4 <register_code+0x186>
    255a:	ca 3b       	cpi	r28, 0xBA	; 186
    255c:	f1 f1       	breq	.+124    	; 0x25da <register_code+0x18c>
    255e:	cb 3b       	cpi	r28, 0xBB	; 187
    2560:	f9 f1       	breq	.+126    	; 0x25e0 <register_code+0x192>
    2562:	cc 3b       	cpi	r28, 0xBC	; 188
    2564:	09 f0       	breq	.+2      	; 0x2568 <register_code+0x11a>
    2566:	3f c0       	rjmp	.+126    	; 0x25e6 <register_code+0x198>
    2568:	8a e2       	ldi	r24, 0x2A	; 42
    256a:	92 e0       	ldi	r25, 0x02	; 2
    256c:	3e c0       	rjmp	.+124    	; 0x25ea <register_code+0x19c>
    256e:	82 ee       	ldi	r24, 0xE2	; 226
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	3b c0       	rjmp	.+118    	; 0x25ea <register_code+0x19c>
    2574:	89 ee       	ldi	r24, 0xE9	; 233
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	38 c0       	rjmp	.+112    	; 0x25ea <register_code+0x19c>
    257a:	8a ee       	ldi	r24, 0xEA	; 234
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	35 c0       	rjmp	.+106    	; 0x25ea <register_code+0x19c>
    2580:	85 eb       	ldi	r24, 0xB5	; 181
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	32 c0       	rjmp	.+100    	; 0x25ea <register_code+0x19c>
    2586:	86 eb       	ldi	r24, 0xB6	; 182
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	2f c0       	rjmp	.+94     	; 0x25ea <register_code+0x19c>
    258c:	83 eb       	ldi	r24, 0xB3	; 179
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	2c c0       	rjmp	.+88     	; 0x25ea <register_code+0x19c>
    2592:	84 eb       	ldi	r24, 0xB4	; 180
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	29 c0       	rjmp	.+82     	; 0x25ea <register_code+0x19c>
    2598:	87 eb       	ldi	r24, 0xB7	; 183
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	26 c0       	rjmp	.+76     	; 0x25ea <register_code+0x19c>
    259e:	8c ec       	ldi	r24, 0xCC	; 204
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	23 c0       	rjmp	.+70     	; 0x25ea <register_code+0x19c>
    25a4:	8d ec       	ldi	r24, 0xCD	; 205
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	20 c0       	rjmp	.+64     	; 0x25ea <register_code+0x19c>
    25aa:	83 e8       	ldi	r24, 0x83	; 131
    25ac:	91 e0       	ldi	r25, 0x01	; 1
    25ae:	1d c0       	rjmp	.+58     	; 0x25ea <register_code+0x19c>
    25b0:	8a e8       	ldi	r24, 0x8A	; 138
    25b2:	91 e0       	ldi	r25, 0x01	; 1
    25b4:	1a c0       	rjmp	.+52     	; 0x25ea <register_code+0x19c>
    25b6:	82 e9       	ldi	r24, 0x92	; 146
    25b8:	91 e0       	ldi	r25, 0x01	; 1
    25ba:	17 c0       	rjmp	.+46     	; 0x25ea <register_code+0x19c>
    25bc:	84 e9       	ldi	r24, 0x94	; 148
    25be:	91 e0       	ldi	r25, 0x01	; 1
    25c0:	14 c0       	rjmp	.+40     	; 0x25ea <register_code+0x19c>
    25c2:	81 e2       	ldi	r24, 0x21	; 33
    25c4:	92 e0       	ldi	r25, 0x02	; 2
    25c6:	11 c0       	rjmp	.+34     	; 0x25ea <register_code+0x19c>
    25c8:	83 e2       	ldi	r24, 0x23	; 35
    25ca:	92 e0       	ldi	r25, 0x02	; 2
    25cc:	0e c0       	rjmp	.+28     	; 0x25ea <register_code+0x19c>
    25ce:	84 e2       	ldi	r24, 0x24	; 36
    25d0:	92 e0       	ldi	r25, 0x02	; 2
    25d2:	0b c0       	rjmp	.+22     	; 0x25ea <register_code+0x19c>
    25d4:	85 e2       	ldi	r24, 0x25	; 37
    25d6:	92 e0       	ldi	r25, 0x02	; 2
    25d8:	08 c0       	rjmp	.+16     	; 0x25ea <register_code+0x19c>
    25da:	86 e2       	ldi	r24, 0x26	; 38
    25dc:	92 e0       	ldi	r25, 0x02	; 2
    25de:	05 c0       	rjmp	.+10     	; 0x25ea <register_code+0x19c>
    25e0:	87 e2       	ldi	r24, 0x27	; 39
    25e2:	92 e0       	ldi	r25, 0x02	; 2
    25e4:	02 c0       	rjmp	.+4      	; 0x25ea <register_code+0x19c>
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    25ea:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    25ec:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <host_consumer_send>
    }
}
    25f0:	cf 91       	pop	r28
    25f2:	08 95       	ret

000025f4 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    25f4:	88 23       	and	r24, r24
    25f6:	09 f4       	brne	.+2      	; 0x25fa <unregister_code+0x6>
    25f8:	4b c0       	rjmp	.+150    	; 0x2690 <unregister_code+0x9c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    25fa:	82 38       	cpi	r24, 0x82	; 130
    25fc:	59 f4       	brne	.+22     	; 0x2614 <unregister_code+0x20>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    25fe:	0e 94 81 10 	call	0x2102	; 0x2102 <host_keyboard_leds>
    2602:	81 ff       	sbrs	r24, 1
    2604:	45 c0       	rjmp	.+138    	; 0x2690 <unregister_code+0x9c>
#endif
        add_key(KC_CAPSLOCK);
    2606:	89 e3       	ldi	r24, 0x39	; 57
    2608:	0e 94 bf 1b 	call	0x377e	; 0x377e <add_key>
        send_keyboard_report();
    260c:	0e 94 a1 1c 	call	0x3942	; 0x3942 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    2610:	89 e3       	ldi	r24, 0x39	; 57
    2612:	0c c0       	rjmp	.+24     	; 0x262c <unregister_code+0x38>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    2614:	83 38       	cpi	r24, 0x83	; 131
    2616:	71 f4       	brne	.+28     	; 0x2634 <unregister_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    2618:	0e 94 81 10 	call	0x2102	; 0x2102 <host_keyboard_leds>
    261c:	80 ff       	sbrs	r24, 0
    261e:	38 c0       	rjmp	.+112    	; 0x2690 <unregister_code+0x9c>
#endif
        add_key(KC_NUMLOCK);
    2620:	83 e5       	ldi	r24, 0x53	; 83
    2622:	0e 94 bf 1b 	call	0x377e	; 0x377e <add_key>
        send_keyboard_report();
    2626:	0e 94 a1 1c 	call	0x3942	; 0x3942 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    262a:	83 e5       	ldi	r24, 0x53	; 83
    262c:	0e 94 10 1c 	call	0x3820	; 0x3820 <del_key>
        send_keyboard_report();
    2630:	0c 94 a1 1c 	jmp	0x3942	; 0x3942 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2634:	84 38       	cpi	r24, 0x84	; 132
    2636:	59 f4       	brne	.+22     	; 0x264e <unregister_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    2638:	0e 94 81 10 	call	0x2102	; 0x2102 <host_keyboard_leds>
    263c:	82 ff       	sbrs	r24, 2
    263e:	28 c0       	rjmp	.+80     	; 0x2690 <unregister_code+0x9c>
#endif
        add_key(KC_SCROLLLOCK);
    2640:	87 e4       	ldi	r24, 0x47	; 71
    2642:	0e 94 bf 1b 	call	0x377e	; 0x377e <add_key>
        send_keyboard_report();
    2646:	0e 94 a1 1c 	call	0x3942	; 0x3942 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    264a:	87 e4       	ldi	r24, 0x47	; 71
    264c:	ef cf       	rjmp	.-34     	; 0x262c <unregister_code+0x38>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    264e:	9c ef       	ldi	r25, 0xFC	; 252
    2650:	98 0f       	add	r25, r24
    2652:	91 3a       	cpi	r25, 0xA1	; 161
    2654:	58 f3       	brcs	.-42     	; 0x262c <unregister_code+0x38>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    2656:	90 e2       	ldi	r25, 0x20	; 32
    2658:	98 0f       	add	r25, r24
    265a:	98 30       	cpi	r25, 0x08	; 8
    265c:	50 f4       	brcc	.+20     	; 0x2672 <unregister_code+0x7e>
        del_mods(MOD_BIT(code));
    265e:	87 70       	andi	r24, 0x07	; 7
    2660:	91 e0       	ldi	r25, 0x01	; 1
    2662:	01 c0       	rjmp	.+2      	; 0x2666 <unregister_code+0x72>
    2664:	99 0f       	add	r25, r25
    2666:	8a 95       	dec	r24
    2668:	ea f7       	brpl	.-6      	; 0x2664 <unregister_code+0x70>
    266a:	89 2f       	mov	r24, r25
    266c:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <del_mods>
    2670:	df cf       	rjmp	.-66     	; 0x2630 <unregister_code+0x3c>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2672:	9b e5       	ldi	r25, 0x5B	; 91
    2674:	98 0f       	add	r25, r24
    2676:	93 30       	cpi	r25, 0x03	; 3
    2678:	20 f4       	brcc	.+8      	; 0x2682 <unregister_code+0x8e>
        host_system_send(0);
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	0c 94 dd 10 	jmp	0x21ba	; 0x21ba <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2682:	88 5a       	subi	r24, 0xA8	; 168
    2684:	85 31       	cpi	r24, 0x15	; 21
    2686:	20 f4       	brcc	.+8      	; 0x2690 <unregister_code+0x9c>
        host_consumer_send(0);
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <host_consumer_send>
    2690:	08 95       	ret

00002692 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    2692:	88 23       	and	r24, r24
    2694:	21 f0       	breq	.+8      	; 0x269e <register_mods+0xc>
        add_mods(mods);
    2696:	0e 94 65 1c 	call	0x38ca	; 0x38ca <add_mods>
        send_keyboard_report();
    269a:	0c 94 a1 1c 	jmp	0x3942	; 0x3942 <send_keyboard_report>
    269e:	08 95       	ret

000026a0 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    26a0:	88 23       	and	r24, r24
    26a2:	21 f0       	breq	.+8      	; 0x26ac <unregister_mods+0xc>
        del_mods(mods);
    26a4:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <del_mods>
        send_keyboard_report();
    26a8:	0c 94 a1 1c 	jmp	0x3942	; 0x3942 <send_keyboard_report>
    26ac:	08 95       	ret

000026ae <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    26ae:	cf 92       	push	r12
    26b0:	df 92       	push	r13
    26b2:	ef 92       	push	r14
    26b4:	ff 92       	push	r15
    26b6:	0f 93       	push	r16
    26b8:	1f 93       	push	r17
    26ba:	cf 93       	push	r28
    26bc:	df 93       	push	r29
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
    26c2:	28 97       	sbiw	r28, 0x08	; 8
    26c4:	0f b6       	in	r0, 0x3f	; 63
    26c6:	f8 94       	cli
    26c8:	de bf       	out	0x3e, r29	; 62
    26ca:	0f be       	out	0x3f, r0	; 63
    26cc:	cd bf       	out	0x3d, r28	; 61
    26ce:	8c 01       	movw	r16, r24
    keyevent_t event = record->event;
    26d0:	85 e0       	ldi	r24, 0x05	; 5
    26d2:	f8 01       	movw	r30, r16
    26d4:	de 01       	movw	r26, r28
    26d6:	11 96       	adiw	r26, 0x01	; 1
    26d8:	01 90       	ld	r0, Z+
    26da:	0d 92       	st	X+, r0
    26dc:	8a 95       	dec	r24
    26de:	e1 f7       	brne	.-8      	; 0x26d8 <process_action+0x2a>
    26e0:	f8 01       	movw	r30, r16
    26e2:	40 81       	ld	r20, Z
    26e4:	31 81       	ldd	r19, Z+1	; 0x01
    26e6:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    26e8:	25 81       	ldd	r18, Z+5	; 0x05
    26ea:	22 95       	swap	r18
    26ec:	2f 70       	andi	r18, 0x0F	; 15
    26ee:	83 81       	ldd	r24, Z+3	; 0x03
    26f0:	94 81       	ldd	r25, Z+4	; 0x04
    26f2:	89 2b       	or	r24, r25
    26f4:	31 f0       	breq	.+12     	; 0x2702 <process_action+0x54>
    26f6:	3f 3f       	cpi	r19, 0xFF	; 255
    26f8:	31 f4       	brne	.+12     	; 0x2706 <process_action+0x58>
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	4f 3f       	cpi	r20, 0xFF	; 255
    26fe:	19 f4       	brne	.+6      	; 0x2706 <process_action+0x58>
    2700:	03 c0       	rjmp	.+6      	; 0x2708 <process_action+0x5a>
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	01 c0       	rjmp	.+2      	; 0x2708 <process_action+0x5a>
    2706:	80 e0       	ldi	r24, 0x00	; 0
#endif

    if (IS_NOEVENT(event)) { return; }
    2708:	80 fd       	sbrc	r24, 0
    270a:	cf c2       	rjmp	.+1438   	; 0x2caa <process_action+0x5fc>

    action_t action = layer_switch_get_action(event.key);
    270c:	49 83       	std	Y+1, r20	; 0x01
    270e:	3a 83       	std	Y+2, r19	; 0x02
    2710:	89 81       	ldd	r24, Y+1	; 0x01
    2712:	9a 81       	ldd	r25, Y+2	; 0x02
    2714:	2f 83       	std	Y+7, r18	; 0x07
    2716:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <layer_switch_get_action>
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    271a:	9e 83       	std	Y+6, r25	; 0x06
    271c:	88 87       	std	Y+8, r24	; 0x08
    271e:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2722:	0e 94 a4 1a 	call	0x3548	; 0x3548 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    2726:	4e 81       	ldd	r20, Y+6	; 0x06
    2728:	e4 2f       	mov	r30, r20
    272a:	e2 95       	swap	r30
    272c:	ef 70       	andi	r30, 0x0F	; 15
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	e0 5a       	subi	r30, 0xA0	; 160
    2732:	ff 4f       	sbci	r31, 0xFF	; 255
    2734:	2f 81       	ldd	r18, Y+7	; 0x07
    2736:	68 85       	ldd	r22, Y+8	; 0x08
    2738:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    273c:	84 2f       	mov	r24, r20
    273e:	80 7f       	andi	r24, 0xF0	; 240
    2740:	14 2f       	mov	r17, r20
    2742:	1f 70       	andi	r17, 0x0F	; 15
    2744:	88 23       	and	r24, r24
    2746:	11 f0       	breq	.+4      	; 0x274c <process_action+0x9e>
    2748:	12 95       	swap	r17
    274a:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    274c:	ff 20       	and	r15, r15
    274e:	59 f0       	breq	.+22     	; 0x2766 <process_action+0xb8>
                    if (mods) {
    2750:	11 23       	and	r17, r17
    2752:	09 f4       	brne	.+2      	; 0x2756 <process_action+0xa8>
    2754:	5f c2       	rjmp	.+1214   	; 0x2c14 <process_action+0x566>
                        add_weak_mods(mods);
    2756:	81 2f       	mov	r24, r17
    2758:	68 87       	std	Y+8, r22	; 0x08
    275a:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <add_weak_mods>
                        send_keyboard_report();
    275e:	0e 94 a1 1c 	call	0x3942	; 0x3942 <send_keyboard_report>
    2762:	68 85       	ldd	r22, Y+8	; 0x08
    2764:	57 c2       	rjmp	.+1198   	; 0x2c14 <process_action+0x566>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    2766:	86 2f       	mov	r24, r22
    2768:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <unregister_code>
                    if (mods) {
    276c:	11 23       	and	r17, r17
    276e:	09 f4       	brne	.+2      	; 0x2772 <process_action+0xc4>
    2770:	9c c2       	rjmp	.+1336   	; 0x2caa <process_action+0x5fc>
                        del_weak_mods(mods);
    2772:	81 2f       	mov	r24, r17
    2774:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    2778:	28 96       	adiw	r28, 0x08	; 8
    277a:	0f b6       	in	r0, 0x3f	; 63
    277c:	f8 94       	cli
    277e:	de bf       	out	0x3e, r29	; 62
    2780:	0f be       	out	0x3f, r0	; 63
    2782:	cd bf       	out	0x3d, r28	; 61
    2784:	df 91       	pop	r29
    2786:	cf 91       	pop	r28
    2788:	1f 91       	pop	r17
    278a:	0f 91       	pop	r16
    278c:	ff 90       	pop	r15
    278e:	ef 90       	pop	r14
    2790:	df 90       	pop	r13
    2792:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    2794:	0c 94 a1 1c 	jmp	0x3942	; 0x3942 <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    2798:	84 2f       	mov	r24, r20
    279a:	80 7f       	andi	r24, 0xF0	; 240
    279c:	94 2f       	mov	r25, r20
    279e:	9f 70       	andi	r25, 0x0F	; 15
    27a0:	e9 2e       	mov	r14, r25
    27a2:	80 32       	cpi	r24, 0x20	; 32
    27a4:	19 f0       	breq	.+6      	; 0x27ac <process_action+0xfe>
    27a6:	e2 94       	swap	r14
    27a8:	80 ef       	ldi	r24, 0xF0	; 240
    27aa:	e8 22       	and	r14, r24
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    27ac:	66 23       	and	r22, r22
    27ae:	19 f0       	breq	.+6      	; 0x27b6 <process_action+0x108>
    27b0:	61 30       	cpi	r22, 0x01	; 1
    27b2:	01 f1       	breq	.+64     	; 0x27f4 <process_action+0x146>
    27b4:	29 c0       	rjmp	.+82     	; 0x2808 <process_action+0x15a>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    27b6:	ff 20       	and	r15, r15
    27b8:	a9 f0       	breq	.+42     	; 0x27e4 <process_action+0x136>
                            if (tap_count == 0) {
                                register_mods(mods);
    27ba:	8e 2d       	mov	r24, r14
                switch (action.layer_tap.code) {
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
                            if (tap_count == 0) {
    27bc:	22 23       	and	r18, r18
    27be:	49 f1       	breq	.+82     	; 0x2812 <process_action+0x164>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    27c0:	21 30       	cpi	r18, 0x01	; 1
    27c2:	39 f5       	brne	.+78     	; 0x2812 <process_action+0x164>
            break;
#endif
        default:
            break;
    }
}
    27c4:	28 96       	adiw	r28, 0x08	; 8
    27c6:	0f b6       	in	r0, 0x3f	; 63
    27c8:	f8 94       	cli
    27ca:	de bf       	out	0x3e, r29	; 62
    27cc:	0f be       	out	0x3f, r0	; 63
    27ce:	cd bf       	out	0x3d, r28	; 61
    27d0:	df 91       	pop	r29
    27d2:	cf 91       	pop	r28
    27d4:	1f 91       	pop	r17
    27d6:	0f 91       	pop	r16
    27d8:	ff 90       	pop	r15
    27da:	ef 90       	pop	r14
    27dc:	df 90       	pop	r13
    27de:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    27e0:	0c 94 88 1c 	jmp	0x3910	; 0x3910 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    27e4:	22 23       	and	r18, r18
    27e6:	19 f0       	breq	.+6      	; 0x27ee <process_action+0x140>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    27e8:	21 30       	cpi	r18, 0x01	; 1
    27ea:	09 f4       	brne	.+2      	; 0x27ee <process_action+0x140>
    27ec:	5e c2       	rjmp	.+1212   	; 0x2caa <process_action+0x5fc>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    27ee:	0e 94 8b 1c 	call	0x3916	; 0x3916 <clear_oneshot_mods>
    27f2:	2c c0       	rjmp	.+88     	; 0x284c <process_action+0x19e>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    27f4:	ff 20       	and	r15, r15
    27f6:	e9 f0       	breq	.+58     	; 0x2832 <process_action+0x184>
                            if (tap_count <= TAPPING_TOGGLE) {
    27f8:	26 30       	cpi	r18, 0x06	; 6
    27fa:	08 f0       	brcs	.+2      	; 0x27fe <process_action+0x150>
    27fc:	56 c2       	rjmp	.+1196   	; 0x2caa <process_action+0x5fc>
                                if (mods & get_mods()) {
    27fe:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <get_mods>
    2802:	8e 21       	and	r24, r14
    2804:	29 f0       	breq	.+10     	; 0x2810 <process_action+0x162>
    2806:	22 c0       	rjmp	.+68     	; 0x284c <process_action+0x19e>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    2808:	ff 20       	and	r15, r15
    280a:	f1 f0       	breq	.+60     	; 0x2848 <process_action+0x19a>
                            if (tap_count > 0) {
    280c:	21 11       	cpse	r18, r1
    280e:	15 c0       	rjmp	.+42     	; 0x283a <process_action+0x18c>
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    2810:	8e 2d       	mov	r24, r14
            break;
#endif
        default:
            break;
    }
}
    2812:	28 96       	adiw	r28, 0x08	; 8
    2814:	0f b6       	in	r0, 0x3f	; 63
    2816:	f8 94       	cli
    2818:	de bf       	out	0x3e, r29	; 62
    281a:	0f be       	out	0x3f, r0	; 63
    281c:	cd bf       	out	0x3d, r28	; 61
    281e:	df 91       	pop	r29
    2820:	cf 91       	pop	r28
    2822:	1f 91       	pop	r17
    2824:	0f 91       	pop	r16
    2826:	ff 90       	pop	r15
    2828:	ef 90       	pop	r14
    282a:	df 90       	pop	r13
    282c:	cf 90       	pop	r12
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    282e:	0c 94 49 13 	jmp	0x2692	; 0x2692 <register_mods>
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    2832:	25 30       	cpi	r18, 0x05	; 5
    2834:	08 f0       	brcs	.+2      	; 0x2838 <process_action+0x18a>
    2836:	39 c2       	rjmp	.+1138   	; 0x2caa <process_action+0x5fc>
    2838:	09 c0       	rjmp	.+18     	; 0x284c <process_action+0x19e>
                        }
                        break;
                    default:
                        if (event.pressed) {
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
    283a:	f8 01       	movw	r30, r16
    283c:	85 81       	ldd	r24, Z+5	; 0x05
    283e:	80 ff       	sbrs	r24, 0
    2840:	e9 c1       	rjmp	.+978    	; 0x2c14 <process_action+0x566>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    2842:	8f 70       	andi	r24, 0x0F	; 15
    2844:	85 83       	std	Z+5, r24	; 0x05
    2846:	e4 cf       	rjmp	.-56     	; 0x2810 <process_action+0x162>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    2848:	21 11       	cpse	r18, r1
    284a:	f8 c1       	rjmp	.+1008   	; 0x2c3c <process_action+0x58e>
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    284c:	8e 2d       	mov	r24, r14
    284e:	66 c1       	rjmp	.+716    	; 0x2b1c <process_action+0x46e>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    2850:	24 2f       	mov	r18, r20
    2852:	26 95       	lsr	r18
    2854:	26 95       	lsr	r18
    2856:	23 70       	andi	r18, 0x03	; 3
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	21 15       	cp	r18, r1
    285c:	31 05       	cpc	r19, r1
    285e:	21 f0       	breq	.+8      	; 0x2868 <process_action+0x1ba>
    2860:	21 30       	cpi	r18, 0x01	; 1
    2862:	31 05       	cpc	r19, r1
    2864:	c9 f0       	breq	.+50     	; 0x2898 <process_action+0x1ea>
    2866:	21 c2       	rjmp	.+1090   	; 0x2caa <process_action+0x5fc>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    2868:	ff 20       	and	r15, r15
    286a:	21 f0       	breq	.+8      	; 0x2874 <process_action+0x1c6>
                        host_system_send(action.usage.code);
    286c:	86 2f       	mov	r24, r22
    286e:	94 2f       	mov	r25, r20
    2870:	93 70       	andi	r25, 0x03	; 3
    2872:	02 c0       	rjmp	.+4      	; 0x2878 <process_action+0x1ca>
                    } else {
                        host_system_send(0);
    2874:	80 e0       	ldi	r24, 0x00	; 0
    2876:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2878:	28 96       	adiw	r28, 0x08	; 8
    287a:	0f b6       	in	r0, 0x3f	; 63
    287c:	f8 94       	cli
    287e:	de bf       	out	0x3e, r29	; 62
    2880:	0f be       	out	0x3f, r0	; 63
    2882:	cd bf       	out	0x3d, r28	; 61
    2884:	df 91       	pop	r29
    2886:	cf 91       	pop	r28
    2888:	1f 91       	pop	r17
    288a:	0f 91       	pop	r16
    288c:	ff 90       	pop	r15
    288e:	ef 90       	pop	r14
    2890:	df 90       	pop	r13
    2892:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    2894:	0c 94 dd 10 	jmp	0x21ba	; 0x21ba <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    2898:	ff 20       	and	r15, r15
    289a:	21 f0       	breq	.+8      	; 0x28a4 <process_action+0x1f6>
                        host_consumer_send(action.usage.code);
    289c:	86 2f       	mov	r24, r22
    289e:	94 2f       	mov	r25, r20
    28a0:	93 70       	andi	r25, 0x03	; 3
    28a2:	02 c0       	rjmp	.+4      	; 0x28a8 <process_action+0x1fa>
                    } else {
                        host_consumer_send(0);
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    28a8:	28 96       	adiw	r28, 0x08	; 8
    28aa:	0f b6       	in	r0, 0x3f	; 63
    28ac:	f8 94       	cli
    28ae:	de bf       	out	0x3e, r29	; 62
    28b0:	0f be       	out	0x3f, r0	; 63
    28b2:	cd bf       	out	0x3d, r28	; 61
    28b4:	df 91       	pop	r29
    28b6:	cf 91       	pop	r28
    28b8:	1f 91       	pop	r17
    28ba:	0f 91       	pop	r16
    28bc:	ff 90       	pop	r15
    28be:	ef 90       	pop	r14
    28c0:	df 90       	pop	r13
    28c2:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    28c4:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    28c8:	86 2f       	mov	r24, r22
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    28ca:	ff 20       	and	r15, r15
    28cc:	19 f0       	breq	.+6      	; 0x28d4 <process_action+0x226>
                mousekey_on(action.key.code);
    28ce:	0e 94 a3 21 	call	0x4346	; 0x4346 <mousekey_on>
    28d2:	02 c0       	rjmp	.+4      	; 0x28d8 <process_action+0x22a>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    28d4:	0e 94 0b 22 	call	0x4416	; 0x4416 <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    28d8:	28 96       	adiw	r28, 0x08	; 8
    28da:	0f b6       	in	r0, 0x3f	; 63
    28dc:	f8 94       	cli
    28de:	de bf       	out	0x3e, r29	; 62
    28e0:	0f be       	out	0x3f, r0	; 63
    28e2:	cd bf       	out	0x3d, r28	; 61
    28e4:	df 91       	pop	r29
    28e6:	cf 91       	pop	r28
    28e8:	1f 91       	pop	r17
    28ea:	0f 91       	pop	r16
    28ec:	ff 90       	pop	r15
    28ee:	ef 90       	pop	r14
    28f0:	df 90       	pop	r13
    28f2:	cf 90       	pop	r12
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    28f4:	0c 94 90 22 	jmp	0x4520	; 0x4520 <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    28f8:	84 2f       	mov	r24, r20
    28fa:	83 70       	andi	r24, 0x03	; 3
    28fc:	09 f0       	breq	.+2      	; 0x2900 <process_action+0x252>
    28fe:	76 c0       	rjmp	.+236    	; 0x29ec <process_action+0x33e>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    2900:	f1 10       	cpse	r15, r1
    2902:	d3 c1       	rjmp	.+934    	; 0x2caa <process_action+0x5fc>
                    uint8_t shift = action.layer_bitop.part*4;
    2904:	26 2f       	mov	r18, r22
    2906:	22 95       	swap	r18
    2908:	26 95       	lsr	r18
    290a:	27 70       	andi	r18, 0x07	; 7
    290c:	22 0f       	add	r18, r18
    290e:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2910:	86 2f       	mov	r24, r22
    2912:	8f 70       	andi	r24, 0x0F	; 15
    2914:	c8 2e       	mov	r12, r24
    2916:	d1 2c       	mov	r13, r1
    2918:	e1 2c       	mov	r14, r1
    291a:	f1 2c       	mov	r15, r1
    291c:	02 2e       	mov	r0, r18
    291e:	04 c0       	rjmp	.+8      	; 0x2928 <process_action+0x27a>
    2920:	cc 0c       	add	r12, r12
    2922:	dd 1c       	adc	r13, r13
    2924:	ee 1c       	adc	r14, r14
    2926:	ff 1c       	adc	r15, r15
    2928:	0a 94       	dec	r0
    292a:	d2 f7       	brpl	.-12     	; 0x2920 <process_action+0x272>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    292c:	64 ff       	sbrs	r22, 4
    292e:	10 c0       	rjmp	.+32     	; 0x2950 <process_action+0x2a2>
    2930:	6f e0       	ldi	r22, 0x0F	; 15
    2932:	70 e0       	ldi	r23, 0x00	; 0
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	04 c0       	rjmp	.+8      	; 0x2942 <process_action+0x294>
    293a:	66 0f       	add	r22, r22
    293c:	77 1f       	adc	r23, r23
    293e:	88 1f       	adc	r24, r24
    2940:	99 1f       	adc	r25, r25
    2942:	2a 95       	dec	r18
    2944:	d2 f7       	brpl	.-12     	; 0x293a <process_action+0x28c>
    2946:	60 95       	com	r22
    2948:	70 95       	com	r23
    294a:	80 95       	com	r24
    294c:	90 95       	com	r25
    294e:	03 c0       	rjmp	.+6      	; 0x2956 <process_action+0x2a8>
    2950:	60 e0       	ldi	r22, 0x00	; 0
    2952:	70 e0       	ldi	r23, 0x00	; 0
    2954:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2956:	24 2f       	mov	r18, r20
    2958:	26 95       	lsr	r18
    295a:	26 95       	lsr	r18
    295c:	23 70       	andi	r18, 0x03	; 3
    295e:	42 2f       	mov	r20, r18
    2960:	50 e0       	ldi	r21, 0x00	; 0
    2962:	42 30       	cpi	r20, 0x02	; 2
    2964:	51 05       	cpc	r21, r1
    2966:	d1 f0       	breq	.+52     	; 0x299c <process_action+0x2ee>
    2968:	43 30       	cpi	r20, 0x03	; 3
    296a:	51 05       	cpc	r21, r1
    296c:	59 f1       	breq	.+86     	; 0x29c4 <process_action+0x316>
    296e:	6c 29       	or	r22, r12
    2970:	7d 29       	or	r23, r13
    2972:	8e 29       	or	r24, r14
    2974:	9f 29       	or	r25, r15
    2976:	41 30       	cpi	r20, 0x01	; 1
    2978:	51 05       	cpc	r21, r1
    297a:	41 f1       	breq	.+80     	; 0x29cc <process_action+0x31e>
            break;
#endif
        default:
            break;
    }
}
    297c:	28 96       	adiw	r28, 0x08	; 8
    297e:	0f b6       	in	r0, 0x3f	; 63
    2980:	f8 94       	cli
    2982:	de bf       	out	0x3e, r29	; 62
    2984:	0f be       	out	0x3f, r0	; 63
    2986:	cd bf       	out	0x3d, r28	; 61
    2988:	df 91       	pop	r29
    298a:	cf 91       	pop	r28
    298c:	1f 91       	pop	r17
    298e:	0f 91       	pop	r16
    2990:	ff 90       	pop	r15
    2992:	ef 90       	pop	r14
    2994:	df 90       	pop	r13
    2996:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2998:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    299c:	6c 29       	or	r22, r12
    299e:	7d 29       	or	r23, r13
    29a0:	8e 29       	or	r24, r14
    29a2:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    29a4:	28 96       	adiw	r28, 0x08	; 8
    29a6:	0f b6       	in	r0, 0x3f	; 63
    29a8:	f8 94       	cli
    29aa:	de bf       	out	0x3e, r29	; 62
    29ac:	0f be       	out	0x3f, r0	; 63
    29ae:	cd bf       	out	0x3d, r28	; 61
    29b0:	df 91       	pop	r29
    29b2:	cf 91       	pop	r28
    29b4:	1f 91       	pop	r17
    29b6:	0f 91       	pop	r16
    29b8:	ff 90       	pop	r15
    29ba:	ef 90       	pop	r14
    29bc:	df 90       	pop	r13
    29be:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    29c0:	0c 94 cb 1a 	jmp	0x3596	; 0x3596 <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    29c4:	0e 94 b9 1a 	call	0x3572	; 0x3572 <default_layer_and>
    29c8:	c7 01       	movw	r24, r14
    29ca:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    29cc:	28 96       	adiw	r28, 0x08	; 8
    29ce:	0f b6       	in	r0, 0x3f	; 63
    29d0:	f8 94       	cli
    29d2:	de bf       	out	0x3e, r29	; 62
    29d4:	0f be       	out	0x3f, r0	; 63
    29d6:	cd bf       	out	0x3d, r28	; 61
    29d8:	df 91       	pop	r29
    29da:	cf 91       	pop	r28
    29dc:	1f 91       	pop	r17
    29de:	0f 91       	pop	r16
    29e0:	ff 90       	pop	r15
    29e2:	ef 90       	pop	r14
    29e4:	df 90       	pop	r13
    29e6:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    29e8:	0c 94 a7 1a 	jmp	0x354e	; 0x354e <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    29ec:	ff 20       	and	r15, r15
    29ee:	19 f0       	breq	.+6      	; 0x29f6 <process_action+0x348>
    29f0:	84 2f       	mov	r24, r20
    29f2:	81 70       	andi	r24, 0x01	; 1
    29f4:	01 c0       	rjmp	.+2      	; 0x29f8 <process_action+0x34a>
    29f6:	86 95       	lsr	r24
    29f8:	88 23       	and	r24, r24
    29fa:	09 f4       	brne	.+2      	; 0x29fe <process_action+0x350>
    29fc:	56 c1       	rjmp	.+684    	; 0x2caa <process_action+0x5fc>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    29fe:	26 2f       	mov	r18, r22
    2a00:	22 95       	swap	r18
    2a02:	26 95       	lsr	r18
    2a04:	27 70       	andi	r18, 0x07	; 7
    2a06:	22 0f       	add	r18, r18
    2a08:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2a0a:	86 2f       	mov	r24, r22
    2a0c:	8f 70       	andi	r24, 0x0F	; 15
    2a0e:	c8 2e       	mov	r12, r24
    2a10:	d1 2c       	mov	r13, r1
    2a12:	e1 2c       	mov	r14, r1
    2a14:	f1 2c       	mov	r15, r1
    2a16:	02 2e       	mov	r0, r18
    2a18:	04 c0       	rjmp	.+8      	; 0x2a22 <process_action+0x374>
    2a1a:	cc 0c       	add	r12, r12
    2a1c:	dd 1c       	adc	r13, r13
    2a1e:	ee 1c       	adc	r14, r14
    2a20:	ff 1c       	adc	r15, r15
    2a22:	0a 94       	dec	r0
    2a24:	d2 f7       	brpl	.-12     	; 0x2a1a <process_action+0x36c>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2a26:	64 ff       	sbrs	r22, 4
    2a28:	10 c0       	rjmp	.+32     	; 0x2a4a <process_action+0x39c>
    2a2a:	6f e0       	ldi	r22, 0x0F	; 15
    2a2c:	70 e0       	ldi	r23, 0x00	; 0
    2a2e:	80 e0       	ldi	r24, 0x00	; 0
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	04 c0       	rjmp	.+8      	; 0x2a3c <process_action+0x38e>
    2a34:	66 0f       	add	r22, r22
    2a36:	77 1f       	adc	r23, r23
    2a38:	88 1f       	adc	r24, r24
    2a3a:	99 1f       	adc	r25, r25
    2a3c:	2a 95       	dec	r18
    2a3e:	d2 f7       	brpl	.-12     	; 0x2a34 <process_action+0x386>
    2a40:	60 95       	com	r22
    2a42:	70 95       	com	r23
    2a44:	80 95       	com	r24
    2a46:	90 95       	com	r25
    2a48:	03 c0       	rjmp	.+6      	; 0x2a50 <process_action+0x3a2>
    2a4a:	60 e0       	ldi	r22, 0x00	; 0
    2a4c:	70 e0       	ldi	r23, 0x00	; 0
    2a4e:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2a50:	24 2f       	mov	r18, r20
    2a52:	26 95       	lsr	r18
    2a54:	26 95       	lsr	r18
    2a56:	23 70       	andi	r18, 0x03	; 3
    2a58:	42 2f       	mov	r20, r18
    2a5a:	50 e0       	ldi	r21, 0x00	; 0
    2a5c:	42 30       	cpi	r20, 0x02	; 2
    2a5e:	51 05       	cpc	r21, r1
    2a60:	d1 f0       	breq	.+52     	; 0x2a96 <process_action+0x3e8>
    2a62:	43 30       	cpi	r20, 0x03	; 3
    2a64:	51 05       	cpc	r21, r1
    2a66:	59 f1       	breq	.+86     	; 0x2abe <process_action+0x410>
    2a68:	6c 29       	or	r22, r12
    2a6a:	7d 29       	or	r23, r13
    2a6c:	8e 29       	or	r24, r14
    2a6e:	9f 29       	or	r25, r15
    2a70:	41 30       	cpi	r20, 0x01	; 1
    2a72:	51 05       	cpc	r21, r1
    2a74:	41 f1       	breq	.+80     	; 0x2ac6 <process_action+0x418>
            break;
#endif
        default:
            break;
    }
}
    2a76:	28 96       	adiw	r28, 0x08	; 8
    2a78:	0f b6       	in	r0, 0x3f	; 63
    2a7a:	f8 94       	cli
    2a7c:	de bf       	out	0x3e, r29	; 62
    2a7e:	0f be       	out	0x3f, r0	; 63
    2a80:	cd bf       	out	0x3d, r28	; 61
    2a82:	df 91       	pop	r29
    2a84:	cf 91       	pop	r28
    2a86:	1f 91       	pop	r17
    2a88:	0f 91       	pop	r16
    2a8a:	ff 90       	pop	r15
    2a8c:	ef 90       	pop	r14
    2a8e:	df 90       	pop	r13
    2a90:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2a92:	0c 94 58 1b 	jmp	0x36b0	; 0x36b0 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2a96:	6c 29       	or	r22, r12
    2a98:	7d 29       	or	r23, r13
    2a9a:	8e 29       	or	r24, r14
    2a9c:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2a9e:	28 96       	adiw	r28, 0x08	; 8
    2aa0:	0f b6       	in	r0, 0x3f	; 63
    2aa2:	f8 94       	cli
    2aa4:	de bf       	out	0x3e, r29	; 62
    2aa6:	0f be       	out	0x3f, r0	; 63
    2aa8:	cd bf       	out	0x3d, r28	; 61
    2aaa:	df 91       	pop	r29
    2aac:	cf 91       	pop	r28
    2aae:	1f 91       	pop	r17
    2ab0:	0f 91       	pop	r16
    2ab2:	ff 90       	pop	r15
    2ab4:	ef 90       	pop	r14
    2ab6:	df 90       	pop	r13
    2ab8:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2aba:	0c 94 6a 1b 	jmp	0x36d4	; 0x36d4 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2abe:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <layer_and>
    2ac2:	c7 01       	movw	r24, r14
    2ac4:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2ac6:	28 96       	adiw	r28, 0x08	; 8
    2ac8:	0f b6       	in	r0, 0x3f	; 63
    2aca:	f8 94       	cli
    2acc:	de bf       	out	0x3e, r29	; 62
    2ace:	0f be       	out	0x3f, r0	; 63
    2ad0:	cd bf       	out	0x3d, r28	; 61
    2ad2:	df 91       	pop	r29
    2ad4:	cf 91       	pop	r28
    2ad6:	1f 91       	pop	r17
    2ad8:	0f 91       	pop	r16
    2ada:	ff 90       	pop	r15
    2adc:	ef 90       	pop	r14
    2ade:	df 90       	pop	r13
    2ae0:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2ae2:	0c 94 46 1b 	jmp	0x368c	; 0x368c <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2ae6:	60 3f       	cpi	r22, 0xF0	; 240
    2ae8:	49 f1       	breq	.+82     	; 0x2b3c <process_action+0x48e>
    2aea:	18 f4       	brcc	.+6      	; 0x2af2 <process_action+0x444>
    2aec:	60 3e       	cpi	r22, 0xE0	; 224
    2aee:	48 f4       	brcc	.+18     	; 0x2b02 <process_action+0x454>
    2af0:	8c c0       	rjmp	.+280    	; 0x2c0a <process_action+0x55c>
    2af2:	62 3f       	cpi	r22, 0xF2	; 242
    2af4:	09 f4       	brne	.+2      	; 0x2af8 <process_action+0x44a>
    2af6:	51 c0       	rjmp	.+162    	; 0x2b9a <process_action+0x4ec>
    2af8:	e0 f1       	brcs	.+120    	; 0x2b72 <process_action+0x4c4>
    2afa:	63 3f       	cpi	r22, 0xF3	; 243
    2afc:	09 f4       	brne	.+2      	; 0x2b00 <process_action+0x452>
    2afe:	61 c0       	rjmp	.+194    	; 0x2bc2 <process_action+0x514>
    2b00:	84 c0       	rjmp	.+264    	; 0x2c0a <process_action+0x55c>
    2b02:	16 2f       	mov	r17, r22
    2b04:	1f 70       	andi	r17, 0x0F	; 15
    2b06:	84 2f       	mov	r24, r20
    2b08:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    2b0a:	ff 20       	and	r15, r15
    2b0c:	21 f0       	breq	.+8      	; 0x2b16 <process_action+0x468>
                        layer_on(action.layer_tap.val);
    2b0e:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    2b12:	81 2f       	mov	r24, r17
    2b14:	7e ce       	rjmp	.-772    	; 0x2812 <process_action+0x164>
                    } else {
                        layer_off(action.layer_tap.val);
    2b16:	0e 94 0c 1b 	call	0x3618	; 0x3618 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    2b1a:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2b1c:	28 96       	adiw	r28, 0x08	; 8
    2b1e:	0f b6       	in	r0, 0x3f	; 63
    2b20:	f8 94       	cli
    2b22:	de bf       	out	0x3e, r29	; 62
    2b24:	0f be       	out	0x3f, r0	; 63
    2b26:	cd bf       	out	0x3d, r28	; 61
    2b28:	df 91       	pop	r29
    2b2a:	cf 91       	pop	r28
    2b2c:	1f 91       	pop	r17
    2b2e:	0f 91       	pop	r16
    2b30:	ff 90       	pop	r15
    2b32:	ef 90       	pop	r14
    2b34:	df 90       	pop	r13
    2b36:	cf 90       	pop	r12
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    2b38:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2b3c:	ff 20       	and	r15, r15
    2b3e:	a9 f0       	breq	.+42     	; 0x2b6a <process_action+0x4bc>
                        if (tap_count < TAPPING_TOGGLE) {
    2b40:	25 30       	cpi	r18, 0x05	; 5
    2b42:	08 f0       	brcs	.+2      	; 0x2b46 <process_action+0x498>
    2b44:	b2 c0       	rjmp	.+356    	; 0x2caa <process_action+0x5fc>
                            layer_invert(action.layer_tap.val);
    2b46:	84 2f       	mov	r24, r20
    2b48:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2b4a:	28 96       	adiw	r28, 0x08	; 8
    2b4c:	0f b6       	in	r0, 0x3f	; 63
    2b4e:	f8 94       	cli
    2b50:	de bf       	out	0x3e, r29	; 62
    2b52:	0f be       	out	0x3f, r0	; 63
    2b54:	cd bf       	out	0x3d, r28	; 61
    2b56:	df 91       	pop	r29
    2b58:	cf 91       	pop	r28
    2b5a:	1f 91       	pop	r17
    2b5c:	0f 91       	pop	r16
    2b5e:	ff 90       	pop	r15
    2b60:	ef 90       	pop	r14
    2b62:	df 90       	pop	r13
    2b64:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    2b66:	0c 94 2b 1b 	jmp	0x3656	; 0x3656 <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2b6a:	26 30       	cpi	r18, 0x06	; 6
    2b6c:	08 f0       	brcs	.+2      	; 0x2b70 <process_action+0x4c2>
    2b6e:	9d c0       	rjmp	.+314    	; 0x2caa <process_action+0x5fc>
    2b70:	ea cf       	rjmp	.-44     	; 0x2b46 <process_action+0x498>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2b72:	ff 20       	and	r15, r15
    2b74:	a1 f0       	breq	.+40     	; 0x2b9e <process_action+0x4f0>
    2b76:	84 2f       	mov	r24, r20
    2b78:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2b7a:	28 96       	adiw	r28, 0x08	; 8
    2b7c:	0f b6       	in	r0, 0x3f	; 63
    2b7e:	f8 94       	cli
    2b80:	de bf       	out	0x3e, r29	; 62
    2b82:	0f be       	out	0x3f, r0	; 63
    2b84:	cd bf       	out	0x3d, r28	; 61
    2b86:	df 91       	pop	r29
    2b88:	cf 91       	pop	r28
    2b8a:	1f 91       	pop	r17
    2b8c:	0f 91       	pop	r16
    2b8e:	ff 90       	pop	r15
    2b90:	ef 90       	pop	r14
    2b92:	df 90       	pop	r13
    2b94:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2b96:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2b9a:	ff 20       	and	r15, r15
    2b9c:	61 f3       	breq	.-40     	; 0x2b76 <process_action+0x4c8>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2b9e:	84 2f       	mov	r24, r20
    2ba0:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2ba2:	28 96       	adiw	r28, 0x08	; 8
    2ba4:	0f b6       	in	r0, 0x3f	; 63
    2ba6:	f8 94       	cli
    2ba8:	de bf       	out	0x3e, r29	; 62
    2baa:	0f be       	out	0x3f, r0	; 63
    2bac:	cd bf       	out	0x3d, r28	; 61
    2bae:	df 91       	pop	r29
    2bb0:	cf 91       	pop	r28
    2bb2:	1f 91       	pop	r17
    2bb4:	0f 91       	pop	r16
    2bb6:	ff 90       	pop	r15
    2bb8:	ef 90       	pop	r14
    2bba:	df 90       	pop	r13
    2bbc:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2bbe:	0c 94 0c 1b 	jmp	0x3618	; 0x3618 <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2bc2:	ff 20       	and	r15, r15
    2bc4:	91 f0       	breq	.+36     	; 0x2bea <process_action+0x53c>
    2bc6:	84 2f       	mov	r24, r20
    2bc8:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2bca:	28 96       	adiw	r28, 0x08	; 8
    2bcc:	0f b6       	in	r0, 0x3f	; 63
    2bce:	f8 94       	cli
    2bd0:	de bf       	out	0x3e, r29	; 62
    2bd2:	0f be       	out	0x3f, r0	; 63
    2bd4:	cd bf       	out	0x3d, r28	; 61
    2bd6:	df 91       	pop	r29
    2bd8:	cf 91       	pop	r28
    2bda:	1f 91       	pop	r17
    2bdc:	0f 91       	pop	r16
    2bde:	ff 90       	pop	r15
    2be0:	ef 90       	pop	r14
    2be2:	df 90       	pop	r13
    2be4:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2be6:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <layer_move>
            break;
#endif
        default:
            break;
    }
}
    2bea:	28 96       	adiw	r28, 0x08	; 8
    2bec:	0f b6       	in	r0, 0x3f	; 63
    2bee:	f8 94       	cli
    2bf0:	de bf       	out	0x3e, r29	; 62
    2bf2:	0f be       	out	0x3f, r0	; 63
    2bf4:	cd bf       	out	0x3d, r28	; 61
    2bf6:	df 91       	pop	r29
    2bf8:	cf 91       	pop	r28
    2bfa:	1f 91       	pop	r17
    2bfc:	0f 91       	pop	r16
    2bfe:	ff 90       	pop	r15
    2c00:	ef 90       	pop	r14
    2c02:	df 90       	pop	r13
    2c04:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    2c06:	0c 94 dd 1a 	jmp	0x35ba	; 0x35ba <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2c0a:	ff 20       	and	r15, r15
    2c0c:	a1 f0       	breq	.+40     	; 0x2c36 <process_action+0x588>
                        if (tap_count > 0) {
    2c0e:	22 23       	and	r18, r18
    2c10:	09 f4       	brne	.+2      	; 0x2c14 <process_action+0x566>
    2c12:	b1 cf       	rjmp	.-158    	; 0x2b76 <process_action+0x4c8>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2c14:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2c16:	28 96       	adiw	r28, 0x08	; 8
    2c18:	0f b6       	in	r0, 0x3f	; 63
    2c1a:	f8 94       	cli
    2c1c:	de bf       	out	0x3e, r29	; 62
    2c1e:	0f be       	out	0x3f, r0	; 63
    2c20:	cd bf       	out	0x3d, r28	; 61
    2c22:	df 91       	pop	r29
    2c24:	cf 91       	pop	r28
    2c26:	1f 91       	pop	r17
    2c28:	0f 91       	pop	r16
    2c2a:	ff 90       	pop	r15
    2c2c:	ef 90       	pop	r14
    2c2e:	df 90       	pop	r13
    2c30:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2c32:	0c 94 27 12 	jmp	0x244e	; 0x244e <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    2c36:	22 23       	and	r18, r18
    2c38:	09 f4       	brne	.+2      	; 0x2c3c <process_action+0x58e>
    2c3a:	b1 cf       	rjmp	.-158    	; 0x2b9e <process_action+0x4f0>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2c3c:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2c3e:	28 96       	adiw	r28, 0x08	; 8
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	f8 94       	cli
    2c44:	de bf       	out	0x3e, r29	; 62
    2c46:	0f be       	out	0x3f, r0	; 63
    2c48:	cd bf       	out	0x3d, r28	; 61
    2c4a:	df 91       	pop	r29
    2c4c:	cf 91       	pop	r28
    2c4e:	1f 91       	pop	r17
    2c50:	0f 91       	pop	r16
    2c52:	ff 90       	pop	r15
    2c54:	ef 90       	pop	r14
    2c56:	df 90       	pop	r13
    2c58:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2c5a:	0c 94 fa 12 	jmp	0x25f4	; 0x25f4 <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2c5e:	4f 70       	andi	r20, 0x0F	; 15
    2c60:	c8 01       	movw	r24, r16
    2c62:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    2c66:	28 96       	adiw	r28, 0x08	; 8
    2c68:	0f b6       	in	r0, 0x3f	; 63
    2c6a:	f8 94       	cli
    2c6c:	de bf       	out	0x3e, r29	; 62
    2c6e:	0f be       	out	0x3f, r0	; 63
    2c70:	cd bf       	out	0x3d, r28	; 61
    2c72:	df 91       	pop	r29
    2c74:	cf 91       	pop	r28
    2c76:	1f 91       	pop	r17
    2c78:	0f 91       	pop	r16
    2c7a:	ff 90       	pop	r15
    2c7c:	ef 90       	pop	r14
    2c7e:	df 90       	pop	r13
    2c80:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2c82:	0c 94 ef 19 	jmp	0x33de	; 0x33de <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2c86:	4f 70       	andi	r20, 0x0F	; 15
    2c88:	c8 01       	movw	r24, r16
            break;
#endif
        default:
            break;
    }
}
    2c8a:	28 96       	adiw	r28, 0x08	; 8
    2c8c:	0f b6       	in	r0, 0x3f	; 63
    2c8e:	f8 94       	cli
    2c90:	de bf       	out	0x3e, r29	; 62
    2c92:	0f be       	out	0x3f, r0	; 63
    2c94:	cd bf       	out	0x3d, r28	; 61
    2c96:	df 91       	pop	r29
    2c98:	cf 91       	pop	r28
    2c9a:	1f 91       	pop	r17
    2c9c:	0f 91       	pop	r16
    2c9e:	ff 90       	pop	r15
    2ca0:	ef 90       	pop	r14
    2ca2:	df 90       	pop	r13
    2ca4:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2ca6:	0c 94 3b 1f 	jmp	0x3e76	; 0x3e76 <action_function>
            break;
#endif
        default:
            break;
    }
}
    2caa:	28 96       	adiw	r28, 0x08	; 8
    2cac:	0f b6       	in	r0, 0x3f	; 63
    2cae:	f8 94       	cli
    2cb0:	de bf       	out	0x3e, r29	; 62
    2cb2:	0f be       	out	0x3f, r0	; 63
    2cb4:	cd bf       	out	0x3d, r28	; 61
    2cb6:	df 91       	pop	r29
    2cb8:	cf 91       	pop	r28
    2cba:	1f 91       	pop	r17
    2cbc:	0f 91       	pop	r16
    2cbe:	ff 90       	pop	r15
    2cc0:	ef 90       	pop	r14
    2cc2:	df 90       	pop	r13
    2cc4:	cf 90       	pop	r12
    2cc6:	08 95       	ret

00002cc8 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2cc8:	0e 94 85 1c 	call	0x390a	; 0x390a <clear_weak_mods>
    clear_keys();
    2ccc:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <clear_keys>
    send_keyboard_report();
    2cd0:	0e 94 a1 1c 	call	0x3942	; 0x3942 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2cd4:	0e 94 be 23 	call	0x477c	; 0x477c <mousekey_clear>
    mousekey_send();
    2cd8:	0e 94 90 22 	call	0x4520	; 0x4520 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2cdc:	80 e0       	ldi	r24, 0x00	; 0
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	0e 94 dd 10 	call	0x21ba	; 0x21ba <host_system_send>
    host_consumer_send(0);
    2ce4:	80 e0       	ldi	r24, 0x00	; 0
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <host_consumer_send>

00002cec <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    2cec:	0e 94 75 1c 	call	0x38ea	; 0x38ea <clear_mods>
    clear_keyboard_but_mods();
    2cf0:	0c 94 64 16 	jmp	0x2cc8	; 0x2cc8 <clear_keyboard_but_mods>

00002cf4 <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    2cf4:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <layer_switch_get_action>

    switch (action.kind.id) {
    2cf8:	29 2f       	mov	r18, r25
    2cfa:	22 95       	swap	r18
    2cfc:	2f 70       	andi	r18, 0x0F	; 15
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	2c 30       	cpi	r18, 0x0C	; 12
    2d02:	31 05       	cpc	r19, r1
    2d04:	4c f4       	brge	.+18     	; 0x2d18 <is_tap_key+0x24>
    2d06:	2a 30       	cpi	r18, 0x0A	; 10
    2d08:	31 05       	cpc	r19, r1
    2d0a:	6c f4       	brge	.+26     	; 0x2d26 <is_tap_key+0x32>
    2d0c:	22 50       	subi	r18, 0x02	; 2
    2d0e:	31 09       	sbc	r19, r1
    2d10:	22 30       	cpi	r18, 0x02	; 2
    2d12:	31 05       	cpc	r19, r1
    2d14:	90 f4       	brcc	.+36     	; 0x2d3a <is_tap_key+0x46>
    2d16:	07 c0       	rjmp	.+14     	; 0x2d26 <is_tap_key+0x32>
    2d18:	2c 30       	cpi	r18, 0x0C	; 12
    2d1a:	31 05       	cpc	r19, r1
    2d1c:	51 f0       	breq	.+20     	; 0x2d32 <is_tap_key+0x3e>
    2d1e:	2f 30       	cpi	r18, 0x0F	; 15
    2d20:	31 05       	cpc	r19, r1
    2d22:	39 f0       	breq	.+14     	; 0x2d32 <is_tap_key+0x3e>
    2d24:	0a c0       	rjmp	.+20     	; 0x2d3a <is_tap_key+0x46>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2d26:	80 3e       	cpi	r24, 0xE0	; 224
    2d28:	10 f0       	brcs	.+4      	; 0x2d2e <is_tap_key+0x3a>
    2d2a:	80 3f       	cpi	r24, 0xF0	; 240
    2d2c:	31 f4       	brne	.+12     	; 0x2d3a <is_tap_key+0x46>
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
    2d30:	08 95       	ret
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2d32:	93 fb       	bst	r25, 3
    2d34:	88 27       	eor	r24, r24
    2d36:	80 f9       	bld	r24, 0
    2d38:	08 95       	ret
            switch (action.layer_tap.code) {
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
            }
            return false;
    2d3a:	80 e0       	ldi	r24, 0x00	; 0
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    2d3c:	08 95       	ret

00002d3e <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2d3e:	cf 93       	push	r28
    2d40:	df 93       	push	r29
    2d42:	00 d0       	rcall	.+0      	; 0x2d44 <debug_event+0x6>
    2d44:	00 d0       	rcall	.+0      	; 0x2d46 <debug_event+0x8>
    2d46:	1f 92       	push	r1
    2d48:	cd b7       	in	r28, 0x3d	; 61
    2d4a:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2d4c:	0f 90       	pop	r0
    2d4e:	0f 90       	pop	r0
    2d50:	0f 90       	pop	r0
    2d52:	0f 90       	pop	r0
    2d54:	0f 90       	pop	r0
    2d56:	df 91       	pop	r29
    2d58:	cf 91       	pop	r28
    2d5a:	08 95       	ret

00002d5c <debug_record>:

void debug_record(keyrecord_t record)
{
    2d5c:	cf 93       	push	r28
    2d5e:	df 93       	push	r29
    2d60:	00 d0       	rcall	.+0      	; 0x2d62 <debug_record+0x6>
    2d62:	00 d0       	rcall	.+0      	; 0x2d64 <debug_record+0x8>
    2d64:	00 d0       	rcall	.+0      	; 0x2d66 <debug_record+0xa>
    2d66:	cd b7       	in	r28, 0x3d	; 61
    2d68:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2d6a:	26 96       	adiw	r28, 0x06	; 6
    2d6c:	0f b6       	in	r0, 0x3f	; 63
    2d6e:	f8 94       	cli
    2d70:	de bf       	out	0x3e, r29	; 62
    2d72:	0f be       	out	0x3f, r0	; 63
    2d74:	cd bf       	out	0x3d, r28	; 61
    2d76:	df 91       	pop	r29
    2d78:	cf 91       	pop	r28
    2d7a:	08 95       	ret

00002d7c <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2d7c:	1f 93       	push	r17
    2d7e:	cf 93       	push	r28
    2d80:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d82:	c0 91 6e 01 	lds	r28, 0x016E
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2d86:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d88:	80 91 6f 01 	lds	r24, 0x016F
    2d8c:	c8 17       	cp	r28, r24
    2d8e:	99 f0       	breq	.+38     	; 0x2db6 <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2d90:	d0 e0       	ldi	r29, 0x00	; 0
    2d92:	1c 9f       	mul	r17, r28
    2d94:	f0 01       	movw	r30, r0
    2d96:	1d 9f       	mul	r17, r29
    2d98:	f0 0d       	add	r31, r0
    2d9a:	11 24       	eor	r1, r1
    2d9c:	e0 59       	subi	r30, 0x90	; 144
    2d9e:	fe 4f       	sbci	r31, 0xFE	; 254
    2da0:	40 81       	ld	r20, Z
    2da2:	51 81       	ldd	r21, Z+1	; 0x01
    2da4:	62 81       	ldd	r22, Z+2	; 0x02
    2da6:	73 81       	ldd	r23, Z+3	; 0x03
    2da8:	84 81       	ldd	r24, Z+4	; 0x04
    2daa:	95 81       	ldd	r25, Z+5	; 0x05
    2dac:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2db0:	21 96       	adiw	r28, 0x01	; 1
    2db2:	c7 70       	andi	r28, 0x07	; 7
    2db4:	e9 cf       	rjmp	.-46     	; 0x2d88 <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2db6:	df 91       	pop	r29
    2db8:	cf 91       	pop	r28
    2dba:	1f 91       	pop	r17
    2dbc:	08 95       	ret

00002dbe <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2dbe:	40 91 a0 01 	lds	r20, 0x01A0
    2dc2:	50 91 a1 01 	lds	r21, 0x01A1
    2dc6:	60 91 a2 01 	lds	r22, 0x01A2
    2dca:	70 91 a3 01 	lds	r23, 0x01A3
    2dce:	80 91 a4 01 	lds	r24, 0x01A4
    2dd2:	90 91 a5 01 	lds	r25, 0x01A5
    2dd6:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <debug_record>

00002dda <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    2dda:	cf 93       	push	r28
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2ddc:	80 91 a5 01 	lds	r24, 0x01A5
    2de0:	82 95       	swap	r24
    2de2:	8f 70       	andi	r24, 0x0F	; 15
    2de4:	09 f0       	breq	.+2      	; 0x2de8 <waiting_buffer_scan_tap+0xe>
    2de6:	5f c0       	rjmp	.+190    	; 0x2ea6 <waiting_buffer_scan_tap+0xcc>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2de8:	80 91 a2 01 	lds	r24, 0x01A2
    2dec:	88 23       	and	r24, r24
    2dee:	09 f4       	brne	.+2      	; 0x2df2 <waiting_buffer_scan_tap+0x18>
    2df0:	5a c0       	rjmp	.+180    	; 0x2ea6 <waiting_buffer_scan_tap+0xcc>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2df2:	20 91 6e 01 	lds	r18, 0x016E
    2df6:	a0 91 6f 01 	lds	r26, 0x016F
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2dfa:	60 91 a0 01 	lds	r22, 0x01A0
    2dfe:	70 91 a1 01 	lds	r23, 0x01A1
    2e02:	80 91 a3 01 	lds	r24, 0x01A3
    2e06:	90 91 a4 01 	lds	r25, 0x01A4
    2e0a:	31 e0       	ldi	r19, 0x01	; 1
    2e0c:	6f 3f       	cpi	r22, 0xFF	; 255
    2e0e:	09 f0       	breq	.+2      	; 0x2e12 <waiting_buffer_scan_tap+0x38>
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	b3 2f       	mov	r27, r19
    2e14:	c6 e0       	ldi	r28, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e16:	2a 17       	cp	r18, r26
    2e18:	09 f4       	brne	.+2      	; 0x2e1c <waiting_buffer_scan_tap+0x42>
    2e1a:	45 c0       	rjmp	.+138    	; 0x2ea6 <waiting_buffer_scan_tap+0xcc>
    2e1c:	00 97       	sbiw	r24, 0x00	; 0
    2e1e:	21 f0       	breq	.+8      	; 0x2e28 <waiting_buffer_scan_tap+0x4e>
    2e20:	7f 3f       	cpi	r23, 0xFF	; 255
    2e22:	21 f4       	brne	.+8      	; 0x2e2c <waiting_buffer_scan_tap+0x52>
    2e24:	4b 2f       	mov	r20, r27
    2e26:	03 c0       	rjmp	.+6      	; 0x2e2e <waiting_buffer_scan_tap+0x54>
    2e28:	41 e0       	ldi	r20, 0x01	; 1
    2e2a:	01 c0       	rjmp	.+2      	; 0x2e2e <waiting_buffer_scan_tap+0x54>
    2e2c:	40 e0       	ldi	r20, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2e30:	40 fd       	sbrc	r20, 0
    2e32:	35 c0       	rjmp	.+106    	; 0x2e9e <waiting_buffer_scan_tap+0xc4>
    2e34:	c2 9f       	mul	r28, r18
    2e36:	f0 01       	movw	r30, r0
    2e38:	c3 9f       	mul	r28, r19
    2e3a:	f0 0d       	add	r31, r0
    2e3c:	11 24       	eor	r1, r1
    2e3e:	e0 59       	subi	r30, 0x90	; 144
    2e40:	fe 4f       	sbci	r31, 0xFE	; 254
    2e42:	41 81       	ldd	r20, Z+1	; 0x01
    2e44:	74 13       	cpse	r23, r20
    2e46:	2b c0       	rjmp	.+86     	; 0x2e9e <waiting_buffer_scan_tap+0xc4>
    2e48:	40 81       	ld	r20, Z
    2e4a:	64 13       	cpse	r22, r20
    2e4c:	28 c0       	rjmp	.+80     	; 0x2e9e <waiting_buffer_scan_tap+0xc4>
    2e4e:	42 81       	ldd	r20, Z+2	; 0x02
    2e50:	41 11       	cpse	r20, r1
    2e52:	25 c0       	rjmp	.+74     	; 0x2e9e <waiting_buffer_scan_tap+0xc4>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2e54:	43 81       	ldd	r20, Z+3	; 0x03
    2e56:	54 81       	ldd	r21, Z+4	; 0x04
    2e58:	48 17       	cp	r20, r24
    2e5a:	59 07       	cpc	r21, r25
    2e5c:	10 f4       	brcc	.+4      	; 0x2e62 <waiting_buffer_scan_tap+0x88>
    2e5e:	41 50       	subi	r20, 0x01	; 1
    2e60:	51 09       	sbc	r21, r1
    2e62:	48 1b       	sub	r20, r24
    2e64:	59 0b       	sbc	r21, r25
    2e66:	48 3c       	cpi	r20, 0xC8	; 200
    2e68:	51 05       	cpc	r21, r1
    2e6a:	c8 f4       	brcc	.+50     	; 0x2e9e <waiting_buffer_scan_tap+0xc4>
            tapping_key.tap.count = 1;
    2e6c:	80 91 a5 01 	lds	r24, 0x01A5
    2e70:	8f 70       	andi	r24, 0x0F	; 15
    2e72:	80 61       	ori	r24, 0x10	; 16
    2e74:	80 93 a5 01 	sts	0x01A5, r24
            waiting_buffer[i].tap.count = 1;
    2e78:	86 e0       	ldi	r24, 0x06	; 6
    2e7a:	82 9f       	mul	r24, r18
    2e7c:	f0 01       	movw	r30, r0
    2e7e:	83 9f       	mul	r24, r19
    2e80:	f0 0d       	add	r31, r0
    2e82:	11 24       	eor	r1, r1
    2e84:	eb 58       	subi	r30, 0x8B	; 139
    2e86:	fe 4f       	sbci	r31, 0xFE	; 254
    2e88:	80 81       	ld	r24, Z
    2e8a:	8f 70       	andi	r24, 0x0F	; 15
    2e8c:	80 61       	ori	r24, 0x10	; 16
    2e8e:	80 83       	st	Z, r24
            process_action(&tapping_key);
    2e90:	80 ea       	ldi	r24, 0xA0	; 160
    2e92:	91 e0       	ldi	r25, 0x01	; 1
    2e94:	0e 94 57 13 	call	0x26ae	; 0x26ae <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    2e98:	cf 91       	pop	r28
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    2e9a:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e9e:	2f 5f       	subi	r18, 0xFF	; 255
    2ea0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea2:	27 70       	andi	r18, 0x07	; 7
    2ea4:	b8 cf       	rjmp	.-144    	; 0x2e16 <waiting_buffer_scan_tap+0x3c>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    2ea6:	cf 91       	pop	r28
    2ea8:	08 95       	ret

00002eaa <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    2eaa:	cf 92       	push	r12
    2eac:	df 92       	push	r13
    2eae:	ef 92       	push	r14
    2eb0:	ff 92       	push	r15
    2eb2:	0f 93       	push	r16
    2eb4:	1f 93       	push	r17
    2eb6:	cf 93       	push	r28
    2eb8:	df 93       	push	r29
    2eba:	cd b7       	in	r28, 0x3d	; 61
    2ebc:	de b7       	in	r29, 0x3e	; 62
    2ebe:	62 97       	sbiw	r28, 0x12	; 18
    2ec0:	0f b6       	in	r0, 0x3f	; 63
    2ec2:	f8 94       	cli
    2ec4:	de bf       	out	0x3e, r29	; 62
    2ec6:	0f be       	out	0x3f, r0	; 63
    2ec8:	cd bf       	out	0x3d, r28	; 61
    2eca:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    2ecc:	85 e0       	ldi	r24, 0x05	; 5
    2ece:	f8 01       	movw	r30, r16
    2ed0:	de 01       	movw	r26, r28
    2ed2:	1d 96       	adiw	r26, 0x0d	; 13
    2ed4:	01 90       	ld	r0, Z+
    2ed6:	0d 92       	st	X+, r0
    2ed8:	8a 95       	dec	r24
    2eda:	e1 f7       	brne	.-8      	; 0x2ed4 <process_tapping+0x2a>
    2edc:	d8 01       	movw	r26, r16
    2ede:	4c 91       	ld	r20, X
    2ee0:	11 96       	adiw	r26, 0x01	; 1
    2ee2:	5c 91       	ld	r21, X
    2ee4:	11 97       	sbiw	r26, 0x01	; 1
    2ee6:	12 96       	adiw	r26, 0x02	; 2
    2ee8:	6c 91       	ld	r22, X
    2eea:	12 97       	sbiw	r26, 0x02	; 2
    2eec:	13 96       	adiw	r26, 0x03	; 3
    2eee:	ed 90       	ld	r14, X+
    2ef0:	fc 90       	ld	r15, X
    2ef2:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    2ef4:	70 91 a0 01 	lds	r23, 0x01A0
    2ef8:	e0 91 a1 01 	lds	r30, 0x01A1
    2efc:	20 91 a3 01 	lds	r18, 0x01A3
    2f00:	30 91 a4 01 	lds	r19, 0x01A4
    2f04:	21 15       	cp	r18, r1
    2f06:	31 05       	cpc	r19, r1
    2f08:	31 f0       	breq	.+12     	; 0x2f16 <process_tapping+0x6c>
    2f0a:	ef 3f       	cpi	r30, 0xFF	; 255
    2f0c:	31 f4       	brne	.+12     	; 0x2f1a <process_tapping+0x70>
    2f0e:	81 e0       	ldi	r24, 0x01	; 1
    2f10:	7f 3f       	cpi	r23, 0xFF	; 255
    2f12:	19 f4       	brne	.+6      	; 0x2f1a <process_tapping+0x70>
    2f14:	03 c0       	rjmp	.+6      	; 0x2f1c <process_tapping+0x72>
    2f16:	81 e0       	ldi	r24, 0x01	; 1
    2f18:	01 c0       	rjmp	.+2      	; 0x2f1c <process_tapping+0x72>
    2f1a:	80 e0       	ldi	r24, 0x00	; 0
    2f1c:	b8 2f       	mov	r27, r24
    2f1e:	b1 70       	andi	r27, 0x01	; 1
    2f20:	cb 2e       	mov	r12, r27
    2f22:	80 fd       	sbrc	r24, 0
    2f24:	6c c1       	rjmp	.+728    	; 0x31fe <process_tapping+0x354>
    2f26:	d0 90 a2 01 	lds	r13, 0x01A2
    2f2a:	dd 20       	and	r13, r13
    2f2c:	09 f4       	brne	.+2      	; 0x2f30 <process_tapping+0x86>
    2f2e:	f5 c0       	rjmp	.+490    	; 0x311a <process_tapping+0x270>
    2f30:	f0 91 a5 01 	lds	r31, 0x01A5
        if (WITHIN_TAPPING_TERM(event)) {
    2f34:	e2 16       	cp	r14, r18
    2f36:	f3 06       	cpc	r15, r19
    2f38:	38 f0       	brcs	.+14     	; 0x2f48 <process_tapping+0x9e>
    2f3a:	c7 01       	movw	r24, r14
    2f3c:	82 1b       	sub	r24, r18
    2f3e:	93 0b       	sbc	r25, r19
    2f40:	88 3c       	cpi	r24, 0xC8	; 200
    2f42:	91 05       	cpc	r25, r1
    2f44:	48 f0       	brcs	.+18     	; 0x2f58 <process_tapping+0xae>
    2f46:	9b c0       	rjmp	.+310    	; 0x307e <process_tapping+0x1d4>
    2f48:	20 95       	com	r18
    2f4a:	30 95       	com	r19
    2f4c:	2e 0d       	add	r18, r14
    2f4e:	3f 1d       	adc	r19, r15
    2f50:	28 3c       	cpi	r18, 0xC8	; 200
    2f52:	31 05       	cpc	r19, r1
    2f54:	08 f0       	brcs	.+2      	; 0x2f58 <process_tapping+0xae>
    2f56:	93 c0       	rjmp	.+294    	; 0x307e <process_tapping+0x1d4>
            if (tapping_key.tap.count == 0) {
    2f58:	8f 2f       	mov	r24, r31
    2f5a:	80 7f       	andi	r24, 0xF0	; 240
    2f5c:	09 f0       	breq	.+2      	; 0x2f60 <process_tapping+0xb6>
    2f5e:	52 c0       	rjmp	.+164    	; 0x3004 <process_tapping+0x15a>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2f60:	e5 13       	cpse	r30, r21
    2f62:	14 c0       	rjmp	.+40     	; 0x2f8c <process_tapping+0xe2>
    2f64:	74 13       	cpse	r23, r20
    2f66:	12 c0       	rjmp	.+36     	; 0x2f8c <process_tapping+0xe2>
    2f68:	d6 2e       	mov	r13, r22
    2f6a:	61 11       	cpse	r22, r1
    2f6c:	0f c0       	rjmp	.+30     	; 0x2f8c <process_tapping+0xe2>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    2f6e:	ff 70       	andi	r31, 0x0F	; 15
    2f70:	f0 61       	ori	r31, 0x10	; 16
    2f72:	f0 93 a5 01 	sts	0x01A5, r31
                    debug_tapping_key();
    2f76:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <debug_tapping_key>
                    process_action(&tapping_key);
    2f7a:	80 ea       	ldi	r24, 0xA0	; 160
    2f7c:	91 e0       	ldi	r25, 0x01	; 1
    2f7e:	0e 94 57 13 	call	0x26ae	; 0x26ae <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    2f82:	80 91 a5 01 	lds	r24, 0x01A5
    2f86:	f8 01       	movw	r30, r16
    2f88:	85 83       	std	Z+5, r24	; 0x05
                    // enqueue
                    return false;
    2f8a:	6c c1       	rjmp	.+728    	; 0x3264 <process_tapping+0x3ba>
    2f8c:	ef 28       	or	r14, r15
    2f8e:	31 f0       	breq	.+12     	; 0x2f9c <process_tapping+0xf2>
    2f90:	5f 3f       	cpi	r21, 0xFF	; 255
    2f92:	31 f4       	brne	.+12     	; 0x2fa0 <process_tapping+0xf6>
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	4f 3f       	cpi	r20, 0xFF	; 255
    2f98:	19 f4       	brne	.+6      	; 0x2fa0 <process_tapping+0xf6>
    2f9a:	03 c0       	rjmp	.+6      	; 0x2fa2 <process_tapping+0xf8>
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	01 c0       	rjmp	.+2      	; 0x2fa2 <process_tapping+0xf8>
    2fa0:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    2fa2:	80 fd       	sbrc	r24, 0
    2fa4:	03 c0       	rjmp	.+6      	; 0x2fac <process_tapping+0x102>
    2fa6:	81 e0       	ldi	r24, 0x01	; 1
    2fa8:	86 27       	eor	r24, r22
    2faa:	01 c0       	rjmp	.+2      	; 0x2fae <process_tapping+0x104>
    2fac:	80 e0       	ldi	r24, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    2fae:	f8 2f       	mov	r31, r24
    2fb0:	f1 70       	andi	r31, 0x01	; 1
    2fb2:	ff 2e       	mov	r15, r31
    2fb4:	80 ff       	sbrs	r24, 0
    2fb6:	1c c0       	rjmp	.+56     	; 0x2ff0 <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2fb8:	80 91 6e 01 	lds	r24, 0x016E
    2fbc:	20 91 6f 01 	lds	r18, 0x016F
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2fc0:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2fc2:	82 17       	cp	r24, r18
    2fc4:	09 f4       	brne	.+2      	; 0x2fc8 <process_tapping+0x11e>
    2fc6:	28 c1       	rjmp	.+592    	; 0x3218 <process_tapping+0x36e>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	38 9f       	mul	r19, r24
    2fcc:	f0 01       	movw	r30, r0
    2fce:	39 9f       	mul	r19, r25
    2fd0:	f0 0d       	add	r31, r0
    2fd2:	11 24       	eor	r1, r1
    2fd4:	e0 59       	subi	r30, 0x90	; 144
    2fd6:	fe 4f       	sbci	r31, 0xFE	; 254
    2fd8:	71 81       	ldd	r23, Z+1	; 0x01
    2fda:	57 13       	cpse	r21, r23
    2fdc:	06 c0       	rjmp	.+12     	; 0x2fea <process_tapping+0x140>
    2fde:	70 81       	ld	r23, Z
    2fe0:	47 13       	cpse	r20, r23
    2fe2:	03 c0       	rjmp	.+6      	; 0x2fea <process_tapping+0x140>
    2fe4:	72 81       	ldd	r23, Z+2	; 0x02
    2fe6:	67 13       	cpse	r22, r23
    2fe8:	03 c0       	rjmp	.+6      	; 0x2ff0 <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2fea:	01 96       	adiw	r24, 0x01	; 1
    2fec:	87 70       	andi	r24, 0x07	; 7
    2fee:	e9 cf       	rjmp	.-46     	; 0x2fc2 <process_tapping+0x118>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    2ff0:	d6 2e       	mov	r13, r22
    2ff2:	66 23       	and	r22, r22
    2ff4:	09 f4       	brne	.+2      	; 0x2ff8 <process_tapping+0x14e>
    2ff6:	36 c1       	rjmp	.+620    	; 0x3264 <process_tapping+0x3ba>
                        tapping_key.tap.interrupted = true;
    2ff8:	80 91 a5 01 	lds	r24, 0x01A5
    2ffc:	81 60       	ori	r24, 0x01	; 1
    2ffe:	80 93 a5 01 	sts	0x01A5, r24
    3002:	53 c0       	rjmp	.+166    	; 0x30aa <process_tapping+0x200>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3004:	e5 13       	cpse	r30, r21
    3006:	08 c0       	rjmp	.+16     	; 0x3018 <process_tapping+0x16e>
    3008:	74 13       	cpse	r23, r20
    300a:	06 c0       	rjmp	.+12     	; 0x3018 <process_tapping+0x16e>
    300c:	61 11       	cpse	r22, r1
    300e:	04 c0       	rjmp	.+8      	; 0x3018 <process_tapping+0x16e>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    3010:	d8 01       	movw	r26, r16
    3012:	15 96       	adiw	r26, 0x05	; 5
    3014:	fc 93       	st	X, r31
    3016:	ae c0       	rjmp	.+348    	; 0x3174 <process_tapping+0x2ca>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    3018:	4d 87       	std	Y+13, r20	; 0x0d
    301a:	5e 87       	std	Y+14, r21	; 0x0e
    301c:	8d 85       	ldd	r24, Y+13	; 0x0d
    301e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3020:	6a 8b       	std	Y+18, r22	; 0x12
    3022:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <is_tap_key>
    3026:	6a 89       	ldd	r22, Y+18	; 0x12
    3028:	88 23       	and	r24, r24
    302a:	29 f1       	breq	.+74     	; 0x3076 <process_tapping+0x1cc>
    302c:	d6 2e       	mov	r13, r22
    302e:	66 23       	and	r22, r22
    3030:	11 f1       	breq	.+68     	; 0x3076 <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    3032:	20 91 a5 01 	lds	r18, 0x01A5
    3036:	82 2f       	mov	r24, r18
    3038:	82 95       	swap	r24
    303a:	8f 70       	andi	r24, 0x0F	; 15
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	02 97       	sbiw	r24, 0x02	; 2
    3040:	0c f4       	brge	.+2      	; 0x3044 <process_tapping+0x19a>
    3042:	60 c0       	rjmp	.+192    	; 0x3104 <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    3044:	80 91 a0 01 	lds	r24, 0x01A0
    3048:	90 91 a1 01 	lds	r25, 0x01A1
    304c:	98 87       	std	Y+8, r25	; 0x08
    304e:	8f 83       	std	Y+7, r24	; 0x07
    3050:	19 86       	std	Y+9, r1	; 0x09
    3052:	fb 86       	std	Y+11, r15	; 0x0b
    3054:	ea 86       	std	Y+10, r14	; 0x0a
    3056:	2c 87       	std	Y+12, r18	; 0x0c
    3058:	ce 01       	movw	r24, r28
    305a:	07 96       	adiw	r24, 0x07	; 7
    305c:	51 c0       	rjmp	.+162    	; 0x3100 <process_tapping+0x256>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    305e:	e5 17       	cp	r30, r21
    3060:	31 f1       	breq	.+76     	; 0x30ae <process_tapping+0x204>
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = (keyrecord_t){};
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    3062:	4d 87       	std	Y+13, r20	; 0x0d
    3064:	5e 87       	std	Y+14, r21	; 0x0e
    3066:	8d 85       	ldd	r24, Y+13	; 0x0d
    3068:	9e 85       	ldd	r25, Y+14	; 0x0e
    306a:	6a 8b       	std	Y+18, r22	; 0x12
    306c:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <is_tap_key>
    3070:	6a 89       	ldd	r22, Y+18	; 0x12
    3072:	81 11       	cpse	r24, r1
    3074:	2e c0       	rjmp	.+92     	; 0x30d2 <process_tapping+0x228>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    3076:	c8 01       	movw	r24, r16
    3078:	0e 94 57 13 	call	0x26ae	; 0x26ae <process_action>
    307c:	a4 c0       	rjmp	.+328    	; 0x31c6 <process_tapping+0x31c>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    307e:	8f 2f       	mov	r24, r31
    3080:	80 7f       	andi	r24, 0xF0	; 240
    3082:	69 f7       	brne	.-38     	; 0x305e <process_tapping+0x1b4>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    3084:	7e 2d       	mov	r23, r14
    3086:	f9 8a       	std	Y+17, r15	; 0x11
    3088:	e8 8a       	std	Y+16, r14	; 0x10
    308a:	89 89       	ldd	r24, Y+17	; 0x11
    308c:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <debug_event>
                process_action(&tapping_key);
    3090:	80 ea       	ldi	r24, 0xA0	; 160
    3092:	91 e0       	ldi	r25, 0x01	; 1
    3094:	0e 94 57 13 	call	0x26ae	; 0x26ae <process_action>
                tapping_key = (keyrecord_t){};
    3098:	e0 ea       	ldi	r30, 0xA0	; 160
    309a:	f1 e0       	ldi	r31, 0x01	; 1
    309c:	86 e0       	ldi	r24, 0x06	; 6
    309e:	df 01       	movw	r26, r30
    30a0:	1d 92       	st	X+, r1
    30a2:	8a 95       	dec	r24
    30a4:	e9 f7       	brne	.-6      	; 0x30a0 <process_tapping+0x1f6>
                debug_tapping_key();
    30a6:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <debug_tapping_key>
                return false;
    30aa:	d1 2c       	mov	r13, r1
    30ac:	db c0       	rjmp	.+438    	; 0x3264 <process_tapping+0x3ba>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    30ae:	74 13       	cpse	r23, r20
    30b0:	d8 cf       	rjmp	.-80     	; 0x3062 <process_tapping+0x1b8>
    30b2:	61 11       	cpse	r22, r1
    30b4:	d6 cf       	rjmp	.-84     	; 0x3062 <process_tapping+0x1b8>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    30b6:	d8 01       	movw	r26, r16
    30b8:	15 96       	adiw	r26, 0x05	; 5
    30ba:	fc 93       	st	X, r31
                    process_action(keyp);
    30bc:	c8 01       	movw	r24, r16
    30be:	0e 94 57 13 	call	0x26ae	; 0x26ae <process_action>
                    tapping_key = (keyrecord_t){};
    30c2:	e0 ea       	ldi	r30, 0xA0	; 160
    30c4:	f1 e0       	ldi	r31, 0x01	; 1
    30c6:	86 e0       	ldi	r24, 0x06	; 6
    30c8:	df 01       	movw	r26, r30
    30ca:	1d 92       	st	X+, r1
    30cc:	8a 95       	dec	r24
    30ce:	e9 f7       	brne	.-6      	; 0x30ca <process_tapping+0x220>
                    return true;
    30d0:	c9 c0       	rjmp	.+402    	; 0x3264 <process_tapping+0x3ba>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    30d2:	d6 2e       	mov	r13, r22
    30d4:	66 23       	and	r22, r22
    30d6:	79 f2       	breq	.-98     	; 0x3076 <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    30d8:	20 91 a5 01 	lds	r18, 0x01A5
    30dc:	82 2f       	mov	r24, r18
    30de:	82 95       	swap	r24
    30e0:	8f 70       	andi	r24, 0x0F	; 15
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	02 97       	sbiw	r24, 0x02	; 2
    30e6:	74 f0       	brlt	.+28     	; 0x3104 <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    30e8:	80 91 a0 01 	lds	r24, 0x01A0
    30ec:	90 91 a1 01 	lds	r25, 0x01A1
    30f0:	9a 83       	std	Y+2, r25	; 0x02
    30f2:	89 83       	std	Y+1, r24	; 0x01
    30f4:	1b 82       	std	Y+3, r1	; 0x03
    30f6:	fd 82       	std	Y+5, r15	; 0x05
    30f8:	ec 82       	std	Y+4, r14	; 0x04
    30fa:	2e 83       	std	Y+6, r18	; 0x06
    30fc:	ce 01       	movw	r24, r28
    30fe:	01 96       	adiw	r24, 0x01	; 1
    3100:	0e 94 57 13 	call	0x26ae	; 0x26ae <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    3104:	86 e0       	ldi	r24, 0x06	; 6
    3106:	f8 01       	movw	r30, r16
    3108:	a0 ea       	ldi	r26, 0xA0	; 160
    310a:	b1 e0       	ldi	r27, 0x01	; 1
    310c:	01 90       	ld	r0, Z+
    310e:	0d 92       	st	X+, r0
    3110:	8a 95       	dec	r24
    3112:	e1 f7       	brne	.-8      	; 0x310c <process_tapping+0x262>
                    waiting_buffer_scan_tap();
    3114:	0e 94 ed 16 	call	0x2dda	; 0x2dda <waiting_buffer_scan_tap>
    3118:	6f c0       	rjmp	.+222    	; 0x31f8 <process_tapping+0x34e>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    311a:	e2 16       	cp	r14, r18
    311c:	f3 06       	cpc	r15, r19
    311e:	28 f0       	brcs	.+10     	; 0x312a <process_tapping+0x280>
    3120:	c7 01       	movw	r24, r14
    3122:	82 1b       	sub	r24, r18
    3124:	93 0b       	sbc	r25, r19
    3126:	9c 01       	movw	r18, r24
    3128:	04 c0       	rjmp	.+8      	; 0x3132 <process_tapping+0x288>
    312a:	20 95       	com	r18
    312c:	30 95       	com	r19
    312e:	2e 0d       	add	r18, r14
    3130:	3f 1d       	adc	r19, r15
    3132:	28 3c       	cpi	r18, 0xC8	; 200
    3134:	31 05       	cpc	r19, r1
    3136:	08 f0       	brcs	.+2      	; 0x313a <process_tapping+0x290>
    3138:	52 c0       	rjmp	.+164    	; 0x31de <process_tapping+0x334>
            if (event.pressed) {
    313a:	d6 2e       	mov	r13, r22
    313c:	66 23       	and	r22, r22
    313e:	09 f4       	brne	.+2      	; 0x3142 <process_tapping+0x298>
    3140:	9a cf       	rjmp	.-204    	; 0x3076 <process_tapping+0x1cc>
                if (IS_TAPPING_KEY(event.key)) {
    3142:	e5 13       	cpse	r30, r21
    3144:	2c c0       	rjmp	.+88     	; 0x319e <process_tapping+0x2f4>
    3146:	74 13       	cpse	r23, r20
    3148:	2a c0       	rjmp	.+84     	; 0x319e <process_tapping+0x2f4>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    314a:	80 91 a5 01 	lds	r24, 0x01A5
    314e:	80 fd       	sbrc	r24, 0
    3150:	1d c0       	rjmp	.+58     	; 0x318c <process_tapping+0x2e2>
    3152:	98 2f       	mov	r25, r24
    3154:	92 95       	swap	r25
    3156:	9f 70       	andi	r25, 0x0F	; 15
    3158:	c9 f0       	breq	.+50     	; 0x318c <process_tapping+0x2e2>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    315a:	d8 01       	movw	r26, r16
    315c:	15 96       	adiw	r26, 0x05	; 5
    315e:	8c 93       	st	X, r24
    3160:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    3162:	9f 30       	cpi	r25, 0x0F	; 15
    3164:	39 f0       	breq	.+14     	; 0x3174 <process_tapping+0x2ca>
    3166:	9f 5f       	subi	r25, 0xFF	; 255
    3168:	92 95       	swap	r25
    316a:	90 7f       	andi	r25, 0xF0	; 240
    316c:	8f 70       	andi	r24, 0x0F	; 15
    316e:	89 2b       	or	r24, r25
    3170:	15 96       	adiw	r26, 0x05	; 5
    3172:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    3174:	c8 01       	movw	r24, r16
    3176:	0e 94 57 13 	call	0x26ae	; 0x26ae <process_action>
                        tapping_key = *keyp;
    317a:	86 e0       	ldi	r24, 0x06	; 6
    317c:	f8 01       	movw	r30, r16
    317e:	a0 ea       	ldi	r26, 0xA0	; 160
    3180:	b1 e0       	ldi	r27, 0x01	; 1
    3182:	01 90       	ld	r0, Z+
    3184:	0d 92       	st	X+, r0
    3186:	8a 95       	dec	r24
    3188:	e1 f7       	brne	.-8      	; 0x3182 <process_tapping+0x2d8>
    318a:	36 c0       	rjmp	.+108    	; 0x31f8 <process_tapping+0x34e>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    318c:	86 e0       	ldi	r24, 0x06	; 6
    318e:	f8 01       	movw	r30, r16
    3190:	a0 ea       	ldi	r26, 0xA0	; 160
    3192:	b1 e0       	ldi	r27, 0x01	; 1
    3194:	01 90       	ld	r0, Z+
    3196:	0d 92       	st	X+, r0
    3198:	8a 95       	dec	r24
    319a:	e1 f7       	brne	.-8      	; 0x3194 <process_tapping+0x2ea>
                        return true;
    319c:	63 c0       	rjmp	.+198    	; 0x3264 <process_tapping+0x3ba>
                    }
                } else if (is_tap_key(event.key)) {
    319e:	4d 87       	std	Y+13, r20	; 0x0d
    31a0:	5e 87       	std	Y+14, r21	; 0x0e
    31a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    31a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    31a6:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <is_tap_key>
    31aa:	88 23       	and	r24, r24
    31ac:	79 f0       	breq	.+30     	; 0x31cc <process_tapping+0x322>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    31ae:	86 e0       	ldi	r24, 0x06	; 6
    31b0:	f8 01       	movw	r30, r16
    31b2:	a0 ea       	ldi	r26, 0xA0	; 160
    31b4:	b1 e0       	ldi	r27, 0x01	; 1
    31b6:	01 90       	ld	r0, Z+
    31b8:	0d 92       	st	X+, r0
    31ba:	8a 95       	dec	r24
    31bc:	e1 f7       	brne	.-8      	; 0x31b6 <process_tapping+0x30c>
                    waiting_buffer_scan_tap();
    31be:	0e 94 ed 16 	call	0x2dda	; 0x2dda <waiting_buffer_scan_tap>
                    debug_tapping_key();
    31c2:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <debug_tapping_key>
                    return true;
    31c6:	dd 24       	eor	r13, r13
    31c8:	d3 94       	inc	r13
    31ca:	4c c0       	rjmp	.+152    	; 0x3264 <process_tapping+0x3ba>
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    31cc:	80 91 a5 01 	lds	r24, 0x01A5
    31d0:	81 60       	ori	r24, 0x01	; 1
    31d2:	80 93 a5 01 	sts	0x01A5, r24
                    process_action(keyp);
    31d6:	c8 01       	movw	r24, r16
    31d8:	0e 94 57 13 	call	0x26ae	; 0x26ae <process_action>
                    return true;
    31dc:	43 c0       	rjmp	.+134    	; 0x3264 <process_tapping+0x3ba>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    31de:	7e 2d       	mov	r23, r14
    31e0:	f9 8a       	std	Y+17, r15	; 0x11
    31e2:	e8 8a       	std	Y+16, r14	; 0x10
    31e4:	89 89       	ldd	r24, Y+17	; 0x11
    31e6:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <debug_event>
            tapping_key = (keyrecord_t){};
    31ea:	e0 ea       	ldi	r30, 0xA0	; 160
    31ec:	f1 e0       	ldi	r31, 0x01	; 1
    31ee:	86 e0       	ldi	r24, 0x06	; 6
    31f0:	df 01       	movw	r26, r30
    31f2:	1d 92       	st	X+, r1
    31f4:	8a 95       	dec	r24
    31f6:	e9 f7       	brne	.-6      	; 0x31f2 <process_tapping+0x348>
            debug_tapping_key();
    31f8:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <debug_tapping_key>
            return false;
    31fc:	33 c0       	rjmp	.+102    	; 0x3264 <process_tapping+0x3ba>
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    31fe:	66 23       	and	r22, r22
    3200:	09 f4       	brne	.+2      	; 0x3204 <process_tapping+0x35a>
    3202:	39 cf       	rjmp	.-398    	; 0x3076 <process_tapping+0x1cc>
    3204:	4d 87       	std	Y+13, r20	; 0x0d
    3206:	5e 87       	std	Y+14, r21	; 0x0e
    3208:	8d 85       	ldd	r24, Y+13	; 0x0d
    320a:	9e 85       	ldd	r25, Y+14	; 0x0e
    320c:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <is_tap_key>
    3210:	88 23       	and	r24, r24
    3212:	09 f4       	brne	.+2      	; 0x3216 <process_tapping+0x36c>
    3214:	30 cf       	rjmp	.-416    	; 0x3076 <process_tapping+0x1cc>
    3216:	cb cf       	rjmp	.-106    	; 0x31ae <process_tapping+0x304>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    3218:	4d 87       	std	Y+13, r20	; 0x0d
    321a:	5e 87       	std	Y+14, r21	; 0x0e
    321c:	8d 85       	ldd	r24, Y+13	; 0x0d
    321e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3220:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <layer_switch_get_action>
                    switch (action.kind.id) {
    3224:	29 2f       	mov	r18, r25
    3226:	22 95       	swap	r18
    3228:	2f 70       	andi	r18, 0x0F	; 15
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	22 30       	cpi	r18, 0x02	; 2
    322e:	31 05       	cpc	r19, r1
    3230:	2c f4       	brge	.+10     	; 0x323c <process_tapping+0x392>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    3232:	9f 70       	andi	r25, 0x0F	; 15
    3234:	41 f0       	breq	.+16     	; 0x3246 <process_tapping+0x39c>
    3236:	81 11       	cpse	r24, r1
    3238:	06 c0       	rjmp	.+12     	; 0x3246 <process_tapping+0x39c>
    323a:	0c c0       	rjmp	.+24     	; 0x3254 <process_tapping+0x3aa>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    323c:	24 30       	cpi	r18, 0x04	; 4
    323e:	31 05       	cpc	r19, r1
    3240:	2c f4       	brge	.+10     	; 0x324c <process_tapping+0x3a2>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3242:	9f 70       	andi	r25, 0x0F	; 15
    3244:	49 f4       	brne	.+18     	; 0x3258 <process_tapping+0x3ae>
                            if (IS_MOD(action.key.code)) return false;
    3246:	80 5e       	subi	r24, 0xE0	; 224
    3248:	88 30       	cpi	r24, 0x08	; 8
    324a:	20 f0       	brcs	.+8      	; 0x3254 <process_tapping+0x3aa>
                            break;
                    }
                    // Release of key should be process immediately.
                    debug("Tapping: release event of a key pressed before tapping\n");
                    process_action(keyp);
    324c:	c8 01       	movw	r24, r16
    324e:	0e 94 57 13 	call	0x26ae	; 0x26ae <process_action>
                    return true;
    3252:	cf 2c       	mov	r12, r15
    3254:	dc 2c       	mov	r13, r12
    3256:	06 c0       	rjmp	.+12     	; 0x3264 <process_tapping+0x3ba>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3258:	d8 01       	movw	r26, r16
    325a:	15 96       	adiw	r26, 0x05	; 5
    325c:	9c 91       	ld	r25, X
    325e:	90 7f       	andi	r25, 0xF0	; 240
    3260:	91 f7       	brne	.-28     	; 0x3246 <process_tapping+0x39c>
    3262:	f8 cf       	rjmp	.-16     	; 0x3254 <process_tapping+0x3aa>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    3264:	8d 2d       	mov	r24, r13
    3266:	62 96       	adiw	r28, 0x12	; 18
    3268:	0f b6       	in	r0, 0x3f	; 63
    326a:	f8 94       	cli
    326c:	de bf       	out	0x3e, r29	; 62
    326e:	0f be       	out	0x3f, r0	; 63
    3270:	cd bf       	out	0x3d, r28	; 61
    3272:	df 91       	pop	r29
    3274:	cf 91       	pop	r28
    3276:	1f 91       	pop	r17
    3278:	0f 91       	pop	r16
    327a:	ff 90       	pop	r15
    327c:	ef 90       	pop	r14
    327e:	df 90       	pop	r13
    3280:	cf 90       	pop	r12
    3282:	08 95       	ret

00003284 <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    3284:	1f 93       	push	r17
    3286:	cf 93       	push	r28
    3288:	df 93       	push	r29
    328a:	cd b7       	in	r28, 0x3d	; 61
    328c:	de b7       	in	r29, 0x3e	; 62
    328e:	2c 97       	sbiw	r28, 0x0c	; 12
    3290:	0f b6       	in	r0, 0x3f	; 63
    3292:	f8 94       	cli
    3294:	de bf       	out	0x3e, r29	; 62
    3296:	0f be       	out	0x3f, r0	; 63
    3298:	cd bf       	out	0x3d, r28	; 61
    329a:	4f 83       	std	Y+7, r20	; 0x07
    329c:	58 87       	std	Y+8, r21	; 0x08
    329e:	69 87       	std	Y+9, r22	; 0x09
    32a0:	7a 87       	std	Y+10, r23	; 0x0a
    32a2:	8b 87       	std	Y+11, r24	; 0x0b
    32a4:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    32a6:	ce 01       	movw	r24, r28
    32a8:	07 96       	adiw	r24, 0x07	; 7
    32aa:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <process_tapping>
    32ae:	88 23       	and	r24, r24
    32b0:	c1 f0       	breq	.+48     	; 0x32e2 <action_tapping_process+0x5e>
        if (!IS_NOEVENT(record.event)) {
    32b2:	2f 81       	ldd	r18, Y+7	; 0x07
    32b4:	38 85       	ldd	r19, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    32b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    32b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    32ba:	89 2b       	or	r24, r25
    32bc:	31 f0       	breq	.+12     	; 0x32ca <action_tapping_process+0x46>
    32be:	3f 3f       	cpi	r19, 0xFF	; 255
    32c0:	11 f0       	breq	.+4      	; 0x32c6 <action_tapping_process+0x42>
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	03 c0       	rjmp	.+6      	; 0x32cc <action_tapping_process+0x48>
    32c6:	2f 3f       	cpi	r18, 0xFF	; 255
    32c8:	e1 f7       	brne	.-8      	; 0x32c2 <action_tapping_process+0x3e>
    32ca:	81 e0       	ldi	r24, 0x01	; 1
    32cc:	81 11       	cpse	r24, r1
    32ce:	47 c0       	rjmp	.+142    	; 0x335e <action_tapping_process+0xda>
            debug("processed: "); debug_record(record); debug("\n");
    32d0:	4f 81       	ldd	r20, Y+7	; 0x07
    32d2:	58 85       	ldd	r21, Y+8	; 0x08
    32d4:	69 85       	ldd	r22, Y+9	; 0x09
    32d6:	7a 85       	ldd	r23, Y+10	; 0x0a
    32d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    32da:	9c 85       	ldd	r25, Y+12	; 0x0c
    32dc:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <debug_record>
    32e0:	3e c0       	rjmp	.+124    	; 0x335e <action_tapping_process+0xda>
    32e2:	86 e0       	ldi	r24, 0x06	; 6
    32e4:	fe 01       	movw	r30, r28
    32e6:	37 96       	adiw	r30, 0x07	; 7
    32e8:	de 01       	movw	r26, r28
    32ea:	11 96       	adiw	r26, 0x01	; 1
    32ec:	01 90       	ld	r0, Z+
    32ee:	0d 92       	st	X+, r0
    32f0:	8a 95       	dec	r24
    32f2:	e1 f7       	brne	.-8      	; 0x32ec <action_tapping_process+0x68>
    32f4:	ff 81       	ldd	r31, Y+7	; 0x07
    32f6:	e8 85       	ldd	r30, Y+8	; 0x08
    32f8:	4a 85       	ldd	r20, Y+10	; 0x0a
    32fa:	5b 85       	ldd	r21, Y+11	; 0x0b
    32fc:	41 15       	cp	r20, r1
    32fe:	51 05       	cpc	r21, r1
    3300:	31 f0       	breq	.+12     	; 0x330e <action_tapping_process+0x8a>
    3302:	ef 3f       	cpi	r30, 0xFF	; 255
    3304:	31 f4       	brne	.+12     	; 0x3312 <action_tapping_process+0x8e>
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	ff 3f       	cpi	r31, 0xFF	; 255
    330a:	19 f4       	brne	.+6      	; 0x3312 <action_tapping_process+0x8e>
    330c:	03 c0       	rjmp	.+6      	; 0x3314 <action_tapping_process+0x90>
    330e:	81 e0       	ldi	r24, 0x01	; 1
    3310:	01 c0       	rjmp	.+2      	; 0x3314 <action_tapping_process+0x90>
    3312:	80 e0       	ldi	r24, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    3314:	80 fd       	sbrc	r24, 0
    3316:	23 c0       	rjmp	.+70     	; 0x335e <action_tapping_process+0xda>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    3318:	20 91 6f 01 	lds	r18, 0x016F
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	c9 01       	movw	r24, r18
    3320:	01 96       	adiw	r24, 0x01	; 1
    3322:	87 70       	andi	r24, 0x07	; 7
    3324:	99 27       	eor	r25, r25
    3326:	60 91 6e 01 	lds	r22, 0x016E
    332a:	70 e0       	ldi	r23, 0x00	; 0
    332c:	86 17       	cp	r24, r22
    332e:	97 07       	cpc	r25, r23
    3330:	f1 f1       	breq	.+124    	; 0x33ae <action_tapping_process+0x12a>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    3332:	f9 83       	std	Y+1, r31	; 0x01
    3334:	ea 83       	std	Y+2, r30	; 0x02
    3336:	5d 83       	std	Y+5, r21	; 0x05
    3338:	4c 83       	std	Y+4, r20	; 0x04
    333a:	96 e0       	ldi	r25, 0x06	; 6
    333c:	92 9f       	mul	r25, r18
    333e:	d0 01       	movw	r26, r0
    3340:	93 9f       	mul	r25, r19
    3342:	b0 0d       	add	r27, r0
    3344:	11 24       	eor	r1, r1
    3346:	a0 59       	subi	r26, 0x90	; 144
    3348:	be 4f       	sbci	r27, 0xFE	; 254
    334a:	fe 01       	movw	r30, r28
    334c:	31 96       	adiw	r30, 0x01	; 1
    334e:	01 90       	ld	r0, Z+
    3350:	0d 92       	st	X+, r0
    3352:	9a 95       	dec	r25
    3354:	e1 f7       	brne	.-8      	; 0x334e <action_tapping_process+0xca>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    3356:	80 93 6f 01 	sts	0x016F, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    335a:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    335e:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3360:	80 91 6e 01 	lds	r24, 0x016E
    3364:	90 91 6f 01 	lds	r25, 0x016F
    3368:	89 17       	cp	r24, r25
    336a:	79 f1       	breq	.+94     	; 0x33ca <action_tapping_process+0x146>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    336c:	18 9f       	mul	r17, r24
    336e:	c0 01       	movw	r24, r0
    3370:	11 24       	eor	r1, r1
    3372:	80 59       	subi	r24, 0x90	; 144
    3374:	9e 4f       	sbci	r25, 0xFE	; 254
    3376:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <process_tapping>
    337a:	88 23       	and	r24, r24
    337c:	31 f1       	breq	.+76     	; 0x33ca <action_tapping_process+0x146>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    337e:	e0 91 6e 01 	lds	r30, 0x016E
    3382:	1e 9f       	mul	r17, r30
    3384:	f0 01       	movw	r30, r0
    3386:	11 24       	eor	r1, r1
    3388:	e0 59       	subi	r30, 0x90	; 144
    338a:	fe 4f       	sbci	r31, 0xFE	; 254
    338c:	40 81       	ld	r20, Z
    338e:	51 81       	ldd	r21, Z+1	; 0x01
    3390:	62 81       	ldd	r22, Z+2	; 0x02
    3392:	73 81       	ldd	r23, Z+3	; 0x03
    3394:	84 81       	ldd	r24, Z+4	; 0x04
    3396:	95 81       	ldd	r25, Z+5	; 0x05
    3398:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    339c:	80 91 6e 01 	lds	r24, 0x016E
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	01 96       	adiw	r24, 0x01	; 1
    33a4:	87 70       	andi	r24, 0x07	; 7
    33a6:	99 27       	eor	r25, r25
    33a8:	80 93 6e 01 	sts	0x016E, r24
    33ac:	d9 cf       	rjmp	.-78     	; 0x3360 <action_tapping_process+0xdc>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    33ae:	0e 94 76 16 	call	0x2cec	; 0x2cec <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    33b2:	10 92 6f 01 	sts	0x016F, r1
    waiting_buffer_tail = 0;
    33b6:	10 92 6e 01 	sts	0x016E, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    33ba:	e0 ea       	ldi	r30, 0xA0	; 160
    33bc:	f1 e0       	ldi	r31, 0x01	; 1
    33be:	86 e0       	ldi	r24, 0x06	; 6
    33c0:	df 01       	movw	r26, r30
    33c2:	1d 92       	st	X+, r1
    33c4:	8a 95       	dec	r24
    33c6:	e9 f7       	brne	.-6      	; 0x33c2 <action_tapping_process+0x13e>
    33c8:	ca cf       	rjmp	.-108    	; 0x335e <action_tapping_process+0xda>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    33ca:	2c 96       	adiw	r28, 0x0c	; 12
    33cc:	0f b6       	in	r0, 0x3f	; 63
    33ce:	f8 94       	cli
    33d0:	de bf       	out	0x3e, r29	; 62
    33d2:	0f be       	out	0x3f, r0	; 63
    33d4:	cd bf       	out	0x3d, r28	; 61
    33d6:	df 91       	pop	r29
    33d8:	cf 91       	pop	r28
    33da:	1f 91       	pop	r17
    33dc:	08 95       	ret

000033de <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    33de:	df 92       	push	r13
    33e0:	ef 92       	push	r14
    33e2:	ff 92       	push	r15
    33e4:	0f 93       	push	r16
    33e6:	1f 93       	push	r17
    33e8:	cf 93       	push	r28
    33ea:	df 93       	push	r29
    33ec:	fc 01       	movw	r30, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    33ee:	00 97       	sbiw	r24, 0x00	; 0
    33f0:	09 f4       	brne	.+2      	; 0x33f4 <action_macro_play+0x16>
    33f2:	8a c0       	rjmp	.+276    	; 0x3508 <action_macro_play+0x12a>
    33f4:	e1 2c       	mov	r14, r1
    33f6:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    33f8:	dd 24       	eor	r13, r13
    33fa:	d3 94       	inc	r13

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    33fc:	ef 01       	movw	r28, r30
    33fe:	21 96       	adiw	r28, 0x01	; 1
    3400:	84 91       	lpm	r24, Z
    3402:	85 37       	cpi	r24, 0x75	; 117
    3404:	09 f4       	brne	.+2      	; 0x3408 <action_macro_play+0x2a>
    3406:	61 c0       	rjmp	.+194    	; 0x34ca <action_macro_play+0xec>
    3408:	58 f4       	brcc	.+22     	; 0x3420 <action_macro_play+0x42>
    340a:	84 37       	cpi	r24, 0x74	; 116
    340c:	08 f0       	brcs	.+2      	; 0x3410 <action_macro_play+0x32>
    340e:	4e c0       	rjmp	.+156    	; 0x34ac <action_macro_play+0xce>
    3410:	84 30       	cpi	r24, 0x04	; 4
    3412:	08 f0       	brcs	.+2      	; 0x3416 <action_macro_play+0x38>
    3414:	6a c0       	rjmp	.+212    	; 0x34ea <action_macro_play+0x10c>
    3416:	81 30       	cpi	r24, 0x01	; 1
    3418:	d1 f0       	breq	.+52     	; 0x344e <action_macro_play+0x70>
    341a:	82 30       	cpi	r24, 0x02	; 2
    341c:	71 f1       	breq	.+92     	; 0x347a <action_macro_play+0x9c>
    341e:	74 c0       	rjmp	.+232    	; 0x3508 <action_macro_play+0x12a>
    3420:	88 37       	cpi	r24, 0x78	; 120
    3422:	09 f4       	brne	.+2      	; 0x3426 <action_macro_play+0x48>
    3424:	5d c0       	rjmp	.+186    	; 0x34e0 <action_macro_play+0x102>
    3426:	50 f4       	brcc	.+20     	; 0x343c <action_macro_play+0x5e>
    3428:	86 37       	cpi	r24, 0x76	; 118
    342a:	09 f4       	brne	.+2      	; 0x342e <action_macro_play+0x50>
    342c:	55 c0       	rjmp	.+170    	; 0x34d8 <action_macro_play+0xfa>
    342e:	87 37       	cpi	r24, 0x77	; 119
    3430:	09 f0       	breq	.+2      	; 0x3434 <action_macro_play+0x56>
    3432:	6a c0       	rjmp	.+212    	; 0x3508 <action_macro_play+0x12a>
                break;
            case MOD_STORE:
                mod_storage = get_mods();
                break;
            case MOD_RESTORE:
                set_mods(mod_storage);
    3434:	8e 2d       	mov	r24, r14
    3436:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <set_mods>
    343a:	54 c0       	rjmp	.+168    	; 0x34e4 <action_macro_play+0x106>

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    343c:	9c e7       	ldi	r25, 0x7C	; 124
    343e:	98 0f       	add	r25, r24
    3440:	90 37       	cpi	r25, 0x70	; 112
    3442:	08 f0       	brcs	.+2      	; 0x3446 <action_macro_play+0x68>
    3444:	61 c0       	rjmp	.+194    	; 0x3508 <action_macro_play+0x12a>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    3446:	8f 77       	andi	r24, 0x7F	; 127
    3448:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <unregister_code>
                break;
    344c:	50 c0       	rjmp	.+160    	; 0x34ee <action_macro_play+0x110>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    344e:	8f 01       	movw	r16, r30
    3450:	0e 5f       	subi	r16, 0xFE	; 254
    3452:	1f 4f       	sbci	r17, 0xFF	; 255
    3454:	fe 01       	movw	r30, r28
    3456:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3458:	90 e2       	ldi	r25, 0x20	; 32
    345a:	98 0f       	add	r25, r24
    345c:	98 30       	cpi	r25, 0x08	; 8
    345e:	50 f4       	brcc	.+20     	; 0x3474 <action_macro_play+0x96>
                    add_weak_mods(MOD_BIT(macro));
    3460:	87 70       	andi	r24, 0x07	; 7
    3462:	fd 2d       	mov	r31, r13
    3464:	01 c0       	rjmp	.+2      	; 0x3468 <action_macro_play+0x8a>
    3466:	ff 0f       	add	r31, r31
    3468:	8a 95       	dec	r24
    346a:	ea f7       	brpl	.-6      	; 0x3466 <action_macro_play+0x88>
    346c:	8f 2f       	mov	r24, r31
    346e:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <add_weak_mods>
    3472:	15 c0       	rjmp	.+42     	; 0x349e <action_macro_play+0xc0>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    3474:	0e 94 27 12 	call	0x244e	; 0x244e <register_code>
    3478:	14 c0       	rjmp	.+40     	; 0x34a2 <action_macro_play+0xc4>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    347a:	8f 01       	movw	r16, r30
    347c:	0e 5f       	subi	r16, 0xFE	; 254
    347e:	1f 4f       	sbci	r17, 0xFF	; 255
    3480:	fe 01       	movw	r30, r28
    3482:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3484:	90 e2       	ldi	r25, 0x20	; 32
    3486:	98 0f       	add	r25, r24
    3488:	98 30       	cpi	r25, 0x08	; 8
    348a:	68 f4       	brcc	.+26     	; 0x34a6 <action_macro_play+0xc8>
                    del_weak_mods(MOD_BIT(macro));
    348c:	87 70       	andi	r24, 0x07	; 7
    348e:	fd 2d       	mov	r31, r13
    3490:	01 c0       	rjmp	.+2      	; 0x3494 <action_macro_play+0xb6>
    3492:	ff 0f       	add	r31, r31
    3494:	8a 95       	dec	r24
    3496:	ea f7       	brpl	.-6      	; 0x3492 <action_macro_play+0xb4>
    3498:	8f 2f       	mov	r24, r31
    349a:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <del_weak_mods>
                    send_keyboard_report();
    349e:	0e 94 a1 1c 	call	0x3942	; 0x3942 <send_keyboard_report>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    34a2:	e8 01       	movw	r28, r16
    34a4:	24 c0       	rjmp	.+72     	; 0x34ee <action_macro_play+0x110>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                    send_keyboard_report();
                } else {
                    unregister_code(macro);
    34a6:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <unregister_code>
    34aa:	fb cf       	rjmp	.-10     	; 0x34a2 <action_macro_play+0xc4>
                }
                break;
            case WAIT:
                MACRO_READ();
    34ac:	9f 01       	movw	r18, r30
    34ae:	2e 5f       	subi	r18, 0xFE	; 254
    34b0:	3f 4f       	sbci	r19, 0xFF	; 255
    34b2:	fe 01       	movw	r30, r28
    34b4:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    34b6:	cc 23       	and	r28, r28
    34b8:	69 f0       	breq	.+26     	; 0x34d4 <action_macro_play+0xf6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    34ba:	8f e9       	ldi	r24, 0x9F	; 159
    34bc:	9f e0       	ldi	r25, 0x0F	; 15
    34be:	01 97       	sbiw	r24, 0x01	; 1
    34c0:	f1 f7       	brne	.-4      	; 0x34be <action_macro_play+0xe0>
    34c2:	00 c0       	rjmp	.+0      	; 0x34c4 <action_macro_play+0xe6>
    34c4:	00 00       	nop
    34c6:	c1 50       	subi	r28, 0x01	; 1
    34c8:	f6 cf       	rjmp	.-20     	; 0x34b6 <action_macro_play+0xd8>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    34ca:	9f 01       	movw	r18, r30
    34cc:	2e 5f       	subi	r18, 0xFE	; 254
    34ce:	3f 4f       	sbci	r19, 0xFF	; 255
    34d0:	fe 01       	movw	r30, r28
    34d2:	f4 90       	lpm	r15, Z
    34d4:	e9 01       	movw	r28, r18
                dprintf("INTERVAL(%u)\n", interval);
                break;
    34d6:	0b c0       	rjmp	.+22     	; 0x34ee <action_macro_play+0x110>
            case MOD_STORE:
                mod_storage = get_mods();
    34d8:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <get_mods>
    34dc:	e8 2e       	mov	r14, r24
                break;
    34de:	07 c0       	rjmp	.+14     	; 0x34ee <action_macro_play+0x110>
            case MOD_RESTORE:
                set_mods(mod_storage);
                send_keyboard_report();
                break;
            case MOD_CLEAR:
                clear_mods();
    34e0:	0e 94 75 1c 	call	0x38ea	; 0x38ea <clear_mods>
                send_keyboard_report();
    34e4:	0e 94 a1 1c 	call	0x3942	; 0x3942 <send_keyboard_report>
                break;
    34e8:	02 c0       	rjmp	.+4      	; 0x34ee <action_macro_play+0x110>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    34ea:	0e 94 27 12 	call	0x244e	; 0x244e <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    34ee:	9f 2d       	mov	r25, r15
    34f0:	99 23       	and	r25, r25
    34f2:	41 f0       	breq	.+16     	; 0x3504 <action_macro_play+0x126>
    34f4:	ef e9       	ldi	r30, 0x9F	; 159
    34f6:	ff e0       	ldi	r31, 0x0F	; 15
    34f8:	31 97       	sbiw	r30, 0x01	; 1
    34fa:	f1 f7       	brne	.-4      	; 0x34f8 <action_macro_play+0x11a>
    34fc:	00 c0       	rjmp	.+0      	; 0x34fe <action_macro_play+0x120>
    34fe:	00 00       	nop
    3500:	91 50       	subi	r25, 0x01	; 1
    3502:	f6 cf       	rjmp	.-20     	; 0x34f0 <action_macro_play+0x112>
    3504:	fe 01       	movw	r30, r28
    3506:	7a cf       	rjmp	.-268    	; 0x33fc <action_macro_play+0x1e>
    }
}
    3508:	df 91       	pop	r29
    350a:	cf 91       	pop	r28
    350c:	1f 91       	pop	r17
    350e:	0f 91       	pop	r16
    3510:	ff 90       	pop	r15
    3512:	ef 90       	pop	r14
    3514:	df 90       	pop	r13
    3516:	08 95       	ret

00003518 <default_layer_state_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3518:	60 93 aa 01 	sts	0x01AA, r22
    351c:	70 93 ab 01 	sts	0x01AB, r23
    3520:	80 93 ac 01 	sts	0x01AC, r24
    3524:	90 93 ad 01 	sts	0x01AD, r25
    hook_default_layer_change(default_layer_state);
    3528:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <hook_default_layer_change>
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    352c:	0c 94 64 16 	jmp	0x2cc8	; 0x2cc8 <clear_keyboard_but_mods>

00003530 <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3530:	60 93 a6 01 	sts	0x01A6, r22
    3534:	70 93 a7 01 	sts	0x01A7, r23
    3538:	80 93 a8 01 	sts	0x01A8, r24
    353c:	90 93 a9 01 	sts	0x01A9, r25
    hook_layer_change(layer_state);
    3540:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <hook_layer_change>
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3544:	0c 94 64 16 	jmp	0x2cc8	; 0x2cc8 <clear_keyboard_but_mods>

00003548 <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    3548:	08 95       	ret

0000354a <default_layer_set>:
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}

void default_layer_set(uint32_t state)
{
    default_layer_state_set(state);
    354a:	0c 94 8c 1a 	jmp	0x3518	; 0x3518 <default_layer_state_set>

0000354e <default_layer_or>:
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    354e:	0f 93       	push	r16
    3550:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    3552:	00 91 aa 01 	lds	r16, 0x01AA
    3556:	10 91 ab 01 	lds	r17, 0x01AB
    355a:	20 91 ac 01 	lds	r18, 0x01AC
    355e:	30 91 ad 01 	lds	r19, 0x01AD
    3562:	60 2b       	or	r22, r16
    3564:	71 2b       	or	r23, r17
    3566:	82 2b       	or	r24, r18
    3568:	93 2b       	or	r25, r19
}
    356a:	1f 91       	pop	r17
    356c:	0f 91       	pop	r16
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
    356e:	0c 94 8c 1a 	jmp	0x3518	; 0x3518 <default_layer_state_set>

00003572 <default_layer_and>:
}
void default_layer_and(uint32_t state)
{
    3572:	0f 93       	push	r16
    3574:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    3576:	00 91 aa 01 	lds	r16, 0x01AA
    357a:	10 91 ab 01 	lds	r17, 0x01AB
    357e:	20 91 ac 01 	lds	r18, 0x01AC
    3582:	30 91 ad 01 	lds	r19, 0x01AD
    3586:	60 23       	and	r22, r16
    3588:	71 23       	and	r23, r17
    358a:	82 23       	and	r24, r18
    358c:	93 23       	and	r25, r19
}
    358e:	1f 91       	pop	r17
    3590:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
    3592:	0c 94 8c 1a 	jmp	0x3518	; 0x3518 <default_layer_state_set>

00003596 <default_layer_xor>:
}
void default_layer_xor(uint32_t state)
{
    3596:	0f 93       	push	r16
    3598:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    359a:	00 91 aa 01 	lds	r16, 0x01AA
    359e:	10 91 ab 01 	lds	r17, 0x01AB
    35a2:	20 91 ac 01 	lds	r18, 0x01AC
    35a6:	30 91 ad 01 	lds	r19, 0x01AD
    35aa:	60 27       	eor	r22, r16
    35ac:	71 27       	eor	r23, r17
    35ae:	82 27       	eor	r24, r18
    35b0:	93 27       	eor	r25, r19
}
    35b2:	1f 91       	pop	r17
    35b4:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
    35b6:	0c 94 8c 1a 	jmp	0x3518	; 0x3518 <default_layer_state_set>

000035ba <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    35ba:	60 e0       	ldi	r22, 0x00	; 0
    35bc:	70 e0       	ldi	r23, 0x00	; 0
    35be:	cb 01       	movw	r24, r22
    35c0:	0c 94 98 1a 	jmp	0x3530	; 0x3530 <layer_state_set>

000035c4 <layer_move>:
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    35c4:	41 e0       	ldi	r20, 0x01	; 1
    35c6:	50 e0       	ldi	r21, 0x00	; 0
    35c8:	60 e0       	ldi	r22, 0x00	; 0
    35ca:	70 e0       	ldi	r23, 0x00	; 0
    35cc:	04 c0       	rjmp	.+8      	; 0x35d6 <layer_move+0x12>
    35ce:	44 0f       	add	r20, r20
    35d0:	55 1f       	adc	r21, r21
    35d2:	66 1f       	adc	r22, r22
    35d4:	77 1f       	adc	r23, r23
    35d6:	8a 95       	dec	r24
    35d8:	d2 f7       	brpl	.-12     	; 0x35ce <layer_move+0xa>
    35da:	cb 01       	movw	r24, r22
    35dc:	ba 01       	movw	r22, r20
    35de:	0c 94 98 1a 	jmp	0x3530	; 0x3530 <layer_state_set>

000035e2 <layer_on>:
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    35e2:	41 e0       	ldi	r20, 0x01	; 1
    35e4:	50 e0       	ldi	r21, 0x00	; 0
    35e6:	60 e0       	ldi	r22, 0x00	; 0
    35e8:	70 e0       	ldi	r23, 0x00	; 0
    35ea:	04 c0       	rjmp	.+8      	; 0x35f4 <layer_on+0x12>
    35ec:	44 0f       	add	r20, r20
    35ee:	55 1f       	adc	r21, r21
    35f0:	66 1f       	adc	r22, r22
    35f2:	77 1f       	adc	r23, r23
    35f4:	8a 95       	dec	r24
    35f6:	d2 f7       	brpl	.-12     	; 0x35ec <layer_on+0xa>
    35f8:	80 91 a6 01 	lds	r24, 0x01A6
    35fc:	90 91 a7 01 	lds	r25, 0x01A7
    3600:	a0 91 a8 01 	lds	r26, 0x01A8
    3604:	b0 91 a9 01 	lds	r27, 0x01A9
    3608:	48 2b       	or	r20, r24
    360a:	59 2b       	or	r21, r25
    360c:	6a 2b       	or	r22, r26
    360e:	7b 2b       	or	r23, r27
    3610:	cb 01       	movw	r24, r22
    3612:	ba 01       	movw	r22, r20
    3614:	0c 94 98 1a 	jmp	0x3530	; 0x3530 <layer_state_set>

00003618 <layer_off>:
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    3618:	41 e0       	ldi	r20, 0x01	; 1
    361a:	50 e0       	ldi	r21, 0x00	; 0
    361c:	60 e0       	ldi	r22, 0x00	; 0
    361e:	70 e0       	ldi	r23, 0x00	; 0
    3620:	04 c0       	rjmp	.+8      	; 0x362a <layer_off+0x12>
    3622:	44 0f       	add	r20, r20
    3624:	55 1f       	adc	r21, r21
    3626:	66 1f       	adc	r22, r22
    3628:	77 1f       	adc	r23, r23
    362a:	8a 95       	dec	r24
    362c:	d2 f7       	brpl	.-12     	; 0x3622 <layer_off+0xa>
    362e:	40 95       	com	r20
    3630:	50 95       	com	r21
    3632:	60 95       	com	r22
    3634:	70 95       	com	r23
    3636:	80 91 a6 01 	lds	r24, 0x01A6
    363a:	90 91 a7 01 	lds	r25, 0x01A7
    363e:	a0 91 a8 01 	lds	r26, 0x01A8
    3642:	b0 91 a9 01 	lds	r27, 0x01A9
    3646:	48 23       	and	r20, r24
    3648:	59 23       	and	r21, r25
    364a:	6a 23       	and	r22, r26
    364c:	7b 23       	and	r23, r27
    364e:	cb 01       	movw	r24, r22
    3650:	ba 01       	movw	r22, r20
    3652:	0c 94 98 1a 	jmp	0x3530	; 0x3530 <layer_state_set>

00003656 <layer_invert>:
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    3656:	41 e0       	ldi	r20, 0x01	; 1
    3658:	50 e0       	ldi	r21, 0x00	; 0
    365a:	60 e0       	ldi	r22, 0x00	; 0
    365c:	70 e0       	ldi	r23, 0x00	; 0
    365e:	04 c0       	rjmp	.+8      	; 0x3668 <layer_invert+0x12>
    3660:	44 0f       	add	r20, r20
    3662:	55 1f       	adc	r21, r21
    3664:	66 1f       	adc	r22, r22
    3666:	77 1f       	adc	r23, r23
    3668:	8a 95       	dec	r24
    366a:	d2 f7       	brpl	.-12     	; 0x3660 <layer_invert+0xa>
    366c:	80 91 a6 01 	lds	r24, 0x01A6
    3670:	90 91 a7 01 	lds	r25, 0x01A7
    3674:	a0 91 a8 01 	lds	r26, 0x01A8
    3678:	b0 91 a9 01 	lds	r27, 0x01A9
    367c:	48 27       	eor	r20, r24
    367e:	59 27       	eor	r21, r25
    3680:	6a 27       	eor	r22, r26
    3682:	7b 27       	eor	r23, r27
    3684:	cb 01       	movw	r24, r22
    3686:	ba 01       	movw	r22, r20
    3688:	0c 94 98 1a 	jmp	0x3530	; 0x3530 <layer_state_set>

0000368c <layer_or>:
}

void layer_or(uint32_t state)
{
    368c:	0f 93       	push	r16
    368e:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    3690:	00 91 a6 01 	lds	r16, 0x01A6
    3694:	10 91 a7 01 	lds	r17, 0x01A7
    3698:	20 91 a8 01 	lds	r18, 0x01A8
    369c:	30 91 a9 01 	lds	r19, 0x01A9
    36a0:	60 2b       	or	r22, r16
    36a2:	71 2b       	or	r23, r17
    36a4:	82 2b       	or	r24, r18
    36a6:	93 2b       	or	r25, r19
}
    36a8:	1f 91       	pop	r17
    36aa:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
    36ac:	0c 94 98 1a 	jmp	0x3530	; 0x3530 <layer_state_set>

000036b0 <layer_and>:
}
void layer_and(uint32_t state)
{
    36b0:	0f 93       	push	r16
    36b2:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    36b4:	00 91 a6 01 	lds	r16, 0x01A6
    36b8:	10 91 a7 01 	lds	r17, 0x01A7
    36bc:	20 91 a8 01 	lds	r18, 0x01A8
    36c0:	30 91 a9 01 	lds	r19, 0x01A9
    36c4:	60 23       	and	r22, r16
    36c6:	71 23       	and	r23, r17
    36c8:	82 23       	and	r24, r18
    36ca:	93 23       	and	r25, r19
}
    36cc:	1f 91       	pop	r17
    36ce:	0f 91       	pop	r16
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
    36d0:	0c 94 98 1a 	jmp	0x3530	; 0x3530 <layer_state_set>

000036d4 <layer_xor>:
}
void layer_xor(uint32_t state)
{
    36d4:	0f 93       	push	r16
    36d6:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    36d8:	00 91 a6 01 	lds	r16, 0x01A6
    36dc:	10 91 a7 01 	lds	r17, 0x01A7
    36e0:	20 91 a8 01 	lds	r18, 0x01A8
    36e4:	30 91 a9 01 	lds	r19, 0x01A9
    36e8:	60 27       	eor	r22, r16
    36ea:	71 27       	eor	r23, r17
    36ec:	82 27       	eor	r24, r18
    36ee:	93 27       	eor	r25, r19
}
    36f0:	1f 91       	pop	r17
    36f2:	0f 91       	pop	r16
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
    36f4:	0c 94 98 1a 	jmp	0x3530	; 0x3530 <layer_state_set>

000036f8 <layer_debug>:
}

void layer_debug(void)
{
    36f8:	08 95       	ret

000036fa <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    36fa:	cf 92       	push	r12
    36fc:	df 92       	push	r13
    36fe:	ef 92       	push	r14
    3700:	ff 92       	push	r15
    3702:	0f 93       	push	r16
    3704:	1f 93       	push	r17
    3706:	cf 93       	push	r28
    3708:	df 93       	push	r29
    370a:	ec 01       	movw	r28, r24
    action_t action = { .code = ACTION_TRANSPARENT };

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    370c:	c0 90 aa 01 	lds	r12, 0x01AA
    3710:	d0 90 ab 01 	lds	r13, 0x01AB
    3714:	e0 90 ac 01 	lds	r14, 0x01AC
    3718:	f0 90 ad 01 	lds	r15, 0x01AD
    371c:	80 91 a6 01 	lds	r24, 0x01A6
    3720:	90 91 a7 01 	lds	r25, 0x01A7
    3724:	a0 91 a8 01 	lds	r26, 0x01A8
    3728:	b0 91 a9 01 	lds	r27, 0x01A9
    372c:	c8 2a       	or	r12, r24
    372e:	d9 2a       	or	r13, r25
    3730:	ea 2a       	or	r14, r26
    3732:	fb 2a       	or	r15, r27
    3734:	0f e1       	ldi	r16, 0x1F	; 31
    3736:	10 e0       	ldi	r17, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    3738:	b7 01       	movw	r22, r14
    373a:	a6 01       	movw	r20, r12
    373c:	00 2e       	mov	r0, r16
    373e:	04 c0       	rjmp	.+8      	; 0x3748 <layer_switch_get_action+0x4e>
    3740:	76 95       	lsr	r23
    3742:	67 95       	ror	r22
    3744:	57 95       	ror	r21
    3746:	47 95       	ror	r20
    3748:	0a 94       	dec	r0
    374a:	d2 f7       	brpl	.-12     	; 0x3740 <layer_switch_get_action+0x46>
    374c:	40 ff       	sbrs	r20, 0
    374e:	07 c0       	rjmp	.+14     	; 0x375e <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    3750:	be 01       	movw	r22, r28
    3752:	80 2f       	mov	r24, r16
    3754:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    3758:	81 30       	cpi	r24, 0x01	; 1
    375a:	91 05       	cpc	r25, r1
    375c:	39 f4       	brne	.+14     	; 0x376c <layer_switch_get_action+0x72>
    375e:	01 50       	subi	r16, 0x01	; 1
    3760:	11 09       	sbc	r17, r1
    3762:	50 f7       	brcc	.-44     	; 0x3738 <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    3764:	be 01       	movw	r22, r28
    3766:	80 e0       	ldi	r24, 0x00	; 0
    3768:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    376c:	df 91       	pop	r29
    376e:	cf 91       	pop	r28
    3770:	1f 91       	pop	r17
    3772:	0f 91       	pop	r16
    3774:	ff 90       	pop	r15
    3776:	ef 90       	pop	r14
    3778:	df 90       	pop	r13
    377a:	cf 90       	pop	r12
    377c:	08 95       	ret

0000377e <add_key>:

/* key */
void add_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    377e:	90 91 0b 01 	lds	r25, 0x010B
    3782:	99 23       	and	r25, r25
    3784:	61 f1       	breq	.+88     	; 0x37de <add_key+0x60>
    3786:	90 91 0c 01 	lds	r25, 0x010C
    378a:	99 23       	and	r25, r25
    378c:	41 f1       	breq	.+80     	; 0x37de <add_key+0x60>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    378e:	98 2f       	mov	r25, r24
    3790:	96 95       	lsr	r25
    3792:	96 95       	lsr	r25
    3794:	96 95       	lsr	r25
    3796:	9f 30       	cpi	r25, 0x0F	; 15
    3798:	88 f4       	brcc	.+34     	; 0x37bc <add_key+0x3e>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    379a:	e0 91 0d 01 	lds	r30, 0x010D
    379e:	f0 91 0e 01 	lds	r31, 0x010E
    37a2:	e9 0f       	add	r30, r25
    37a4:	f1 1d       	adc	r31, r1
    37a6:	87 70       	andi	r24, 0x07	; 7
    37a8:	21 e0       	ldi	r18, 0x01	; 1
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	01 c0       	rjmp	.+2      	; 0x37b0 <add_key+0x32>
    37ae:	22 0f       	add	r18, r18
    37b0:	8a 95       	dec	r24
    37b2:	ea f7       	brpl	.-6      	; 0x37ae <add_key+0x30>
    37b4:	81 81       	ldd	r24, Z+1	; 0x01
    37b6:	82 2b       	or	r24, r18
    37b8:	81 83       	std	Z+1, r24	; 0x01
    37ba:	08 95       	ret
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    37bc:	90 91 c1 01 	lds	r25, 0x01C1
    37c0:	90 ff       	sbrs	r25, 0
    37c2:	2d c0       	rjmp	.+90     	; 0x381e <add_key+0xa0>
    37c4:	1f 92       	push	r1
    37c6:	8f 93       	push	r24
    37c8:	81 e5       	ldi	r24, 0x51	; 81
    37ca:	94 e0       	ldi	r25, 0x04	; 4
    37cc:	9f 93       	push	r25
    37ce:	8f 93       	push	r24
    37d0:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    37d4:	0f 90       	pop	r0
    37d6:	0f 90       	pop	r0
    37d8:	0f 90       	pop	r0
    37da:	0f 90       	pop	r0
    37dc:	08 95       	ret
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    37de:	40 91 0d 01 	lds	r20, 0x010D
    37e2:	50 91 0e 01 	lds	r21, 0x010E
    37e6:	20 e0       	ldi	r18, 0x00	; 0
    37e8:	30 e0       	ldi	r19, 0x00	; 0
    37ea:	9f ef       	ldi	r25, 0xFF	; 255
    37ec:	fa 01       	movw	r30, r20
    37ee:	e2 0f       	add	r30, r18
    37f0:	f3 1f       	adc	r31, r19
    37f2:	62 81       	ldd	r22, Z+2	; 0x02
    37f4:	68 17       	cp	r22, r24
    37f6:	99 f0       	breq	.+38     	; 0x381e <add_key+0xa0>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    37f8:	9f 3f       	cpi	r25, 0xFF	; 255
    37fa:	19 f4       	brne	.+6      	; 0x3802 <add_key+0x84>
    37fc:	61 11       	cpse	r22, r1
    37fe:	01 c0       	rjmp	.+2      	; 0x3802 <add_key+0x84>
    3800:	92 2f       	mov	r25, r18
    3802:	2f 5f       	subi	r18, 0xFF	; 255
    3804:	3f 4f       	sbci	r19, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    3806:	2e 30       	cpi	r18, 0x0E	; 14
    3808:	31 05       	cpc	r19, r1
    380a:	81 f7       	brne	.-32     	; 0x37ec <add_key+0x6e>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    380c:	9f 3f       	cpi	r25, 0xFF	; 255
    380e:	39 f0       	breq	.+14     	; 0x381e <add_key+0xa0>
            keyboard_report->keys[empty] = code;
    3810:	fa 01       	movw	r30, r20
    3812:	e9 0f       	add	r30, r25
    3814:	f1 1d       	adc	r31, r1
    3816:	97 fd       	sbrc	r25, 7
    3818:	fa 95       	dec	r31
    381a:	82 83       	std	Z+2, r24	; 0x02
    381c:	08 95       	ret
    381e:	08 95       	ret

00003820 <del_key>:
}

void del_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    3820:	90 91 0b 01 	lds	r25, 0x010B
    3824:	99 23       	and	r25, r25
    3826:	69 f1       	breq	.+90     	; 0x3882 <del_key+0x62>
    3828:	90 91 0c 01 	lds	r25, 0x010C
    382c:	99 23       	and	r25, r25
    382e:	49 f1       	breq	.+82     	; 0x3882 <del_key+0x62>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3830:	98 2f       	mov	r25, r24
    3832:	96 95       	lsr	r25
    3834:	96 95       	lsr	r25
    3836:	96 95       	lsr	r25
    3838:	9f 30       	cpi	r25, 0x0F	; 15
    383a:	90 f4       	brcc	.+36     	; 0x3860 <del_key+0x40>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    383c:	e0 91 0d 01 	lds	r30, 0x010D
    3840:	f0 91 0e 01 	lds	r31, 0x010E
    3844:	e9 0f       	add	r30, r25
    3846:	f1 1d       	adc	r31, r1
    3848:	87 70       	andi	r24, 0x07	; 7
    384a:	21 e0       	ldi	r18, 0x01	; 1
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	01 c0       	rjmp	.+2      	; 0x3852 <del_key+0x32>
    3850:	22 0f       	add	r18, r18
    3852:	8a 95       	dec	r24
    3854:	ea f7       	brpl	.-6      	; 0x3850 <del_key+0x30>
    3856:	20 95       	com	r18
    3858:	81 81       	ldd	r24, Z+1	; 0x01
    385a:	28 23       	and	r18, r24
    385c:	21 83       	std	Z+1, r18	; 0x01
    385e:	08 95       	ret
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    3860:	90 91 c1 01 	lds	r25, 0x01C1
    3864:	90 ff       	sbrs	r25, 0
    3866:	1f c0       	rjmp	.+62     	; 0x38a6 <del_key+0x86>
    3868:	1f 92       	push	r1
    386a:	8f 93       	push	r24
    386c:	83 e3       	ldi	r24, 0x33	; 51
    386e:	94 e0       	ldi	r25, 0x04	; 4
    3870:	9f 93       	push	r25
    3872:	8f 93       	push	r24
    3874:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    3878:	0f 90       	pop	r0
    387a:	0f 90       	pop	r0
    387c:	0f 90       	pop	r0
    387e:	0f 90       	pop	r0
    3880:	08 95       	ret
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3882:	40 91 0d 01 	lds	r20, 0x010D
    3886:	50 91 0e 01 	lds	r21, 0x010E
    388a:	20 e0       	ldi	r18, 0x00	; 0
    388c:	30 e0       	ldi	r19, 0x00	; 0
    388e:	fa 01       	movw	r30, r20
    3890:	e2 0f       	add	r30, r18
    3892:	f3 1f       	adc	r31, r19
    3894:	92 81       	ldd	r25, Z+2	; 0x02
    3896:	98 13       	cpse	r25, r24
    3898:	01 c0       	rjmp	.+2      	; 0x389c <del_key+0x7c>
            keyboard_report->keys[i] = 0;
    389a:	12 82       	std	Z+2, r1	; 0x02
    389c:	2f 5f       	subi	r18, 0xFF	; 255
    389e:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    38a0:	2e 30       	cpi	r18, 0x0E	; 14
    38a2:	31 05       	cpc	r19, r1
    38a4:	a1 f7       	brne	.-24     	; 0x388e <del_key+0x6e>
    38a6:	08 95       	ret

000038a8 <clear_keys>:
#endif
    del_key_byte(key);
}

void clear_keys(void)
{
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    38ac:	e0 91 0d 01 	lds	r30, 0x010D
    38b0:	f0 91 0e 01 	lds	r31, 0x010E
    38b4:	e8 0f       	add	r30, r24
    38b6:	f9 1f       	adc	r31, r25
    38b8:	10 82       	st	Z, r1
    38ba:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    38bc:	80 31       	cpi	r24, 0x10	; 16
    38be:	91 05       	cpc	r25, r1
    38c0:	a9 f7       	brne	.-22     	; 0x38ac <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    38c2:	08 95       	ret

000038c4 <get_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
    38c4:	80 91 c0 01 	lds	r24, 0x01C0
    38c8:	08 95       	ret

000038ca <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    38ca:	90 91 c0 01 	lds	r25, 0x01C0
    38ce:	98 2b       	or	r25, r24
    38d0:	90 93 c0 01 	sts	0x01C0, r25
    38d4:	08 95       	ret

000038d6 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    38d6:	80 95       	com	r24
    38d8:	90 91 c0 01 	lds	r25, 0x01C0
    38dc:	98 23       	and	r25, r24
    38de:	90 93 c0 01 	sts	0x01C0, r25
    38e2:	08 95       	ret

000038e4 <set_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
    38e4:	80 93 c0 01 	sts	0x01C0, r24
    38e8:	08 95       	ret

000038ea <clear_mods>:
void clear_mods(void) { real_mods = 0; }
    38ea:	10 92 c0 01 	sts	0x01C0, r1
    38ee:	08 95       	ret

000038f0 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    38f0:	90 91 bf 01 	lds	r25, 0x01BF
    38f4:	98 2b       	or	r25, r24
    38f6:	90 93 bf 01 	sts	0x01BF, r25
    38fa:	08 95       	ret

000038fc <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    38fc:	80 95       	com	r24
    38fe:	90 91 bf 01 	lds	r25, 0x01BF
    3902:	98 23       	and	r25, r24
    3904:	90 93 bf 01 	sts	0x01BF, r25
    3908:	08 95       	ret

0000390a <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    390a:	10 92 bf 01 	sts	0x01BF, r1
    390e:	08 95       	ret

00003910 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3910:	80 93 ae 01 	sts	0x01AE, r24
    3914:	08 95       	ret

00003916 <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3916:	10 92 ae 01 	sts	0x01AE, r1
    391a:	08 95       	ret

0000391c <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    391c:	40 91 0d 01 	lds	r20, 0x010D
    3920:	50 91 0e 01 	lds	r21, 0x010E
    3924:	20 e0       	ldi	r18, 0x00	; 0
    3926:	30 e0       	ldi	r19, 0x00	; 0
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    3928:	80 e0       	ldi	r24, 0x00	; 0
    392a:	fa 01       	movw	r30, r20
    392c:	e2 0f       	add	r30, r18
    392e:	f3 1f       	adc	r31, r19
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3930:	91 81       	ldd	r25, Z+1	; 0x01
    3932:	91 11       	cpse	r25, r1
            cnt++;
    3934:	8f 5f       	subi	r24, 0xFF	; 255
    3936:	2f 5f       	subi	r18, 0xFF	; 255
    3938:	3f 4f       	sbci	r19, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    393a:	2f 30       	cpi	r18, 0x0F	; 15
    393c:	31 05       	cpc	r19, r1
    393e:	a9 f7       	brne	.-22     	; 0x392a <has_anykey+0xe>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    3940:	08 95       	ret

00003942 <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    3942:	e0 91 0d 01 	lds	r30, 0x010D
    3946:	f0 91 0e 01 	lds	r31, 0x010E
    394a:	80 91 c0 01 	lds	r24, 0x01C0
    394e:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    3950:	e0 91 0d 01 	lds	r30, 0x010D
    3954:	f0 91 0e 01 	lds	r31, 0x010E
    3958:	80 81       	ld	r24, Z
    395a:	90 91 bf 01 	lds	r25, 0x01BF
    395e:	89 2b       	or	r24, r25
    3960:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    3962:	90 91 ae 01 	lds	r25, 0x01AE
    3966:	99 23       	and	r25, r25
    3968:	61 f0       	breq	.+24     	; 0x3982 <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    396a:	e0 91 0d 01 	lds	r30, 0x010D
    396e:	f0 91 0e 01 	lds	r31, 0x010E
    3972:	80 81       	ld	r24, Z
    3974:	89 2b       	or	r24, r25
    3976:	80 83       	st	Z, r24
        if (has_anykey()) {
    3978:	0e 94 8e 1c 	call	0x391c	; 0x391c <has_anykey>
    397c:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    397e:	10 92 ae 01 	sts	0x01AE, r1
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    3982:	80 91 0d 01 	lds	r24, 0x010D
    3986:	90 91 0e 01 	lds	r25, 0x010E
    398a:	0c 94 8d 10 	jmp	0x211a	; 0x211a <host_keyboard_send>

0000398e <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    398e:	90 93 39 01 	sts	0x0139, r25
    3992:	80 93 38 01 	sts	0x0138, r24
    3996:	08 95       	ret

00003998 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3998:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    399a:	98 2f       	mov	r25, r24
    399c:	9c 7c       	andi	r25, 0xCC	; 204
    399e:	96 95       	lsr	r25
    39a0:	96 95       	lsr	r25
    39a2:	83 73       	andi	r24, 0x33	; 51
    39a4:	44 e0       	ldi	r20, 0x04	; 4
    39a6:	84 9f       	mul	r24, r20
    39a8:	90 01       	movw	r18, r0
    39aa:	11 24       	eor	r1, r1
    39ac:	92 2b       	or	r25, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    39ae:	89 2f       	mov	r24, r25
    39b0:	8a 7a       	andi	r24, 0xAA	; 170
    39b2:	86 95       	lsr	r24
    39b4:	95 75       	andi	r25, 0x55	; 85
    39b6:	99 0f       	add	r25, r25
    return bits;
}
    39b8:	89 2b       	or	r24, r25
    39ba:	08 95       	ret

000039bc <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    39bc:	1f 93       	push	r17
    39be:	cf 93       	push	r28
    39c0:	df 93       	push	r29
    39c2:	1f 92       	push	r1
    39c4:	cd b7       	in	r28, 0x3d	; 61
    39c6:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    39c8:	99 83       	std	Y+1, r25	; 0x01
    39ca:	0e 94 cc 1c 	call	0x3998	; 0x3998 <bitrev>
    39ce:	18 2f       	mov	r17, r24
    39d0:	99 81       	ldd	r25, Y+1	; 0x01
    39d2:	89 2f       	mov	r24, r25
    39d4:	0e 94 cc 1c 	call	0x3998	; 0x3998 <bitrev>
    39d8:	21 2f       	mov	r18, r17
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	32 2f       	mov	r19, r18
    39de:	22 27       	eor	r18, r18
    return bits;
}
    39e0:	a9 01       	movw	r20, r18
    39e2:	48 2b       	or	r20, r24
    39e4:	ca 01       	movw	r24, r20
    39e6:	0f 90       	pop	r0
    39e8:	df 91       	pop	r29
    39ea:	cf 91       	pop	r28
    39ec:	1f 91       	pop	r17
    39ee:	08 95       	ret

000039f0 <hook_keyboard_loop>:
/* -------------------------------------------------
 * Definitions of default hooks
 * ------------------------------------------------- */

__attribute__((weak))
void hook_keyboard_loop(void) {}
    39f0:	08 95       	ret

000039f2 <hook_matrix_change>:

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    39f2:	cf 93       	push	r28
    39f4:	df 93       	push	r29
    39f6:	00 d0       	rcall	.+0      	; 0x39f8 <hook_matrix_change+0x6>
    39f8:	00 d0       	rcall	.+0      	; 0x39fa <hook_matrix_change+0x8>
    39fa:	1f 92       	push	r1
    39fc:	cd b7       	in	r28, 0x3d	; 61
    39fe:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    3a00:	0f 90       	pop	r0
    3a02:	0f 90       	pop	r0
    3a04:	0f 90       	pop	r0
    3a06:	0f 90       	pop	r0
    3a08:	0f 90       	pop	r0
    3a0a:	df 91       	pop	r29
    3a0c:	cf 91       	pop	r28
    3a0e:	08 95       	ret

00003a10 <hook_default_layer_change>:

__attribute__((weak))
void hook_default_layer_change(uint32_t default_layer_state) {
    3a10:	08 95       	ret

00003a12 <hook_layer_change>:
    (void)default_layer_state;
}

__attribute__((weak))
void hook_layer_change(uint32_t layer_state) {
    3a12:	08 95       	ret

00003a14 <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    3a14:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <keyboard_set_leds>

00003a18 <hook_bootmagic>:
}

__attribute__((weak))
void hook_bootmagic(void) {}
    3a18:	08 95       	ret

00003a1a <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3a1a:	80 91 d6 01 	lds	r24, 0x01D6
    3a1e:	84 30       	cpi	r24, 0x04	; 4
    3a20:	09 f1       	breq	.+66     	; 0x3a64 <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    3a22:	10 92 c2 01 	sts	0x01C2, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3a26:	20 e4       	ldi	r18, 0x40	; 64
    3a28:	88 e1       	ldi	r24, 0x18	; 24
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	0f b6       	in	r0, 0x3f	; 63
    3a2e:	f8 94       	cli
    3a30:	a8 95       	wdr
    3a32:	80 93 60 00 	sts	0x0060, r24
    3a36:	0f be       	out	0x3f, r0	; 63
    3a38:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3a3c:	83 b7       	in	r24, 0x33	; 51
    3a3e:	81 7f       	andi	r24, 0xF1	; 241
    3a40:	84 60       	ori	r24, 0x04	; 4
    3a42:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3a44:	83 b7       	in	r24, 0x33	; 51
    3a46:	81 60       	ori	r24, 0x01	; 1
    3a48:	83 bf       	out	0x33, r24	; 51
    sei();
    3a4a:	78 94       	sei
    sleep_cpu();
    3a4c:	88 95       	sleep
    sleep_disable();
    3a4e:	83 b7       	in	r24, 0x33	; 51
    3a50:	8e 7f       	andi	r24, 0xFE	; 254
    3a52:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    3a54:	88 e1       	ldi	r24, 0x18	; 24
    3a56:	0f b6       	in	r0, 0x3f	; 63
    3a58:	f8 94       	cli
    3a5a:	80 93 60 00 	sts	0x0060, r24
    3a5e:	10 92 60 00 	sts	0x0060, r1
    3a62:	0f be       	out	0x3f, r0	; 63
    3a64:	08 95       	ret

00003a66 <matrix_power_up>:
void suspend_power_down(void)
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
    3a66:	08 95       	ret

00003a68 <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    3a68:	08 95       	ret

00003a6a <suspend_wakeup_condition>:
bool suspend_wakeup_condition(void)
{
    3a6a:	cf 93       	push	r28
    matrix_power_up();
    3a6c:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <matrix_power_up>
    matrix_scan();
    3a70:	0e 94 62 07 	call	0xec4	; 0xec4 <matrix_scan>
    matrix_power_down();
    3a74:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3a78:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3a7a:	8c 2f       	mov	r24, r28
    3a7c:	0e 94 7d 08 	call	0x10fa	; 0x10fa <matrix_get_row>
    3a80:	89 2b       	or	r24, r25
    3a82:	29 f4       	brne	.+10     	; 0x3a8e <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3a84:	cf 5f       	subi	r28, 0xFF	; 255
    3a86:	c4 30       	cpi	r28, 0x04	; 4
    3a88:	c1 f7       	brne	.-16     	; 0x3a7a <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    3a8a:	80 e0       	ldi	r24, 0x00	; 0
    3a8c:	01 c0       	rjmp	.+2      	; 0x3a90 <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    3a8e:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    3a90:	cf 91       	pop	r28
    3a92:	08 95       	ret

00003a94 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    3a94:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <clear_keyboard>

00003a98 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3a98:	1f 92       	push	r1
    3a9a:	0f 92       	push	r0
    3a9c:	0f b6       	in	r0, 0x3f	; 63
    3a9e:	0f 92       	push	r0
    3aa0:	11 24       	eor	r1, r1
    3aa2:	8f 93       	push	r24
    3aa4:	9f 93       	push	r25
    3aa6:	af 93       	push	r26
    3aa8:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3aaa:	80 91 c2 01 	lds	r24, 0x01C2
    3aae:	81 11       	cpse	r24, r1
    3ab0:	13 c0       	rjmp	.+38     	; 0x3ad8 <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3ab2:	80 91 c3 01 	lds	r24, 0x01C3
    3ab6:	90 91 c4 01 	lds	r25, 0x01C4
    3aba:	a0 91 c5 01 	lds	r26, 0x01C5
    3abe:	b0 91 c6 01 	lds	r27, 0x01C6
    3ac2:	41 96       	adiw	r24, 0x11	; 17
    3ac4:	a1 1d       	adc	r26, r1
    3ac6:	b1 1d       	adc	r27, r1
    3ac8:	80 93 c3 01 	sts	0x01C3, r24
    3acc:	90 93 c4 01 	sts	0x01C4, r25
    3ad0:	a0 93 c5 01 	sts	0x01C5, r26
    3ad4:	b0 93 c6 01 	sts	0x01C6, r27
            break;
        default:
            ;
    }
}
    3ad8:	bf 91       	pop	r27
    3ada:	af 91       	pop	r26
    3adc:	9f 91       	pop	r25
    3ade:	8f 91       	pop	r24
    3ae0:	0f 90       	pop	r0
    3ae2:	0f be       	out	0x3f, r0	; 63
    3ae4:	0f 90       	pop	r0
    3ae6:	1f 90       	pop	r1
    3ae8:	18 95       	reti

00003aea <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    3aea:	82 e0       	ldi	r24, 0x02	; 2
    3aec:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3aee:	93 e0       	ldi	r25, 0x03	; 3
    3af0:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    3af2:	9a ef       	ldi	r25, 0xFA	; 250
    3af4:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    3af6:	80 93 6e 00 	sts	0x006E, r24
    3afa:	08 95       	ret

00003afc <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3afc:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3afe:	f8 94       	cli
    t = timer_count;
    3b00:	80 91 c3 01 	lds	r24, 0x01C3
    3b04:	90 91 c4 01 	lds	r25, 0x01C4
    3b08:	a0 91 c5 01 	lds	r26, 0x01C5
    3b0c:	b0 91 c6 01 	lds	r27, 0x01C6
    SREG = sreg;
    3b10:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    3b12:	08 95       	ret

00003b14 <timer_read32>:
inline
uint32_t timer_read32(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3b14:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3b16:	f8 94       	cli
    t = timer_count;
    3b18:	60 91 c3 01 	lds	r22, 0x01C3
    3b1c:	70 91 c4 01 	lds	r23, 0x01C4
    3b20:	80 91 c5 01 	lds	r24, 0x01C5
    3b24:	90 91 c6 01 	lds	r25, 0x01C6
    SREG = sreg;
    3b28:	2f bf       	out	0x3f, r18	; 63

    return t;
}
    3b2a:	08 95       	ret

00003b2c <timer_elapsed>:

inline
uint16_t timer_elapsed(uint16_t last)
{
    3b2c:	cf 92       	push	r12
    3b2e:	df 92       	push	r13
    3b30:	ef 92       	push	r14
    3b32:	ff 92       	push	r15
    3b34:	0f 93       	push	r16
    3b36:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    3b38:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3b3a:	f8 94       	cli
    t = timer_count;
    3b3c:	40 91 c3 01 	lds	r20, 0x01C3
    3b40:	50 91 c4 01 	lds	r21, 0x01C4
    3b44:	60 91 c5 01 	lds	r22, 0x01C5
    3b48:	70 91 c6 01 	lds	r23, 0x01C6
    SREG = sreg;
    3b4c:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    3b4e:	6a 01       	movw	r12, r20
    3b50:	7b 01       	movw	r14, r22
    3b52:	ee 24       	eor	r14, r14
    3b54:	ff 24       	eor	r15, r15
    3b56:	8c 01       	movw	r16, r24
    3b58:	20 e0       	ldi	r18, 0x00	; 0
    3b5a:	30 e0       	ldi	r19, 0x00	; 0
    3b5c:	c0 16       	cp	r12, r16
    3b5e:	d1 06       	cpc	r13, r17
    3b60:	e2 06       	cpc	r14, r18
    3b62:	f3 06       	cpc	r15, r19
    3b64:	10 f4       	brcc	.+4      	; 0x3b6a <timer_elapsed+0x3e>
    3b66:	41 50       	subi	r20, 0x01	; 1
    3b68:	51 09       	sbc	r21, r1
    3b6a:	48 1b       	sub	r20, r24
    3b6c:	59 0b       	sbc	r21, r25
}
    3b6e:	ca 01       	movw	r24, r20
    3b70:	1f 91       	pop	r17
    3b72:	0f 91       	pop	r16
    3b74:	ff 90       	pop	r15
    3b76:	ef 90       	pop	r14
    3b78:	df 90       	pop	r13
    3b7a:	cf 90       	pop	r12
    3b7c:	08 95       	ret

00003b7e <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3b7e:	1f 92       	push	r1
    3b80:	0f 92       	push	r0
    3b82:	0f b6       	in	r0, 0x3f	; 63
    3b84:	0f 92       	push	r0
    3b86:	11 24       	eor	r1, r1
    3b88:	8f 93       	push	r24
    3b8a:	9f 93       	push	r25
    3b8c:	af 93       	push	r26
    3b8e:	bf 93       	push	r27
    timer_count++;
    3b90:	80 91 c3 01 	lds	r24, 0x01C3
    3b94:	90 91 c4 01 	lds	r25, 0x01C4
    3b98:	a0 91 c5 01 	lds	r26, 0x01C5
    3b9c:	b0 91 c6 01 	lds	r27, 0x01C6
    3ba0:	01 96       	adiw	r24, 0x01	; 1
    3ba2:	a1 1d       	adc	r26, r1
    3ba4:	b1 1d       	adc	r27, r1
    3ba6:	80 93 c3 01 	sts	0x01C3, r24
    3baa:	90 93 c4 01 	sts	0x01C4, r25
    3bae:	a0 93 c5 01 	sts	0x01C5, r26
    3bb2:	b0 93 c6 01 	sts	0x01C6, r27
}
    3bb6:	bf 91       	pop	r27
    3bb8:	af 91       	pop	r26
    3bba:	9f 91       	pop	r25
    3bbc:	8f 91       	pop	r24
    3bbe:	0f 90       	pop	r0
    3bc0:	0f be       	out	0x3f, r0	; 63
    3bc2:	0f 90       	pop	r0
    3bc4:	1f 90       	pop	r1
    3bc6:	18 95       	reti

00003bc8 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    3bc8:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <USB_Disable>
    cli();
    3bcc:	f8 94       	cli
    3bce:	2f ef       	ldi	r18, 0xFF	; 255
    3bd0:	87 ea       	ldi	r24, 0xA7	; 167
    3bd2:	91 e6       	ldi	r25, 0x61	; 97
    3bd4:	21 50       	subi	r18, 0x01	; 1
    3bd6:	80 40       	sbci	r24, 0x00	; 0
    3bd8:	90 40       	sbci	r25, 0x00	; 0
    3bda:	e1 f7       	brne	.-8      	; 0x3bd4 <bootloader_jump+0xc>
    3bdc:	00 c0       	rjmp	.+0      	; 0x3bde <bootloader_jump+0x16>
    3bde:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    3be0:	87 e0       	ldi	r24, 0x07	; 7
    3be2:	90 eb       	ldi	r25, 0xB0	; 176
    3be4:	dc 01       	movw	r26, r24
    3be6:	80 93 e0 01 	sts	0x01E0, r24
    3bea:	90 93 e1 01 	sts	0x01E1, r25
    3bee:	a0 93 e2 01 	sts	0x01E2, r26
    3bf2:	b0 93 e3 01 	sts	0x01E3, r27
    wdt_enable(WDTO_250MS);
    3bf6:	2c e0       	ldi	r18, 0x0C	; 12
    3bf8:	88 e1       	ldi	r24, 0x18	; 24
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	0f b6       	in	r0, 0x3f	; 63
    3bfe:	f8 94       	cli
    3c00:	a8 95       	wdr
    3c02:	80 93 60 00 	sts	0x0060, r24
    3c06:	0f be       	out	0x3f, r0	; 63
    3c08:	20 93 60 00 	sts	0x0060, r18
    3c0c:	ff cf       	rjmp	.-2      	; 0x3c0c <bootloader_jump+0x44>

00003c0e <keycode_to_action>:

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    switch (keycode) {
    3c0e:	8d 3b       	cpi	r24, 0xBD	; 189
    3c10:	60 f4       	brcc	.+24     	; 0x3c2a <keycode_to_action+0x1c>
    3c12:	88 3a       	cpi	r24, 0xA8	; 168
    3c14:	80 f5       	brcc	.+96     	; 0x3c76 <keycode_to_action+0x68>
    3c16:	85 3a       	cpi	r24, 0xA5	; 165
    3c18:	28 f5       	brcc	.+74     	; 0x3c64 <keycode_to_action+0x56>
    3c1a:	84 30       	cpi	r24, 0x04	; 4
    3c1c:	08 f5       	brcc	.+66     	; 0x3c60 <keycode_to_action+0x52>
    3c1e:	81 30       	cpi	r24, 0x01	; 1
    3c20:	09 f0       	breq	.+2      	; 0x3c24 <keycode_to_action+0x16>
    3c22:	6b c0       	rjmp	.+214    	; 0x3cfa <keycode_to_action+0xec>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    3c24:	81 e0       	ldi	r24, 0x01	; 1
    3c26:	90 e0       	ldi	r25, 0x00	; 0
    3c28:	08 95       	ret

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    switch (keycode) {
    3c2a:	88 3e       	cpi	r24, 0xE8	; 232
    3c2c:	98 f4       	brcc	.+38     	; 0x3c54 <keycode_to_action+0x46>
    3c2e:	80 3e       	cpi	r24, 0xE0	; 224
    3c30:	b8 f4       	brcc	.+46     	; 0x3c60 <keycode_to_action+0x52>
    3c32:	8f 3b       	cpi	r24, 0xBF	; 191
    3c34:	09 f0       	breq	.+2      	; 0x3c38 <keycode_to_action+0x2a>
    3c36:	61 c0       	rjmp	.+194    	; 0x3cfa <keycode_to_action+0xec>
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    3c38:	0e 94 76 16 	call	0x2cec	; 0x2cec <clear_keyboard>
    3c3c:	2f ef       	ldi	r18, 0xFF	; 255
    3c3e:	80 e7       	ldi	r24, 0x70	; 112
    3c40:	92 e0       	ldi	r25, 0x02	; 2
    3c42:	21 50       	subi	r18, 0x01	; 1
    3c44:	80 40       	sbci	r24, 0x00	; 0
    3c46:	90 40       	sbci	r25, 0x00	; 0
    3c48:	e1 f7       	brne	.-8      	; 0x3c42 <keycode_to_action+0x34>
    3c4a:	00 c0       	rjmp	.+0      	; 0x3c4c <keycode_to_action+0x3e>
    3c4c:	00 00       	nop
            wait_ms(50);
            bootloader_jump(); // not return
    3c4e:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <bootloader_jump>
    3c52:	53 c0       	rjmp	.+166    	; 0x3cfa <keycode_to_action+0xec>

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    switch (keycode) {
    3c54:	80 3f       	cpi	r24, 0xF0	; 240
    3c56:	08 f4       	brcc	.+2      	; 0x3c5a <keycode_to_action+0x4c>
    3c58:	50 c0       	rjmp	.+160    	; 0x3cfa <keycode_to_action+0xec>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	90 65       	ori	r25, 0x50	; 80
            break;
    3c5e:	08 95       	ret
{
    action_t action = {};
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    3c60:	90 e0       	ldi	r25, 0x00	; 0
            break;
    3c62:	08 95       	ret
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3c64:	85 3a       	cpi	r24, 0xA5	; 165
    3c66:	09 f4       	brne	.+2      	; 0x3c6a <keycode_to_action+0x5c>
    3c68:	4b c0       	rjmp	.+150    	; 0x3d00 <keycode_to_action+0xf2>
    3c6a:	86 3a       	cpi	r24, 0xA6	; 166
    3c6c:	09 f0       	breq	.+2      	; 0x3c70 <keycode_to_action+0x62>
    3c6e:	4b c0       	rjmp	.+150    	; 0x3d06 <keycode_to_action+0xf8>
    3c70:	82 e8       	ldi	r24, 0x82	; 130
    3c72:	90 e4       	ldi	r25, 0x40	; 64
    3c74:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3c76:	88 3a       	cpi	r24, 0xA8	; 168
    3c78:	09 f4       	brne	.+2      	; 0x3c7c <keycode_to_action+0x6e>
    3c7a:	48 c0       	rjmp	.+144    	; 0x3d0c <keycode_to_action+0xfe>
    3c7c:	89 3a       	cpi	r24, 0xA9	; 169
    3c7e:	09 f4       	brne	.+2      	; 0x3c82 <keycode_to_action+0x74>
    3c80:	48 c0       	rjmp	.+144    	; 0x3d12 <keycode_to_action+0x104>
    3c82:	8a 3a       	cpi	r24, 0xAA	; 170
    3c84:	09 f4       	brne	.+2      	; 0x3c88 <keycode_to_action+0x7a>
    3c86:	48 c0       	rjmp	.+144    	; 0x3d18 <keycode_to_action+0x10a>
    3c88:	8b 3a       	cpi	r24, 0xAB	; 171
    3c8a:	09 f4       	brne	.+2      	; 0x3c8e <keycode_to_action+0x80>
    3c8c:	48 c0       	rjmp	.+144    	; 0x3d1e <keycode_to_action+0x110>
    3c8e:	8c 3a       	cpi	r24, 0xAC	; 172
    3c90:	09 f4       	brne	.+2      	; 0x3c94 <keycode_to_action+0x86>
    3c92:	48 c0       	rjmp	.+144    	; 0x3d24 <keycode_to_action+0x116>
    3c94:	8d 3a       	cpi	r24, 0xAD	; 173
    3c96:	09 f4       	brne	.+2      	; 0x3c9a <keycode_to_action+0x8c>
    3c98:	48 c0       	rjmp	.+144    	; 0x3d2a <keycode_to_action+0x11c>
    3c9a:	8e 3a       	cpi	r24, 0xAE	; 174
    3c9c:	09 f4       	brne	.+2      	; 0x3ca0 <keycode_to_action+0x92>
    3c9e:	48 c0       	rjmp	.+144    	; 0x3d30 <keycode_to_action+0x122>
    3ca0:	8f 3a       	cpi	r24, 0xAF	; 175
    3ca2:	09 f4       	brne	.+2      	; 0x3ca6 <keycode_to_action+0x98>
    3ca4:	48 c0       	rjmp	.+144    	; 0x3d36 <keycode_to_action+0x128>
    3ca6:	81 3b       	cpi	r24, 0xB1	; 177
    3ca8:	09 f4       	brne	.+2      	; 0x3cac <keycode_to_action+0x9e>
    3caa:	48 c0       	rjmp	.+144    	; 0x3d3c <keycode_to_action+0x12e>
    3cac:	80 3b       	cpi	r24, 0xB0	; 176
    3cae:	09 f4       	brne	.+2      	; 0x3cb2 <keycode_to_action+0xa4>
    3cb0:	48 c0       	rjmp	.+144    	; 0x3d42 <keycode_to_action+0x134>
    3cb2:	82 3b       	cpi	r24, 0xB2	; 178
    3cb4:	09 f4       	brne	.+2      	; 0x3cb8 <keycode_to_action+0xaa>
    3cb6:	48 c0       	rjmp	.+144    	; 0x3d48 <keycode_to_action+0x13a>
    3cb8:	83 3b       	cpi	r24, 0xB3	; 179
    3cba:	09 f4       	brne	.+2      	; 0x3cbe <keycode_to_action+0xb0>
    3cbc:	48 c0       	rjmp	.+144    	; 0x3d4e <keycode_to_action+0x140>
    3cbe:	84 3b       	cpi	r24, 0xB4	; 180
    3cc0:	09 f4       	brne	.+2      	; 0x3cc4 <keycode_to_action+0xb6>
    3cc2:	48 c0       	rjmp	.+144    	; 0x3d54 <keycode_to_action+0x146>
    3cc4:	85 3b       	cpi	r24, 0xB5	; 181
    3cc6:	09 f4       	brne	.+2      	; 0x3cca <keycode_to_action+0xbc>
    3cc8:	48 c0       	rjmp	.+144    	; 0x3d5a <keycode_to_action+0x14c>
    3cca:	86 3b       	cpi	r24, 0xB6	; 182
    3ccc:	09 f4       	brne	.+2      	; 0x3cd0 <keycode_to_action+0xc2>
    3cce:	48 c0       	rjmp	.+144    	; 0x3d60 <keycode_to_action+0x152>
    3cd0:	87 3b       	cpi	r24, 0xB7	; 183
    3cd2:	09 f4       	brne	.+2      	; 0x3cd6 <keycode_to_action+0xc8>
    3cd4:	48 c0       	rjmp	.+144    	; 0x3d66 <keycode_to_action+0x158>
    3cd6:	88 3b       	cpi	r24, 0xB8	; 184
    3cd8:	09 f4       	brne	.+2      	; 0x3cdc <keycode_to_action+0xce>
    3cda:	48 c0       	rjmp	.+144    	; 0x3d6c <keycode_to_action+0x15e>
    3cdc:	89 3b       	cpi	r24, 0xB9	; 185
    3cde:	09 f4       	brne	.+2      	; 0x3ce2 <keycode_to_action+0xd4>
    3ce0:	48 c0       	rjmp	.+144    	; 0x3d72 <keycode_to_action+0x164>
    3ce2:	8a 3b       	cpi	r24, 0xBA	; 186
    3ce4:	09 f4       	brne	.+2      	; 0x3ce8 <keycode_to_action+0xda>
    3ce6:	48 c0       	rjmp	.+144    	; 0x3d78 <keycode_to_action+0x16a>
    3ce8:	8b 3b       	cpi	r24, 0xBB	; 187
    3cea:	09 f4       	brne	.+2      	; 0x3cee <keycode_to_action+0xe0>
    3cec:	48 c0       	rjmp	.+144    	; 0x3d7e <keycode_to_action+0x170>
    3cee:	8c 3b       	cpi	r24, 0xBC	; 188
    3cf0:	09 f0       	breq	.+2      	; 0x3cf4 <keycode_to_action+0xe6>
    3cf2:	48 c0       	rjmp	.+144    	; 0x3d84 <keycode_to_action+0x176>
    3cf4:	8a e2       	ldi	r24, 0x2A	; 42
    3cf6:	96 e4       	ldi	r25, 0x46	; 70
    3cf8:	08 95       	ret
            clear_keyboard();
            wait_ms(50);
            bootloader_jump(); // not return
            break;
        default:
            action.code = ACTION_NO;
    3cfa:	80 e0       	ldi	r24, 0x00	; 0
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	08 95       	ret
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3d00:	81 e8       	ldi	r24, 0x81	; 129
    3d02:	90 e4       	ldi	r25, 0x40	; 64
    3d04:	08 95       	ret
    3d06:	83 e8       	ldi	r24, 0x83	; 131
    3d08:	90 e4       	ldi	r25, 0x40	; 64
    3d0a:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3d0c:	82 ee       	ldi	r24, 0xE2	; 226
    3d0e:	94 e4       	ldi	r25, 0x44	; 68
    3d10:	08 95       	ret
    3d12:	89 ee       	ldi	r24, 0xE9	; 233
    3d14:	94 e4       	ldi	r25, 0x44	; 68
    3d16:	08 95       	ret
    3d18:	8a ee       	ldi	r24, 0xEA	; 234
    3d1a:	94 e4       	ldi	r25, 0x44	; 68
    3d1c:	08 95       	ret
    3d1e:	85 eb       	ldi	r24, 0xB5	; 181
    3d20:	94 e4       	ldi	r25, 0x44	; 68
    3d22:	08 95       	ret
    3d24:	86 eb       	ldi	r24, 0xB6	; 182
    3d26:	94 e4       	ldi	r25, 0x44	; 68
    3d28:	08 95       	ret
    3d2a:	83 eb       	ldi	r24, 0xB3	; 179
    3d2c:	94 e4       	ldi	r25, 0x44	; 68
    3d2e:	08 95       	ret
    3d30:	84 eb       	ldi	r24, 0xB4	; 180
    3d32:	94 e4       	ldi	r25, 0x44	; 68
    3d34:	08 95       	ret
    3d36:	87 eb       	ldi	r24, 0xB7	; 183
    3d38:	94 e4       	ldi	r25, 0x44	; 68
    3d3a:	08 95       	ret
    3d3c:	8c ec       	ldi	r24, 0xCC	; 204
    3d3e:	94 e4       	ldi	r25, 0x44	; 68
    3d40:	08 95       	ret
    3d42:	8d ec       	ldi	r24, 0xCD	; 205
    3d44:	94 e4       	ldi	r25, 0x44	; 68
    3d46:	08 95       	ret
    3d48:	83 e8       	ldi	r24, 0x83	; 131
    3d4a:	95 e4       	ldi	r25, 0x45	; 69
    3d4c:	08 95       	ret
    3d4e:	8a e8       	ldi	r24, 0x8A	; 138
    3d50:	95 e4       	ldi	r25, 0x45	; 69
    3d52:	08 95       	ret
    3d54:	82 e9       	ldi	r24, 0x92	; 146
    3d56:	95 e4       	ldi	r25, 0x45	; 69
    3d58:	08 95       	ret
    3d5a:	84 e9       	ldi	r24, 0x94	; 148
    3d5c:	95 e4       	ldi	r25, 0x45	; 69
    3d5e:	08 95       	ret
    3d60:	81 e2       	ldi	r24, 0x21	; 33
    3d62:	96 e4       	ldi	r25, 0x46	; 70
    3d64:	08 95       	ret
    3d66:	83 e2       	ldi	r24, 0x23	; 35
    3d68:	96 e4       	ldi	r25, 0x46	; 70
    3d6a:	08 95       	ret
    3d6c:	84 e2       	ldi	r24, 0x24	; 36
    3d6e:	96 e4       	ldi	r25, 0x46	; 70
    3d70:	08 95       	ret
    3d72:	85 e2       	ldi	r24, 0x25	; 37
    3d74:	96 e4       	ldi	r25, 0x46	; 70
    3d76:	08 95       	ret
    3d78:	86 e2       	ldi	r24, 0x26	; 38
    3d7a:	96 e4       	ldi	r25, 0x46	; 70
    3d7c:	08 95       	ret
    3d7e:	87 e2       	ldi	r24, 0x27	; 39
    3d80:	96 e4       	ldi	r25, 0x46	; 70
    3d82:	08 95       	ret
    3d84:	80 e0       	ldi	r24, 0x00	; 0
    3d86:	94 e4       	ldi	r25, 0x44	; 68
        default:
            action.code = ACTION_NO;
            break;
    }
    return action;
}
    3d88:	08 95       	ret

00003d8a <action_for_key>:


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3d8a:	0e 94 08 07 	call	0xe10	; 0xe10 <keymap_key_to_keycode>
    switch (keycode) {
    3d8e:	80 3e       	cpi	r24, 0xE0	; 224
    3d90:	a8 f4       	brcc	.+42     	; 0x3dbc <action_for_key+0x32>
    3d92:	80 3c       	cpi	r24, 0xC0	; 192
    3d94:	00 f5       	brcc	.+64     	; 0x3dd6 <action_for_key+0x4c>
    3d96:	81 33       	cpi	r24, 0x31	; 49
    3d98:	09 f4       	brne	.+2      	; 0x3d9c <action_for_key+0x12>
    3d9a:	5c c0       	rjmp	.+184    	; 0x3e54 <action_for_key+0xca>
    3d9c:	38 f4       	brcc	.+14     	; 0x3dac <action_for_key+0x22>
    3d9e:	89 32       	cpi	r24, 0x29	; 41
    3da0:	09 f4       	brne	.+2      	; 0x3da4 <action_for_key+0x1a>
    3da2:	52 c0       	rjmp	.+164    	; 0x3e48 <action_for_key+0xbe>
    3da4:	8a 32       	cpi	r24, 0x2A	; 42
    3da6:	09 f4       	brne	.+2      	; 0x3daa <action_for_key+0x20>
    3da8:	5b c0       	rjmp	.+182    	; 0x3e60 <action_for_key+0xd6>
    3daa:	5f c0       	rjmp	.+190    	; 0x3e6a <action_for_key+0xe0>
    3dac:	89 33       	cpi	r24, 0x39	; 57
    3dae:	b1 f0       	breq	.+44     	; 0x3ddc <action_for_key+0x52>
    3db0:	82 38       	cpi	r24, 0x82	; 130
    3db2:	a1 f0       	breq	.+40     	; 0x3ddc <action_for_key+0x52>
    3db4:	85 33       	cpi	r24, 0x35	; 53
    3db6:	09 f4       	brne	.+2      	; 0x3dba <action_for_key+0x30>
    3db8:	41 c0       	rjmp	.+130    	; 0x3e3c <action_for_key+0xb2>
    3dba:	57 c0       	rjmp	.+174    	; 0x3e6a <action_for_key+0xe0>
    3dbc:	83 3e       	cpi	r24, 0xE3	; 227
    3dbe:	41 f1       	breq	.+80     	; 0x3e10 <action_for_key+0x86>
    3dc0:	28 f4       	brcc	.+10     	; 0x3dcc <action_for_key+0x42>
    3dc2:	80 3e       	cpi	r24, 0xE0	; 224
    3dc4:	99 f0       	breq	.+38     	; 0x3dec <action_for_key+0x62>
    3dc6:	82 3e       	cpi	r24, 0xE2	; 226
    3dc8:	b9 f0       	breq	.+46     	; 0x3df8 <action_for_key+0x6e>
    3dca:	4f c0       	rjmp	.+158    	; 0x3e6a <action_for_key+0xe0>
    3dcc:	86 3e       	cpi	r24, 0xE6	; 230
    3dce:	31 f1       	breq	.+76     	; 0x3e1c <action_for_key+0x92>
    3dd0:	87 3e       	cpi	r24, 0xE7	; 231
    3dd2:	71 f1       	breq	.+92     	; 0x3e30 <action_for_key+0xa6>
    3dd4:	4a c0       	rjmp	.+148    	; 0x3e6a <action_for_key+0xe0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    3dd6:	0e 94 17 07 	call	0xe2e	; 0xe2e <keymap_fn_to_action>
    3dda:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3ddc:	90 91 df 01 	lds	r25, 0x01DF
    3de0:	90 fd       	sbrc	r25, 0
    3de2:	02 c0       	rjmp	.+4      	; 0x3de8 <action_for_key+0x5e>
    3de4:	91 ff       	sbrs	r25, 1
    3de6:	41 c0       	rjmp	.+130    	; 0x3e6a <action_for_key+0xe0>
                return keycode_to_action(KC_LCTL);
    3de8:	80 ee       	ldi	r24, 0xE0	; 224
    3dea:	3f c0       	rjmp	.+126    	; 0x3e6a <action_for_key+0xe0>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    3dec:	80 91 df 01 	lds	r24, 0x01DF
    3df0:	80 ff       	sbrs	r24, 0
    3df2:	fa cf       	rjmp	.-12     	; 0x3de8 <action_for_key+0x5e>
                return keycode_to_action(KC_CAPSLOCK);
    3df4:	89 e3       	ldi	r24, 0x39	; 57
    3df6:	39 c0       	rjmp	.+114    	; 0x3e6a <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    3df8:	80 91 df 01 	lds	r24, 0x01DF
    3dfc:	82 ff       	sbrs	r24, 2
    3dfe:	0c c0       	rjmp	.+24     	; 0x3e18 <action_for_key+0x8e>
                if (keymap_config.no_gui) {
    3e00:	80 91 df 01 	lds	r24, 0x01DF
    3e04:	84 ff       	sbrs	r24, 4
    3e06:	02 c0       	rjmp	.+4      	; 0x3e0c <action_for_key+0x82>
                    return keycode_to_action(ACTION_NO);
    3e08:	80 e0       	ldi	r24, 0x00	; 0
    3e0a:	2f c0       	rjmp	.+94     	; 0x3e6a <action_for_key+0xe0>
                }
                return keycode_to_action(KC_LGUI);
    3e0c:	83 ee       	ldi	r24, 0xE3	; 227
    3e0e:	2d c0       	rjmp	.+90     	; 0x3e6a <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    3e10:	80 91 df 01 	lds	r24, 0x01DF
    3e14:	82 ff       	sbrs	r24, 2
    3e16:	f4 cf       	rjmp	.-24     	; 0x3e00 <action_for_key+0x76>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    3e18:	82 ee       	ldi	r24, 0xE2	; 226
    3e1a:	27 c0       	rjmp	.+78     	; 0x3e6a <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    3e1c:	80 91 df 01 	lds	r24, 0x01DF
    3e20:	83 ff       	sbrs	r24, 3
    3e22:	0a c0       	rjmp	.+20     	; 0x3e38 <action_for_key+0xae>
                if (keymap_config.no_gui) {
    3e24:	80 91 df 01 	lds	r24, 0x01DF
    3e28:	84 fd       	sbrc	r24, 4
    3e2a:	ee cf       	rjmp	.-36     	; 0x3e08 <action_for_key+0x7e>
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
    3e2c:	87 ee       	ldi	r24, 0xE7	; 231
    3e2e:	1d c0       	rjmp	.+58     	; 0x3e6a <action_for_key+0xe0>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    3e30:	80 91 df 01 	lds	r24, 0x01DF
    3e34:	83 ff       	sbrs	r24, 3
    3e36:	f6 cf       	rjmp	.-20     	; 0x3e24 <action_for_key+0x9a>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    3e38:	86 ee       	ldi	r24, 0xE6	; 230
    3e3a:	17 c0       	rjmp	.+46     	; 0x3e6a <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    3e3c:	80 91 df 01 	lds	r24, 0x01DF
    3e40:	85 ff       	sbrs	r24, 5
    3e42:	06 c0       	rjmp	.+12     	; 0x3e50 <action_for_key+0xc6>
                return keycode_to_action(KC_ESC);
    3e44:	89 e2       	ldi	r24, 0x29	; 41
    3e46:	11 c0       	rjmp	.+34     	; 0x3e6a <action_for_key+0xe0>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    3e48:	80 91 df 01 	lds	r24, 0x01DF
    3e4c:	85 ff       	sbrs	r24, 5
    3e4e:	fa cf       	rjmp	.-12     	; 0x3e44 <action_for_key+0xba>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    3e50:	85 e3       	ldi	r24, 0x35	; 53
    3e52:	0b c0       	rjmp	.+22     	; 0x3e6a <action_for_key+0xe0>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    3e54:	80 91 df 01 	lds	r24, 0x01DF
    3e58:	86 ff       	sbrs	r24, 6
    3e5a:	06 c0       	rjmp	.+12     	; 0x3e68 <action_for_key+0xde>
                return keycode_to_action(KC_BSPACE);
    3e5c:	8a e2       	ldi	r24, 0x2A	; 42
    3e5e:	05 c0       	rjmp	.+10     	; 0x3e6a <action_for_key+0xe0>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    3e60:	80 91 df 01 	lds	r24, 0x01DF
    3e64:	86 ff       	sbrs	r24, 6
    3e66:	fa cf       	rjmp	.-12     	; 0x3e5c <action_for_key+0xd2>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    3e68:	81 e3       	ldi	r24, 0x31	; 49
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    3e6a:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <keycode_to_action>
    }
}
    3e6e:	08 95       	ret

00003e70 <action_get_macro>:
{
    (void)record;
    (void)id;
    (void)opt;
    return MACRO_NONE;
}
    3e70:	80 e0       	ldi	r24, 0x00	; 0
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	08 95       	ret

00003e76 <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    3e76:	08 95       	ret

00003e78 <scan_key>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_key(uint16_t code)
{
    3e78:	bf 92       	push	r11
    3e7a:	cf 92       	push	r12
    3e7c:	df 92       	push	r13
    3e7e:	ef 92       	push	r14
    3e80:	ff 92       	push	r15
    3e82:	0f 93       	push	r16
    3e84:	1f 93       	push	r17
    3e86:	cf 93       	push	r28
    3e88:	df 93       	push	r29
    3e8a:	8c 01       	movw	r16, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3e8c:	b1 2c       	mov	r11, r1
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3e8e:	ee 24       	eor	r14, r14
    3e90:	e3 94       	inc	r14
    3e92:	f1 2c       	mov	r15, r1
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
    3e94:	8b 2d       	mov	r24, r11
    3e96:	0e 94 7d 08 	call	0x10fa	; 0x10fa <matrix_get_row>
    3e9a:	6c 01       	movw	r12, r24
    3e9c:	c0 e0       	ldi	r28, 0x00	; 0
    3e9e:	d0 e0       	ldi	r29, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3ea0:	97 01       	movw	r18, r14
    3ea2:	0c 2e       	mov	r0, r28
    3ea4:	02 c0       	rjmp	.+4      	; 0x3eaa <scan_key+0x32>
    3ea6:	22 0f       	add	r18, r18
    3ea8:	33 1f       	adc	r19, r19
    3eaa:	0a 94       	dec	r0
    3eac:	e2 f7       	brpl	.-8      	; 0x3ea6 <scan_key+0x2e>
    3eae:	2c 21       	and	r18, r12
    3eb0:	3d 21       	and	r19, r13
    3eb2:	23 2b       	or	r18, r19
    3eb4:	b1 f0       	breq	.+44     	; 0x3ee2 <scan_key+0x6a>
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
    3eb6:	6c 2f       	mov	r22, r28
    3eb8:	7b 2d       	mov	r23, r11
    3eba:	80 e0       	ldi	r24, 0x00	; 0
    3ebc:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <action_for_key>
    3ec0:	9c 01       	movw	r18, r24
                if (action.code == code ||
    3ec2:	80 17       	cp	r24, r16
    3ec4:	91 07       	cpc	r25, r17
    3ec6:	59 f0       	breq	.+22     	; 0x3ede <scan_key+0x66>
    3ec8:	83 2f       	mov	r24, r19
    3eca:	80 7e       	andi	r24, 0xE0	; 224
    3ecc:	93 2f       	mov	r25, r19
    3ece:	90 7c       	andi	r25, 0xC0	; 192
    3ed0:	11 f0       	breq	.+4      	; 0x3ed6 <scan_key+0x5e>
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
    3ed2:	80 3a       	cpi	r24, 0xA0	; 160
    3ed4:	31 f4       	brne	.+12     	; 0x3ee2 <scan_key+0x6a>
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
                     action.key.code == code)) {
    3ed6:	30 e0       	ldi	r19, 0x00	; 0
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
    3ed8:	20 17       	cp	r18, r16
    3eda:	31 07       	cpc	r19, r17
    3edc:	11 f4       	brne	.+4      	; 0x3ee2 <scan_key+0x6a>
                     action.key.code == code)) {
                    return true;
    3ede:	81 e0       	ldi	r24, 0x01	; 1
    3ee0:	09 c0       	rjmp	.+18     	; 0x3ef4 <scan_key+0x7c>
    3ee2:	21 96       	adiw	r28, 0x01	; 1

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    3ee4:	cc 30       	cpi	r28, 0x0C	; 12
    3ee6:	d1 05       	cpc	r29, r1
    3ee8:	d9 f6       	brne	.-74     	; 0x3ea0 <scan_key+0x28>
    }
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3eea:	b3 94       	inc	r11
    3eec:	84 e0       	ldi	r24, 0x04	; 4
    3eee:	b8 12       	cpse	r11, r24
    3ef0:	d1 cf       	rjmp	.-94     	; 0x3e94 <scan_key+0x1c>
                    return true;
                }
            }
        }
    }
    return false;
    3ef2:	80 e0       	ldi	r24, 0x00	; 0
}
    3ef4:	df 91       	pop	r29
    3ef6:	cf 91       	pop	r28
    3ef8:	1f 91       	pop	r17
    3efa:	0f 91       	pop	r16
    3efc:	ff 90       	pop	r15
    3efe:	ef 90       	pop	r14
    3f00:	df 90       	pop	r13
    3f02:	cf 90       	pop	r12
    3f04:	bf 90       	pop	r11
    3f06:	08 95       	ret

00003f08 <bootmagic_scan_key>:

bool bootmagic_scan_key(uint16_t code)
{
    3f08:	cf 93       	push	r28
    3f0a:	df 93       	push	r29
    3f0c:	ec 01       	movw	r28, r24
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    3f0e:	8c e2       	ldi	r24, 0x2C	; 44
    3f10:	90 e0       	ldi	r25, 0x00	; 0
    3f12:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <scan_key>
    3f16:	88 23       	and	r24, r24
    3f18:	29 f0       	breq	.+10     	; 0x3f24 <bootmagic_scan_key+0x1c>

    return scan_key(code);
    3f1a:	ce 01       	movw	r24, r28
}
    3f1c:	df 91       	pop	r29
    3f1e:	cf 91       	pop	r28

bool bootmagic_scan_key(uint16_t code)
{
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;

    return scan_key(code);
    3f20:	0c 94 3c 1f 	jmp	0x3e78	; 0x3e78 <scan_key>
}
    3f24:	80 e0       	ldi	r24, 0x00	; 0
    3f26:	df 91       	pop	r29
    3f28:	cf 91       	pop	r28
    3f2a:	08 95       	ret

00003f2c <bootmagic>:
#include "hook.h"

keymap_config_t keymap_config;

void bootmagic(void)
{
    3f2c:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    3f2e:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <eeconfig_is_enabled>
    3f32:	81 11       	cpse	r24, r1
    3f34:	02 c0       	rjmp	.+4      	; 0x3f3a <bootmagic+0xe>
        eeconfig_init();
    3f36:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("bootmagic scan: ... ");
    3f3a:	86 e7       	ldi	r24, 0x76	; 118
    3f3c:	94 e0       	ldi	r25, 0x04	; 4
    3f3e:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); wait_ms(10); }
    3f42:	c5 e6       	ldi	r28, 0x65	; 101
    3f44:	c1 50       	subi	r28, 0x01	; 1
    3f46:	49 f0       	breq	.+18     	; 0x3f5a <bootmagic+0x2e>
    3f48:	0e 94 62 07 	call	0xec4	; 0xec4 <matrix_scan>
    3f4c:	8f e3       	ldi	r24, 0x3F	; 63
    3f4e:	9c e9       	ldi	r25, 0x9C	; 156
    3f50:	01 97       	sbiw	r24, 0x01	; 1
    3f52:	f1 f7       	brne	.-4      	; 0x3f50 <bootmagic+0x24>
    3f54:	00 c0       	rjmp	.+0      	; 0x3f56 <bootmagic+0x2a>
    3f56:	00 00       	nop
    3f58:	f5 cf       	rjmp	.-22     	; 0x3f44 <bootmagic+0x18>
    print("done.\n");
    3f5a:	8f e6       	ldi	r24, 0x6F	; 111
    3f5c:	94 e0       	ldi	r25, 0x04	; 4
    3f5e:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
    3f62:	89 e2       	ldi	r24, 0x29	; 41
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <bootmagic_scan_key>
    3f6a:	81 11       	cpse	r24, r1
    3f6c:	29 c1       	rjmp	.+594    	; 0x41c0 <bootmagic+0x294>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    3f6e:	8a e2       	ldi	r24, 0x2A	; 42
    3f70:	90 e0       	ldi	r25, 0x00	; 0
    3f72:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <bootmagic_scan_key>
    3f76:	81 11       	cpse	r24, r1
        eeconfig_init();
    3f78:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
    3f7c:	85 e0       	ldi	r24, 0x05	; 5
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <bootmagic_scan_key>
    3f84:	81 11       	cpse	r24, r1
        bootloader_jump();
    3f86:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <bootloader_jump>
    }

    /* user-defined checks */
    hook_bootmagic();
    3f8a:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <hook_bootmagic>

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    3f8e:	0e 94 07 21 	call	0x420e	; 0x420e <eeconfig_read_debug>
    3f92:	80 93 c1 01 	sts	0x01C1, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    3f96:	87 e0       	ldi	r24, 0x07	; 7
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <bootmagic_scan_key>
    3f9e:	88 23       	and	r24, r24
    3fa0:	b1 f1       	breq	.+108    	; 0x400e <bootmagic+0xe2>
        if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    3fa2:	8b e1       	ldi	r24, 0x1B	; 27
    3fa4:	90 e0       	ldi	r25, 0x00	; 0
    3fa6:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <bootmagic_scan_key>
    3faa:	88 23       	and	r24, r24
    3fac:	51 f0       	breq	.+20     	; 0x3fc2 <bootmagic+0x96>
            debug_config.matrix = !debug_config.matrix;
    3fae:	90 91 c1 01 	lds	r25, 0x01C1
    3fb2:	91 fb       	bst	r25, 1
    3fb4:	88 27       	eor	r24, r24
    3fb6:	80 f9       	bld	r24, 0
    3fb8:	21 e0       	ldi	r18, 0x01	; 1
    3fba:	82 27       	eor	r24, r18
    3fbc:	80 fb       	bst	r24, 0
    3fbe:	91 f9       	bld	r25, 1
    3fc0:	24 c0       	rjmp	.+72     	; 0x400a <bootmagic+0xde>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    3fc2:	8e e0       	ldi	r24, 0x0E	; 14
    3fc4:	90 e0       	ldi	r25, 0x00	; 0
    3fc6:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <bootmagic_scan_key>
    3fca:	88 23       	and	r24, r24
    3fcc:	51 f0       	breq	.+20     	; 0x3fe2 <bootmagic+0xb6>
            debug_config.keyboard = !debug_config.keyboard;
    3fce:	90 91 c1 01 	lds	r25, 0x01C1
    3fd2:	92 fb       	bst	r25, 2
    3fd4:	88 27       	eor	r24, r24
    3fd6:	80 f9       	bld	r24, 0
    3fd8:	21 e0       	ldi	r18, 0x01	; 1
    3fda:	82 27       	eor	r24, r18
    3fdc:	80 fb       	bst	r24, 0
    3fde:	92 f9       	bld	r25, 2
    3fe0:	14 c0       	rjmp	.+40     	; 0x400a <bootmagic+0xde>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    3fe2:	80 e1       	ldi	r24, 0x10	; 16
    3fe4:	90 e0       	ldi	r25, 0x00	; 0
    3fe6:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <bootmagic_scan_key>
    3fea:	90 91 c1 01 	lds	r25, 0x01C1
    3fee:	88 23       	and	r24, r24
    3ff0:	41 f0       	breq	.+16     	; 0x4002 <bootmagic+0xd6>
            debug_config.mouse = !debug_config.mouse;
    3ff2:	93 fb       	bst	r25, 3
    3ff4:	88 27       	eor	r24, r24
    3ff6:	80 f9       	bld	r24, 0
    3ff8:	21 e0       	ldi	r18, 0x01	; 1
    3ffa:	82 27       	eor	r24, r18
    3ffc:	80 fb       	bst	r24, 0
    3ffe:	93 f9       	bld	r25, 3
    4000:	04 c0       	rjmp	.+8      	; 0x400a <bootmagic+0xde>
        } else {
            debug_config.enable = !debug_config.enable;
    4002:	89 2f       	mov	r24, r25
    4004:	80 95       	com	r24
    4006:	80 fb       	bst	r24, 0
    4008:	90 f9       	bld	r25, 0
    400a:	90 93 c1 01 	sts	0x01C1, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    400e:	80 91 c1 01 	lds	r24, 0x01C1
    4012:	0e 94 0b 21 	call	0x4216	; 0x4216 <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    4016:	0e 94 19 21 	call	0x4232	; 0x4232 <eeconfig_read_keymap>
    401a:	80 93 df 01 	sts	0x01DF, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    401e:	80 ee       	ldi	r24, 0xE0	; 224
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <bootmagic_scan_key>
    4026:	88 23       	and	r24, r24
    4028:	41 f0       	breq	.+16     	; 0x403a <bootmagic+0x10e>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    402a:	80 91 df 01 	lds	r24, 0x01DF
    402e:	98 2f       	mov	r25, r24
    4030:	90 95       	com	r25
    4032:	90 fb       	bst	r25, 0
    4034:	80 f9       	bld	r24, 0
    4036:	80 93 df 01 	sts	0x01DF, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    403a:	89 e3       	ldi	r24, 0x39	; 57
    403c:	90 e0       	ldi	r25, 0x00	; 0
    403e:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <bootmagic_scan_key>
    4042:	88 23       	and	r24, r24
    4044:	59 f0       	breq	.+22     	; 0x405c <bootmagic+0x130>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    4046:	90 91 df 01 	lds	r25, 0x01DF
    404a:	91 fb       	bst	r25, 1
    404c:	88 27       	eor	r24, r24
    404e:	80 f9       	bld	r24, 0
    4050:	21 e0       	ldi	r18, 0x01	; 1
    4052:	82 27       	eor	r24, r18
    4054:	80 fb       	bst	r24, 0
    4056:	91 f9       	bld	r25, 1
    4058:	90 93 df 01 	sts	0x01DF, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    405c:	82 ee       	ldi	r24, 0xE2	; 226
    405e:	90 e0       	ldi	r25, 0x00	; 0
    4060:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <bootmagic_scan_key>
    4064:	88 23       	and	r24, r24
    4066:	59 f0       	breq	.+22     	; 0x407e <bootmagic+0x152>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    4068:	90 91 df 01 	lds	r25, 0x01DF
    406c:	92 fb       	bst	r25, 2
    406e:	88 27       	eor	r24, r24
    4070:	80 f9       	bld	r24, 0
    4072:	21 e0       	ldi	r18, 0x01	; 1
    4074:	82 27       	eor	r24, r18
    4076:	80 fb       	bst	r24, 0
    4078:	92 f9       	bld	r25, 2
    407a:	90 93 df 01 	sts	0x01DF, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    407e:	86 ee       	ldi	r24, 0xE6	; 230
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <bootmagic_scan_key>
    4086:	88 23       	and	r24, r24
    4088:	59 f0       	breq	.+22     	; 0x40a0 <bootmagic+0x174>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    408a:	90 91 df 01 	lds	r25, 0x01DF
    408e:	93 fb       	bst	r25, 3
    4090:	88 27       	eor	r24, r24
    4092:	80 f9       	bld	r24, 0
    4094:	21 e0       	ldi	r18, 0x01	; 1
    4096:	82 27       	eor	r24, r18
    4098:	80 fb       	bst	r24, 0
    409a:	93 f9       	bld	r25, 3
    409c:	90 93 df 01 	sts	0x01DF, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
    40a0:	83 ee       	ldi	r24, 0xE3	; 227
    40a2:	90 e0       	ldi	r25, 0x00	; 0
    40a4:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <bootmagic_scan_key>
    40a8:	88 23       	and	r24, r24
    40aa:	59 f0       	breq	.+22     	; 0x40c2 <bootmagic+0x196>
        keymap_config.no_gui = !keymap_config.no_gui;
    40ac:	90 91 df 01 	lds	r25, 0x01DF
    40b0:	94 fb       	bst	r25, 4
    40b2:	88 27       	eor	r24, r24
    40b4:	80 f9       	bld	r24, 0
    40b6:	21 e0       	ldi	r18, 0x01	; 1
    40b8:	82 27       	eor	r24, r18
    40ba:	80 fb       	bst	r24, 0
    40bc:	94 f9       	bld	r25, 4
    40be:	90 93 df 01 	sts	0x01DF, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    40c2:	85 e3       	ldi	r24, 0x35	; 53
    40c4:	90 e0       	ldi	r25, 0x00	; 0
    40c6:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <bootmagic_scan_key>
    40ca:	88 23       	and	r24, r24
    40cc:	59 f0       	breq	.+22     	; 0x40e4 <bootmagic+0x1b8>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    40ce:	90 91 df 01 	lds	r25, 0x01DF
    40d2:	95 fb       	bst	r25, 5
    40d4:	88 27       	eor	r24, r24
    40d6:	80 f9       	bld	r24, 0
    40d8:	21 e0       	ldi	r18, 0x01	; 1
    40da:	82 27       	eor	r24, r18
    40dc:	80 fb       	bst	r24, 0
    40de:	95 f9       	bld	r25, 5
    40e0:	90 93 df 01 	sts	0x01DF, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    40e4:	81 e3       	ldi	r24, 0x31	; 49
    40e6:	90 e0       	ldi	r25, 0x00	; 0
    40e8:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <bootmagic_scan_key>
    40ec:	88 23       	and	r24, r24
    40ee:	59 f0       	breq	.+22     	; 0x4106 <bootmagic+0x1da>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    40f0:	90 91 df 01 	lds	r25, 0x01DF
    40f4:	96 fb       	bst	r25, 6
    40f6:	88 27       	eor	r24, r24
    40f8:	80 f9       	bld	r24, 0
    40fa:	21 e0       	ldi	r18, 0x01	; 1
    40fc:	82 27       	eor	r24, r18
    40fe:	80 fb       	bst	r24, 0
    4100:	96 f9       	bld	r25, 6
    4102:	90 93 df 01 	sts	0x01DF, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
    4106:	81 e1       	ldi	r24, 0x11	; 17
    4108:	90 e0       	ldi	r25, 0x00	; 0
    410a:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <bootmagic_scan_key>
    410e:	88 23       	and	r24, r24
    4110:	59 f0       	breq	.+22     	; 0x4128 <bootmagic+0x1fc>
        keymap_config.nkro = !keymap_config.nkro;
    4112:	90 91 df 01 	lds	r25, 0x01DF
    4116:	97 fb       	bst	r25, 7
    4118:	88 27       	eor	r24, r24
    411a:	80 f9       	bld	r24, 0
    411c:	21 e0       	ldi	r18, 0x01	; 1
    411e:	82 27       	eor	r24, r18
    4120:	80 fb       	bst	r24, 0
    4122:	97 f9       	bld	r25, 7
    4124:	90 93 df 01 	sts	0x01DF, r25
    }
    eeconfig_write_keymap(keymap_config.raw);
    4128:	80 91 df 01 	lds	r24, 0x01DF
    412c:	0e 94 1d 21 	call	0x423a	; 0x423a <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    4130:	80 91 df 01 	lds	r24, 0x01DF
    4134:	87 fb       	bst	r24, 7
    4136:	88 27       	eor	r24, r24
    4138:	80 f9       	bld	r24, 0
    413a:	80 93 0c 01 	sts	0x010C, r24
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    413e:	87 e2       	ldi	r24, 0x27	; 39
    4140:	90 e0       	ldi	r25, 0x00	; 0
    4142:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <bootmagic_scan_key>
    4146:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    4148:	8e e1       	ldi	r24, 0x1E	; 30
    414a:	90 e0       	ldi	r25, 0x00	; 0
    414c:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <bootmagic_scan_key>
    4150:	81 11       	cpse	r24, r1
    4152:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    4154:	8f e1       	ldi	r24, 0x1F	; 31
    4156:	90 e0       	ldi	r25, 0x00	; 0
    4158:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <bootmagic_scan_key>
    415c:	81 11       	cpse	r24, r1
    415e:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    4160:	80 e2       	ldi	r24, 0x20	; 32
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <bootmagic_scan_key>
    4168:	81 11       	cpse	r24, r1
    416a:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    416c:	81 e2       	ldi	r24, 0x21	; 33
    416e:	90 e0       	ldi	r25, 0x00	; 0
    4170:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <bootmagic_scan_key>
    4174:	81 11       	cpse	r24, r1
    4176:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    4178:	82 e2       	ldi	r24, 0x22	; 34
    417a:	90 e0       	ldi	r25, 0x00	; 0
    417c:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <bootmagic_scan_key>
    4180:	81 11       	cpse	r24, r1
    4182:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    4184:	83 e2       	ldi	r24, 0x23	; 35
    4186:	90 e0       	ldi	r25, 0x00	; 0
    4188:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <bootmagic_scan_key>
    418c:	81 11       	cpse	r24, r1
    418e:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    4190:	84 e2       	ldi	r24, 0x24	; 36
    4192:	90 e0       	ldi	r25, 0x00	; 0
    4194:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <bootmagic_scan_key>
    4198:	88 23       	and	r24, r24
    419a:	11 f0       	breq	.+4      	; 0x41a0 <bootmagic+0x274>
    419c:	c0 68       	ori	r28, 0x80	; 128
    419e:	02 c0       	rjmp	.+4      	; 0x41a4 <bootmagic+0x278>
    if (default_layer) {
    41a0:	cc 23       	and	r28, r28
    41a2:	29 f0       	breq	.+10     	; 0x41ae <bootmagic+0x282>
        eeconfig_write_default_layer(default_layer);
    41a4:	8c 2f       	mov	r24, r28
    41a6:	0e 94 14 21 	call	0x4228	; 0x4228 <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    41aa:	6c 2f       	mov	r22, r28
    41ac:	03 c0       	rjmp	.+6      	; 0x41b4 <bootmagic+0x288>
    } else {
        default_layer = eeconfig_read_default_layer();
    41ae:	0e 94 10 21 	call	0x4220	; 0x4220 <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    41b2:	68 2f       	mov	r22, r24
    41b4:	70 e0       	ldi	r23, 0x00	; 0
    41b6:	80 e0       	ldi	r24, 0x00	; 0
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    41ba:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    41bc:	0c 94 a5 1a 	jmp	0x354a	; 0x354a <default_layer_set>
    }
}
    41c0:	cf 91       	pop	r28
    41c2:	08 95       	ret

000041c4 <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    41c4:	6d ee       	ldi	r22, 0xED	; 237
    41c6:	7e ef       	ldi	r23, 0xFE	; 254
    41c8:	80 e0       	ldi	r24, 0x00	; 0
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <__eewr_word_m32u4>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    41d0:	60 e0       	ldi	r22, 0x00	; 0
    41d2:	82 e0       	ldi	r24, 0x02	; 2
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    41da:	60 e0       	ldi	r22, 0x00	; 0
    41dc:	83 e0       	ldi	r24, 0x03	; 3
    41de:	90 e0       	ldi	r25, 0x00	; 0
    41e0:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    41e4:	60 e0       	ldi	r22, 0x00	; 0
    41e6:	84 e0       	ldi	r24, 0x04	; 4
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    41ee:	60 e0       	ldi	r22, 0x00	; 0
    41f0:	85 e0       	ldi	r24, 0x05	; 5
    41f2:	90 e0       	ldi	r25, 0x00	; 0
    41f4:	0c 94 50 2a 	jmp	0x54a0	; 0x54a0 <__eewr_byte_m32u4>

000041f8 <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    41f8:	80 e0       	ldi	r24, 0x00	; 0
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__eerd_word_m32u4>
    4200:	21 e0       	ldi	r18, 0x01	; 1
    4202:	8d 3e       	cpi	r24, 0xED	; 237
    4204:	9e 4f       	sbci	r25, 0xFE	; 254
    4206:	09 f0       	breq	.+2      	; 0x420a <eeconfig_is_enabled+0x12>
    4208:	20 e0       	ldi	r18, 0x00	; 0
}
    420a:	82 2f       	mov	r24, r18
    420c:	08 95       	ret

0000420e <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    420e:	82 e0       	ldi	r24, 0x02	; 2
    4210:	90 e0       	ldi	r25, 0x00	; 0
    4212:	0c 94 42 2a 	jmp	0x5484	; 0x5484 <__eerd_byte_m32u4>

00004216 <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    4216:	68 2f       	mov	r22, r24
    4218:	82 e0       	ldi	r24, 0x02	; 2
    421a:	90 e0       	ldi	r25, 0x00	; 0
    421c:	0c 94 50 2a 	jmp	0x54a0	; 0x54a0 <__eewr_byte_m32u4>

00004220 <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    4220:	83 e0       	ldi	r24, 0x03	; 3
    4222:	90 e0       	ldi	r25, 0x00	; 0
    4224:	0c 94 42 2a 	jmp	0x5484	; 0x5484 <__eerd_byte_m32u4>

00004228 <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    4228:	68 2f       	mov	r22, r24
    422a:	83 e0       	ldi	r24, 0x03	; 3
    422c:	90 e0       	ldi	r25, 0x00	; 0
    422e:	0c 94 50 2a 	jmp	0x54a0	; 0x54a0 <__eewr_byte_m32u4>

00004232 <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    4232:	84 e0       	ldi	r24, 0x04	; 4
    4234:	90 e0       	ldi	r25, 0x00	; 0
    4236:	0c 94 42 2a 	jmp	0x5484	; 0x5484 <__eerd_byte_m32u4>

0000423a <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    423a:	68 2f       	mov	r22, r24
    423c:	84 e0       	ldi	r24, 0x04	; 4
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	0c 94 50 2a 	jmp	0x54a0	; 0x54a0 <__eewr_byte_m32u4>

00004244 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4244:	80 91 c9 01 	lds	r24, 0x01C9
    4248:	80 ff       	sbrs	r24, 0
    424a:	0b c0       	rjmp	.+22     	; 0x4262 <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    424c:	60 91 12 01 	lds	r22, 0x0112
    4250:	85 e0       	ldi	r24, 0x05	; 5
    4252:	68 9f       	mul	r22, r24
    4254:	b0 01       	movw	r22, r0
    4256:	11 24       	eor	r1, r1
    4258:	75 95       	asr	r23
    425a:	67 95       	ror	r22
    425c:	75 95       	asr	r23
    425e:	67 95       	ror	r22
    4260:	2a c0       	rjmp	.+84     	; 0x42b6 <move_unit+0x72>
    } else if (mousekey_accel & (1<<1)) {
    4262:	81 ff       	sbrs	r24, 1
    4264:	09 c0       	rjmp	.+18     	; 0x4278 <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    4266:	60 91 12 01 	lds	r22, 0x0112
    426a:	85 e0       	ldi	r24, 0x05	; 5
    426c:	68 9f       	mul	r22, r24
    426e:	b0 01       	movw	r22, r0
    4270:	11 24       	eor	r1, r1
    4272:	75 95       	asr	r23
    4274:	67 95       	ror	r22
    4276:	1f c0       	rjmp	.+62     	; 0x42b6 <move_unit+0x72>
    } else if (mousekey_accel & (1<<2)) {
    4278:	82 ff       	sbrs	r24, 2
    427a:	07 c0       	rjmp	.+14     	; 0x428a <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    427c:	60 91 12 01 	lds	r22, 0x0112
    4280:	85 e0       	ldi	r24, 0x05	; 5
    4282:	68 9f       	mul	r22, r24
    4284:	b0 01       	movw	r22, r0
    4286:	11 24       	eor	r1, r1
    4288:	16 c0       	rjmp	.+44     	; 0x42b6 <move_unit+0x72>
    } else if (mousekey_repeat == 0) {
    428a:	40 91 ca 01 	lds	r20, 0x01CA
    428e:	44 23       	and	r20, r20
    4290:	c9 f0       	breq	.+50     	; 0x42c4 <move_unit+0x80>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    4292:	60 91 11 01 	lds	r22, 0x0111
    4296:	46 17       	cp	r20, r22
    4298:	88 f7       	brcc	.-30     	; 0x427c <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    429a:	20 91 12 01 	lds	r18, 0x0112
    429e:	85 e0       	ldi	r24, 0x05	; 5
    42a0:	28 9f       	mul	r18, r24
    42a2:	90 01       	movw	r18, r0
    42a4:	11 24       	eor	r1, r1
    42a6:	42 9f       	mul	r20, r18
    42a8:	c0 01       	movw	r24, r0
    42aa:	43 9f       	mul	r20, r19
    42ac:	90 0d       	add	r25, r0
    42ae:	11 24       	eor	r1, r1
    42b0:	70 e0       	ldi	r23, 0x00	; 0
    42b2:	0e 94 14 2a 	call	0x5428	; 0x5428 <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    42b6:	60 38       	cpi	r22, 0x80	; 128
    42b8:	71 05       	cpc	r23, r1
    42ba:	40 f4       	brcc	.+16     	; 0x42cc <move_unit+0x88>
    42bc:	61 15       	cp	r22, r1
    42be:	71 05       	cpc	r23, r1
    42c0:	39 f0       	breq	.+14     	; 0x42d0 <move_unit+0x8c>
    42c2:	02 c0       	rjmp	.+4      	; 0x42c8 <move_unit+0x84>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    42c4:	65 e0       	ldi	r22, 0x05	; 5
    42c6:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    42c8:	86 2f       	mov	r24, r22
    42ca:	08 95       	ret
    42cc:	8f e7       	ldi	r24, 0x7F	; 127
    42ce:	08 95       	ret
    42d0:	81 e0       	ldi	r24, 0x01	; 1
}
    42d2:	08 95       	ret

000042d4 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    42d4:	80 91 c9 01 	lds	r24, 0x01C9
    42d8:	80 ff       	sbrs	r24, 0
    42da:	08 c0       	rjmp	.+16     	; 0x42ec <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    42dc:	60 91 10 01 	lds	r22, 0x0110
    42e0:	70 e0       	ldi	r23, 0x00	; 0
    42e2:	75 95       	asr	r23
    42e4:	67 95       	ror	r22
    42e6:	75 95       	asr	r23
    42e8:	67 95       	ror	r22
    42ea:	21 c0       	rjmp	.+66     	; 0x432e <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    42ec:	81 ff       	sbrs	r24, 1
    42ee:	06 c0       	rjmp	.+12     	; 0x42fc <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    42f0:	60 91 10 01 	lds	r22, 0x0110
    42f4:	70 e0       	ldi	r23, 0x00	; 0
    42f6:	75 95       	asr	r23
    42f8:	67 95       	ror	r22
    42fa:	19 c0       	rjmp	.+50     	; 0x432e <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    42fc:	82 ff       	sbrs	r24, 2
    42fe:	04 c0       	rjmp	.+8      	; 0x4308 <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    4300:	60 91 10 01 	lds	r22, 0x0110
    4304:	70 e0       	ldi	r23, 0x00	; 0
    4306:	10 c0       	rjmp	.+32     	; 0x4328 <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    4308:	80 91 ca 01 	lds	r24, 0x01CA
    430c:	88 23       	and	r24, r24
    430e:	c1 f0       	breq	.+48     	; 0x4340 <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    4310:	60 91 0f 01 	lds	r22, 0x010F
    4314:	86 17       	cp	r24, r22
    4316:	a0 f7       	brcc	.-24     	; 0x4300 <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    4318:	90 91 10 01 	lds	r25, 0x0110
    431c:	98 9f       	mul	r25, r24
    431e:	c0 01       	movw	r24, r0
    4320:	11 24       	eor	r1, r1
    4322:	70 e0       	ldi	r23, 0x00	; 0
    4324:	0e 94 14 2a 	call	0x5428	; 0x5428 <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    4328:	60 38       	cpi	r22, 0x80	; 128
    432a:	71 05       	cpc	r23, r1
    432c:	28 f4       	brcc	.+10     	; 0x4338 <wheel_unit+0x64>
    432e:	61 15       	cp	r22, r1
    4330:	71 05       	cpc	r23, r1
    4332:	21 f0       	breq	.+8      	; 0x433c <wheel_unit+0x68>
    4334:	86 2f       	mov	r24, r22
    4336:	08 95       	ret
    4338:	8f e7       	ldi	r24, 0x7F	; 127
    433a:	08 95       	ret
    433c:	81 e0       	ldi	r24, 0x01	; 1
    433e:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    4340:	61 e0       	ldi	r22, 0x01	; 1
    4342:	70 e0       	ldi	r23, 0x00	; 0
    4344:	f4 cf       	rjmp	.-24     	; 0x432e <wheel_unit+0x5a>

00004346 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    4346:	80 3f       	cpi	r24, 0xF0	; 240
    4348:	21 f4       	brne	.+8      	; 0x4352 <mousekey_on+0xc>
    434a:	0e 94 22 21 	call	0x4244	; 0x4244 <move_unit>
    434e:	81 95       	neg	r24
    4350:	04 c0       	rjmp	.+8      	; 0x435a <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    4352:	81 3f       	cpi	r24, 0xF1	; 241
    4354:	29 f4       	brne	.+10     	; 0x4360 <mousekey_on+0x1a>
    4356:	0e 94 22 21 	call	0x4244	; 0x4244 <move_unit>
    435a:	80 93 cd 01 	sts	0x01CD, r24
    435e:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    4360:	82 3f       	cpi	r24, 0xF2	; 242
    4362:	21 f4       	brne	.+8      	; 0x436c <mousekey_on+0x26>
    4364:	0e 94 22 21 	call	0x4244	; 0x4244 <move_unit>
    4368:	81 95       	neg	r24
    436a:	04 c0       	rjmp	.+8      	; 0x4374 <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    436c:	83 3f       	cpi	r24, 0xF3	; 243
    436e:	29 f4       	brne	.+10     	; 0x437a <mousekey_on+0x34>
    4370:	0e 94 22 21 	call	0x4244	; 0x4244 <move_unit>
    4374:	80 93 cc 01 	sts	0x01CC, r24
    4378:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    437a:	89 3f       	cpi	r24, 0xF9	; 249
    437c:	19 f4       	brne	.+6      	; 0x4384 <mousekey_on+0x3e>
    437e:	0e 94 6a 21 	call	0x42d4	; 0x42d4 <wheel_unit>
    4382:	05 c0       	rjmp	.+10     	; 0x438e <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    4384:	8a 3f       	cpi	r24, 0xFA	; 250
    4386:	31 f4       	brne	.+12     	; 0x4394 <mousekey_on+0x4e>
    4388:	0e 94 6a 21 	call	0x42d4	; 0x42d4 <wheel_unit>
    438c:	81 95       	neg	r24
    438e:	80 93 ce 01 	sts	0x01CE, r24
    4392:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    4394:	8b 3f       	cpi	r24, 0xFB	; 251
    4396:	21 f4       	brne	.+8      	; 0x43a0 <mousekey_on+0x5a>
    4398:	0e 94 6a 21 	call	0x42d4	; 0x42d4 <wheel_unit>
    439c:	81 95       	neg	r24
    439e:	04 c0       	rjmp	.+8      	; 0x43a8 <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    43a0:	8c 3f       	cpi	r24, 0xFC	; 252
    43a2:	29 f4       	brne	.+10     	; 0x43ae <mousekey_on+0x68>
    43a4:	0e 94 6a 21 	call	0x42d4	; 0x42d4 <wheel_unit>
    43a8:	80 93 cf 01 	sts	0x01CF, r24
    43ac:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    43ae:	84 3f       	cpi	r24, 0xF4	; 244
    43b0:	21 f4       	brne	.+8      	; 0x43ba <mousekey_on+0x74>
    43b2:	80 91 cb 01 	lds	r24, 0x01CB
    43b6:	81 60       	ori	r24, 0x01	; 1
    43b8:	17 c0       	rjmp	.+46     	; 0x43e8 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    43ba:	85 3f       	cpi	r24, 0xF5	; 245
    43bc:	21 f4       	brne	.+8      	; 0x43c6 <mousekey_on+0x80>
    43be:	80 91 cb 01 	lds	r24, 0x01CB
    43c2:	82 60       	ori	r24, 0x02	; 2
    43c4:	11 c0       	rjmp	.+34     	; 0x43e8 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    43c6:	86 3f       	cpi	r24, 0xF6	; 246
    43c8:	21 f4       	brne	.+8      	; 0x43d2 <mousekey_on+0x8c>
    43ca:	80 91 cb 01 	lds	r24, 0x01CB
    43ce:	84 60       	ori	r24, 0x04	; 4
    43d0:	0b c0       	rjmp	.+22     	; 0x43e8 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    43d2:	87 3f       	cpi	r24, 0xF7	; 247
    43d4:	21 f4       	brne	.+8      	; 0x43de <mousekey_on+0x98>
    43d6:	80 91 cb 01 	lds	r24, 0x01CB
    43da:	88 60       	ori	r24, 0x08	; 8
    43dc:	05 c0       	rjmp	.+10     	; 0x43e8 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    43de:	88 3f       	cpi	r24, 0xF8	; 248
    43e0:	31 f4       	brne	.+12     	; 0x43ee <mousekey_on+0xa8>
    43e2:	80 91 cb 01 	lds	r24, 0x01CB
    43e6:	80 61       	ori	r24, 0x10	; 16
    43e8:	80 93 cb 01 	sts	0x01CB, r24
    43ec:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    43ee:	8d 3f       	cpi	r24, 0xFD	; 253
    43f0:	21 f4       	brne	.+8      	; 0x43fa <mousekey_on+0xb4>
    43f2:	80 91 c9 01 	lds	r24, 0x01C9
    43f6:	81 60       	ori	r24, 0x01	; 1
    43f8:	0b c0       	rjmp	.+22     	; 0x4410 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    43fa:	8e 3f       	cpi	r24, 0xFE	; 254
    43fc:	21 f4       	brne	.+8      	; 0x4406 <mousekey_on+0xc0>
    43fe:	80 91 c9 01 	lds	r24, 0x01C9
    4402:	82 60       	ori	r24, 0x02	; 2
    4404:	05 c0       	rjmp	.+10     	; 0x4410 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    4406:	8f 3f       	cpi	r24, 0xFF	; 255
    4408:	29 f4       	brne	.+10     	; 0x4414 <mousekey_on+0xce>
    440a:	80 91 c9 01 	lds	r24, 0x01C9
    440e:	84 60       	ori	r24, 0x04	; 4
    4410:	80 93 c9 01 	sts	0x01C9, r24
    4414:	08 95       	ret

00004416 <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    4416:	80 3f       	cpi	r24, 0xF0	; 240
    4418:	39 f4       	brne	.+14     	; 0x4428 <mousekey_off+0x12>
    441a:	80 91 cd 01 	lds	r24, 0x01CD
    441e:	87 ff       	sbrs	r24, 7
    4420:	6c c0       	rjmp	.+216    	; 0x44fa <mousekey_off+0xe4>
    4422:	10 92 cd 01 	sts	0x01CD, r1
    4426:	69 c0       	rjmp	.+210    	; 0x44fa <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    4428:	81 3f       	cpi	r24, 0xF1	; 241
    442a:	29 f4       	brne	.+10     	; 0x4436 <mousekey_off+0x20>
    442c:	80 91 cd 01 	lds	r24, 0x01CD
    4430:	18 16       	cp	r1, r24
    4432:	bc f3       	brlt	.-18     	; 0x4422 <mousekey_off+0xc>
    4434:	62 c0       	rjmp	.+196    	; 0x44fa <mousekey_off+0xe4>
    4436:	90 91 cc 01 	lds	r25, 0x01CC
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    443a:	82 3f       	cpi	r24, 0xF2	; 242
    443c:	29 f4       	brne	.+10     	; 0x4448 <mousekey_off+0x32>
    443e:	97 ff       	sbrs	r25, 7
    4440:	5c c0       	rjmp	.+184    	; 0x44fa <mousekey_off+0xe4>
    4442:	10 92 cc 01 	sts	0x01CC, r1
    4446:	59 c0       	rjmp	.+178    	; 0x44fa <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    4448:	83 3f       	cpi	r24, 0xF3	; 243
    444a:	19 f4       	brne	.+6      	; 0x4452 <mousekey_off+0x3c>
    444c:	19 16       	cp	r1, r25
    444e:	cc f3       	brlt	.-14     	; 0x4442 <mousekey_off+0x2c>
    4450:	54 c0       	rjmp	.+168    	; 0x44fa <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    4452:	89 3f       	cpi	r24, 0xF9	; 249
    4454:	41 f4       	brne	.+16     	; 0x4466 <mousekey_off+0x50>
    4456:	80 91 ce 01 	lds	r24, 0x01CE
    445a:	18 16       	cp	r1, r24
    445c:	0c f0       	brlt	.+2      	; 0x4460 <mousekey_off+0x4a>
    445e:	4d c0       	rjmp	.+154    	; 0x44fa <mousekey_off+0xe4>
    4460:	10 92 ce 01 	sts	0x01CE, r1
    4464:	4a c0       	rjmp	.+148    	; 0x44fa <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    4466:	8a 3f       	cpi	r24, 0xFA	; 250
    4468:	29 f4       	brne	.+10     	; 0x4474 <mousekey_off+0x5e>
    446a:	80 91 ce 01 	lds	r24, 0x01CE
    446e:	87 ff       	sbrs	r24, 7
    4470:	44 c0       	rjmp	.+136    	; 0x44fa <mousekey_off+0xe4>
    4472:	f6 cf       	rjmp	.-20     	; 0x4460 <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    4474:	8b 3f       	cpi	r24, 0xFB	; 251
    4476:	39 f4       	brne	.+14     	; 0x4486 <mousekey_off+0x70>
    4478:	80 91 cf 01 	lds	r24, 0x01CF
    447c:	87 ff       	sbrs	r24, 7
    447e:	3d c0       	rjmp	.+122    	; 0x44fa <mousekey_off+0xe4>
    4480:	10 92 cf 01 	sts	0x01CF, r1
    4484:	3a c0       	rjmp	.+116    	; 0x44fa <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    4486:	8c 3f       	cpi	r24, 0xFC	; 252
    4488:	29 f4       	brne	.+10     	; 0x4494 <mousekey_off+0x7e>
    448a:	80 91 cf 01 	lds	r24, 0x01CF
    448e:	18 16       	cp	r1, r24
    4490:	bc f3       	brlt	.-18     	; 0x4480 <mousekey_off+0x6a>
    4492:	33 c0       	rjmp	.+102    	; 0x44fa <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    4494:	84 3f       	cpi	r24, 0xF4	; 244
    4496:	21 f4       	brne	.+8      	; 0x44a0 <mousekey_off+0x8a>
    4498:	80 91 cb 01 	lds	r24, 0x01CB
    449c:	8e 7f       	andi	r24, 0xFE	; 254
    449e:	17 c0       	rjmp	.+46     	; 0x44ce <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    44a0:	85 3f       	cpi	r24, 0xF5	; 245
    44a2:	21 f4       	brne	.+8      	; 0x44ac <mousekey_off+0x96>
    44a4:	80 91 cb 01 	lds	r24, 0x01CB
    44a8:	8d 7f       	andi	r24, 0xFD	; 253
    44aa:	11 c0       	rjmp	.+34     	; 0x44ce <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    44ac:	86 3f       	cpi	r24, 0xF6	; 246
    44ae:	21 f4       	brne	.+8      	; 0x44b8 <mousekey_off+0xa2>
    44b0:	80 91 cb 01 	lds	r24, 0x01CB
    44b4:	8b 7f       	andi	r24, 0xFB	; 251
    44b6:	0b c0       	rjmp	.+22     	; 0x44ce <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    44b8:	87 3f       	cpi	r24, 0xF7	; 247
    44ba:	21 f4       	brne	.+8      	; 0x44c4 <mousekey_off+0xae>
    44bc:	80 91 cb 01 	lds	r24, 0x01CB
    44c0:	87 7f       	andi	r24, 0xF7	; 247
    44c2:	05 c0       	rjmp	.+10     	; 0x44ce <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    44c4:	88 3f       	cpi	r24, 0xF8	; 248
    44c6:	31 f4       	brne	.+12     	; 0x44d4 <mousekey_off+0xbe>
    44c8:	80 91 cb 01 	lds	r24, 0x01CB
    44cc:	8f 7e       	andi	r24, 0xEF	; 239
    44ce:	80 93 cb 01 	sts	0x01CB, r24
    44d2:	13 c0       	rjmp	.+38     	; 0x44fa <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    44d4:	8d 3f       	cpi	r24, 0xFD	; 253
    44d6:	21 f4       	brne	.+8      	; 0x44e0 <mousekey_off+0xca>
    44d8:	80 91 c9 01 	lds	r24, 0x01C9
    44dc:	8e 7f       	andi	r24, 0xFE	; 254
    44de:	0b c0       	rjmp	.+22     	; 0x44f6 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    44e0:	8e 3f       	cpi	r24, 0xFE	; 254
    44e2:	21 f4       	brne	.+8      	; 0x44ec <mousekey_off+0xd6>
    44e4:	80 91 c9 01 	lds	r24, 0x01C9
    44e8:	8d 7f       	andi	r24, 0xFD	; 253
    44ea:	05 c0       	rjmp	.+10     	; 0x44f6 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    44ec:	8f 3f       	cpi	r24, 0xFF	; 255
    44ee:	29 f4       	brne	.+10     	; 0x44fa <mousekey_off+0xe4>
    44f0:	80 91 c9 01 	lds	r24, 0x01C9
    44f4:	8b 7f       	andi	r24, 0xFB	; 251
    44f6:	80 93 c9 01 	sts	0x01C9, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    44fa:	80 91 cc 01 	lds	r24, 0x01CC
    44fe:	81 11       	cpse	r24, r1
    4500:	0e c0       	rjmp	.+28     	; 0x451e <mousekey_off+0x108>
    4502:	80 91 cd 01 	lds	r24, 0x01CD
    4506:	81 11       	cpse	r24, r1
    4508:	0a c0       	rjmp	.+20     	; 0x451e <mousekey_off+0x108>
    450a:	80 91 ce 01 	lds	r24, 0x01CE
    450e:	81 11       	cpse	r24, r1
    4510:	06 c0       	rjmp	.+12     	; 0x451e <mousekey_off+0x108>
    4512:	80 91 cf 01 	lds	r24, 0x01CF
    4516:	81 11       	cpse	r24, r1
    4518:	02 c0       	rjmp	.+4      	; 0x451e <mousekey_off+0x108>
        mousekey_repeat = 0;
    451a:	10 92 ca 01 	sts	0x01CA, r1
    451e:	08 95       	ret

00004520 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    4520:	80 91 c1 01 	lds	r24, 0x01C1
    4524:	83 ff       	sbrs	r24, 3
    4526:	7e c0       	rjmp	.+252    	; 0x4624 <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    4528:	82 eb       	ldi	r24, 0xB2	; 178
    452a:	94 e0       	ldi	r25, 0x04	; 4
    452c:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    phex(mouse_report.buttons); print("|");
    4530:	80 91 cb 01 	lds	r24, 0x01CB
    4534:	1f 92       	push	r1
    4536:	8f 93       	push	r24
    4538:	8d ea       	ldi	r24, 0xAD	; 173
    453a:	94 e0       	ldi	r25, 0x04	; 4
    453c:	9f 93       	push	r25
    453e:	8f 93       	push	r24
    4540:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    4544:	8b ea       	ldi	r24, 0xAB	; 171
    4546:	94 e0       	ldi	r25, 0x04	; 4
    4548:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    print_decs(mouse_report.x); print(" ");
    454c:	20 91 cc 01 	lds	r18, 0x01CC
    4550:	82 2f       	mov	r24, r18
    4552:	99 27       	eor	r25, r25
    4554:	87 fd       	sbrc	r24, 7
    4556:	90 95       	com	r25
    4558:	9f 93       	push	r25
    455a:	2f 93       	push	r18
    455c:	88 ea       	ldi	r24, 0xA8	; 168
    455e:	94 e0       	ldi	r25, 0x04	; 4
    4560:	9f 93       	push	r25
    4562:	8f 93       	push	r24
    4564:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    4568:	86 ea       	ldi	r24, 0xA6	; 166
    456a:	94 e0       	ldi	r25, 0x04	; 4
    456c:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    print_decs(mouse_report.y); print(" ");
    4570:	20 91 cd 01 	lds	r18, 0x01CD
    4574:	82 2f       	mov	r24, r18
    4576:	99 27       	eor	r25, r25
    4578:	87 fd       	sbrc	r24, 7
    457a:	90 95       	com	r25
    457c:	9f 93       	push	r25
    457e:	2f 93       	push	r18
    4580:	83 ea       	ldi	r24, 0xA3	; 163
    4582:	94 e0       	ldi	r25, 0x04	; 4
    4584:	9f 93       	push	r25
    4586:	8f 93       	push	r24
    4588:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    458c:	81 ea       	ldi	r24, 0xA1	; 161
    458e:	94 e0       	ldi	r25, 0x04	; 4
    4590:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    print_decs(mouse_report.v); print(" ");
    4594:	20 91 ce 01 	lds	r18, 0x01CE
    4598:	82 2f       	mov	r24, r18
    459a:	99 27       	eor	r25, r25
    459c:	87 fd       	sbrc	r24, 7
    459e:	90 95       	com	r25
    45a0:	9f 93       	push	r25
    45a2:	2f 93       	push	r18
    45a4:	8e e9       	ldi	r24, 0x9E	; 158
    45a6:	94 e0       	ldi	r25, 0x04	; 4
    45a8:	9f 93       	push	r25
    45aa:	8f 93       	push	r24
    45ac:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    45b0:	8c e9       	ldi	r24, 0x9C	; 156
    45b2:	94 e0       	ldi	r25, 0x04	; 4
    45b4:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    print_decs(mouse_report.h); print("](");
    45b8:	20 91 cf 01 	lds	r18, 0x01CF
    45bc:	82 2f       	mov	r24, r18
    45be:	99 27       	eor	r25, r25
    45c0:	87 fd       	sbrc	r24, 7
    45c2:	90 95       	com	r25
    45c4:	9f 93       	push	r25
    45c6:	2f 93       	push	r18
    45c8:	89 e9       	ldi	r24, 0x99	; 153
    45ca:	94 e0       	ldi	r25, 0x04	; 4
    45cc:	9f 93       	push	r25
    45ce:	8f 93       	push	r24
    45d0:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    45d4:	86 e9       	ldi	r24, 0x96	; 150
    45d6:	94 e0       	ldi	r25, 0x04	; 4
    45d8:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    print_dec(mousekey_repeat); print("/");
    45dc:	80 91 ca 01 	lds	r24, 0x01CA
    45e0:	1f 92       	push	r1
    45e2:	8f 93       	push	r24
    45e4:	83 e9       	ldi	r24, 0x93	; 147
    45e6:	94 e0       	ldi	r25, 0x04	; 4
    45e8:	9f 93       	push	r25
    45ea:	8f 93       	push	r24
    45ec:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    45f0:	81 e9       	ldi	r24, 0x91	; 145
    45f2:	94 e0       	ldi	r25, 0x04	; 4
    45f4:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    print_dec(mousekey_accel); print(")\n");
    45f8:	80 91 c9 01 	lds	r24, 0x01C9
    45fc:	1f 92       	push	r1
    45fe:	8f 93       	push	r24
    4600:	8e e8       	ldi	r24, 0x8E	; 142
    4602:	94 e0       	ldi	r25, 0x04	; 4
    4604:	9f 93       	push	r25
    4606:	8f 93       	push	r24
    4608:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    460c:	8b e8       	ldi	r24, 0x8B	; 139
    460e:	94 e0       	ldi	r25, 0x04	; 4
    4610:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    4614:	8d b7       	in	r24, 0x3d	; 61
    4616:	9e b7       	in	r25, 0x3e	; 62
    4618:	4c 96       	adiw	r24, 0x1c	; 28
    461a:	0f b6       	in	r0, 0x3f	; 63
    461c:	f8 94       	cli
    461e:	9e bf       	out	0x3e, r25	; 62
    4620:	0f be       	out	0x3f, r0	; 63
    4622:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    4624:	8b ec       	ldi	r24, 0xCB	; 203
    4626:	91 e0       	ldi	r25, 0x01	; 1
    4628:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <host_mouse_send>
    last_timer = timer_read();
    462c:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <timer_read>
    4630:	90 93 c8 01 	sts	0x01C8, r25
    4634:	80 93 c7 01 	sts	0x01C7, r24
    4638:	08 95       	ret

0000463a <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    463a:	1f 93       	push	r17
    463c:	cf 93       	push	r28
    463e:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    4640:	80 91 c7 01 	lds	r24, 0x01C7
    4644:	90 91 c8 01 	lds	r25, 0x01C8
    4648:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <timer_elapsed>
    464c:	40 91 ca 01 	lds	r20, 0x01CA
    4650:	44 23       	and	r20, r20
    4652:	21 f0       	breq	.+8      	; 0x465c <mousekey_task+0x22>
    4654:	20 91 13 01 	lds	r18, 0x0113
    4658:	30 e0       	ldi	r19, 0x00	; 0
    465a:	06 c0       	rjmp	.+12     	; 0x4668 <mousekey_task+0x2e>
    465c:	20 91 14 01 	lds	r18, 0x0114
    4660:	5a e0       	ldi	r21, 0x0A	; 10
    4662:	25 9f       	mul	r18, r21
    4664:	90 01       	movw	r18, r0
    4666:	11 24       	eor	r1, r1
    4668:	82 17       	cp	r24, r18
    466a:	93 07       	cpc	r25, r19
    466c:	08 f4       	brcc	.+2      	; 0x4670 <mousekey_task+0x36>
    466e:	82 c0       	rjmp	.+260    	; 0x4774 <mousekey_task+0x13a>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4670:	80 91 cc 01 	lds	r24, 0x01CC
    4674:	10 91 cd 01 	lds	r17, 0x01CD
    4678:	d0 91 ce 01 	lds	r29, 0x01CE
    467c:	c0 91 cf 01 	lds	r28, 0x01CF
    4680:	81 11       	cpse	r24, r1
    4682:	07 c0       	rjmp	.+14     	; 0x4692 <mousekey_task+0x58>
    4684:	11 11       	cpse	r17, r1
    4686:	05 c0       	rjmp	.+10     	; 0x4692 <mousekey_task+0x58>
    4688:	d1 11       	cpse	r29, r1
    468a:	03 c0       	rjmp	.+6      	; 0x4692 <mousekey_task+0x58>
    468c:	cc 23       	and	r28, r28
    468e:	09 f4       	brne	.+2      	; 0x4692 <mousekey_task+0x58>
    4690:	71 c0       	rjmp	.+226    	; 0x4774 <mousekey_task+0x13a>
        return;

    if (mousekey_repeat != UINT8_MAX)
    4692:	4f 3f       	cpi	r20, 0xFF	; 255
    4694:	19 f0       	breq	.+6      	; 0x469c <mousekey_task+0x62>
        mousekey_repeat++;
    4696:	4f 5f       	subi	r20, 0xFF	; 255
    4698:	40 93 ca 01 	sts	0x01CA, r20


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    469c:	18 16       	cp	r1, r24
    469e:	24 f4       	brge	.+8      	; 0x46a8 <mousekey_task+0x6e>
    46a0:	0e 94 22 21 	call	0x4244	; 0x4244 <move_unit>
    46a4:	80 93 cc 01 	sts	0x01CC, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    46a8:	80 91 cc 01 	lds	r24, 0x01CC
    46ac:	87 ff       	sbrs	r24, 7
    46ae:	05 c0       	rjmp	.+10     	; 0x46ba <mousekey_task+0x80>
    46b0:	0e 94 22 21 	call	0x4244	; 0x4244 <move_unit>
    46b4:	81 95       	neg	r24
    46b6:	80 93 cc 01 	sts	0x01CC, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    46ba:	11 16       	cp	r1, r17
    46bc:	24 f4       	brge	.+8      	; 0x46c6 <mousekey_task+0x8c>
    46be:	0e 94 22 21 	call	0x4244	; 0x4244 <move_unit>
    46c2:	80 93 cd 01 	sts	0x01CD, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    46c6:	80 91 cd 01 	lds	r24, 0x01CD
    46ca:	87 ff       	sbrs	r24, 7
    46cc:	05 c0       	rjmp	.+10     	; 0x46d8 <mousekey_task+0x9e>
    46ce:	0e 94 22 21 	call	0x4244	; 0x4244 <move_unit>
    46d2:	81 95       	neg	r24
    46d4:	80 93 cd 01 	sts	0x01CD, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    46d8:	60 91 cc 01 	lds	r22, 0x01CC
    46dc:	66 23       	and	r22, r22
    46de:	39 f1       	breq	.+78     	; 0x472e <mousekey_task+0xf4>
    46e0:	10 91 cd 01 	lds	r17, 0x01CD
    46e4:	11 23       	and	r17, r17
    46e6:	19 f1       	breq	.+70     	; 0x472e <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    46e8:	77 27       	eor	r23, r23
    46ea:	67 fd       	sbrc	r22, 7
    46ec:	70 95       	com	r23
    46ee:	87 2f       	mov	r24, r23
    46f0:	97 2f       	mov	r25, r23
    46f2:	0e 94 19 29 	call	0x5232	; 0x5232 <__floatsisf>
    46f6:	23 e3       	ldi	r18, 0x33	; 51
    46f8:	33 e3       	ldi	r19, 0x33	; 51
    46fa:	43 e3       	ldi	r20, 0x33	; 51
    46fc:	5f e3       	ldi	r21, 0x3F	; 63
    46fe:	0e 94 7d 29 	call	0x52fa	; 0x52fa <__mulsf3>
    4702:	0e 94 e6 28 	call	0x51cc	; 0x51cc <__fixsfsi>
    4706:	60 93 cc 01 	sts	0x01CC, r22
        mouse_report.y *= 0.7;
    470a:	61 2f       	mov	r22, r17
    470c:	77 27       	eor	r23, r23
    470e:	67 fd       	sbrc	r22, 7
    4710:	70 95       	com	r23
    4712:	87 2f       	mov	r24, r23
    4714:	97 2f       	mov	r25, r23
    4716:	0e 94 19 29 	call	0x5232	; 0x5232 <__floatsisf>
    471a:	23 e3       	ldi	r18, 0x33	; 51
    471c:	33 e3       	ldi	r19, 0x33	; 51
    471e:	43 e3       	ldi	r20, 0x33	; 51
    4720:	5f e3       	ldi	r21, 0x3F	; 63
    4722:	0e 94 7d 29 	call	0x52fa	; 0x52fa <__mulsf3>
    4726:	0e 94 e6 28 	call	0x51cc	; 0x51cc <__fixsfsi>
    472a:	60 93 cd 01 	sts	0x01CD, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    472e:	1d 16       	cp	r1, r29
    4730:	24 f4       	brge	.+8      	; 0x473a <mousekey_task+0x100>
    4732:	0e 94 6a 21 	call	0x42d4	; 0x42d4 <wheel_unit>
    4736:	80 93 ce 01 	sts	0x01CE, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    473a:	80 91 ce 01 	lds	r24, 0x01CE
    473e:	87 ff       	sbrs	r24, 7
    4740:	05 c0       	rjmp	.+10     	; 0x474c <mousekey_task+0x112>
    4742:	0e 94 6a 21 	call	0x42d4	; 0x42d4 <wheel_unit>
    4746:	81 95       	neg	r24
    4748:	80 93 ce 01 	sts	0x01CE, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    474c:	1c 16       	cp	r1, r28
    474e:	24 f4       	brge	.+8      	; 0x4758 <mousekey_task+0x11e>
    4750:	0e 94 6a 21 	call	0x42d4	; 0x42d4 <wheel_unit>
    4754:	80 93 cf 01 	sts	0x01CF, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    4758:	80 91 cf 01 	lds	r24, 0x01CF
    475c:	87 ff       	sbrs	r24, 7
    475e:	05 c0       	rjmp	.+10     	; 0x476a <mousekey_task+0x130>
    4760:	0e 94 6a 21 	call	0x42d4	; 0x42d4 <wheel_unit>
    4764:	81 95       	neg	r24
    4766:	80 93 cf 01 	sts	0x01CF, r24

    mousekey_send();
}
    476a:	df 91       	pop	r29
    476c:	cf 91       	pop	r28
    476e:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    4770:	0c 94 90 22 	jmp	0x4520	; 0x4520 <mousekey_send>
}
    4774:	df 91       	pop	r29
    4776:	cf 91       	pop	r28
    4778:	1f 91       	pop	r17
    477a:	08 95       	ret

0000477c <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    477c:	eb ec       	ldi	r30, 0xCB	; 203
    477e:	f1 e0       	ldi	r31, 0x01	; 1
    4780:	85 e0       	ldi	r24, 0x05	; 5
    4782:	df 01       	movw	r26, r30
    4784:	1d 92       	st	X+, r1
    4786:	8a 95       	dec	r24
    4788:	e9 f7       	brne	.-6      	; 0x4784 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    478a:	10 92 ca 01 	sts	0x01CA, r1
    mousekey_accel = 0;
    478e:	10 92 c9 01 	sts	0x01C9, r1
    4792:	08 95       	ret

00004794 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    4794:	85 ed       	ldi	r24, 0xD5	; 213
    4796:	96 e0       	ldi	r25, 0x06	; 6
    4798:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    479c:	1f 92       	push	r1
    479e:	81 e0       	ldi	r24, 0x01	; 1
    47a0:	8f 93       	push	r24
    47a2:	1f 92       	push	r1
    47a4:	85 e0       	ldi	r24, 0x05	; 5
    47a6:	8f 93       	push	r24
    47a8:	87 e8       	ldi	r24, 0x87	; 135
    47aa:	96 e0       	ldi	r25, 0x06	; 6
    47ac:	9f 93       	push	r25
    47ae:	8f 93       	push	r24
    47b0:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    47b4:	0f 90       	pop	r0
    47b6:	0f 90       	pop	r0
    47b8:	0f 90       	pop	r0
    47ba:	0f 90       	pop	r0
    47bc:	0f 90       	pop	r0
    47be:	0f 90       	pop	r0
    47c0:	08 95       	ret

000047c2 <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    47c2:	83 30       	cpi	r24, 0x03	; 3
    47c4:	e9 f1       	breq	.+122    	; 0x4840 <mousekey_param_inc+0x7e>
    47c6:	28 f4       	brcc	.+10     	; 0x47d2 <mousekey_param_inc+0x10>
    47c8:	81 30       	cpi	r24, 0x01	; 1
    47ca:	61 f0       	breq	.+24     	; 0x47e4 <mousekey_param_inc+0x22>
    47cc:	82 30       	cpi	r24, 0x02	; 2
    47ce:	09 f1       	breq	.+66     	; 0x4812 <mousekey_param_inc+0x50>
    47d0:	08 95       	ret
    47d2:	85 30       	cpi	r24, 0x05	; 5
    47d4:	09 f4       	brne	.+2      	; 0x47d8 <mousekey_param_inc+0x16>
    47d6:	62 c0       	rjmp	.+196    	; 0x489c <mousekey_param_inc+0xda>
    47d8:	08 f4       	brcc	.+2      	; 0x47dc <mousekey_param_inc+0x1a>
    47da:	49 c0       	rjmp	.+146    	; 0x486e <mousekey_param_inc+0xac>
    47dc:	86 30       	cpi	r24, 0x06	; 6
    47de:	09 f4       	brne	.+2      	; 0x47e2 <mousekey_param_inc+0x20>
    47e0:	74 c0       	rjmp	.+232    	; 0x48ca <mousekey_param_inc+0x108>
    47e2:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    47e4:	20 91 14 01 	lds	r18, 0x0114
    47e8:	86 2f       	mov	r24, r22
    47ea:	90 e0       	ldi	r25, 0x00	; 0
    47ec:	82 0f       	add	r24, r18
    47ee:	91 1d       	adc	r25, r1
    47f0:	8f 3f       	cpi	r24, 0xFF	; 255
    47f2:	91 05       	cpc	r25, r1
    47f4:	20 f4       	brcc	.+8      	; 0x47fe <mousekey_param_inc+0x3c>
                mk_delay += inc;
    47f6:	62 0f       	add	r22, r18
    47f8:	60 93 14 01 	sts	0x0114, r22
    47fc:	03 c0       	rjmp	.+6      	; 0x4804 <mousekey_param_inc+0x42>
            else
                mk_delay = UINT8_MAX;
    47fe:	8f ef       	ldi	r24, 0xFF	; 255
    4800:	80 93 14 01 	sts	0x0114, r24
            PRINT_SET_VAL(mk_delay);
    4804:	80 91 14 01 	lds	r24, 0x0114
    4808:	1f 92       	push	r1
    480a:	8f 93       	push	r24
    480c:	80 ec       	ldi	r24, 0xC0	; 192
    480e:	95 e0       	ldi	r25, 0x05	; 5
    4810:	72 c0       	rjmp	.+228    	; 0x48f6 <mousekey_param_inc+0x134>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    4812:	20 91 13 01 	lds	r18, 0x0113
    4816:	86 2f       	mov	r24, r22
    4818:	90 e0       	ldi	r25, 0x00	; 0
    481a:	82 0f       	add	r24, r18
    481c:	91 1d       	adc	r25, r1
    481e:	8f 3f       	cpi	r24, 0xFF	; 255
    4820:	91 05       	cpc	r25, r1
    4822:	20 f4       	brcc	.+8      	; 0x482c <mousekey_param_inc+0x6a>
                mk_interval += inc;
    4824:	62 0f       	add	r22, r18
    4826:	60 93 13 01 	sts	0x0113, r22
    482a:	03 c0       	rjmp	.+6      	; 0x4832 <mousekey_param_inc+0x70>
            else
                mk_interval = UINT8_MAX;
    482c:	8f ef       	ldi	r24, 0xFF	; 255
    482e:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_interval);
    4832:	80 91 13 01 	lds	r24, 0x0113
    4836:	1f 92       	push	r1
    4838:	8f 93       	push	r24
    483a:	8e ea       	ldi	r24, 0xAE	; 174
    483c:	95 e0       	ldi	r25, 0x05	; 5
    483e:	5b c0       	rjmp	.+182    	; 0x48f6 <mousekey_param_inc+0x134>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    4840:	20 91 12 01 	lds	r18, 0x0112
    4844:	86 2f       	mov	r24, r22
    4846:	90 e0       	ldi	r25, 0x00	; 0
    4848:	82 0f       	add	r24, r18
    484a:	91 1d       	adc	r25, r1
    484c:	8f 3f       	cpi	r24, 0xFF	; 255
    484e:	91 05       	cpc	r25, r1
    4850:	20 f4       	brcc	.+8      	; 0x485a <mousekey_param_inc+0x98>
                mk_max_speed += inc;
    4852:	62 0f       	add	r22, r18
    4854:	60 93 12 01 	sts	0x0112, r22
    4858:	03 c0       	rjmp	.+6      	; 0x4860 <mousekey_param_inc+0x9e>
            else
                mk_max_speed = UINT8_MAX;
    485a:	8f ef       	ldi	r24, 0xFF	; 255
    485c:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_max_speed);
    4860:	80 91 12 01 	lds	r24, 0x0112
    4864:	1f 92       	push	r1
    4866:	8f 93       	push	r24
    4868:	8b e9       	ldi	r24, 0x9B	; 155
    486a:	95 e0       	ldi	r25, 0x05	; 5
    486c:	44 c0       	rjmp	.+136    	; 0x48f6 <mousekey_param_inc+0x134>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    486e:	20 91 11 01 	lds	r18, 0x0111
    4872:	86 2f       	mov	r24, r22
    4874:	90 e0       	ldi	r25, 0x00	; 0
    4876:	82 0f       	add	r24, r18
    4878:	91 1d       	adc	r25, r1
    487a:	8f 3f       	cpi	r24, 0xFF	; 255
    487c:	91 05       	cpc	r25, r1
    487e:	20 f4       	brcc	.+8      	; 0x4888 <mousekey_param_inc+0xc6>
                mk_time_to_max += inc;
    4880:	62 0f       	add	r22, r18
    4882:	60 93 11 01 	sts	0x0111, r22
    4886:	03 c0       	rjmp	.+6      	; 0x488e <mousekey_param_inc+0xcc>
            else
                mk_time_to_max = UINT8_MAX;
    4888:	8f ef       	ldi	r24, 0xFF	; 255
    488a:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_time_to_max);
    488e:	80 91 11 01 	lds	r24, 0x0111
    4892:	1f 92       	push	r1
    4894:	8f 93       	push	r24
    4896:	86 e8       	ldi	r24, 0x86	; 134
    4898:	95 e0       	ldi	r25, 0x05	; 5
    489a:	2d c0       	rjmp	.+90     	; 0x48f6 <mousekey_param_inc+0x134>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    489c:	20 91 10 01 	lds	r18, 0x0110
    48a0:	86 2f       	mov	r24, r22
    48a2:	90 e0       	ldi	r25, 0x00	; 0
    48a4:	82 0f       	add	r24, r18
    48a6:	91 1d       	adc	r25, r1
    48a8:	8f 3f       	cpi	r24, 0xFF	; 255
    48aa:	91 05       	cpc	r25, r1
    48ac:	20 f4       	brcc	.+8      	; 0x48b6 <mousekey_param_inc+0xf4>
                mk_wheel_max_speed += inc;
    48ae:	62 0f       	add	r22, r18
    48b0:	60 93 10 01 	sts	0x0110, r22
    48b4:	03 c0       	rjmp	.+6      	; 0x48bc <mousekey_param_inc+0xfa>
            else
                mk_wheel_max_speed = UINT8_MAX;
    48b6:	8f ef       	ldi	r24, 0xFF	; 255
    48b8:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    48bc:	80 91 10 01 	lds	r24, 0x0110
    48c0:	1f 92       	push	r1
    48c2:	8f 93       	push	r24
    48c4:	8d e6       	ldi	r24, 0x6D	; 109
    48c6:	95 e0       	ldi	r25, 0x05	; 5
    48c8:	16 c0       	rjmp	.+44     	; 0x48f6 <mousekey_param_inc+0x134>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    48ca:	20 91 0f 01 	lds	r18, 0x010F
    48ce:	86 2f       	mov	r24, r22
    48d0:	90 e0       	ldi	r25, 0x00	; 0
    48d2:	82 0f       	add	r24, r18
    48d4:	91 1d       	adc	r25, r1
    48d6:	8f 3f       	cpi	r24, 0xFF	; 255
    48d8:	91 05       	cpc	r25, r1
    48da:	20 f4       	brcc	.+8      	; 0x48e4 <mousekey_param_inc+0x122>
                mk_wheel_time_to_max += inc;
    48dc:	62 0f       	add	r22, r18
    48de:	60 93 0f 01 	sts	0x010F, r22
    48e2:	03 c0       	rjmp	.+6      	; 0x48ea <mousekey_param_inc+0x128>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    48e4:	8f ef       	ldi	r24, 0xFF	; 255
    48e6:	80 93 0f 01 	sts	0x010F, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    48ea:	80 91 0f 01 	lds	r24, 0x010F
    48ee:	1f 92       	push	r1
    48f0:	8f 93       	push	r24
    48f2:	82 e5       	ldi	r24, 0x52	; 82
    48f4:	95 e0       	ldi	r25, 0x05	; 5
    48f6:	9f 93       	push	r25
    48f8:	8f 93       	push	r24
    48fa:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
            break;
    48fe:	0f 90       	pop	r0
    4900:	0f 90       	pop	r0
    4902:	0f 90       	pop	r0
    4904:	0f 90       	pop	r0
    4906:	08 95       	ret

00004908 <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    4908:	83 30       	cpi	r24, 0x03	; 3
    490a:	81 f1       	breq	.+96     	; 0x496c <mousekey_param_dec+0x64>
    490c:	28 f4       	brcc	.+10     	; 0x4918 <mousekey_param_dec+0x10>
    490e:	81 30       	cpi	r24, 0x01	; 1
    4910:	59 f0       	breq	.+22     	; 0x4928 <mousekey_param_dec+0x20>
    4912:	82 30       	cpi	r24, 0x02	; 2
    4914:	d1 f0       	breq	.+52     	; 0x494a <mousekey_param_dec+0x42>
    4916:	08 95       	ret
    4918:	85 30       	cpi	r24, 0x05	; 5
    491a:	09 f4       	brne	.+2      	; 0x491e <mousekey_param_dec+0x16>
    491c:	49 c0       	rjmp	.+146    	; 0x49b0 <mousekey_param_dec+0xa8>
    491e:	b8 f1       	brcs	.+110    	; 0x498e <mousekey_param_dec+0x86>
    4920:	86 30       	cpi	r24, 0x06	; 6
    4922:	09 f4       	brne	.+2      	; 0x4926 <mousekey_param_dec+0x1e>
    4924:	56 c0       	rjmp	.+172    	; 0x49d2 <mousekey_param_dec+0xca>
    4926:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    4928:	80 91 14 01 	lds	r24, 0x0114
    492c:	68 17       	cp	r22, r24
    492e:	20 f4       	brcc	.+8      	; 0x4938 <mousekey_param_dec+0x30>
                mk_delay -= dec;
    4930:	86 1b       	sub	r24, r22
    4932:	80 93 14 01 	sts	0x0114, r24
    4936:	02 c0       	rjmp	.+4      	; 0x493c <mousekey_param_dec+0x34>
            else
                mk_delay = 0;
    4938:	10 92 14 01 	sts	0x0114, r1
            PRINT_SET_VAL(mk_delay);
    493c:	80 91 14 01 	lds	r24, 0x0114
    4940:	1f 92       	push	r1
    4942:	8f 93       	push	r24
    4944:	83 e4       	ldi	r24, 0x43	; 67
    4946:	95 e0       	ldi	r25, 0x05	; 5
    4948:	54 c0       	rjmp	.+168    	; 0x49f2 <mousekey_param_dec+0xea>
            break;
        case 2:
            if (mk_interval > dec)
    494a:	80 91 13 01 	lds	r24, 0x0113
    494e:	68 17       	cp	r22, r24
    4950:	20 f4       	brcc	.+8      	; 0x495a <mousekey_param_dec+0x52>
                mk_interval -= dec;
    4952:	86 1b       	sub	r24, r22
    4954:	80 93 13 01 	sts	0x0113, r24
    4958:	02 c0       	rjmp	.+4      	; 0x495e <mousekey_param_dec+0x56>
            else
                mk_interval = 0;
    495a:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_interval);
    495e:	80 91 13 01 	lds	r24, 0x0113
    4962:	1f 92       	push	r1
    4964:	8f 93       	push	r24
    4966:	81 e3       	ldi	r24, 0x31	; 49
    4968:	95 e0       	ldi	r25, 0x05	; 5
    496a:	43 c0       	rjmp	.+134    	; 0x49f2 <mousekey_param_dec+0xea>
            break;
        case 3:
            if (mk_max_speed > dec)
    496c:	80 91 12 01 	lds	r24, 0x0112
    4970:	68 17       	cp	r22, r24
    4972:	20 f4       	brcc	.+8      	; 0x497c <mousekey_param_dec+0x74>
                mk_max_speed -= dec;
    4974:	86 1b       	sub	r24, r22
    4976:	80 93 12 01 	sts	0x0112, r24
    497a:	02 c0       	rjmp	.+4      	; 0x4980 <mousekey_param_dec+0x78>
            else
                mk_max_speed = 0;
    497c:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_max_speed);
    4980:	80 91 12 01 	lds	r24, 0x0112
    4984:	1f 92       	push	r1
    4986:	8f 93       	push	r24
    4988:	8e e1       	ldi	r24, 0x1E	; 30
    498a:	95 e0       	ldi	r25, 0x05	; 5
    498c:	32 c0       	rjmp	.+100    	; 0x49f2 <mousekey_param_dec+0xea>
            break;
        case 4:
            if (mk_time_to_max > dec)
    498e:	80 91 11 01 	lds	r24, 0x0111
    4992:	68 17       	cp	r22, r24
    4994:	20 f4       	brcc	.+8      	; 0x499e <mousekey_param_dec+0x96>
                mk_time_to_max -= dec;
    4996:	86 1b       	sub	r24, r22
    4998:	80 93 11 01 	sts	0x0111, r24
    499c:	02 c0       	rjmp	.+4      	; 0x49a2 <mousekey_param_dec+0x9a>
            else
                mk_time_to_max = 0;
    499e:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_time_to_max);
    49a2:	80 91 11 01 	lds	r24, 0x0111
    49a6:	1f 92       	push	r1
    49a8:	8f 93       	push	r24
    49aa:	89 e0       	ldi	r24, 0x09	; 9
    49ac:	95 e0       	ldi	r25, 0x05	; 5
    49ae:	21 c0       	rjmp	.+66     	; 0x49f2 <mousekey_param_dec+0xea>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    49b0:	80 91 10 01 	lds	r24, 0x0110
    49b4:	68 17       	cp	r22, r24
    49b6:	20 f4       	brcc	.+8      	; 0x49c0 <mousekey_param_dec+0xb8>
                mk_wheel_max_speed -= dec;
    49b8:	86 1b       	sub	r24, r22
    49ba:	80 93 10 01 	sts	0x0110, r24
    49be:	02 c0       	rjmp	.+4      	; 0x49c4 <mousekey_param_dec+0xbc>
            else
                mk_wheel_max_speed = 0;
    49c0:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    49c4:	80 91 10 01 	lds	r24, 0x0110
    49c8:	1f 92       	push	r1
    49ca:	8f 93       	push	r24
    49cc:	80 ef       	ldi	r24, 0xF0	; 240
    49ce:	94 e0       	ldi	r25, 0x04	; 4
    49d0:	10 c0       	rjmp	.+32     	; 0x49f2 <mousekey_param_dec+0xea>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    49d2:	80 91 0f 01 	lds	r24, 0x010F
    49d6:	68 17       	cp	r22, r24
    49d8:	20 f4       	brcc	.+8      	; 0x49e2 <mousekey_param_dec+0xda>
                mk_wheel_time_to_max -= dec;
    49da:	86 1b       	sub	r24, r22
    49dc:	80 93 0f 01 	sts	0x010F, r24
    49e0:	02 c0       	rjmp	.+4      	; 0x49e6 <mousekey_param_dec+0xde>
            else
                mk_wheel_time_to_max = 0;
    49e2:	10 92 0f 01 	sts	0x010F, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    49e6:	80 91 0f 01 	lds	r24, 0x010F
    49ea:	1f 92       	push	r1
    49ec:	8f 93       	push	r24
    49ee:	85 ed       	ldi	r24, 0xD5	; 213
    49f0:	94 e0       	ldi	r25, 0x04	; 4
    49f2:	9f 93       	push	r25
    49f4:	8f 93       	push	r24
    49f6:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
            break;
    49fa:	0f 90       	pop	r0
    49fc:	0f 90       	pop	r0
    49fe:	0f 90       	pop	r0
    4a00:	0f 90       	pop	r0
    4a02:	08 95       	ret

00004a04 <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    4a04:	cf 93       	push	r28
    4a06:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    4a08:	1f 92       	push	r1
    4a0a:	8f 93       	push	r24
    4a0c:	2a ed       	ldi	r18, 0xDA	; 218
    4a0e:	37 e0       	ldi	r19, 0x07	; 7
    4a10:	3f 93       	push	r19
    4a12:	2f 93       	push	r18
    4a14:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    default_layer_set(1UL<<layer);
    4a18:	61 e0       	ldi	r22, 0x01	; 1
    4a1a:	70 e0       	ldi	r23, 0x00	; 0
    4a1c:	80 e0       	ldi	r24, 0x00	; 0
    4a1e:	90 e0       	ldi	r25, 0x00	; 0
    4a20:	04 c0       	rjmp	.+8      	; 0x4a2a <switch_default_layer+0x26>
    4a22:	66 0f       	add	r22, r22
    4a24:	77 1f       	adc	r23, r23
    4a26:	88 1f       	adc	r24, r24
    4a28:	99 1f       	adc	r25, r25
    4a2a:	ca 95       	dec	r28
    4a2c:	d2 f7       	brpl	.-12     	; 0x4a22 <switch_default_layer+0x1e>
    4a2e:	0e 94 a5 1a 	call	0x354a	; 0x354a <default_layer_set>
    clear_keyboard();
    4a32:	0f 90       	pop	r0
    4a34:	0f 90       	pop	r0
    4a36:	0f 90       	pop	r0
    4a38:	0f 90       	pop	r0
}
    4a3a:	cf 91       	pop	r28

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
    4a3c:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <clear_keyboard>

00004a40 <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    4a40:	cf 93       	push	r28
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4a42:	8b 31       	cpi	r24, 0x1B	; 27
    4a44:	09 f4       	brne	.+2      	; 0x4a48 <command_common+0x8>
    4a46:	cb c1       	rjmp	.+918    	; 0x4dde <command_common+0x39e>
    4a48:	08 f0       	brcs	.+2      	; 0x4a4c <command_common+0xc>
    4a4a:	49 c0       	rjmp	.+146    	; 0x4ade <command_common+0x9e>
    4a4c:	8e 30       	cpi	r24, 0x0E	; 14
    4a4e:	09 f4       	brne	.+2      	; 0x4a52 <command_common+0x12>
    4a50:	d9 c1       	rjmp	.+946    	; 0x4e04 <command_common+0x3c4>
    4a52:	00 f5       	brcc	.+64     	; 0x4a94 <command_common+0x54>
    4a54:	87 30       	cpi	r24, 0x07	; 7
    4a56:	09 f4       	brne	.+2      	; 0x4a5a <command_common+0x1a>
    4a58:	a9 c1       	rjmp	.+850    	; 0x4dac <command_common+0x36c>
    4a5a:	a8 f4       	brcc	.+42     	; 0x4a86 <command_common+0x46>
    4a5c:	86 30       	cpi	r24, 0x06	; 6
    4a5e:	09 f0       	breq	.+2      	; 0x4a62 <command_common+0x22>
    4a60:	57 c2       	rjmp	.+1198   	; 0x4f10 <command_common+0x4d0>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    4a62:	80 91 c1 01 	lds	r24, 0x01C1
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    4a66:	81 7f       	andi	r24, 0xF1	; 241
    4a68:	8e 7f       	andi	r24, 0xFE	; 254
    4a6a:	80 93 c1 01 	sts	0x01C1, r24
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4a6e:	8f ed       	ldi	r24, 0xDF	; 223
    4a70:	97 e0       	ldi	r25, 0x07	; 7
    4a72:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
    4a76:	89 e1       	ldi	r24, 0x19	; 25
    4a78:	9c e0       	ldi	r25, 0x0C	; 12
    4a7a:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
            command_state = CONSOLE;
    4a7e:	81 e0       	ldi	r24, 0x01	; 1
    4a80:	80 93 d1 01 	sts	0x01D1, r24
    4a84:	91 c1       	rjmp	.+802    	; 0x4da8 <command_common+0x368>
static bool command_common(uint8_t code)
{
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4a86:	88 30       	cpi	r24, 0x08	; 8
    4a88:	09 f4       	brne	.+2      	; 0x4a8c <command_common+0x4c>
    4a8a:	5b c0       	rjmp	.+182    	; 0x4b42 <command_common+0x102>
    4a8c:	8b 30       	cpi	r24, 0x0B	; 11
    4a8e:	09 f4       	brne	.+2      	; 0x4a92 <command_common+0x52>
    4a90:	87 c1       	rjmp	.+782    	; 0x4da0 <command_common+0x360>
    4a92:	3e c2       	rjmp	.+1148   	; 0x4f10 <command_common+0x4d0>
    4a94:	81 31       	cpi	r24, 0x11	; 17
    4a96:	09 f4       	brne	.+2      	; 0x4a9a <command_common+0x5a>
    4a98:	23 c2       	rjmp	.+1094   	; 0x4ee0 <command_common+0x4a0>
    4a9a:	20 f4       	brcc	.+8      	; 0x4aa4 <command_common+0x64>
    4a9c:	80 31       	cpi	r24, 0x10	; 16
    4a9e:	09 f4       	brne	.+2      	; 0x4aa2 <command_common+0x62>
    4aa0:	c4 c1       	rjmp	.+904    	; 0x4e2a <command_common+0x3ea>
    4aa2:	36 c2       	rjmp	.+1132   	; 0x4f10 <command_common+0x4d0>
    4aa4:	86 31       	cpi	r24, 0x16	; 22
    4aa6:	09 f4       	brne	.+2      	; 0x4aaa <command_common+0x6a>
    4aa8:	da c1       	rjmp	.+948    	; 0x4e5e <command_common+0x41e>
    4aaa:	89 31       	cpi	r24, 0x19	; 25
    4aac:	09 f0       	breq	.+2      	; 0x4ab0 <command_common+0x70>
    4aae:	30 c2       	rjmp	.+1120   	; 0x4f10 <command_common+0x4d0>
            } else {
                print("\nmouse: off\n");
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    4ab0:	8d e8       	ldi	r24, 0x8D	; 141
    4ab2:	9b e0       	ldi	r25, 0x0B	; 11
    4ab4:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    4ab8:	81 e6       	ldi	r24, 0x61	; 97
    4aba:	9b e0       	ldi	r25, 0x0B	; 11
    4abc:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    4ac0:	81 e2       	ldi	r24, 0x21	; 33
    4ac2:	9b e0       	ldi	r25, 0x0B	; 11
    4ac4:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    4ac8:	84 ef       	ldi	r24, 0xF4	; 244
    4aca:	9a e0       	ldi	r25, 0x0A	; 10
    4acc:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
            /* build options */
            print("OPTIONS:"
    4ad0:	8f ea       	ldi	r24, 0xAF	; 175
    4ad2:	9a e0       	ldi	r25, 0x0A	; 10
    4ad4:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4ad8:	81 e8       	ldi	r24, 0x81	; 129
    4ada:	9a e0       	ldi	r25, 0x0A	; 10
    4adc:	63 c1       	rjmp	.+710    	; 0x4da4 <command_common+0x364>
static bool command_common(uint8_t code)
{
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4ade:	85 33       	cpi	r24, 0x35	; 53
    4ae0:	09 f4       	brne	.+2      	; 0x4ae4 <command_common+0xa4>
    4ae2:	10 c2       	rjmp	.+1056   	; 0x4f04 <command_common+0x4c4>
    4ae4:	68 f4       	brcc	.+26     	; 0x4b00 <command_common+0xc0>
    4ae6:	87 32       	cpi	r24, 0x27	; 39
    4ae8:	09 f4       	brne	.+2      	; 0x4aec <command_common+0xac>
    4aea:	0c c2       	rjmp	.+1048   	; 0x4f04 <command_common+0x4c4>
    4aec:	28 f4       	brcc	.+10     	; 0x4af8 <command_common+0xb8>
    4aee:	8e 31       	cpi	r24, 0x1E	; 30
    4af0:	08 f4       	brcc	.+2      	; 0x4af4 <command_common+0xb4>
    4af2:	0e c2       	rjmp	.+1052   	; 0x4f10 <command_common+0x4d0>
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    4af4:	8d 51       	subi	r24, 0x1D	; 29
    4af6:	09 c2       	rjmp	.+1042   	; 0x4f0a <command_common+0x4ca>
static bool command_common(uint8_t code)
{
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4af8:	89 32       	cpi	r24, 0x29	; 41
    4afa:	09 f4       	brne	.+2      	; 0x4afe <command_common+0xbe>
    4afc:	03 c2       	rjmp	.+1030   	; 0x4f04 <command_common+0x4c4>
    4afe:	08 c2       	rjmp	.+1040   	; 0x4f10 <command_common+0x4d0>
    4b00:	83 34       	cpi	r24, 0x43	; 67
    4b02:	38 f4       	brcc	.+14     	; 0x4b12 <command_common+0xd2>
    4b04:	8a 33       	cpi	r24, 0x3A	; 58
    4b06:	08 f0       	brcs	.+2      	; 0x4b0a <command_common+0xca>
    4b08:	ff c1       	rjmp	.+1022   	; 0x4f08 <command_common+0x4c8>
    4b0a:	88 33       	cpi	r24, 0x38	; 56
    4b0c:	09 f4       	brne	.+2      	; 0x4b10 <command_common+0xd0>
    4b0e:	48 c1       	rjmp	.+656    	; 0x4da0 <command_common+0x360>
    4b10:	ff c1       	rjmp	.+1022   	; 0x4f10 <command_common+0x4d0>
    4b12:	83 34       	cpi	r24, 0x43	; 67
    4b14:	09 f4       	brne	.+2      	; 0x4b18 <command_common+0xd8>
    4b16:	f6 c1       	rjmp	.+1004   	; 0x4f04 <command_common+0x4c4>
    4b18:	88 34       	cpi	r24, 0x48	; 72
    4b1a:	09 f0       	breq	.+2      	; 0x4b1e <command_common+0xde>
    4b1c:	f9 c1       	rjmp	.+1010   	; 0x4f10 <command_common+0x4d0>
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    4b1e:	0e 94 76 16 	call	0x2cec	; 0x2cec <clear_keyboard>
            print("\n\nbootloader... ");
    4b22:	88 e0       	ldi	r24, 0x08	; 8
    4b24:	9c e0       	ldi	r25, 0x0C	; 12
    4b26:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    4b2a:	9f ef       	ldi	r25, 0xFF	; 255
    4b2c:	23 ed       	ldi	r18, 0xD3	; 211
    4b2e:	80 e3       	ldi	r24, 0x30	; 48
    4b30:	91 50       	subi	r25, 0x01	; 1
    4b32:	20 40       	sbci	r18, 0x00	; 0
    4b34:	80 40       	sbci	r24, 0x00	; 0
    4b36:	e1 f7       	brne	.-8      	; 0x4b30 <command_common+0xf0>
    4b38:	00 c0       	rjmp	.+0      	; 0x4b3a <command_common+0xfa>
    4b3a:	00 00       	nop
            wait_ms(1000);
            bootloader_jump(); // not return
    4b3c:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <bootloader_jump>
    4b40:	33 c1       	rjmp	.+614    	; 0x4da8 <command_common+0x368>
            led_set(host_keyboard_leds());
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    4b42:	8d e1       	ldi	r24, 0x1D	; 29
    4b44:	9c e0       	ldi	r25, 0x0C	; 12
    4b46:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4b4a:	8e ed       	ldi	r24, 0xDE	; 222
    4b4c:	99 e0       	ldi	r25, 0x09	; 9
    4b4e:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    4b52:	0e 94 10 21 	call	0x4220	; 0x4220 <eeconfig_read_default_layer>
    4b56:	1f 92       	push	r1
    4b58:	8f 93       	push	r24
    4b5a:	8b ed       	ldi	r24, 0xDB	; 219
    4b5c:	99 e0       	ldi	r25, 0x09	; 9
    4b5e:	9f 93       	push	r25
    4b60:	8f 93       	push	r24
    4b62:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    4b66:	89 ed       	ldi	r24, 0xD9	; 217
    4b68:	99 e0       	ldi	r25, 0x09	; 9
    4b6a:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    4b6e:	0e 94 07 21 	call	0x420e	; 0x420e <eeconfig_read_debug>
    4b72:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4b74:	86 ec       	ldi	r24, 0xC6	; 198
    4b76:	99 e0       	ldi	r25, 0x09	; 9
    4b78:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    4b7c:	1f 92       	push	r1
    4b7e:	cf 93       	push	r28
    4b80:	21 ec       	ldi	r18, 0xC1	; 193
    4b82:	39 e0       	ldi	r19, 0x09	; 9
    4b84:	3f 93       	push	r19
    4b86:	2f 93       	push	r18
    4b88:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    4b8c:	8f eb       	ldi	r24, 0xBF	; 191
    4b8e:	99 e0       	ldi	r25, 0x09	; 9
    4b90:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4b94:	85 eb       	ldi	r24, 0xB5	; 181
    4b96:	99 e0       	ldi	r25, 0x09	; 9
    4b98:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    4b9c:	8c 2f       	mov	r24, r28
    4b9e:	81 70       	andi	r24, 0x01	; 1
    4ba0:	1f 92       	push	r1
    4ba2:	8f 93       	push	r24
    4ba4:	22 eb       	ldi	r18, 0xB2	; 178
    4ba6:	39 e0       	ldi	r19, 0x09	; 9
    4ba8:	3f 93       	push	r19
    4baa:	2f 93       	push	r18
    4bac:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    4bb0:	80 eb       	ldi	r24, 0xB0	; 176
    4bb2:	99 e0       	ldi	r25, 0x09	; 9
    4bb4:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4bb8:	86 ea       	ldi	r24, 0xA6	; 166
    4bba:	99 e0       	ldi	r25, 0x09	; 9
    4bbc:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    4bc0:	c1 fb       	bst	r28, 1
    4bc2:	88 27       	eor	r24, r24
    4bc4:	80 f9       	bld	r24, 0
    4bc6:	1f 92       	push	r1
    4bc8:	8f 93       	push	r24
    4bca:	23 ea       	ldi	r18, 0xA3	; 163
    4bcc:	39 e0       	ldi	r19, 0x09	; 9
    4bce:	3f 93       	push	r19
    4bd0:	2f 93       	push	r18
    4bd2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    4bd6:	81 ea       	ldi	r24, 0xA1	; 161
    4bd8:	99 e0       	ldi	r25, 0x09	; 9
    4bda:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4bde:	85 e9       	ldi	r24, 0x95	; 149
    4be0:	99 e0       	ldi	r25, 0x09	; 9
    4be2:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    4be6:	c2 fb       	bst	r28, 2
    4be8:	88 27       	eor	r24, r24
    4bea:	80 f9       	bld	r24, 0
    4bec:	1f 92       	push	r1
    4bee:	8f 93       	push	r24
    4bf0:	22 e9       	ldi	r18, 0x92	; 146
    4bf2:	39 e0       	ldi	r19, 0x09	; 9
    4bf4:	3f 93       	push	r19
    4bf6:	2f 93       	push	r18
    4bf8:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    4bfc:	80 e9       	ldi	r24, 0x90	; 144
    4bfe:	99 e0       	ldi	r25, 0x09	; 9
    4c00:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4c04:	87 e8       	ldi	r24, 0x87	; 135
    4c06:	99 e0       	ldi	r25, 0x09	; 9
    4c08:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    4c0c:	c3 fb       	bst	r28, 3
    4c0e:	cc 27       	eor	r28, r28
    4c10:	c0 f9       	bld	r28, 0
    4c12:	1f 92       	push	r1
    4c14:	cf 93       	push	r28
    4c16:	84 e8       	ldi	r24, 0x84	; 132
    4c18:	99 e0       	ldi	r25, 0x09	; 9
    4c1a:	9f 93       	push	r25
    4c1c:	8f 93       	push	r24
    4c1e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    4c22:	82 e8       	ldi	r24, 0x82	; 130
    4c24:	99 e0       	ldi	r25, 0x09	; 9
    4c26:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    4c2a:	0e 94 19 21 	call	0x4232	; 0x4232 <eeconfig_read_keymap>
    4c2e:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4c30:	8e e6       	ldi	r24, 0x6E	; 110
    4c32:	99 e0       	ldi	r25, 0x09	; 9
    4c34:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    4c38:	1f 92       	push	r1
    4c3a:	cf 93       	push	r28
    4c3c:	29 e6       	ldi	r18, 0x69	; 105
    4c3e:	39 e0       	ldi	r19, 0x09	; 9
    4c40:	3f 93       	push	r19
    4c42:	2f 93       	push	r18
    4c44:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    4c48:	87 e6       	ldi	r24, 0x67	; 103
    4c4a:	99 e0       	ldi	r25, 0x09	; 9
    4c4c:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    4c50:	8e e4       	ldi	r24, 0x4E	; 78
    4c52:	99 e0       	ldi	r25, 0x09	; 9
    4c54:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    4c58:	8c 2f       	mov	r24, r28
    4c5a:	81 70       	andi	r24, 0x01	; 1
    4c5c:	1f 92       	push	r1
    4c5e:	8f 93       	push	r24
    4c60:	2b e4       	ldi	r18, 0x4B	; 75
    4c62:	39 e0       	ldi	r19, 0x09	; 9
    4c64:	3f 93       	push	r19
    4c66:	2f 93       	push	r18
    4c68:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    4c6c:	8d b7       	in	r24, 0x3d	; 61
    4c6e:	9e b7       	in	r25, 0x3e	; 62
    4c70:	80 96       	adiw	r24, 0x20	; 32
    4c72:	0f b6       	in	r0, 0x3f	; 63
    4c74:	f8 94       	cli
    4c76:	9e bf       	out	0x3e, r25	; 62
    4c78:	0f be       	out	0x3f, r0	; 63
    4c7a:	8d bf       	out	0x3d, r24	; 61
    4c7c:	89 e4       	ldi	r24, 0x49	; 73
    4c7e:	99 e0       	ldi	r25, 0x09	; 9
    4c80:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    4c84:	82 e3       	ldi	r24, 0x32	; 50
    4c86:	99 e0       	ldi	r25, 0x09	; 9
    4c88:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    4c8c:	c1 fb       	bst	r28, 1
    4c8e:	88 27       	eor	r24, r24
    4c90:	80 f9       	bld	r24, 0
    4c92:	1f 92       	push	r1
    4c94:	8f 93       	push	r24
    4c96:	2f e2       	ldi	r18, 0x2F	; 47
    4c98:	39 e0       	ldi	r19, 0x09	; 9
    4c9a:	3f 93       	push	r19
    4c9c:	2f 93       	push	r18
    4c9e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    4ca2:	8d e2       	ldi	r24, 0x2D	; 45
    4ca4:	99 e0       	ldi	r25, 0x09	; 9
    4ca6:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    4caa:	8b e1       	ldi	r24, 0x1B	; 27
    4cac:	99 e0       	ldi	r25, 0x09	; 9
    4cae:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    4cb2:	c2 fb       	bst	r28, 2
    4cb4:	88 27       	eor	r24, r24
    4cb6:	80 f9       	bld	r24, 0
    4cb8:	1f 92       	push	r1
    4cba:	8f 93       	push	r24
    4cbc:	28 e1       	ldi	r18, 0x18	; 24
    4cbe:	39 e0       	ldi	r19, 0x09	; 9
    4cc0:	3f 93       	push	r19
    4cc2:	2f 93       	push	r18
    4cc4:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    4cc8:	86 e1       	ldi	r24, 0x16	; 22
    4cca:	99 e0       	ldi	r25, 0x09	; 9
    4ccc:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    4cd0:	84 e0       	ldi	r24, 0x04	; 4
    4cd2:	99 e0       	ldi	r25, 0x09	; 9
    4cd4:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    4cd8:	c3 fb       	bst	r28, 3
    4cda:	88 27       	eor	r24, r24
    4cdc:	80 f9       	bld	r24, 0
    4cde:	1f 92       	push	r1
    4ce0:	8f 93       	push	r24
    4ce2:	21 e0       	ldi	r18, 0x01	; 1
    4ce4:	39 e0       	ldi	r19, 0x09	; 9
    4ce6:	3f 93       	push	r19
    4ce8:	2f 93       	push	r18
    4cea:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    4cee:	8f ef       	ldi	r24, 0xFF	; 255
    4cf0:	98 e0       	ldi	r25, 0x08	; 8
    4cf2:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    4cf6:	85 ef       	ldi	r24, 0xF5	; 245
    4cf8:	98 e0       	ldi	r25, 0x08	; 8
    4cfa:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    4cfe:	c4 fb       	bst	r28, 4
    4d00:	88 27       	eor	r24, r24
    4d02:	80 f9       	bld	r24, 0
    4d04:	1f 92       	push	r1
    4d06:	8f 93       	push	r24
    4d08:	22 ef       	ldi	r18, 0xF2	; 242
    4d0a:	38 e0       	ldi	r19, 0x08	; 8
    4d0c:	3f 93       	push	r19
    4d0e:	2f 93       	push	r18
    4d10:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    4d14:	80 ef       	ldi	r24, 0xF0	; 240
    4d16:	98 e0       	ldi	r25, 0x08	; 8
    4d18:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    4d1c:	8e ed       	ldi	r24, 0xDE	; 222
    4d1e:	98 e0       	ldi	r25, 0x08	; 8
    4d20:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    4d24:	c5 fb       	bst	r28, 5
    4d26:	88 27       	eor	r24, r24
    4d28:	80 f9       	bld	r24, 0
    4d2a:	1f 92       	push	r1
    4d2c:	8f 93       	push	r24
    4d2e:	2b ed       	ldi	r18, 0xDB	; 219
    4d30:	38 e0       	ldi	r19, 0x08	; 8
    4d32:	3f 93       	push	r19
    4d34:	2f 93       	push	r18
    4d36:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    4d3a:	89 ed       	ldi	r24, 0xD9	; 217
    4d3c:	98 e0       	ldi	r25, 0x08	; 8
    4d3e:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    4d42:	8d eb       	ldi	r24, 0xBD	; 189
    4d44:	98 e0       	ldi	r25, 0x08	; 8
    4d46:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    4d4a:	c6 fb       	bst	r28, 6
    4d4c:	88 27       	eor	r24, r24
    4d4e:	80 f9       	bld	r24, 0
    4d50:	1f 92       	push	r1
    4d52:	8f 93       	push	r24
    4d54:	2a eb       	ldi	r18, 0xBA	; 186
    4d56:	38 e0       	ldi	r19, 0x08	; 8
    4d58:	3f 93       	push	r19
    4d5a:	2f 93       	push	r18
    4d5c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    4d60:	88 eb       	ldi	r24, 0xB8	; 184
    4d62:	98 e0       	ldi	r25, 0x08	; 8
    4d64:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    4d68:	80 eb       	ldi	r24, 0xB0	; 176
    4d6a:	98 e0       	ldi	r25, 0x08	; 8
    4d6c:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    4d70:	c7 fb       	bst	r28, 7
    4d72:	cc 27       	eor	r28, r28
    4d74:	c0 f9       	bld	r28, 0
    4d76:	1f 92       	push	r1
    4d78:	cf 93       	push	r28
    4d7a:	8d ea       	ldi	r24, 0xAD	; 173
    4d7c:	98 e0       	ldi	r25, 0x08	; 8
    4d7e:	9f 93       	push	r25
    4d80:	8f 93       	push	r24
    4d82:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    4d86:	8b ea       	ldi	r24, 0xAB	; 171
    4d88:	98 e0       	ldi	r25, 0x08	; 8
    4d8a:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    4d8e:	8d b7       	in	r24, 0x3d	; 61
    4d90:	9e b7       	in	r25, 0x3e	; 62
    4d92:	4c 96       	adiw	r24, 0x1c	; 28
    4d94:	0f b6       	in	r0, 0x3f	; 63
    4d96:	f8 94       	cli
    4d98:	9e bf       	out	0x3e, r25	; 62
    4d9a:	0f be       	out	0x3f, r0	; 63
    4d9c:	8d bf       	out	0x3d, r24	; 61
    4d9e:	04 c0       	rjmp	.+8      	; 0x4da8 <command_common+0x368>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    4da0:	86 e0       	ldi	r24, 0x06	; 6
    4da2:	98 e0       	ldi	r25, 0x08	; 8
    4da4:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    4da8:	c1 e0       	ldi	r28, 0x01	; 1
    4daa:	b7 c0       	rjmp	.+366    	; 0x4f1a <command_common+0x4da>
            print("\n\nbootloader... ");
            wait_ms(1000);
            bootloader_jump(); // not return
            break;
        case KC_D:
            if (debug_enable) {
    4dac:	80 91 c1 01 	lds	r24, 0x01C1
    4db0:	c8 2f       	mov	r28, r24
    4db2:	c1 70       	andi	r28, 0x01	; 1
    4db4:	80 ff       	sbrs	r24, 0
    4db6:	09 c0       	rjmp	.+18     	; 0x4dca <command_common+0x38a>
                print("\ndebug: off\n");
    4db8:	8b ef       	ldi	r24, 0xFB	; 251
    4dba:	9b e0       	ldi	r25, 0x0B	; 11
    4dbc:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
                debug_matrix   = false;
    4dc0:	80 91 c1 01 	lds	r24, 0x01C1
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    4dc4:	81 7f       	andi	r24, 0xF1	; 241
    4dc6:	8e 7f       	andi	r24, 0xFE	; 254
    4dc8:	44 c0       	rjmp	.+136    	; 0x4e52 <command_common+0x412>
            } else {
                print("\ndebug: on\n");
    4dca:	8f ee       	ldi	r24, 0xEF	; 239
    4dcc:	9b e0       	ldi	r25, 0x0B	; 11
    4dce:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
                debug_enable   = true;
    4dd2:	80 91 c1 01 	lds	r24, 0x01C1
    4dd6:	81 60       	ori	r24, 0x01	; 1
    4dd8:	80 93 c1 01 	sts	0x01C1, r24
    4ddc:	e5 cf       	rjmp	.-54     	; 0x4da8 <command_common+0x368>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    4dde:	80 91 c1 01 	lds	r24, 0x01C1
    4de2:	81 fb       	bst	r24, 1
    4de4:	cc 27       	eor	r28, r28
    4de6:	c0 f9       	bld	r28, 0
    4de8:	91 e0       	ldi	r25, 0x01	; 1
    4dea:	c9 27       	eor	r28, r25
    4dec:	c0 fb       	bst	r28, 0
    4dee:	81 f9       	bld	r24, 1
    4df0:	80 93 c1 01 	sts	0x01C1, r24
            if (debug_matrix) {
    4df4:	cc 23       	and	r28, r28
    4df6:	19 f0       	breq	.+6      	; 0x4dfe <command_common+0x3be>
                print("\nmatrix: on\n");
    4df8:	82 ee       	ldi	r24, 0xE2	; 226
    4dfa:	9b e0       	ldi	r25, 0x0B	; 11
    4dfc:	25 c0       	rjmp	.+74     	; 0x4e48 <command_common+0x408>
                debug_enable = true;
            } else {
                print("\nmatrix: off\n");
    4dfe:	84 ed       	ldi	r24, 0xD4	; 212
    4e00:	9b e0       	ldi	r25, 0x0B	; 11
    4e02:	d0 cf       	rjmp	.-96     	; 0x4da4 <command_common+0x364>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    4e04:	80 91 c1 01 	lds	r24, 0x01C1
    4e08:	82 fb       	bst	r24, 2
    4e0a:	cc 27       	eor	r28, r28
    4e0c:	c0 f9       	bld	r28, 0
    4e0e:	91 e0       	ldi	r25, 0x01	; 1
    4e10:	c9 27       	eor	r28, r25
    4e12:	c0 fb       	bst	r28, 0
    4e14:	82 f9       	bld	r24, 2
    4e16:	80 93 c1 01 	sts	0x01C1, r24
            if (debug_keyboard) {
    4e1a:	cc 23       	and	r28, r28
    4e1c:	19 f0       	breq	.+6      	; 0x4e24 <command_common+0x3e4>
                print("\nkeyboard: on\n");
    4e1e:	85 ec       	ldi	r24, 0xC5	; 197
    4e20:	9b e0       	ldi	r25, 0x0B	; 11
    4e22:	12 c0       	rjmp	.+36     	; 0x4e48 <command_common+0x408>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    4e24:	85 eb       	ldi	r24, 0xB5	; 181
    4e26:	9b e0       	ldi	r25, 0x0B	; 11
    4e28:	bd cf       	rjmp	.-134    	; 0x4da4 <command_common+0x364>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    4e2a:	80 91 c1 01 	lds	r24, 0x01C1
    4e2e:	83 fb       	bst	r24, 3
    4e30:	cc 27       	eor	r28, r28
    4e32:	c0 f9       	bld	r28, 0
    4e34:	91 e0       	ldi	r25, 0x01	; 1
    4e36:	c9 27       	eor	r28, r25
    4e38:	c0 fb       	bst	r28, 0
    4e3a:	83 f9       	bld	r24, 3
    4e3c:	80 93 c1 01 	sts	0x01C1, r24
            if (debug_mouse) {
    4e40:	cc 23       	and	r28, r28
    4e42:	51 f0       	breq	.+20     	; 0x4e58 <command_common+0x418>
                print("\nmouse: on\n");
    4e44:	89 ea       	ldi	r24, 0xA9	; 169
    4e46:	9b e0       	ldi	r25, 0x0B	; 11
    4e48:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
                debug_enable = true;
    4e4c:	80 91 c1 01 	lds	r24, 0x01C1
    4e50:	81 60       	ori	r24, 0x01	; 1
    4e52:	80 93 c1 01 	sts	0x01C1, r24
    4e56:	61 c0       	rjmp	.+194    	; 0x4f1a <command_common+0x4da>
            } else {
                print("\nmouse: off\n");
    4e58:	8c e9       	ldi	r24, 0x9C	; 156
    4e5a:	9b e0       	ldi	r25, 0x0B	; 11
    4e5c:	a3 cf       	rjmp	.-186    	; 0x4da4 <command_common+0x364>
            // TODO
            );
#endif
            break;
        case KC_S:
            print("\n\t- Status -\n");
    4e5e:	83 e7       	ldi	r24, 0x73	; 115
    4e60:	9a e0       	ldi	r25, 0x0A	; 10
    4e62:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
            print_val_hex8(host_keyboard_leds());
    4e66:	0e 94 81 10 	call	0x2102	; 0x2102 <host_keyboard_leds>
    4e6a:	1f 92       	push	r1
    4e6c:	8f 93       	push	r24
    4e6e:	89 e5       	ldi	r24, 0x59	; 89
    4e70:	9a e0       	ldi	r25, 0x0A	; 10
    4e72:	9f 93       	push	r25
    4e74:	8f 93       	push	r24
    4e76:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
            print_val_hex8(keyboard_protocol);
    4e7a:	80 91 0b 01 	lds	r24, 0x010B
    4e7e:	1f 92       	push	r1
    4e80:	8f 93       	push	r24
    4e82:	82 e4       	ldi	r24, 0x42	; 66
    4e84:	9a e0       	ldi	r25, 0x0A	; 10
    4e86:	9f 93       	push	r25
    4e88:	8f 93       	push	r24
    4e8a:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
            print_val_hex8(keyboard_idle);
    4e8e:	80 91 5e 01 	lds	r24, 0x015E
    4e92:	1f 92       	push	r1
    4e94:	8f 93       	push	r24
    4e96:	8f e2       	ldi	r24, 0x2F	; 47
    4e98:	9a e0       	ldi	r25, 0x0A	; 10
    4e9a:	9f 93       	push	r25
    4e9c:	8f 93       	push	r24
    4e9e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
    4ea2:	80 91 0c 01 	lds	r24, 0x010C
    4ea6:	1f 92       	push	r1
    4ea8:	8f 93       	push	r24
    4eaa:	8c e1       	ldi	r24, 0x1C	; 28
    4eac:	9a e0       	ldi	r25, 0x0A	; 10
    4eae:	9f 93       	push	r25
    4eb0:	8f 93       	push	r24
    4eb2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
#endif
            print_val_hex32(timer_read32());
    4eb6:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <timer_read32>
    4eba:	9f 93       	push	r25
    4ebc:	8f 93       	push	r24
    4ebe:	7f 93       	push	r23
    4ec0:	6f 93       	push	r22
    4ec2:	85 e0       	ldi	r24, 0x05	; 5
    4ec4:	9a e0       	ldi	r25, 0x0A	; 10
    4ec6:	9f 93       	push	r25
    4ec8:	8f 93       	push	r24
    4eca:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    4ece:	8d b7       	in	r24, 0x3d	; 61
    4ed0:	9e b7       	in	r25, 0x3e	; 62
    4ed2:	46 96       	adiw	r24, 0x16	; 22
    4ed4:	0f b6       	in	r0, 0x3f	; 63
    4ed6:	f8 94       	cli
    4ed8:	9e bf       	out	0x3e, r25	; 62
    4eda:	0f be       	out	0x3f, r0	; 63
    4edc:	8d bf       	out	0x3d, r24	; 61
    4ede:	64 cf       	rjmp	.-312    	; 0x4da8 <command_common+0x368>
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    4ee0:	0e 94 76 16 	call	0x2cec	; 0x2cec <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    4ee4:	c0 91 0c 01 	lds	r28, 0x010C
    4ee8:	81 e0       	ldi	r24, 0x01	; 1
    4eea:	c8 27       	eor	r28, r24
    4eec:	c0 93 0c 01 	sts	0x010C, r28
            if (keyboard_nkro) {
    4ef0:	cc 23       	and	r28, r28
    4ef2:	29 f0       	breq	.+10     	; 0x4efe <command_common+0x4be>
                print("NKRO: on\n");
    4ef4:	8b ef       	ldi	r24, 0xFB	; 251
    4ef6:	99 e0       	ldi	r25, 0x09	; 9
    4ef8:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    4efc:	0e c0       	rjmp	.+28     	; 0x4f1a <command_common+0x4da>
            } else {
                print("NKRO: off\n");
    4efe:	80 ef       	ldi	r24, 0xF0	; 240
    4f00:	99 e0       	ldi	r25, 0x09	; 9
    4f02:	50 cf       	rjmp	.-352    	; 0x4da4 <command_common+0x364>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    4f04:	80 e0       	ldi	r24, 0x00	; 0
    4f06:	01 c0       	rjmp	.+2      	; 0x4f0a <command_common+0x4ca>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    4f08:	89 53       	subi	r24, 0x39	; 57
    4f0a:	0e 94 02 25 	call	0x4a04	; 0x4a04 <switch_default_layer>
    4f0e:	4c cf       	rjmp	.-360    	; 0x4da8 <command_common+0x368>
            break;
        default:
            print("?");
    4f10:	8e ee       	ldi	r24, 0xEE	; 238
    4f12:	99 e0       	ldi	r25, 0x09	; 9
    4f14:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
            return false;
    4f18:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    4f1a:	8c 2f       	mov	r24, r28
    4f1c:	cf 91       	pop	r28
    4f1e:	08 95       	ret

00004f20 <command_extra>:
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    (void)code;
    return false;
}
    4f20:	80 e0       	ldi	r24, 0x00	; 0
    4f22:	08 95       	ret

00004f24 <command_console_extra>:
bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    (void)code;
    return false;
}
    4f24:	80 e0       	ldi	r24, 0x00	; 0
    4f26:	08 95       	ret

00004f28 <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    4f28:	cf 93       	push	r28
    4f2a:	c8 2f       	mov	r28, r24
    switch (command_state) {
    4f2c:	80 91 d1 01 	lds	r24, 0x01D1
    4f30:	81 30       	cpi	r24, 0x01	; 1
    4f32:	71 f0       	breq	.+28     	; 0x4f50 <command_proc+0x28>
    4f34:	20 f0       	brcs	.+8      	; 0x4f3e <command_proc+0x16>
    4f36:	82 30       	cpi	r24, 0x02	; 2
    4f38:	09 f4       	brne	.+2      	; 0x4f3c <command_proc+0x14>
    4f3a:	48 c0       	rjmp	.+144    	; 0x4fcc <command_proc+0xa4>
    4f3c:	3f c1       	rjmp	.+638    	; 0x51bc <command_proc+0x294>
        case ONESHOT:
            if (!IS_COMMAND())
    4f3e:	a0 91 0d 01 	lds	r26, 0x010D
    4f42:	b0 91 0e 01 	lds	r27, 0x010E
    4f46:	8c 91       	ld	r24, X
    4f48:	82 32       	cpi	r24, 0x22	; 34
    4f4a:	09 f0       	breq	.+2      	; 0x4f4e <command_proc+0x26>
    4f4c:	39 c1       	rjmp	.+626    	; 0x51c0 <command_proc+0x298>
    4f4e:	07 c0       	rjmp	.+14     	; 0x4f5e <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    4f50:	a0 91 0d 01 	lds	r26, 0x010D
    4f54:	b0 91 0e 01 	lds	r27, 0x010E
    4f58:	8c 91       	ld	r24, X
    4f5a:	82 32       	cpi	r24, 0x22	; 34
    4f5c:	49 f4       	brne	.+18     	; 0x4f70 <command_proc+0x48>
                return (command_extra(code) || command_common(code));
    4f5e:	8c 2f       	mov	r24, r28
    4f60:	0e 94 90 27 	call	0x4f20	; 0x4f20 <command_extra>
    4f64:	81 11       	cpse	r24, r1
    4f66:	2f c0       	rjmp	.+94     	; 0x4fc6 <command_proc+0x9e>
    4f68:	8c 2f       	mov	r24, r28
    4f6a:	0e 94 20 25 	call	0x4a40	; 0x4a40 <command_common>
    4f6e:	2c c0       	rjmp	.+88     	; 0x4fc8 <command_proc+0xa0>
            else
                return (command_console_extra(code) || command_console(code));
    4f70:	8c 2f       	mov	r24, r28
    4f72:	0e 94 92 27 	call	0x4f24	; 0x4f24 <command_console_extra>
    4f76:	81 11       	cpse	r24, r1
    4f78:	26 c0       	rjmp	.+76     	; 0x4fc6 <command_proc+0x9e>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4f7a:	c4 31       	cpi	r28, 0x14	; 20
    4f7c:	e1 f0       	breq	.+56     	; 0x4fb6 <command_proc+0x8e>
    4f7e:	70 f4       	brcc	.+28     	; 0x4f9c <command_proc+0x74>
    4f80:	cb 30       	cpi	r28, 0x0B	; 11
    4f82:	81 f0       	breq	.+32     	; 0x4fa4 <command_proc+0x7c>
    4f84:	c0 31       	cpi	r28, 0x10	; 16
    4f86:	d1 f4       	brne	.+52     	; 0x4fbc <command_proc+0x94>
        case KC_ESC:
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    4f88:	0e 94 ca 23 	call	0x4794	; 0x4794 <mousekey_console_help>
            print("M> ");
    4f8c:	82 ed       	ldi	r24, 0xD2	; 210
    4f8e:	97 e0       	ldi	r25, 0x07	; 7
    4f90:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
            command_state = MOUSEKEY;
    4f94:	82 e0       	ldi	r24, 0x02	; 2
    4f96:	80 93 d1 01 	sts	0x01D1, r24
    4f9a:	15 c0       	rjmp	.+42     	; 0x4fc6 <command_proc+0x9e>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4f9c:	c9 32       	cpi	r28, 0x29	; 41
    4f9e:	59 f0       	breq	.+22     	; 0x4fb6 <command_proc+0x8e>
    4fa0:	c8 33       	cpi	r28, 0x38	; 56
    4fa2:	61 f4       	brne	.+24     	; 0x4fbc <command_proc+0x94>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4fa4:	8f ed       	ldi	r24, 0xDF	; 223
    4fa6:	97 e0       	ldi	r25, 0x07	; 7
    4fa8:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    4fac:	86 ed       	ldi	r24, 0xD6	; 214
    4fae:	97 e0       	ldi	r25, 0x07	; 7
    4fb0:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    4fb4:	08 c0       	rjmp	.+16     	; 0x4fc6 <command_proc+0x9e>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    4fb6:	10 92 d1 01 	sts	0x01D1, r1
    4fba:	04 c1       	rjmp	.+520    	; 0x51c4 <command_proc+0x29c>
            print("M> ");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    4fbc:	80 ed       	ldi	r24, 0xD0	; 208
    4fbe:	97 e0       	ldi	r25, 0x07	; 7
    4fc0:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    4fc4:	ff c0       	rjmp	.+510    	; 0x51c4 <command_proc+0x29c>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    4fc6:	81 e0       	ldi	r24, 0x01	; 1
    4fc8:	81 70       	andi	r24, 0x01	; 1
    4fca:	fe c0       	rjmp	.+508    	; 0x51c8 <command_proc+0x2a0>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    4fcc:	c4 32       	cpi	r28, 0x24	; 36
    4fce:	28 f5       	brcc	.+74     	; 0x501a <command_proc+0xf2>
    4fd0:	ce 31       	cpi	r28, 0x1E	; 30
    4fd2:	08 f0       	brcs	.+2      	; 0x4fd6 <command_proc+0xae>
    4fd4:	c1 c0       	rjmp	.+386    	; 0x5158 <command_proc+0x230>
    4fd6:	cb 30       	cpi	r28, 0x0B	; 11
    4fd8:	a1 f1       	breq	.+104    	; 0x5042 <command_proc+0x11a>
    4fda:	d0 f4       	brcc	.+52     	; 0x5010 <command_proc+0xe8>
    4fdc:	c7 30       	cpi	r28, 0x07	; 7
    4fde:	09 f0       	breq	.+2      	; 0x4fe2 <command_proc+0xba>
    4fe0:	d3 c0       	rjmp	.+422    	; 0x5188 <command_proc+0x260>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    4fe2:	8e e1       	ldi	r24, 0x1E	; 30
    4fe4:	80 93 14 01 	sts	0x0114, r24
            mk_interval = MOUSEKEY_INTERVAL;
    4fe8:	82 e3       	ldi	r24, 0x32	; 50
    4fea:	80 93 13 01 	sts	0x0113, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    4fee:	8a e0       	ldi	r24, 0x0A	; 10
    4ff0:	80 93 12 01 	sts	0x0112, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    4ff4:	84 e1       	ldi	r24, 0x14	; 20
    4ff6:	80 93 11 01 	sts	0x0111, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    4ffa:	88 e0       	ldi	r24, 0x08	; 8
    4ffc:	80 93 10 01 	sts	0x0110, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    5000:	88 e2       	ldi	r24, 0x28	; 40
    5002:	80 93 0f 01 	sts	0x010F, r24
            print("set default\n");
    5006:	86 e7       	ldi	r24, 0x76	; 118
    5008:	96 e0       	ldi	r25, 0x06	; 6
    500a:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    500e:	bf c0       	rjmp	.+382    	; 0x518e <command_proc+0x266>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    5010:	c3 31       	cpi	r28, 0x13	; 19
    5012:	49 f1       	breq	.+82     	; 0x5066 <command_proc+0x13e>
    5014:	c4 31       	cpi	r28, 0x14	; 20
    5016:	c1 f0       	breq	.+48     	; 0x5048 <command_proc+0x120>
    5018:	b7 c0       	rjmp	.+366    	; 0x5188 <command_proc+0x260>
    501a:	cb 34       	cpi	r28, 0x4B	; 75
    501c:	09 f4       	brne	.+2      	; 0x5020 <command_proc+0xf8>
    501e:	a9 c0       	rjmp	.+338    	; 0x5172 <command_proc+0x24a>
    5020:	28 f4       	brcc	.+10     	; 0x502c <command_proc+0x104>
    5022:	c9 32       	cpi	r28, 0x29	; 41
    5024:	89 f0       	breq	.+34     	; 0x5048 <command_proc+0x120>
    5026:	c8 33       	cpi	r28, 0x38	; 56
    5028:	61 f0       	breq	.+24     	; 0x5042 <command_proc+0x11a>
    502a:	ae c0       	rjmp	.+348    	; 0x5188 <command_proc+0x260>
    502c:	c1 35       	cpi	r28, 0x51	; 81
    502e:	09 f4       	brne	.+2      	; 0x5032 <command_proc+0x10a>
    5030:	9e c0       	rjmp	.+316    	; 0x516e <command_proc+0x246>
    5032:	c2 35       	cpi	r28, 0x52	; 82
    5034:	09 f4       	brne	.+2      	; 0x5038 <command_proc+0x110>
    5036:	99 c0       	rjmp	.+306    	; 0x516a <command_proc+0x242>
    5038:	ce 34       	cpi	r28, 0x4E	; 78
    503a:	09 f0       	breq	.+2      	; 0x503e <command_proc+0x116>
    503c:	a5 c0       	rjmp	.+330    	; 0x5188 <command_proc+0x260>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    503e:	6a e0       	ldi	r22, 0x0A	; 10
    5040:	9e c0       	rjmp	.+316    	; 0x517e <command_proc+0x256>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    5042:	0e 94 ca 23 	call	0x4794	; 0x4794 <mousekey_console_help>
    5046:	a3 c0       	rjmp	.+326    	; 0x518e <command_proc+0x266>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    5048:	80 91 d0 01 	lds	r24, 0x01D0
    504c:	88 23       	and	r24, r24
    504e:	19 f0       	breq	.+6      	; 0x5056 <command_proc+0x12e>
                mousekey_param = 0;
    5050:	10 92 d0 01 	sts	0x01D0, r1
    5054:	9c c0       	rjmp	.+312    	; 0x518e <command_proc+0x266>
            } else {
                print("C> ");
    5056:	83 e8       	ldi	r24, 0x83	; 131
    5058:	96 e0       	ldi	r25, 0x06	; 6
    505a:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
                command_state = CONSOLE;
    505e:	81 e0       	ldi	r24, 0x01	; 1
    5060:	80 93 d1 01 	sts	0x01D1, r24
    5064:	b1 c0       	rjmp	.+354    	; 0x51c8 <command_proc+0x2a0>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    5066:	8d e5       	ldi	r24, 0x5D	; 93
    5068:	96 e0       	ldi	r25, 0x06	; 6
    506a:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    506e:	8b e4       	ldi	r24, 0x4B	; 75
    5070:	96 e0       	ldi	r25, 0x06	; 6
    5072:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    5076:	80 91 14 01 	lds	r24, 0x0114
    507a:	1f 92       	push	r1
    507c:	8f 93       	push	r24
    507e:	88 e4       	ldi	r24, 0x48	; 72
    5080:	96 e0       	ldi	r25, 0x06	; 6
    5082:	9f 93       	push	r25
    5084:	8f 93       	push	r24
    5086:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    508a:	86 e4       	ldi	r24, 0x46	; 70
    508c:	96 e0       	ldi	r25, 0x06	; 6
    508e:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    5092:	84 e3       	ldi	r24, 0x34	; 52
    5094:	96 e0       	ldi	r25, 0x06	; 6
    5096:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    509a:	80 91 13 01 	lds	r24, 0x0113
    509e:	1f 92       	push	r1
    50a0:	8f 93       	push	r24
    50a2:	81 e3       	ldi	r24, 0x31	; 49
    50a4:	96 e0       	ldi	r25, 0x06	; 6
    50a6:	9f 93       	push	r25
    50a8:	8f 93       	push	r24
    50aa:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    50ae:	8f e2       	ldi	r24, 0x2F	; 47
    50b0:	96 e0       	ldi	r25, 0x06	; 6
    50b2:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    50b6:	80 e2       	ldi	r24, 0x20	; 32
    50b8:	96 e0       	ldi	r25, 0x06	; 6
    50ba:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    50be:	80 91 12 01 	lds	r24, 0x0112
    50c2:	1f 92       	push	r1
    50c4:	8f 93       	push	r24
    50c6:	8d e1       	ldi	r24, 0x1D	; 29
    50c8:	96 e0       	ldi	r25, 0x06	; 6
    50ca:	9f 93       	push	r25
    50cc:	8f 93       	push	r24
    50ce:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    50d2:	8b e1       	ldi	r24, 0x1B	; 27
    50d4:	96 e0       	ldi	r25, 0x06	; 6
    50d6:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    50da:	8a e0       	ldi	r24, 0x0A	; 10
    50dc:	96 e0       	ldi	r25, 0x06	; 6
    50de:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    50e2:	80 91 11 01 	lds	r24, 0x0111
    50e6:	1f 92       	push	r1
    50e8:	8f 93       	push	r24
    50ea:	87 e0       	ldi	r24, 0x07	; 7
    50ec:	96 e0       	ldi	r25, 0x06	; 6
    50ee:	9f 93       	push	r25
    50f0:	8f 93       	push	r24
    50f2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    50f6:	85 e0       	ldi	r24, 0x05	; 5
    50f8:	96 e0       	ldi	r25, 0x06	; 6
    50fa:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    50fe:	80 ef       	ldi	r24, 0xF0	; 240
    5100:	95 e0       	ldi	r25, 0x05	; 5
    5102:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    5106:	80 91 10 01 	lds	r24, 0x0110
    510a:	1f 92       	push	r1
    510c:	8f 93       	push	r24
    510e:	8d ee       	ldi	r24, 0xED	; 237
    5110:	95 e0       	ldi	r25, 0x05	; 5
    5112:	9f 93       	push	r25
    5114:	8f 93       	push	r24
    5116:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    511a:	8b ee       	ldi	r24, 0xEB	; 235
    511c:	95 e0       	ldi	r25, 0x05	; 5
    511e:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    5122:	84 ed       	ldi	r24, 0xD4	; 212
    5124:	95 e0       	ldi	r25, 0x05	; 5
    5126:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    512a:	80 91 0f 01 	lds	r24, 0x010F
    512e:	1f 92       	push	r1
    5130:	8f 93       	push	r24
    5132:	81 ed       	ldi	r24, 0xD1	; 209
    5134:	95 e0       	ldi	r25, 0x05	; 5
    5136:	9f 93       	push	r25
    5138:	8f 93       	push	r24
    513a:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    513e:	8f ec       	ldi	r24, 0xCF	; 207
    5140:	95 e0       	ldi	r25, 0x05	; 5
    5142:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
    5146:	8d b7       	in	r24, 0x3d	; 61
    5148:	9e b7       	in	r25, 0x3e	; 62
    514a:	48 96       	adiw	r24, 0x18	; 24
    514c:	0f b6       	in	r0, 0x3f	; 63
    514e:	f8 94       	cli
    5150:	9e bf       	out	0x3e, r25	; 62
    5152:	0f be       	out	0x3f, r0	; 63
    5154:	8d bf       	out	0x3d, r24	; 61
    5156:	1b c0       	rjmp	.+54     	; 0x518e <command_proc+0x266>
    5158:	ce 51       	subi	r28, 0x1E	; 30
    515a:	ec 2f       	mov	r30, r28
    515c:	f0 e0       	ldi	r31, 0x00	; 0
    515e:	e2 5d       	subi	r30, 0xD2	; 210
    5160:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    5162:	80 81       	ld	r24, Z
    5164:	80 93 d0 01 	sts	0x01D0, r24
    5168:	12 c0       	rjmp	.+36     	; 0x518e <command_proc+0x266>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    516a:	61 e0       	ldi	r22, 0x01	; 1
    516c:	03 c0       	rjmp	.+6      	; 0x5174 <command_proc+0x24c>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    516e:	61 e0       	ldi	r22, 0x01	; 1
    5170:	06 c0       	rjmp	.+12     	; 0x517e <command_proc+0x256>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    5172:	6a e0       	ldi	r22, 0x0A	; 10
    5174:	80 91 d0 01 	lds	r24, 0x01D0
    5178:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <mousekey_param_inc>
    517c:	08 c0       	rjmp	.+16     	; 0x518e <command_proc+0x266>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    517e:	80 91 d0 01 	lds	r24, 0x01D0
    5182:	0e 94 84 24 	call	0x4908	; 0x4908 <mousekey_param_dec>
    5186:	03 c0       	rjmp	.+6      	; 0x518e <command_proc+0x266>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default\n");
            break;
        default:
            print("?");
    5188:	84 e7       	ldi	r24, 0x74	; 116
    518a:	96 e0       	ldi	r25, 0x06	; 6
    518c:	13 c0       	rjmp	.+38     	; 0x51b4 <command_proc+0x28c>
            return false;
    }
    if (mousekey_param) {
    518e:	80 91 d0 01 	lds	r24, 0x01D0
    5192:	88 23       	and	r24, r24
    5194:	69 f0       	breq	.+26     	; 0x51b0 <command_proc+0x288>
        xprintf("M%d> ", mousekey_param);
    5196:	1f 92       	push	r1
    5198:	8f 93       	push	r24
    519a:	8e e6       	ldi	r24, 0x6E	; 110
    519c:	96 e0       	ldi	r25, 0x06	; 6
    519e:	9f 93       	push	r25
    51a0:	8f 93       	push	r24
    51a2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__xprintf>
    51a6:	0f 90       	pop	r0
    51a8:	0f 90       	pop	r0
    51aa:	0f 90       	pop	r0
    51ac:	0f 90       	pop	r0
    51ae:	04 c0       	rjmp	.+8      	; 0x51b8 <command_proc+0x290>
    } else {
        print("M>" );
    51b0:	8b e6       	ldi	r24, 0x6B	; 107
    51b2:	96 e0       	ldi	r25, 0x06	; 6
    51b4:	0e 94 66 06 	call	0xccc	; 0xccc <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    51b8:	81 e0       	ldi	r24, 0x01	; 1
    51ba:	06 c0       	rjmp	.+12     	; 0x51c8 <command_proc+0x2a0>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    51bc:	10 92 d1 01 	sts	0x01D1, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    51c0:	80 e0       	ldi	r24, 0x00	; 0
    51c2:	02 c0       	rjmp	.+4      	; 0x51c8 <command_proc+0x2a0>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    51c4:	80 e0       	ldi	r24, 0x00	; 0
    51c6:	00 cf       	rjmp	.-512    	; 0x4fc8 <command_proc+0xa0>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    51c8:	cf 91       	pop	r28
    51ca:	08 95       	ret

000051cc <__fixsfsi>:
    51cc:	04 d0       	rcall	.+8      	; 0x51d6 <__fixunssfsi>
    51ce:	68 94       	set
    51d0:	b1 11       	cpse	r27, r1
    51d2:	8d c0       	rjmp	.+282    	; 0x52ee <__fp_szero>
    51d4:	08 95       	ret

000051d6 <__fixunssfsi>:
    51d6:	70 d0       	rcall	.+224    	; 0x52b8 <__fp_splitA>
    51d8:	88 f0       	brcs	.+34     	; 0x51fc <__fixunssfsi+0x26>
    51da:	9f 57       	subi	r25, 0x7F	; 127
    51dc:	90 f0       	brcs	.+36     	; 0x5202 <__fixunssfsi+0x2c>
    51de:	b9 2f       	mov	r27, r25
    51e0:	99 27       	eor	r25, r25
    51e2:	b7 51       	subi	r27, 0x17	; 23
    51e4:	a0 f0       	brcs	.+40     	; 0x520e <__fixunssfsi+0x38>
    51e6:	d1 f0       	breq	.+52     	; 0x521c <__fixunssfsi+0x46>
    51e8:	66 0f       	add	r22, r22
    51ea:	77 1f       	adc	r23, r23
    51ec:	88 1f       	adc	r24, r24
    51ee:	99 1f       	adc	r25, r25
    51f0:	1a f0       	brmi	.+6      	; 0x51f8 <__fixunssfsi+0x22>
    51f2:	ba 95       	dec	r27
    51f4:	c9 f7       	brne	.-14     	; 0x51e8 <__fixunssfsi+0x12>
    51f6:	12 c0       	rjmp	.+36     	; 0x521c <__fixunssfsi+0x46>
    51f8:	b1 30       	cpi	r27, 0x01	; 1
    51fa:	81 f0       	breq	.+32     	; 0x521c <__fixunssfsi+0x46>
    51fc:	77 d0       	rcall	.+238    	; 0x52ec <__fp_zero>
    51fe:	b1 e0       	ldi	r27, 0x01	; 1
    5200:	08 95       	ret
    5202:	74 c0       	rjmp	.+232    	; 0x52ec <__fp_zero>
    5204:	67 2f       	mov	r22, r23
    5206:	78 2f       	mov	r23, r24
    5208:	88 27       	eor	r24, r24
    520a:	b8 5f       	subi	r27, 0xF8	; 248
    520c:	39 f0       	breq	.+14     	; 0x521c <__fixunssfsi+0x46>
    520e:	b9 3f       	cpi	r27, 0xF9	; 249
    5210:	cc f3       	brlt	.-14     	; 0x5204 <__fixunssfsi+0x2e>
    5212:	86 95       	lsr	r24
    5214:	77 95       	ror	r23
    5216:	67 95       	ror	r22
    5218:	b3 95       	inc	r27
    521a:	d9 f7       	brne	.-10     	; 0x5212 <__fixunssfsi+0x3c>
    521c:	3e f4       	brtc	.+14     	; 0x522c <__fixunssfsi+0x56>
    521e:	90 95       	com	r25
    5220:	80 95       	com	r24
    5222:	70 95       	com	r23
    5224:	61 95       	neg	r22
    5226:	7f 4f       	sbci	r23, 0xFF	; 255
    5228:	8f 4f       	sbci	r24, 0xFF	; 255
    522a:	9f 4f       	sbci	r25, 0xFF	; 255
    522c:	08 95       	ret

0000522e <__floatunsisf>:
    522e:	e8 94       	clt
    5230:	09 c0       	rjmp	.+18     	; 0x5244 <__floatsisf+0x12>

00005232 <__floatsisf>:
    5232:	97 fb       	bst	r25, 7
    5234:	3e f4       	brtc	.+14     	; 0x5244 <__floatsisf+0x12>
    5236:	90 95       	com	r25
    5238:	80 95       	com	r24
    523a:	70 95       	com	r23
    523c:	61 95       	neg	r22
    523e:	7f 4f       	sbci	r23, 0xFF	; 255
    5240:	8f 4f       	sbci	r24, 0xFF	; 255
    5242:	9f 4f       	sbci	r25, 0xFF	; 255
    5244:	99 23       	and	r25, r25
    5246:	a9 f0       	breq	.+42     	; 0x5272 <__floatsisf+0x40>
    5248:	f9 2f       	mov	r31, r25
    524a:	96 e9       	ldi	r25, 0x96	; 150
    524c:	bb 27       	eor	r27, r27
    524e:	93 95       	inc	r25
    5250:	f6 95       	lsr	r31
    5252:	87 95       	ror	r24
    5254:	77 95       	ror	r23
    5256:	67 95       	ror	r22
    5258:	b7 95       	ror	r27
    525a:	f1 11       	cpse	r31, r1
    525c:	f8 cf       	rjmp	.-16     	; 0x524e <__floatsisf+0x1c>
    525e:	fa f4       	brpl	.+62     	; 0x529e <__floatsisf+0x6c>
    5260:	bb 0f       	add	r27, r27
    5262:	11 f4       	brne	.+4      	; 0x5268 <__floatsisf+0x36>
    5264:	60 ff       	sbrs	r22, 0
    5266:	1b c0       	rjmp	.+54     	; 0x529e <__floatsisf+0x6c>
    5268:	6f 5f       	subi	r22, 0xFF	; 255
    526a:	7f 4f       	sbci	r23, 0xFF	; 255
    526c:	8f 4f       	sbci	r24, 0xFF	; 255
    526e:	9f 4f       	sbci	r25, 0xFF	; 255
    5270:	16 c0       	rjmp	.+44     	; 0x529e <__floatsisf+0x6c>
    5272:	88 23       	and	r24, r24
    5274:	11 f0       	breq	.+4      	; 0x527a <__floatsisf+0x48>
    5276:	96 e9       	ldi	r25, 0x96	; 150
    5278:	11 c0       	rjmp	.+34     	; 0x529c <__floatsisf+0x6a>
    527a:	77 23       	and	r23, r23
    527c:	21 f0       	breq	.+8      	; 0x5286 <__floatsisf+0x54>
    527e:	9e e8       	ldi	r25, 0x8E	; 142
    5280:	87 2f       	mov	r24, r23
    5282:	76 2f       	mov	r23, r22
    5284:	05 c0       	rjmp	.+10     	; 0x5290 <__floatsisf+0x5e>
    5286:	66 23       	and	r22, r22
    5288:	71 f0       	breq	.+28     	; 0x52a6 <__floatsisf+0x74>
    528a:	96 e8       	ldi	r25, 0x86	; 134
    528c:	86 2f       	mov	r24, r22
    528e:	70 e0       	ldi	r23, 0x00	; 0
    5290:	60 e0       	ldi	r22, 0x00	; 0
    5292:	2a f0       	brmi	.+10     	; 0x529e <__floatsisf+0x6c>
    5294:	9a 95       	dec	r25
    5296:	66 0f       	add	r22, r22
    5298:	77 1f       	adc	r23, r23
    529a:	88 1f       	adc	r24, r24
    529c:	da f7       	brpl	.-10     	; 0x5294 <__floatsisf+0x62>
    529e:	88 0f       	add	r24, r24
    52a0:	96 95       	lsr	r25
    52a2:	87 95       	ror	r24
    52a4:	97 f9       	bld	r25, 7
    52a6:	08 95       	ret

000052a8 <__fp_split3>:
    52a8:	57 fd       	sbrc	r21, 7
    52aa:	90 58       	subi	r25, 0x80	; 128
    52ac:	44 0f       	add	r20, r20
    52ae:	55 1f       	adc	r21, r21
    52b0:	59 f0       	breq	.+22     	; 0x52c8 <__fp_splitA+0x10>
    52b2:	5f 3f       	cpi	r21, 0xFF	; 255
    52b4:	71 f0       	breq	.+28     	; 0x52d2 <__fp_splitA+0x1a>
    52b6:	47 95       	ror	r20

000052b8 <__fp_splitA>:
    52b8:	88 0f       	add	r24, r24
    52ba:	97 fb       	bst	r25, 7
    52bc:	99 1f       	adc	r25, r25
    52be:	61 f0       	breq	.+24     	; 0x52d8 <__fp_splitA+0x20>
    52c0:	9f 3f       	cpi	r25, 0xFF	; 255
    52c2:	79 f0       	breq	.+30     	; 0x52e2 <__fp_splitA+0x2a>
    52c4:	87 95       	ror	r24
    52c6:	08 95       	ret
    52c8:	12 16       	cp	r1, r18
    52ca:	13 06       	cpc	r1, r19
    52cc:	14 06       	cpc	r1, r20
    52ce:	55 1f       	adc	r21, r21
    52d0:	f2 cf       	rjmp	.-28     	; 0x52b6 <__fp_split3+0xe>
    52d2:	46 95       	lsr	r20
    52d4:	f1 df       	rcall	.-30     	; 0x52b8 <__fp_splitA>
    52d6:	08 c0       	rjmp	.+16     	; 0x52e8 <__fp_splitA+0x30>
    52d8:	16 16       	cp	r1, r22
    52da:	17 06       	cpc	r1, r23
    52dc:	18 06       	cpc	r1, r24
    52de:	99 1f       	adc	r25, r25
    52e0:	f1 cf       	rjmp	.-30     	; 0x52c4 <__fp_splitA+0xc>
    52e2:	86 95       	lsr	r24
    52e4:	71 05       	cpc	r23, r1
    52e6:	61 05       	cpc	r22, r1
    52e8:	08 94       	sec
    52ea:	08 95       	ret

000052ec <__fp_zero>:
    52ec:	e8 94       	clt

000052ee <__fp_szero>:
    52ee:	bb 27       	eor	r27, r27
    52f0:	66 27       	eor	r22, r22
    52f2:	77 27       	eor	r23, r23
    52f4:	cb 01       	movw	r24, r22
    52f6:	97 f9       	bld	r25, 7
    52f8:	08 95       	ret

000052fa <__mulsf3>:
    52fa:	0b d0       	rcall	.+22     	; 0x5312 <__mulsf3x>
    52fc:	78 c0       	rjmp	.+240    	; 0x53ee <__fp_round>
    52fe:	69 d0       	rcall	.+210    	; 0x53d2 <__fp_pscA>
    5300:	28 f0       	brcs	.+10     	; 0x530c <__mulsf3+0x12>
    5302:	6e d0       	rcall	.+220    	; 0x53e0 <__fp_pscB>
    5304:	18 f0       	brcs	.+6      	; 0x530c <__mulsf3+0x12>
    5306:	95 23       	and	r25, r21
    5308:	09 f0       	breq	.+2      	; 0x530c <__mulsf3+0x12>
    530a:	5a c0       	rjmp	.+180    	; 0x53c0 <__fp_inf>
    530c:	5f c0       	rjmp	.+190    	; 0x53cc <__fp_nan>
    530e:	11 24       	eor	r1, r1
    5310:	ee cf       	rjmp	.-36     	; 0x52ee <__fp_szero>

00005312 <__mulsf3x>:
    5312:	ca df       	rcall	.-108    	; 0x52a8 <__fp_split3>
    5314:	a0 f3       	brcs	.-24     	; 0x52fe <__mulsf3+0x4>

00005316 <__mulsf3_pse>:
    5316:	95 9f       	mul	r25, r21
    5318:	d1 f3       	breq	.-12     	; 0x530e <__mulsf3+0x14>
    531a:	95 0f       	add	r25, r21
    531c:	50 e0       	ldi	r21, 0x00	; 0
    531e:	55 1f       	adc	r21, r21
    5320:	62 9f       	mul	r22, r18
    5322:	f0 01       	movw	r30, r0
    5324:	72 9f       	mul	r23, r18
    5326:	bb 27       	eor	r27, r27
    5328:	f0 0d       	add	r31, r0
    532a:	b1 1d       	adc	r27, r1
    532c:	63 9f       	mul	r22, r19
    532e:	aa 27       	eor	r26, r26
    5330:	f0 0d       	add	r31, r0
    5332:	b1 1d       	adc	r27, r1
    5334:	aa 1f       	adc	r26, r26
    5336:	64 9f       	mul	r22, r20
    5338:	66 27       	eor	r22, r22
    533a:	b0 0d       	add	r27, r0
    533c:	a1 1d       	adc	r26, r1
    533e:	66 1f       	adc	r22, r22
    5340:	82 9f       	mul	r24, r18
    5342:	22 27       	eor	r18, r18
    5344:	b0 0d       	add	r27, r0
    5346:	a1 1d       	adc	r26, r1
    5348:	62 1f       	adc	r22, r18
    534a:	73 9f       	mul	r23, r19
    534c:	b0 0d       	add	r27, r0
    534e:	a1 1d       	adc	r26, r1
    5350:	62 1f       	adc	r22, r18
    5352:	83 9f       	mul	r24, r19
    5354:	a0 0d       	add	r26, r0
    5356:	61 1d       	adc	r22, r1
    5358:	22 1f       	adc	r18, r18
    535a:	74 9f       	mul	r23, r20
    535c:	33 27       	eor	r19, r19
    535e:	a0 0d       	add	r26, r0
    5360:	61 1d       	adc	r22, r1
    5362:	23 1f       	adc	r18, r19
    5364:	84 9f       	mul	r24, r20
    5366:	60 0d       	add	r22, r0
    5368:	21 1d       	adc	r18, r1
    536a:	82 2f       	mov	r24, r18
    536c:	76 2f       	mov	r23, r22
    536e:	6a 2f       	mov	r22, r26
    5370:	11 24       	eor	r1, r1
    5372:	9f 57       	subi	r25, 0x7F	; 127
    5374:	50 40       	sbci	r21, 0x00	; 0
    5376:	8a f0       	brmi	.+34     	; 0x539a <__mulsf3_pse+0x84>
    5378:	e1 f0       	breq	.+56     	; 0x53b2 <__mulsf3_pse+0x9c>
    537a:	88 23       	and	r24, r24
    537c:	4a f0       	brmi	.+18     	; 0x5390 <__mulsf3_pse+0x7a>
    537e:	ee 0f       	add	r30, r30
    5380:	ff 1f       	adc	r31, r31
    5382:	bb 1f       	adc	r27, r27
    5384:	66 1f       	adc	r22, r22
    5386:	77 1f       	adc	r23, r23
    5388:	88 1f       	adc	r24, r24
    538a:	91 50       	subi	r25, 0x01	; 1
    538c:	50 40       	sbci	r21, 0x00	; 0
    538e:	a9 f7       	brne	.-22     	; 0x537a <__mulsf3_pse+0x64>
    5390:	9e 3f       	cpi	r25, 0xFE	; 254
    5392:	51 05       	cpc	r21, r1
    5394:	70 f0       	brcs	.+28     	; 0x53b2 <__mulsf3_pse+0x9c>
    5396:	14 c0       	rjmp	.+40     	; 0x53c0 <__fp_inf>
    5398:	aa cf       	rjmp	.-172    	; 0x52ee <__fp_szero>
    539a:	5f 3f       	cpi	r21, 0xFF	; 255
    539c:	ec f3       	brlt	.-6      	; 0x5398 <__mulsf3_pse+0x82>
    539e:	98 3e       	cpi	r25, 0xE8	; 232
    53a0:	dc f3       	brlt	.-10     	; 0x5398 <__mulsf3_pse+0x82>
    53a2:	86 95       	lsr	r24
    53a4:	77 95       	ror	r23
    53a6:	67 95       	ror	r22
    53a8:	b7 95       	ror	r27
    53aa:	f7 95       	ror	r31
    53ac:	e7 95       	ror	r30
    53ae:	9f 5f       	subi	r25, 0xFF	; 255
    53b0:	c1 f7       	brne	.-16     	; 0x53a2 <__mulsf3_pse+0x8c>
    53b2:	fe 2b       	or	r31, r30
    53b4:	88 0f       	add	r24, r24
    53b6:	91 1d       	adc	r25, r1
    53b8:	96 95       	lsr	r25
    53ba:	87 95       	ror	r24
    53bc:	97 f9       	bld	r25, 7
    53be:	08 95       	ret

000053c0 <__fp_inf>:
    53c0:	97 f9       	bld	r25, 7
    53c2:	9f 67       	ori	r25, 0x7F	; 127
    53c4:	80 e8       	ldi	r24, 0x80	; 128
    53c6:	70 e0       	ldi	r23, 0x00	; 0
    53c8:	60 e0       	ldi	r22, 0x00	; 0
    53ca:	08 95       	ret

000053cc <__fp_nan>:
    53cc:	9f ef       	ldi	r25, 0xFF	; 255
    53ce:	80 ec       	ldi	r24, 0xC0	; 192
    53d0:	08 95       	ret

000053d2 <__fp_pscA>:
    53d2:	00 24       	eor	r0, r0
    53d4:	0a 94       	dec	r0
    53d6:	16 16       	cp	r1, r22
    53d8:	17 06       	cpc	r1, r23
    53da:	18 06       	cpc	r1, r24
    53dc:	09 06       	cpc	r0, r25
    53de:	08 95       	ret

000053e0 <__fp_pscB>:
    53e0:	00 24       	eor	r0, r0
    53e2:	0a 94       	dec	r0
    53e4:	12 16       	cp	r1, r18
    53e6:	13 06       	cpc	r1, r19
    53e8:	14 06       	cpc	r1, r20
    53ea:	05 06       	cpc	r0, r21
    53ec:	08 95       	ret

000053ee <__fp_round>:
    53ee:	09 2e       	mov	r0, r25
    53f0:	03 94       	inc	r0
    53f2:	00 0c       	add	r0, r0
    53f4:	11 f4       	brne	.+4      	; 0x53fa <__fp_round+0xc>
    53f6:	88 23       	and	r24, r24
    53f8:	52 f0       	brmi	.+20     	; 0x540e <__fp_round+0x20>
    53fa:	bb 0f       	add	r27, r27
    53fc:	40 f4       	brcc	.+16     	; 0x540e <__fp_round+0x20>
    53fe:	bf 2b       	or	r27, r31
    5400:	11 f4       	brne	.+4      	; 0x5406 <__fp_round+0x18>
    5402:	60 ff       	sbrs	r22, 0
    5404:	04 c0       	rjmp	.+8      	; 0x540e <__fp_round+0x20>
    5406:	6f 5f       	subi	r22, 0xFF	; 255
    5408:	7f 4f       	sbci	r23, 0xFF	; 255
    540a:	8f 4f       	sbci	r24, 0xFF	; 255
    540c:	9f 4f       	sbci	r25, 0xFF	; 255
    540e:	08 95       	ret

00005410 <__udivmodqi4>:
    5410:	99 1b       	sub	r25, r25
    5412:	79 e0       	ldi	r23, 0x09	; 9
    5414:	04 c0       	rjmp	.+8      	; 0x541e <__udivmodqi4_ep>

00005416 <__udivmodqi4_loop>:
    5416:	99 1f       	adc	r25, r25
    5418:	96 17       	cp	r25, r22
    541a:	08 f0       	brcs	.+2      	; 0x541e <__udivmodqi4_ep>
    541c:	96 1b       	sub	r25, r22

0000541e <__udivmodqi4_ep>:
    541e:	88 1f       	adc	r24, r24
    5420:	7a 95       	dec	r23
    5422:	c9 f7       	brne	.-14     	; 0x5416 <__udivmodqi4_loop>
    5424:	80 95       	com	r24
    5426:	08 95       	ret

00005428 <__divmodhi4>:
    5428:	97 fb       	bst	r25, 7
    542a:	07 2e       	mov	r0, r23
    542c:	16 f4       	brtc	.+4      	; 0x5432 <__divmodhi4+0xa>
    542e:	00 94       	com	r0
    5430:	07 d0       	rcall	.+14     	; 0x5440 <__divmodhi4_neg1>
    5432:	77 fd       	sbrc	r23, 7
    5434:	09 d0       	rcall	.+18     	; 0x5448 <__divmodhi4_neg2>
    5436:	0e 94 2e 2a 	call	0x545c	; 0x545c <__udivmodhi4>
    543a:	07 fc       	sbrc	r0, 7
    543c:	05 d0       	rcall	.+10     	; 0x5448 <__divmodhi4_neg2>
    543e:	3e f4       	brtc	.+14     	; 0x544e <__divmodhi4_exit>

00005440 <__divmodhi4_neg1>:
    5440:	90 95       	com	r25
    5442:	81 95       	neg	r24
    5444:	9f 4f       	sbci	r25, 0xFF	; 255
    5446:	08 95       	ret

00005448 <__divmodhi4_neg2>:
    5448:	70 95       	com	r23
    544a:	61 95       	neg	r22
    544c:	7f 4f       	sbci	r23, 0xFF	; 255

0000544e <__divmodhi4_exit>:
    544e:	08 95       	ret

00005450 <__tablejump2__>:
    5450:	ee 0f       	add	r30, r30
    5452:	ff 1f       	adc	r31, r31

00005454 <__tablejump__>:
    5454:	05 90       	lpm	r0, Z+
    5456:	f4 91       	lpm	r31, Z
    5458:	e0 2d       	mov	r30, r0
    545a:	09 94       	ijmp

0000545c <__udivmodhi4>:
    545c:	aa 1b       	sub	r26, r26
    545e:	bb 1b       	sub	r27, r27
    5460:	51 e1       	ldi	r21, 0x11	; 17
    5462:	07 c0       	rjmp	.+14     	; 0x5472 <__udivmodhi4_ep>

00005464 <__udivmodhi4_loop>:
    5464:	aa 1f       	adc	r26, r26
    5466:	bb 1f       	adc	r27, r27
    5468:	a6 17       	cp	r26, r22
    546a:	b7 07       	cpc	r27, r23
    546c:	10 f0       	brcs	.+4      	; 0x5472 <__udivmodhi4_ep>
    546e:	a6 1b       	sub	r26, r22
    5470:	b7 0b       	sbc	r27, r23

00005472 <__udivmodhi4_ep>:
    5472:	88 1f       	adc	r24, r24
    5474:	99 1f       	adc	r25, r25
    5476:	5a 95       	dec	r21
    5478:	a9 f7       	brne	.-22     	; 0x5464 <__udivmodhi4_loop>
    547a:	80 95       	com	r24
    547c:	90 95       	com	r25
    547e:	bc 01       	movw	r22, r24
    5480:	cd 01       	movw	r24, r26
    5482:	08 95       	ret

00005484 <__eerd_byte_m32u4>:
    5484:	f9 99       	sbic	0x1f, 1	; 31
    5486:	fe cf       	rjmp	.-4      	; 0x5484 <__eerd_byte_m32u4>
    5488:	92 bd       	out	0x22, r25	; 34
    548a:	81 bd       	out	0x21, r24	; 33
    548c:	f8 9a       	sbi	0x1f, 0	; 31
    548e:	99 27       	eor	r25, r25
    5490:	80 b5       	in	r24, 0x20	; 32
    5492:	08 95       	ret

00005494 <__eerd_word_m32u4>:
    5494:	a8 e1       	ldi	r26, 0x18	; 24
    5496:	b0 e0       	ldi	r27, 0x00	; 0
    5498:	42 e0       	ldi	r20, 0x02	; 2
    549a:	50 e0       	ldi	r21, 0x00	; 0
    549c:	0c 94 65 2a 	jmp	0x54ca	; 0x54ca <__eerd_blraw_m32u4>

000054a0 <__eewr_byte_m32u4>:
    54a0:	26 2f       	mov	r18, r22

000054a2 <__eewr_r18_m32u4>:
    54a2:	f9 99       	sbic	0x1f, 1	; 31
    54a4:	fe cf       	rjmp	.-4      	; 0x54a2 <__eewr_r18_m32u4>
    54a6:	1f ba       	out	0x1f, r1	; 31
    54a8:	92 bd       	out	0x22, r25	; 34
    54aa:	81 bd       	out	0x21, r24	; 33
    54ac:	20 bd       	out	0x20, r18	; 32
    54ae:	0f b6       	in	r0, 0x3f	; 63
    54b0:	f8 94       	cli
    54b2:	fa 9a       	sbi	0x1f, 2	; 31
    54b4:	f9 9a       	sbi	0x1f, 1	; 31
    54b6:	0f be       	out	0x3f, r0	; 63
    54b8:	01 96       	adiw	r24, 0x01	; 1
    54ba:	08 95       	ret

000054bc <__eewr_word_m32u4>:
    54bc:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <__eewr_byte_m32u4>
    54c0:	27 2f       	mov	r18, r23
    54c2:	0c 94 51 2a 	jmp	0x54a2	; 0x54a2 <__eewr_r18_m32u4>

000054c6 <__eerd_block_m32u4>:
    54c6:	dc 01       	movw	r26, r24
    54c8:	cb 01       	movw	r24, r22

000054ca <__eerd_blraw_m32u4>:
    54ca:	fc 01       	movw	r30, r24
    54cc:	f9 99       	sbic	0x1f, 1	; 31
    54ce:	fe cf       	rjmp	.-4      	; 0x54cc <__eerd_blraw_m32u4+0x2>
    54d0:	06 c0       	rjmp	.+12     	; 0x54de <__eerd_blraw_m32u4+0x14>
    54d2:	f2 bd       	out	0x22, r31	; 34
    54d4:	e1 bd       	out	0x21, r30	; 33
    54d6:	f8 9a       	sbi	0x1f, 0	; 31
    54d8:	31 96       	adiw	r30, 0x01	; 1
    54da:	00 b4       	in	r0, 0x20	; 32
    54dc:	0d 92       	st	X+, r0
    54de:	41 50       	subi	r20, 0x01	; 1
    54e0:	50 40       	sbci	r21, 0x00	; 0
    54e2:	b8 f7       	brcc	.-18     	; 0x54d2 <__eerd_blraw_m32u4+0x8>
    54e4:	08 95       	ret

000054e6 <_exit>:
    54e6:	f8 94       	cli

000054e8 <__stop_program>:
    54e8:	ff cf       	rjmp	.-2      	; 0x54e8 <__stop_program>
