
Minorca_lufa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  000054e8  0000557c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000054e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a8  00800138  00800138  000055b4  2**0
                  ALLOC
  3 .noinit       00000004  008001e0  008001e0  000055b4  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  000055b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000090  00000000  00000000  00005e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00005efc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000b30  00000000  00000000  00005f10  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00010c28  00000000  00000000  00006a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000405f  00000000  00000000  00017668  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00005b67  00000000  00000000  0001b6c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001c3c  00000000  00000000  00021230  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000046fe  00000000  00000000  00022e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008ce3  00000000  00000000  0002756a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000be8  00000000  00000000  0003024d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__ctors_end>
       4:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
       8:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
       c:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
      10:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
      14:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
      18:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
      1c:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
      20:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
      24:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
      28:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <__vector_10>
      2c:	0c 94 f1 0e 	jmp	0x1de2	; 0x1de2 <__vector_11>
      30:	0c 94 4b 1d 	jmp	0x3a96	; 0x3a96 <__vector_12>
      34:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
      3c:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
      40:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
      44:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      48:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
      4c:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
      50:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	0c 94 be 1d 	jmp	0x3b7c	; 0x3b7c <__vector_21>
      58:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
      5c:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
      60:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      64:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
      68:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>

	ParserData->TotalDeviceReports = 1;
      6c:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
      70:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
      74:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
      78:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
      7c:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
      84:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
      88:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      90:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
      94:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
      98:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      9c:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
      a0:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
      a4:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      a8:	0c 94 57 06 	jmp	0xcae	; 0xcae <__bad_interrupt>
      ac:	56 0f       	add	r21, r22
      ae:	78 0f       	add	r23, r24
      b0:	63 10       	cpse	r6, r3
      b2:	78 0f       	add	r23, r24
      b4:	63 10       	cpse	r6, r3
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      b6:	ba 0f       	add	r27, r26
      b8:	dd 0f       	add	r29, r29
      ba:	63 10       	cpse	r6, r3
      bc:	32 10       	cpse	r3, r2
      be:	45 10       	cpse	r4, r5
      c0:	9d 13       	cpse	r25, r29
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      c2:	9d 13       	cpse	r25, r29
      c4:	cb 13       	cpse	r28, r27
      c6:	cb 13       	cpse	r28, r27
      c8:	27 14       	cp	r2, r7
      ca:	63 14       	cp	r6, r3
      cc:	54 16       	cp	r5, r20
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      ce:	54 16       	cp	r5, r20
      d0:	7b 14       	cp	r7, r11
      d2:	54 16       	cp	r5, r20
      d4:	72 15       	cp	r23, r2
	{
		uint8_t  HIDReportItem  = *ReportData;
      d6:	72 15       	cp	r23, r2
      d8:	2e 16       	cp	r2, r30
      da:	54 16       	cp	r5, r20
      dc:	54 16       	cp	r5, r20
      de:	42 16       	cp	r4, r18

000000e0 <__trampolines_end>:
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e0:	f1 a1       	ldd	r31, Z+33	; 0x21
      e2:	f1 a2       	std	Z+33, r15	; 0x21
      e4:	f1 a3       	std	Z+33, r31	; 0x21

000000e6 <keymaps>:
      e6:	2b 14 1a 08 15 17 1c 18 0c 12 13 2a e0 04 16 07     +..........*....
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
      f6:	09 0a 0b 0d 0e 0f 00 c1 e1 00 1d 1b 06 19 05 11     ................

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     106:	10 36 37 38 c0 e2 00 e3 28 00 2c 00 00 c2 34 e5     .678....(.,...4.
     116:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     126:	01 01 50 51 52 4f 00 01 01 00 01 01 01 01 01 01     ..PQRO..........
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     136:	01 01 01 01 c0 01 00 01 01 00 01 00 00 01 01 01     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
				break;
     146:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     156:	01 01 01 01 01 01 00 c1 01 00 01 01 01 01 01 01     ................
				ReportSize     -= 2;
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     166:	01 01 01 01 01 01 00 01 01 00 01 00 00 01 01 01     ................
				ReportSize     -= 1;
				ReportData     += 1;
     176:	01 01 01 01 01 01 01 01 01 01 01 bf 01 01 01 01     ................
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     186:	01 01 01 01 01 01 00 01 01 00 01 01 01 01 01 01     ................
     196:	01 01 01 01 01 01 00 01 01 00 01 00 00 c2 01 01     ................

000001a6 <__c.1891>:

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1a6:	0a 00                                               ..

000001a8 <__c.1889>:
     1a8:	25 30 31 36 62 00                                   %016b.

000001ae <__c.1887>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ae:	3a 20 00                                            : .

000001b1 <__c.1885>:
     1b1:	25 30 32 58 00                                      %02X.

000001b6 <__c.1882>:
     1b6:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
     1c6:	42 43 44 45 46 0a 00                                BCDEF..

000001cd <__c.1860>:
     1cd:	0a 00                                               ..

000001cf <__c.1858>:
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1cf:	25 30 32 58 00                                      %02X.

000001d4 <__c.1856>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1d4:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

000001de <__c.4770>:
     1de:	5b 73 5d 00                                         [s].

000001e2 <__c.4768>:
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e2:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1f2:	00                                                  .

000001f3 <__c.4766>:
     1f3:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     203:	00                                                  .

00000204 <__c.4664>:
     204:	5b 57 5d 00                                         [W].

00000208 <__c.4660>:
     208:	5b 53 5d 00                                         [S].

0000020c <__c.4656>:
     20c:	5b 52 5d 00                                         [R].

00000210 <__c.4651>:
     210:	5b 44 5d 00                                         [D].

00000214 <__c.4646>:
     214:	5b 43 5d 00                                         [C].

00000218 <ProductString>:
     218:	10 03 4d 00 69 00 6e 00 6f 00 72 00 63 00 61 00     ..M.i.n.o.r.c.a.
     228:	00 00                                               ..

0000022a <ManufacturerString>:
     22a:	22 03 50 00 61 00 6e 00 63 00 20 00 49 00 6e 00     ".P.a.n.c. .I.n.
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     23a:	74 00 65 00 72 00 61 00 63 00 74 00 69 00 76 00     t.e.r.a.c.t.i.v.
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     24a:	65 00 00 00                                         e...

0000024e <LanguageString>:
     24e:	04 03 09 04                                         ....

00000252 <ConfigurationDescriptor>:
     252:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     262:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     272:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     282:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     292:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
				break;

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2b2:	01 00 01 22 20 00 07 05 84 03 20 00 01 07 05 04     ..." ..... .....
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2c2:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d2:	01 00 01 22 39 00 07 05 85 03 10 00 01              ..."9........

000002df <DeviceDescriptor>:

				if (ParserData->UsingReportIDs)
     2df:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ef:	00 01                                               ..

000002f1 <NKROReport>:
     2f1:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     301:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     311:	91 02 95 01 75 03 91 01 05 07 19 00 29 77 15 00     ....u.......)w..
     321:	25 01 95 78 75 01 81 02 c0                          %..xu....

0000032a <ConsoleReport>:
     32a:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33a:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

0000034a <ExtrakeyReport>:
     34a:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
     35a:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
					}
				}

				ParserData->UsingReportIDs = true;
     36a:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     37a:	10 95 01 81 00 c0                                   ......

00000380 <MouseReport>:
				break;
     380:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     390:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     3a0:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b0:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3c0:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

000003cd <KeyboardReport>:
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     3cd:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dd:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3ed:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     3fd:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

0000040c <__c.4396>:
				}

				CurrCollectionPath->Type       = ReportItemData;
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     40c:	0a 00                                               ..

0000040e <__c.4391>:
     40e:	25 30 32 58 20 00                                   %02X .

00000414 <__c.4388>:
     414:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     424:	20 00                                                .

00000426 <__c.4751>:
     426:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

00000431 <__c.4536>:
     431:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can

					for (uint8_t i = 1; i < UsageListSize; i++)
     441:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

0000044f <__c.4531>:
     44f:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     45f:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

0000046d <__c.4701>:
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46d:	64 6f 6e 65 2e 0a 00                                done...

00000474 <__c.4695>:
     474:	62 6f 6f 74 6d 61 67 69 63 20 73 63 61 6e 3a 20     bootmagic scan: 
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     484:	2e 2e 2e 20 00                                      ... .

00000489 <__c.4468>:
     489:	29 0a 00                                            )..

0000048c <__c.4466>:
     48c:	25 75 00                                            %u.

0000048f <__c.4464>:
     48f:	2f 00                                               /.

00000491 <__c.4462>:
     491:	25 75 00                                            %u.

00000494 <__c.4460>:
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     494:	5d 28 00                                            ](.

00000497 <__c.4458>:
     497:	25 64 00                                            %d.

0000049a <__c.4456>:
     49a:	20 00                                                .

0000049c <__c.4454>:
     49c:	25 64 00                                            %d.

0000049f <__c.4452>:
     49f:	20 00                                                .

000004a1 <__c.4450>:
     4a1:	25 64 00                                            %d.

000004a4 <__c.4448>:
				break;
     4a4:	20 00                                                .

000004a6 <__c.4446>:
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4a6:	25 64 00                                            %d.

000004a9 <__c.4444>:
     4a9:	7c 00                                               |.

000004ab <__c.4442>:
     4ab:	25 30 32 58 00                                      %02X.

000004b0 <__c.4440>:
     4b0:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     4c0:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4d0:	20 5b 00                                             [.

000004d3 <__c.5065>:
     4d3:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e3:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

000004ee <__c.5062>:
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4ee:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
					NewReportItem.CollectionPath = CurrCollectionPath;
     4fe:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000507 <__c.5059>:
     507:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
					NewReportItem.ReportID       = CurrStateTable->ReportID;

					if (UsageListSize)
     517:	20 25 64 0a 00                                       %d..

0000051c <__c.5056>:
     51c:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     52c:	64 0a 00                                            d..

0000052f <__c.5053>:
     52f:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d

						for (uint8_t i = 1; i < UsageListSize; i++)
     53f:	0a 00                                               ..

00000541 <__c.5049>:
     541:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000550 <__c.5042>:
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     550:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

0000056b <__c.5039>:
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56b:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     57b:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000584 <__c.5036>:
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     584:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     594:	20 25 64 0a 00                                       %d..

00000599 <__c.5033>:
     599:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5a9:	64 0a 00                                            d..

000005ac <__c.5030>:
     5ac:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	0a 00                                               ..

000005be <__c.5026>:
     5be:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

000005cd <__c.5019>:
     5cd:	0a 00                                               ..

000005cf <__c.5017>:
     5cf:	25 75 00                                            %u.

000005d2 <__c.5015>:
     5d2:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     5e2:	5f 6d 61 78 3a 20 00                                _max: .

000005e9 <__c.5013>:
     5e9:	0a 00                                               ..

000005eb <__c.5011>:
     5eb:	25 75 00                                            %u.

000005ee <__c.5009>:

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5ee:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     5fe:	65 64 3a 20 00                                      ed: .

00000603 <__c.5007>:
     603:	0a 00                                               ..

00000605 <__c.5005>:
     605:	25 75 00                                            %u.

00000608 <__c.5003>:
     608:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     618:	00                                                  .

00000619 <__c.5001>:
     619:	0a 00                                               ..

0000061b <__c.4999>:
     61b:	25 75 00                                            %u.

0000061e <__c.4997>:
     61e:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

0000062d <__c.4995>:
     62d:	0a 00                                               ..

0000062f <__c.4993>:
     62f:	25 75 00                                            %u.

00000632 <__c.4991>:
     632:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     642:	20 00                                                .

00000644 <__c.4989>:
     644:	0a 00                                               ..

00000646 <__c.4987>:
     646:	25 75 00                                            %u.

00000649 <__c.4985>:
     649:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     659:	20 00                                                .

0000065b <__c.4983>:
     65b:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

00000669 <__c.5103>:
     669:	4d 3e 00                                            M>.

0000066c <__c.5101>:
     66c:	4d 25 64 3e 20 00                                   M%d> .

00000672 <__c.5099>:
     672:	3f 00                                               ?.

00000674 <__c.5096>:
     674:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

00000681 <__c.5082>:
					  ParserData->TotalReportItems++;
     681:	43 3e 20 00                                         C> .

00000685 <__c.5072>:
     685:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     695:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6a5:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
		}
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;
     6b5:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6c5:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

000006d3 <__c.5070>:

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d3:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     6e3:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     6f3:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     703:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     713:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     723:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     733:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     743:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     753:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     763:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     773:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     783:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     793:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     7a3:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     7b3:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     7c3:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

000007ce <__c.4975>:
     7ce:	3f 00                                               ?.

000007d0 <__c.4972>:
     7d0:	4d 3e 20 00                                         M> .

000007d4 <__c.4977>:
     7d4:	43 3e 20 00                                         C> .

000007d8 <__c.5121>:
     7d8:	4c 25 64 0a 00                                      L%d..

000007dd <__c.4961>:
     7dd:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     7ed:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     7fd:	73 65 6b 65 79 0a 00                                sekey..

00000804 <__c.4786>:
     804:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     814:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     824:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     834:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     844:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     854:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     864:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     874:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     884:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     894:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 6e 3a 09 4e     r.e:.eeprom.n:.N
     8a4:	4b 52 4f 0a 00                                      KRO..

000008a9 <__c.4881>:
     8a9:	0a 00                                               ..

000008ab <__c.4879>:
     8ab:	25 75 00                                            %u.

000008ae <__c.4877>:
     8ae:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

000008b6 <__c.4875>:
     8b6:	0a 00                                               ..

000008b8 <__c.4873>:
     8b8:	25 75 00                                            %u.

000008bb <__c.4871>:
     8bb:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     8cb:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

000008d7 <__c.4869>:
     8d7:	0a 00                                               ..

000008d9 <__c.4867>:
     8d9:	25 75 00                                            %u.

000008dc <__c.4865>:
     8dc:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     8ec:	20 00                                                .

000008ee <__c.4863>:
     8ee:	0a 00                                               ..

000008f0 <__c.4861>:
     8f0:	25 75 00                                            %u.

000008f3 <__c.4859>:
     8f3:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

000008fd <__c.4857>:
     8fd:	0a 00                                               ..

000008ff <__c.4855>:
     8ff:	25 75 00                                            %u.

00000902 <__c.4853>:
     902:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     912:	20 00                                                .

00000914 <__c.4851>:
     914:	0a 00                                               ..

00000916 <__c.4849>:
     916:	25 75 00                                            %u.

00000919 <__c.4847>:
     919:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     929:	20 00                                                .

0000092b <__c.4845>:
     92b:	0a 00                                               ..

0000092d <__c.4843>:
     92d:	25 75 00                                            %u.

00000930 <__c.4841>:
     930:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     940:	74 72 6f 6c 3a 20 00                                trol: .

00000947 <__c.4839>:
     947:	0a 00                                               ..

00000949 <__c.4837>:
     949:	25 75 00                                            %u.

0000094c <__c.4835>:
     94c:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     95c:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

00000965 <__c.4833>:
     965:	0a 00                                               ..

00000967 <__c.4831>:
     967:	25 30 32 58 00                                      %02X.

0000096c <__c.4829>:
     96c:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     97c:	77 3a 20 00                                         w: .

00000980 <__c.4826>:
     980:	0a 00                                               ..

00000982 <__c.4824>:
     982:	25 75 00                                            %u.

00000985 <__c.4822>:
     985:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

0000098e <__c.4820>:
     98e:	0a 00                                               ..

00000990 <__c.4818>:
     990:	25 75 00                                            %u.

00000993 <__c.4816>:
     993:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

0000099f <__c.4814>:
     99f:	0a 00                                               ..

000009a1 <__c.4812>:
     9a1:	25 75 00                                            %u.

000009a4 <__c.4810>:
     9a4:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

000009ae <__c.4808>:
     9ae:	0a 00                                               ..

000009b0 <__c.4806>:
     9b0:	25 75 00                                            %u.

000009b3 <__c.4804>:
     9b3:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

000009bd <__c.4802>:
     9bd:	0a 00                                               ..

000009bf <__c.4800>:
     9bf:	25 30 32 58 00                                      %02X.

000009c4 <__c.4798>:
     9c4:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     9d4:	3a 20 00                                            : .

000009d7 <__c.4795>:
     9d7:	0a 00                                               ..

000009d9 <__c.4793>:
     9d9:	25 75 00                                            %u.

000009dc <__c.4791>:
     9dc:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

000009ec <__c.4956>:
     9ec:	3f 00                                               ?.

000009ee <__c.4947>:
     9ee:	4e 4b 52 4f 3a 20 6f 66 66 0a 00                    NKRO: off..

000009f9 <__c.4945>:
     9f9:	4e 4b 52 4f 3a 20 6f 6e 0a 00                       NKRO: on..

00000a03 <__c.4942>:
     a03:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     a13:	25 30 34 6c 58 0a 00                                %04lX..

00000a1a <__c.4940>:
     a1a:	6b 65 79 62 6f 61 72 64 5f 6e 6b 72 6f 3a 20 25     keyboard_nkro: %
     a2a:	58 0a 00                                            X..

00000a2d <__c.4938>:
     a2d:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     a3d:	58 0a 00                                            X..

00000a40 <__c.4936>:
     a40:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     a50:	6c 3a 20 25 58 0a 00                                l: %X..

00000a57 <__c.4934>:
     a57:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     a67:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000a71 <__c.4932>:
     a71:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

00000a7f <__c.4929>:
     a7f:	47 43 43 3a 20 34 2e 38 2e 31 20 41 56 52 2d 4c     GCC: 4.8.1 AVR-L
     a8f:	49 42 43 3a 20 31 2e 38 2e 30 73 76 6e 20 41 56     IBC: 1.8.0svn AV
     a9f:	52 5f 41 52 43 48 3a 20 61 76 72 35 0a 00           R_ARCH: avr5..

00000aad <__c.4927>:
     aad:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     abd:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     acd:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     add:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 34     E COMMAND NKRO 4
     aed:	30 39 36 0a 00                                      096..

00000af2 <__c.4925>:
     af2:	42 55 49 4c 44 3a 20 39 62 62 35 62 66 65 2d 64     BUILD: 9bb5bfe-d
     b02:	69 72 74 79 20 28 31 31 3a 31 32 3a 30 31 20 53     irty (11:12:01 S
     b12:	65 70 20 31 31 20 32 30 31 36 29 0a 00              ep 11 2016)..

00000b1f <__c.4923>:
     b1f:	56 49 44 3a 20 30 78 46 45 45 44 28 50 61 6e 63     VID: 0xFEED(Panc
     b2f:	20 49 6e 74 65 72 61 63 74 69 76 65 29 20 50 49      Interactive) PI
     b3f:	44 3a 20 30 78 36 30 36 30 28 4d 69 6e 6f 72 63     D: 0x6060(Minorc
     b4f:	61 29 20 56 45 52 3a 20 30 78 30 30 30 31 0a 00     a) VER: 0x0001..

00000b5f <__c.4921>:
     b5f:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     b6f:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     b7f:	6f 72 20 4d 69 6e 6f 72 63 61 0a 00                 or Minorca..

00000b8b <__c.4919>:
     b8b:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000b9a <__c.4916>:
     b9a:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000ba7 <__c.4914>:
     ba7:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000bb3 <__c.4911>:
     bb3:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000bc3 <__c.4909>:
     bc3:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000bd2 <__c.4906>:
     bd2:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000be0 <__c.4904>:
     be0:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000bed <__c.4901>:
     bed:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000bf9 <__c.4899>:
     bf9:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000c06 <__c.4896>:
     c06:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     c16:	00                                                  .

00000c17 <__c.4893>:
     c17:	43 3e 20 00                                         C> .

00000c1b <__c.4887>:
     c1b:	65 65 63 6f 6e 66 69 67 3a 0a 00                    eeconfig:..

00000c26 <__ctors_end>:
     c26:	11 24       	eor	r1, r1
     c28:	1f be       	out	0x3f, r1	; 63
     c2a:	cf ef       	ldi	r28, 0xFF	; 255
     c2c:	da e0       	ldi	r29, 0x0A	; 10
     c2e:	de bf       	out	0x3e, r29	; 62
     c30:	cd bf       	out	0x3d, r28	; 61

00000c32 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     c32:	04 b6       	in	r0, 0x34	; 52
     c34:	03 fe       	sbrs	r0, 3
     c36:	24 c0       	rjmp	.+72     	; 0xc80 <__do_copy_data>
     c38:	80 91 e0 01 	lds	r24, 0x01E0
     c3c:	90 91 e1 01 	lds	r25, 0x01E1
     c40:	a0 91 e2 01 	lds	r26, 0x01E2
     c44:	b0 91 e3 01 	lds	r27, 0x01E3
     c48:	87 30       	cpi	r24, 0x07	; 7
     c4a:	90 4b       	sbci	r25, 0xB0	; 176
     c4c:	a7 40       	sbci	r26, 0x07	; 7
     c4e:	b0 4b       	sbci	r27, 0xB0	; 176
     c50:	b9 f4       	brne	.+46     	; 0xc80 <__do_copy_data>
        reset_key = 0;
     c52:	10 92 e0 01 	sts	0x01E0, r1
     c56:	10 92 e1 01 	sts	0x01E1, r1
     c5a:	10 92 e2 01 	sts	0x01E2, r1
     c5e:	10 92 e3 01 	sts	0x01E3, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     c62:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     c64:	84 b7       	in	r24, 0x34	; 52
     c66:	87 7f       	andi	r24, 0xF7	; 247
     c68:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     c6a:	88 e1       	ldi	r24, 0x18	; 24
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	80 93 60 00 	sts	0x0060, r24
     c74:	10 92 60 00 	sts	0x0060, r1
     c78:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     c7a:	e0 e0       	ldi	r30, 0x00	; 0
     c7c:	f8 e3       	ldi	r31, 0x38	; 56
     c7e:	09 95       	icall

00000c80 <__do_copy_data>:
     c80:	11 e0       	ldi	r17, 0x01	; 1
     c82:	a0 e0       	ldi	r26, 0x00	; 0
     c84:	b1 e0       	ldi	r27, 0x01	; 1
     c86:	e8 ee       	ldi	r30, 0xE8	; 232
     c88:	f4 e5       	ldi	r31, 0x54	; 84
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <__do_copy_data+0x10>
     c8c:	05 90       	lpm	r0, Z+
     c8e:	0d 92       	st	X+, r0
     c90:	a8 33       	cpi	r26, 0x38	; 56
     c92:	b1 07       	cpc	r27, r17
     c94:	d9 f7       	brne	.-10     	; 0xc8c <__do_copy_data+0xc>

00000c96 <__do_clear_bss>:
     c96:	21 e0       	ldi	r18, 0x01	; 1
     c98:	a8 e3       	ldi	r26, 0x38	; 56
     c9a:	b1 e0       	ldi	r27, 0x01	; 1
     c9c:	01 c0       	rjmp	.+2      	; 0xca0 <.do_clear_bss_start>

00000c9e <.do_clear_bss_loop>:
     c9e:	1d 92       	st	X+, r1

00000ca0 <.do_clear_bss_start>:
     ca0:	a0 3e       	cpi	r26, 0xE0	; 224
     ca2:	b2 07       	cpc	r27, r18
     ca4:	e1 f7       	brne	.-8      	; 0xc9e <.do_clear_bss_loop>
     ca6:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <main>
     caa:	0c 94 72 2a 	jmp	0x54e4	; 0x54e4 <_exit>

00000cae <__bad_interrupt>:
     cae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000cb2 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     cb2:	ff 93       	push	r31
	push	ZL
     cb4:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     cb6:	e0 91 38 01 	lds	r30, 0x0138
	lds	ZH, xfunc_out+1	;/
     cba:	f0 91 39 01 	lds	r31, 0x0139
	sbiw	ZL, 0		;Skip if null
     cbe:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     cc0:	09 f0       	breq	.+2      	; 0xcc4 <xputc+0x12>
	icall
     cc2:	09 95       	icall
2:	pop	ZL
     cc4:	ef 91       	pop	r30
	pop	ZH
     cc6:	ff 91       	pop	r31
	ret
     cc8:	08 95       	ret

00000cca <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     cca:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     ccc:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     cce:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     cd0:	11 f0       	breq	.+4      	; 0xcd6 <xputs+0xc>
	rcall	xputc
     cd2:	ef df       	rcall	.-34     	; 0xcb2 <xputc>
	rjmp	1b
     cd4:	fb cf       	rjmp	.-10     	; 0xccc <xputs+0x2>
2:	ret
     cd6:	08 95       	ret

00000cd8 <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     cd8:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     cda:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     cdc:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     cde:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     ce0:	0c c0       	rjmp	.+24     	; 0xcfa <xitoa+0x22>
	neg	r20		;
     ce2:	41 95       	neg	r20
	sbrs	r25, 7		;
     ce4:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     ce6:	09 c0       	rjmp	.+18     	; 0xcfa <xitoa+0x22>
	ldi	r30, '-'	;
     ce8:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     cea:	60 95       	com	r22
	com	r23		;
     cec:	70 95       	com	r23
	com	r24		;
     cee:	80 95       	com	r24
	com	r25		;
     cf0:	90 95       	com	r25
	adc	r22, r1		;
     cf2:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     cf4:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     cf6:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     cf8:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     cfa:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <xitoa+0x2a>
	neg	r18		;
     cfe:	21 95       	neg	r18
	ldi	r19, '0'	;/
     d00:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     d02:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     d04:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     d06:	66 0f       	add	r22, r22
	rol	r23		;
     d08:	77 1f       	adc	r23, r23
	rol	r24		;
     d0a:	88 1f       	adc	r24, r24
	rol	r25		;
     d0c:	99 1f       	adc	r25, r25
	rol	r26		;
     d0e:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     d10:	a4 17       	cp	r26, r20
	brcs	3f		;
     d12:	10 f0       	brcs	.+4      	; 0xd18 <xitoa+0x40>
	sub	r26, r20	;
     d14:	a4 1b       	sub	r26, r20
	inc	r22		;
     d16:	63 95       	inc	r22
3:	dec	r21		;
     d18:	5a 95       	dec	r21
	brne	2b		;/
     d1a:	a9 f7       	brne	.-22     	; 0xd06 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     d1c:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     d1e:	08 f0       	brcs	.+2      	; 0xd22 <xitoa+0x4a>
	subi	r26, -7		;
     d20:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     d22:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     d24:	af 93       	push	r26
	inc	r31		;/
     d26:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     d28:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     d2a:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     d2c:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     d2e:	91 05       	cpc	r25, r1
	brne	1b		;/
     d30:	41 f7       	brne	.-48     	; 0xd02 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     d32:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     d34:	11 f4       	brne	.+4      	; 0xd3a <xitoa+0x62>
	push	r30		;
     d36:	ef 93       	push	r30
	inc	r31		;/
     d38:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     d3a:	f2 17       	cp	r31, r18
	brcc	6f		;
     d3c:	18 f4       	brcc	.+6      	; 0xd44 <xitoa+0x6c>
	push	r19		;
     d3e:	3f 93       	push	r19
	inc	r31		;
     d40:	f3 95       	inc	r31
	rjmp	5b		;/
     d42:	fb cf       	rjmp	.-10     	; 0xd3a <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     d44:	8f 91       	pop	r24
	rcall	xputc		;
     d46:	b5 df       	rcall	.-150    	; 0xcb2 <xputc>
	dec	r31		;
     d48:	fa 95       	dec	r31
	brne	6b		;/
     d4a:	e1 f7       	brne	.-8      	; 0xd44 <xitoa+0x6c>

	ret
     d4c:	08 95       	ret

00000d4e <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     d4e:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     d50:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     d52:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     d54:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     d56:	21 f0       	breq	.+8      	; 0xd60 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     d58:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     d5a:	19 f0       	breq	.+6      	; 0xd62 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     d5c:	aa df       	rcall	.-172    	; 0xcb2 <xputc>
	rjmp	0b		;/
     d5e:	f9 cf       	rjmp	.-14     	; 0xd52 <xvprintf+0x4>
90:	ret
     d60:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     d62:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     d64:	e8 94       	clt
	_LPMI	r21		;Get flags
     d66:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     d68:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     d6a:	c1 f3       	breq	.-16     	; 0xd5c <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     d6c:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     d6e:	11 f4       	brne	.+4      	; 0xd74 <xvprintf+0x26>
	set			;/
     d70:	68 94       	set
22:	_LPMI	r21		;Get width
     d72:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     d74:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     d76:	48 f4       	brcc	.+18     	; 0xd8a <xvprintf+0x3c>
	subi	r21, '0'	;
     d78:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     d7a:	90 f3       	brcs	.-28     	; 0xd60 <xvprintf+0x12>
	lsl	r18		;
     d7c:	22 0f       	add	r18, r18
	mov	r0, r18		;
     d7e:	02 2e       	mov	r0, r18
	lsl	r18		;
     d80:	22 0f       	add	r18, r18
	lsl	r18		;
     d82:	22 0f       	add	r18, r18
	add	r18, r0		;
     d84:	20 0d       	add	r18, r0
	add	r18, r21	;
     d86:	25 0f       	add	r18, r21
	rjmp	22b		;/
     d88:	f4 cf       	rjmp	.-24     	; 0xd72 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     d8a:	0e f4       	brtc	.+2      	; 0xd8e <xvprintf+0x40>
	neg	r18		;
     d8c:	21 95       	neg	r18
25:	ld	r24, Y+		;
     d8e:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     d90:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     d92:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     d94:	19 f3       	breq	.-58     	; 0xd5c <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     d96:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     d98:	29 f1       	breq	.+74     	; 0xde4 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     d9a:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     d9c:	59 f1       	breq	.+86     	; 0xdf4 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     d9e:	bc 01       	movw	r22, r24
	clr	r24		;
     da0:	88 27       	eor	r24, r24
	clr	r25		;
     da2:	99 27       	eor	r25, r25
	clt			;/
     da4:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     da6:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     da8:	21 f4       	brne	.+8      	; 0xdb2 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     daa:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     dac:	99 91       	ld	r25, Y+
	set			;
     dae:	68 94       	set
	_LPMI	r21		;/
     db0:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     db2:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     db4:	39 f4       	brne	.+14     	; 0xdc4 <xvprintf+0x76>
	ldi	r20, -10	;
     db6:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     db8:	7e f0       	brts	.+30     	; 0xdd8 <xvprintf+0x8a>
	sbrs	r23, 7		;
     dba:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     dbc:	0d c0       	rjmp	.+26     	; 0xdd8 <xvprintf+0x8a>
	ldi	r24, -1		;
     dbe:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     dc0:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     dc2:	0a c0       	rjmp	.+20     	; 0xdd8 <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     dc4:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     dc6:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     dc8:	39 f0       	breq	.+14     	; 0xdd8 <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     dca:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     dcc:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     dce:	21 f0       	breq	.+8      	; 0xdd8 <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     dd0:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     dd2:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <xvprintf+0x8a>
	ret			;abort
     dd6:	08 95       	ret
40:	push	ZH		;Output the value
     dd8:	ff 93       	push	r31
	push	ZL		;
     dda:	ef 93       	push	r30
	rcall	xitoa		;
     ddc:	7d df       	rcall	.-262    	; 0xcd8 <xitoa>
42:	pop	ZL		;
     dde:	ef 91       	pop	r30
	pop	ZH		;
     de0:	ff 91       	pop	r31
	rjmp	0b		;/
     de2:	b7 cf       	rjmp	.-146    	; 0xd52 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     de4:	ff 93       	push	r31
	push	ZL
     de6:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     de8:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     dea:	81 91       	ld	r24, Z+
	cpi	r24, 0
     dec:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     dee:	b9 f3       	breq	.-18     	; 0xdde <xvprintf+0x90>
	rcall	xputc
     df0:	60 df       	rcall	.-320    	; 0xcb2 <xputc>
	rjmp	51b
     df2:	fb cf       	rjmp	.-10     	; 0xdea <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     df4:	ff 93       	push	r31
	push	ZL
     df6:	ef 93       	push	r30
	rcall	xputs
     df8:	68 df       	rcall	.-304    	; 0xcca <xputs>
	rjmp	42b
     dfa:	f1 cf       	rjmp	.-30     	; 0xdde <xvprintf+0x90>

00000dfc <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     dfc:	df 93       	push	r29
	push	YL
     dfe:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     e00:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     e02:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     e04:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     e06:	a3 df       	rcall	.-186    	; 0xd4e <xvprintf>
	pop	YL
     e08:	cf 91       	pop	r28
	pop	YH
     e0a:	df 91       	pop	r29
	ret
     e0c:	08 95       	ret

00000e0e <keymap_key_to_keycode>:


/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
     e0e:	9c e0       	ldi	r25, 0x0C	; 12
     e10:	79 9f       	mul	r23, r25
     e12:	f0 01       	movw	r30, r0
     e14:	11 24       	eor	r1, r1
     e16:	90 e3       	ldi	r25, 0x30	; 48
     e18:	89 9f       	mul	r24, r25
     e1a:	e0 0d       	add	r30, r0
     e1c:	f1 1d       	adc	r31, r1
     e1e:	11 24       	eor	r1, r1
     e20:	e6 0f       	add	r30, r22
     e22:	f1 1d       	adc	r31, r1
     e24:	ea 51       	subi	r30, 0x1A	; 26
     e26:	ff 4f       	sbci	r31, 0xFF	; 255
     e28:	84 91       	lpm	r24, Z
}
     e2a:	08 95       	ret

00000e2c <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
     e2c:	e8 2f       	mov	r30, r24
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	ee 0f       	add	r30, r30
     e32:	ff 1f       	adc	r31, r31
     e34:	e0 5a       	subi	r30, 0xA0	; 160
     e36:	f0 40       	sbci	r31, 0x00	; 0
}
     e38:	85 91       	lpm	r24, Z+
     e3a:	94 91       	lpm	r25, Z
     e3c:	08 95       	ret

00000e3e <unselect_rows>:
 * pin: F0  F1  F4  F5 
 */
static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRF  &= ~0b00110011;
     e3e:	80 b3       	in	r24, 0x10	; 16
     e40:	8c 7c       	andi	r24, 0xCC	; 204
     e42:	80 bb       	out	0x10, r24	; 16
    PORTF &= ~0b00110011;
     e44:	81 b3       	in	r24, 0x11	; 17
     e46:	8c 7c       	andi	r24, 0xCC	; 204
     e48:	81 bb       	out	0x11, r24	; 17
     e4a:	08 95       	ret

00000e4c <matrix_init>:
}

void matrix_init(void)
{
    // initialize row and col
    unselect_rows();
     e4c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <unselect_rows>
 * pin: F6  F7  B6  B5  B4  D7  C7  C6  D3  D2  D1  D0  
 */
static void  init_cols(void)
{
    // Input with pull-up(DDR:0, PORT:1)
    DDRF  &= ~(1<<6 | 1<<7);
     e50:	80 b3       	in	r24, 0x10	; 16
     e52:	8f 73       	andi	r24, 0x3F	; 63
     e54:	80 bb       	out	0x10, r24	; 16
    PORTF |=  (1<<6 | 1<<7);
     e56:	81 b3       	in	r24, 0x11	; 17
     e58:	80 6c       	ori	r24, 0xC0	; 192
     e5a:	81 bb       	out	0x11, r24	; 17
    DDRB  &= ~(1<<7 | 1<<6 | 1<< 5 | 1<<4);
     e5c:	84 b1       	in	r24, 0x04	; 4
     e5e:	8f 70       	andi	r24, 0x0F	; 15
     e60:	84 b9       	out	0x04, r24	; 4
    PORTB |=  (1<<6 | 1<<5 | 1<<4);
     e62:	85 b1       	in	r24, 0x05	; 5
     e64:	80 67       	ori	r24, 0x70	; 112
     e66:	85 b9       	out	0x05, r24	; 5
    DDRD  &= ~(1<<7 | 1<<3 | 1<<2| 1<<1 | 1<<0 );
     e68:	8a b1       	in	r24, 0x0a	; 10
     e6a:	80 77       	andi	r24, 0x70	; 112
     e6c:	8a b9       	out	0x0a, r24	; 10
    PORTD |=  (1<<7 | 1<<3 | 1<<2| 1<<1 | 1<<0 );
     e6e:	8b b1       	in	r24, 0x0b	; 11
     e70:	8f 68       	ori	r24, 0x8F	; 143
     e72:	8b b9       	out	0x0b, r24	; 11
    DDRC  &= ~(1<<7 | 1<<6);
     e74:	87 b1       	in	r24, 0x07	; 7
     e76:	8f 73       	andi	r24, 0x3F	; 63
     e78:	87 b9       	out	0x07, r24	; 7
    PORTC |=  (1<<7 | 1<<6);
     e7a:	88 b1       	in	r24, 0x08	; 8
     e7c:	80 6c       	ori	r24, 0xC0	; 192
     e7e:	88 b9       	out	0x08, r24	; 8
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     e80:	10 92 43 01 	sts	0x0143, r1
     e84:	10 92 42 01 	sts	0x0142, r1
        matrix_debouncing[i] = 0;
     e88:	10 92 3b 01 	sts	0x013B, r1
     e8c:	10 92 3a 01 	sts	0x013A, r1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     e90:	10 92 45 01 	sts	0x0145, r1
     e94:	10 92 44 01 	sts	0x0144, r1
        matrix_debouncing[i] = 0;
     e98:	10 92 3d 01 	sts	0x013D, r1
     e9c:	10 92 3c 01 	sts	0x013C, r1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     ea0:	10 92 47 01 	sts	0x0147, r1
     ea4:	10 92 46 01 	sts	0x0146, r1
        matrix_debouncing[i] = 0;
     ea8:	10 92 3f 01 	sts	0x013F, r1
     eac:	10 92 3e 01 	sts	0x013E, r1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     eb0:	10 92 49 01 	sts	0x0149, r1
     eb4:	10 92 48 01 	sts	0x0148, r1
        matrix_debouncing[i] = 0;
     eb8:	10 92 41 01 	sts	0x0141, r1
     ebc:	10 92 40 01 	sts	0x0140, r1
     ec0:	08 95       	ret

00000ec2 <matrix_scan>:
    }
}

uint8_t matrix_scan(void)
{
     ec2:	bf 92       	push	r11
     ec4:	cf 92       	push	r12
     ec6:	df 92       	push	r13
     ec8:	ef 92       	push	r14
     eca:	ff 92       	push	r15
     ecc:	0f 93       	push	r16
     ece:	1f 93       	push	r17
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	ca e3       	ldi	r28, 0x3A	; 58
     ed6:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     ed8:	d1 2c       	mov	r13, r1
    PORTC |=  (1<<7 | 1<<6);
}

static matrix_row_t read_cols(void)
{
    return (PINF&(1<<6) ? 0 : (1<<0)) |
     eda:	cc 24       	eor	r12, r12
     edc:	c3 94       	inc	r12
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
            }
            debouncing = DEBOUNCE;
     ede:	a5 e0       	ldi	r26, 0x05	; 5
     ee0:	ba 2e       	mov	r11, r26
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
     ee2:	bf ec       	ldi	r27, 0xCF	; 207
     ee4:	eb 2e       	mov	r14, r27
     ee6:	b1 e0       	ldi	r27, 0x01	; 1
     ee8:	fb 2e       	mov	r15, r27
}

static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
    switch (row) {
     eea:	82 e0       	ldi	r24, 0x02	; 2
     eec:	d8 16       	cp	r13, r24
     eee:	61 f0       	breq	.+24     	; 0xf08 <matrix_scan+0x46>
     ef0:	93 e0       	ldi	r25, 0x03	; 3
     ef2:	d9 16       	cp	r13, r25
     ef4:	61 f0       	breq	.+24     	; 0xf0e <matrix_scan+0x4c>
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	d8 16       	cp	r13, r24
     efa:	19 f0       	breq	.+6      	; 0xf02 <matrix_scan+0x40>
        case 0:
            DDRF  |= (1<<0);
     efc:	80 9a       	sbi	0x10, 0	; 16
            PORTF &= ~(1<<0);
     efe:	88 98       	cbi	0x11, 0	; 17
     f00:	08 c0       	rjmp	.+16     	; 0xf12 <matrix_scan+0x50>
            break;
        case 1:
            DDRF  |= (1<<1);
     f02:	81 9a       	sbi	0x10, 1	; 16
            PORTF &= ~(1<<1);
     f04:	89 98       	cbi	0x11, 1	; 17
     f06:	05 c0       	rjmp	.+10     	; 0xf12 <matrix_scan+0x50>
            break;
        case 2:
            DDRF  |= (1<<4);
     f08:	84 9a       	sbi	0x10, 4	; 16
            PORTF &= ~(1<<4);
     f0a:	8c 98       	cbi	0x11, 4	; 17
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <matrix_scan+0x50>
            break;
        case 3:
            DDRF  |= (1<<5);
     f0e:	85 9a       	sbi	0x10, 5	; 16
            PORTF &= ~(1<<5);
     f10:	8d 98       	cbi	0x11, 5	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f12:	90 ea       	ldi	r25, 0xA0	; 160
     f14:	9a 95       	dec	r25
     f16:	f1 f7       	brne	.-4      	; 0xf14 <matrix_scan+0x52>
    PORTC |=  (1<<7 | 1<<6);
}

static matrix_row_t read_cols(void)
{
    return (PINF&(1<<6) ? 0 : (1<<0)) |
     f18:	8f b1       	in	r24, 0x0f	; 15
     f1a:	82 95       	swap	r24
     f1c:	86 95       	lsr	r24
     f1e:	86 95       	lsr	r24
     f20:	83 70       	andi	r24, 0x03	; 3
     f22:	8c 25       	eor	r24, r12
     f24:	08 2f       	mov	r16, r24
     f26:	01 70       	andi	r16, 0x01	; 1
     f28:	10 e0       	ldi	r17, 0x00	; 0
           (PINF&(1<<7) ? 0 : (1<<1)) |
     f2a:	8f b1       	in	r24, 0x0f	; 15
     f2c:	99 27       	eor	r25, r25
     f2e:	87 fd       	sbrc	r24, 7
     f30:	90 95       	com	r25
     f32:	80 95       	com	r24
     f34:	90 95       	com	r25
     f36:	88 27       	eor	r24, r24
     f38:	99 0f       	add	r25, r25
     f3a:	88 1f       	adc	r24, r24
     f3c:	99 27       	eor	r25, r25
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
    PORTC |=  (1<<7 | 1<<6);
}

static matrix_row_t read_cols(void)
{
    return (PINF&(1<<6) ? 0 : (1<<0)) |
     f42:	80 2b       	or	r24, r16
     f44:	91 2b       	or	r25, r17
           (PINF&(1<<7) ? 0 : (1<<1)) |
           (PINB&(1<<6) ? 0 : (1<<2)) |
     f46:	1e 9b       	sbis	0x03, 6	; 3
     f48:	03 c0       	rjmp	.+6      	; 0xf50 <matrix_scan+0x8e>
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <matrix_scan+0x92>
     f50:	24 e0       	ldi	r18, 0x04	; 4
     f52:	30 e0       	ldi	r19, 0x00	; 0
}

static matrix_row_t read_cols(void)
{
    return (PINF&(1<<6) ? 0 : (1<<0)) |
           (PINF&(1<<7) ? 0 : (1<<1)) |
     f54:	82 2b       	or	r24, r18
     f56:	93 2b       	or	r25, r19
           (PINB&(1<<6) ? 0 : (1<<2)) |
           (PINB&(1<<5) ? 0 : (1<<3)) |
     f58:	1d 9b       	sbis	0x03, 5	; 3
     f5a:	03 c0       	rjmp	.+6      	; 0xf62 <matrix_scan+0xa0>
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <matrix_scan+0xa4>
     f62:	28 e0       	ldi	r18, 0x08	; 8
     f64:	30 e0       	ldi	r19, 0x00	; 0

static matrix_row_t read_cols(void)
{
    return (PINF&(1<<6) ? 0 : (1<<0)) |
           (PINF&(1<<7) ? 0 : (1<<1)) |
           (PINB&(1<<6) ? 0 : (1<<2)) |
     f66:	82 2b       	or	r24, r18
     f68:	93 2b       	or	r25, r19
           (PINB&(1<<5) ? 0 : (1<<3)) |
           (PINB&(1<<4) ? 0 : (1<<4)) |
     f6a:	1c 9b       	sbis	0x03, 4	; 3
     f6c:	03 c0       	rjmp	.+6      	; 0xf74 <matrix_scan+0xb2>
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <matrix_scan+0xb6>
     f74:	20 e1       	ldi	r18, 0x10	; 16
     f76:	30 e0       	ldi	r19, 0x00	; 0
static matrix_row_t read_cols(void)
{
    return (PINF&(1<<6) ? 0 : (1<<0)) |
           (PINF&(1<<7) ? 0 : (1<<1)) |
           (PINB&(1<<6) ? 0 : (1<<2)) |
           (PINB&(1<<5) ? 0 : (1<<3)) |
     f78:	82 2b       	or	r24, r18
     f7a:	93 2b       	or	r25, r19
           (PINB&(1<<4) ? 0 : (1<<4)) |
           (PIND&(1<<7) ? 0 : (1<<5)) |
     f7c:	29 b1       	in	r18, 0x09	; 9
     f7e:	33 27       	eor	r19, r19
     f80:	27 fd       	sbrc	r18, 7
     f82:	30 95       	com	r19
     f84:	20 95       	com	r18
     f86:	30 95       	com	r19
     f88:	22 27       	eor	r18, r18
     f8a:	33 0f       	add	r19, r19
     f8c:	22 1f       	adc	r18, r18
     f8e:	33 27       	eor	r19, r19
     f90:	55 e0       	ldi	r21, 0x05	; 5
     f92:	22 0f       	add	r18, r18
     f94:	33 1f       	adc	r19, r19
     f96:	5a 95       	dec	r21
     f98:	e1 f7       	brne	.-8      	; 0xf92 <matrix_scan+0xd0>
{
    return (PINF&(1<<6) ? 0 : (1<<0)) |
           (PINF&(1<<7) ? 0 : (1<<1)) |
           (PINB&(1<<6) ? 0 : (1<<2)) |
           (PINB&(1<<5) ? 0 : (1<<3)) |
           (PINB&(1<<4) ? 0 : (1<<4)) |
     f9a:	82 2b       	or	r24, r18
     f9c:	93 2b       	or	r25, r19
           (PIND&(1<<7) ? 0 : (1<<5)) |
           (PINC&(1<<7) ? 0 : (1<<6)) |
     f9e:	26 b1       	in	r18, 0x06	; 6
     fa0:	33 27       	eor	r19, r19
     fa2:	27 fd       	sbrc	r18, 7
     fa4:	30 95       	com	r19
     fa6:	20 95       	com	r18
     fa8:	30 95       	com	r19
     faa:	22 27       	eor	r18, r18
     fac:	33 0f       	add	r19, r19
     fae:	22 1f       	adc	r18, r18
     fb0:	33 27       	eor	r19, r19
     fb2:	76 e0       	ldi	r23, 0x06	; 6
     fb4:	22 0f       	add	r18, r18
     fb6:	33 1f       	adc	r19, r19
     fb8:	7a 95       	dec	r23
     fba:	e1 f7       	brne	.-8      	; 0xfb4 <matrix_scan+0xf2>
    return (PINF&(1<<6) ? 0 : (1<<0)) |
           (PINF&(1<<7) ? 0 : (1<<1)) |
           (PINB&(1<<6) ? 0 : (1<<2)) |
           (PINB&(1<<5) ? 0 : (1<<3)) |
           (PINB&(1<<4) ? 0 : (1<<4)) |
           (PIND&(1<<7) ? 0 : (1<<5)) |
     fbc:	82 2b       	or	r24, r18
     fbe:	93 2b       	or	r25, r19
           (PINC&(1<<7) ? 0 : (1<<6)) |
           (PINC&(1<<6) ? 0 : (1<<7)) |
     fc0:	36 9b       	sbis	0x06, 6	; 6
     fc2:	03 c0       	rjmp	.+6      	; 0xfca <matrix_scan+0x108>
     fc4:	60 e0       	ldi	r22, 0x00	; 0
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <matrix_scan+0x10c>
     fca:	60 e8       	ldi	r22, 0x80	; 128
     fcc:	70 e0       	ldi	r23, 0x00	; 0
           (PINF&(1<<7) ? 0 : (1<<1)) |
           (PINB&(1<<6) ? 0 : (1<<2)) |
           (PINB&(1<<5) ? 0 : (1<<3)) |
           (PINB&(1<<4) ? 0 : (1<<4)) |
           (PIND&(1<<7) ? 0 : (1<<5)) |
           (PINC&(1<<7) ? 0 : (1<<6)) |
     fce:	86 2b       	or	r24, r22
     fd0:	97 2b       	or	r25, r23
           (PINC&(1<<6) ? 0 : (1<<7)) |
           (PIND&(1<<3) ? 0 : (1<<8)) |
     fd2:	4b 9b       	sbis	0x09, 3	; 9
     fd4:	03 c0       	rjmp	.+6      	; 0xfdc <matrix_scan+0x11a>
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	70 e0       	ldi	r23, 0x00	; 0
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <matrix_scan+0x11e>
     fdc:	60 e0       	ldi	r22, 0x00	; 0
     fde:	71 e0       	ldi	r23, 0x01	; 1
           (PINB&(1<<6) ? 0 : (1<<2)) |
           (PINB&(1<<5) ? 0 : (1<<3)) |
           (PINB&(1<<4) ? 0 : (1<<4)) |
           (PIND&(1<<7) ? 0 : (1<<5)) |
           (PINC&(1<<7) ? 0 : (1<<6)) |
           (PINC&(1<<6) ? 0 : (1<<7)) |
     fe0:	86 2b       	or	r24, r22
     fe2:	97 2b       	or	r25, r23
           (PIND&(1<<3) ? 0 : (1<<8)) |
           (PIND&(1<<2) ? 0 : (1<<9)) |
     fe4:	4a 9b       	sbis	0x09, 2	; 9
     fe6:	03 c0       	rjmp	.+6      	; 0xfee <matrix_scan+0x12c>
     fe8:	40 e0       	ldi	r20, 0x00	; 0
     fea:	50 e0       	ldi	r21, 0x00	; 0
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <matrix_scan+0x130>
     fee:	40 e0       	ldi	r20, 0x00	; 0
     ff0:	52 e0       	ldi	r21, 0x02	; 2
           (PINB&(1<<5) ? 0 : (1<<3)) |
           (PINB&(1<<4) ? 0 : (1<<4)) |
           (PIND&(1<<7) ? 0 : (1<<5)) |
           (PINC&(1<<7) ? 0 : (1<<6)) |
           (PINC&(1<<6) ? 0 : (1<<7)) |
           (PIND&(1<<3) ? 0 : (1<<8)) |
     ff2:	84 2b       	or	r24, r20
     ff4:	95 2b       	or	r25, r21
           (PIND&(1<<2) ? 0 : (1<<9)) |
           (PIND&(1<<1) ? 0 : (1<<10)) |
     ff6:	49 9b       	sbis	0x09, 1	; 9
     ff8:	03 c0       	rjmp	.+6      	; 0x1000 <matrix_scan+0x13e>
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <matrix_scan+0x142>
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	34 e0       	ldi	r19, 0x04	; 4
           (PINB&(1<<4) ? 0 : (1<<4)) |
           (PIND&(1<<7) ? 0 : (1<<5)) |
           (PINC&(1<<7) ? 0 : (1<<6)) |
           (PINC&(1<<6) ? 0 : (1<<7)) |
           (PIND&(1<<3) ? 0 : (1<<8)) |
           (PIND&(1<<2) ? 0 : (1<<9)) |
    1004:	82 2b       	or	r24, r18
    1006:	93 2b       	or	r25, r19
           (PIND&(1<<1) ? 0 : (1<<10)) |
           (PIND&(1<<0) ? 0 : (1<<11)) ;
    1008:	48 9b       	sbis	0x09, 0	; 9
    100a:	03 c0       	rjmp	.+6      	; 0x1012 <matrix_scan+0x150>
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <matrix_scan+0x154>
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	38 e0       	ldi	r19, 0x08	; 8
           (PIND&(1<<7) ? 0 : (1<<5)) |
           (PINC&(1<<7) ? 0 : (1<<6)) |
           (PINC&(1<<6) ? 0 : (1<<7)) |
           (PIND&(1<<3) ? 0 : (1<<8)) |
           (PIND&(1<<2) ? 0 : (1<<9)) |
           (PIND&(1<<1) ? 0 : (1<<10)) |
    1016:	82 2b       	or	r24, r18
    1018:	93 2b       	or	r25, r19
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
    101a:	28 81       	ld	r18, Y
    101c:	39 81       	ldd	r19, Y+1	; 0x01
    101e:	28 17       	cp	r18, r24
    1020:	39 07       	cpc	r19, r25
    1022:	41 f1       	breq	.+80     	; 0x1074 <matrix_scan+0x1b2>
            matrix_debouncing[i] = cols;
    1024:	99 83       	std	Y+1, r25	; 0x01
    1026:	88 83       	st	Y, r24
            if (debouncing) {
    1028:	80 91 00 01 	lds	r24, 0x0100
    102c:	88 23       	and	r24, r24
    102e:	01 f1       	breq	.+64     	; 0x1070 <matrix_scan+0x1ae>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    1030:	80 91 c1 01 	lds	r24, 0x01C1
    1034:	80 ff       	sbrs	r24, 0
    1036:	04 c0       	rjmp	.+8      	; 0x1040 <matrix_scan+0x17e>
    1038:	84 ed       	ldi	r24, 0xD4	; 212
    103a:	91 e0       	ldi	r25, 0x01	; 1
    103c:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    1040:	80 91 c1 01 	lds	r24, 0x01C1
    1044:	80 ff       	sbrs	r24, 0
    1046:	0c c0       	rjmp	.+24     	; 0x1060 <matrix_scan+0x19e>
    1048:	80 91 00 01 	lds	r24, 0x0100
    104c:	1f 92       	push	r1
    104e:	8f 93       	push	r24
    1050:	ff 92       	push	r15
    1052:	ef 92       	push	r14
    1054:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	80 91 c1 01 	lds	r24, 0x01C1
    1064:	80 ff       	sbrs	r24, 0
    1066:	04 c0       	rjmp	.+8      	; 0x1070 <matrix_scan+0x1ae>
    1068:	8d ec       	ldi	r24, 0xCD	; 205
    106a:	91 e0       	ldi	r25, 0x01	; 1
    106c:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
            }
            debouncing = DEBOUNCE;
    1070:	b0 92 00 01 	sts	0x0100, r11
        }
        unselect_rows();
    1074:	0e 94 1f 07 	call	0xe3e	; 0xe3e <unselect_rows>
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    1078:	d3 94       	inc	r13
    107a:	22 96       	adiw	r28, 0x02	; 2
    107c:	84 e0       	ldi	r24, 0x04	; 4
    107e:	d8 12       	cpse	r13, r24
    1080:	34 cf       	rjmp	.-408    	; 0xeea <matrix_scan+0x28>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
    1082:	80 91 00 01 	lds	r24, 0x0100
    1086:	88 23       	and	r24, r24
    1088:	61 f1       	breq	.+88     	; 0x10e2 <matrix_scan+0x220>
        if (--debouncing) {
    108a:	81 50       	subi	r24, 0x01	; 1
    108c:	80 93 00 01 	sts	0x0100, r24
    1090:	88 23       	and	r24, r24
    1092:	39 f0       	breq	.+14     	; 0x10a2 <matrix_scan+0x1e0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1094:	8f e9       	ldi	r24, 0x9F	; 159
    1096:	9f e0       	ldi	r25, 0x0F	; 15
    1098:	01 97       	sbiw	r24, 0x01	; 1
    109a:	f1 f7       	brne	.-4      	; 0x1098 <matrix_scan+0x1d6>
    109c:	00 c0       	rjmp	.+0      	; 0x109e <matrix_scan+0x1dc>
    109e:	00 00       	nop
    10a0:	20 c0       	rjmp	.+64     	; 0x10e2 <matrix_scan+0x220>
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
    10a2:	80 91 3a 01 	lds	r24, 0x013A
    10a6:	90 91 3b 01 	lds	r25, 0x013B
    10aa:	90 93 43 01 	sts	0x0143, r25
    10ae:	80 93 42 01 	sts	0x0142, r24
    10b2:	80 91 3c 01 	lds	r24, 0x013C
    10b6:	90 91 3d 01 	lds	r25, 0x013D
    10ba:	90 93 45 01 	sts	0x0145, r25
    10be:	80 93 44 01 	sts	0x0144, r24
    10c2:	80 91 3e 01 	lds	r24, 0x013E
    10c6:	90 91 3f 01 	lds	r25, 0x013F
    10ca:	90 93 47 01 	sts	0x0147, r25
    10ce:	80 93 46 01 	sts	0x0146, r24
    10d2:	80 91 40 01 	lds	r24, 0x0140
    10d6:	90 91 41 01 	lds	r25, 0x0141
    10da:	90 93 49 01 	sts	0x0149, r25
    10de:	80 93 48 01 	sts	0x0148, r24
            }
        }
    }

    return 1;
}
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	1f 91       	pop	r17
    10ea:	0f 91       	pop	r16
    10ec:	ff 90       	pop	r15
    10ee:	ef 90       	pop	r14
    10f0:	df 90       	pop	r13
    10f2:	cf 90       	pop	r12
    10f4:	bf 90       	pop	r11
    10f6:	08 95       	ret

000010f8 <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    10f8:	e8 2f       	mov	r30, r24
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	ee 0f       	add	r30, r30
    10fe:	ff 1f       	adc	r31, r31
    1100:	ee 5b       	subi	r30, 0xBE	; 190
    1102:	fe 4f       	sbci	r31, 0xFE	; 254
}
    1104:	80 81       	ld	r24, Z
    1106:	91 81       	ldd	r25, Z+1	; 0x01
    1108:	08 95       	ret

0000110a <matrix_print>:

void matrix_print(void)
{
    110a:	cf 92       	push	r12
    110c:	df 92       	push	r13
    110e:	ef 92       	push	r14
    1110:	ff 92       	push	r15
    1112:	0f 93       	push	r16
    1114:	1f 93       	push	r17
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
    111a:	86 eb       	ldi	r24, 0xB6	; 182
    111c:	91 e0       	ldi	r25, 0x01	; 1
    111e:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    1122:	22 e4       	ldi	r18, 0x42	; 66
    1124:	e2 2e       	mov	r14, r18
    1126:	21 e0       	ldi	r18, 0x01	; 1
    1128:	f2 2e       	mov	r15, r18
    112a:	c0 e0       	ldi	r28, 0x00	; 0
    112c:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    112e:	31 eb       	ldi	r19, 0xB1	; 177
    1130:	c3 2e       	mov	r12, r19
    1132:	31 e0       	ldi	r19, 0x01	; 1
    1134:	d3 2e       	mov	r13, r19
        pbin_reverse16(matrix_get_row(row));
    1136:	08 ea       	ldi	r16, 0xA8	; 168
    1138:	11 e0       	ldi	r17, 0x01	; 1

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	df 92       	push	r13
    1140:	cf 92       	push	r12
    1142:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    1146:	8e ea       	ldi	r24, 0xAE	; 174
    1148:	91 e0       	ldi	r25, 0x01	; 1
    114a:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
        pbin_reverse16(matrix_get_row(row));
    114e:	f7 01       	movw	r30, r14
    1150:	81 91       	ld	r24, Z+
    1152:	91 91       	ld	r25, Z+
    1154:	7f 01       	movw	r14, r30
    1156:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <bitrev16>
    115a:	9f 93       	push	r25
    115c:	8f 93       	push	r24
    115e:	1f 93       	push	r17
    1160:	0f 93       	push	r16
    1162:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
        print("\n");
    1166:	86 ea       	ldi	r24, 0xA6	; 166
    1168:	91 e0       	ldi	r25, 0x01	; 1
    116a:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    116e:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    1170:	8d b7       	in	r24, 0x3d	; 61
    1172:	9e b7       	in	r25, 0x3e	; 62
    1174:	08 96       	adiw	r24, 0x08	; 8
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	9e bf       	out	0x3e, r25	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	8d bf       	out	0x3d, r24	; 61
    1180:	c4 30       	cpi	r28, 0x04	; 4
    1182:	d1 05       	cpc	r29, r1
    1184:	d1 f6       	brne	.-76     	; 0x113a <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	1f 91       	pop	r17
    118c:	0f 91       	pop	r16
    118e:	ff 90       	pop	r15
    1190:	ef 90       	pop	r14
    1192:	df 90       	pop	r13
    1194:	cf 90       	pop	r12
    1196:	08 95       	ret

00001198 <led_set>:
#include "led.h"


void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
    1198:	81 ff       	sbrs	r24, 1
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <led_set+0x8>
        // output low
        DDRB |= (1<<2);
    119c:	22 9a       	sbi	0x04, 2	; 4
    119e:	01 c0       	rjmp	.+2      	; 0x11a2 <led_set+0xa>
        PORTB &= ~(1<<2);
    } else {
        // Hi-Z
        DDRB &= ~(1<<2);
    11a0:	22 98       	cbi	0x04, 2	; 4
        PORTB &= ~(1<<2);
    11a2:	2a 98       	cbi	0x05, 2	; 5
    11a4:	08 95       	ret

000011a6 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    11a6:	80 91 5d 01 	lds	r24, 0x015D
    11aa:	08 95       	ret

000011ac <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    11ac:	9f b7       	in	r25, 0x3f	; 63
    11ae:	f8 94       	cli
    11b0:	10 92 4c 01 	sts	0x014C, r1
    11b4:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    11b6:	90 91 d6 01 	lds	r25, 0x01D6
    11ba:	94 30       	cpi	r25, 0x04	; 4
    11bc:	09 f0       	breq	.+2      	; 0x11c0 <sendchar+0x14>
    11be:	58 c0       	rjmp	.+176    	; 0x1270 <sendchar+0xc4>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    11c0:	90 91 e9 00 	lds	r25, 0x00E9
    11c4:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    11c6:	20 91 ec 00 	lds	r18, 0x00EC
    11ca:	20 ff       	sbrs	r18, 0
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <sendchar+0x26>
    11ce:	20 e8       	ldi	r18, 0x80	; 128
    11d0:	01 c0       	rjmp	.+2      	; 0x11d4 <sendchar+0x28>
    11d2:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    11d4:	29 2b       	or	r18, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11d6:	94 e0       	ldi	r25, 0x04	; 4
    11d8:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    11dc:	90 91 eb 00 	lds	r25, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    11e0:	90 ff       	sbrs	r25, 0
    11e2:	43 c0       	rjmp	.+134    	; 0x126a <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    11e4:	90 91 ee 00 	lds	r25, 0x00EE
    11e8:	97 ff       	sbrs	r25, 7
    11ea:	3f c0       	rjmp	.+126    	; 0x126a <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    11ec:	90 91 4a 01 	lds	r25, 0x014A
    11f0:	99 23       	and	r25, r25
    11f2:	21 f0       	breq	.+8      	; 0x11fc <sendchar+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    11f4:	90 91 e8 00 	lds	r25, 0x00E8
    11f8:	95 ff       	sbrs	r25, 5
    11fa:	37 c0       	rjmp	.+110    	; 0x126a <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    timeouted = false;
    11fc:	10 92 4a 01 	sts	0x014A, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    1200:	96 e0       	ldi	r25, 0x06	; 6
    1202:	30 91 e8 00 	lds	r19, 0x00E8
    1206:	35 fd       	sbrc	r19, 5
    1208:	15 c0       	rjmp	.+42     	; 0x1234 <sendchar+0x88>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    120a:	30 91 d6 01 	lds	r19, 0x01D6
    120e:	34 30       	cpi	r19, 0x04	; 4
    1210:	61 f5       	brne	.+88     	; 0x126a <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1212:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    1216:	35 fd       	sbrc	r19, 5
    1218:	28 c0       	rjmp	.+80     	; 0x126a <sendchar+0xbe>
    121a:	91 50       	subi	r25, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    121c:	21 f4       	brne	.+8      	; 0x1226 <sendchar+0x7a>
            timeouted = true;
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	80 93 4a 01 	sts	0x014A, r24
            goto ERROR_EXIT;
    1224:	22 c0       	rjmp	.+68     	; 0x126a <sendchar+0xbe>
    1226:	ef e9       	ldi	r30, 0x9F	; 159
    1228:	ff e0       	ldi	r31, 0x0F	; 15
    122a:	31 97       	sbiw	r30, 0x01	; 1
    122c:	f1 f7       	brne	.-4      	; 0x122a <sendchar+0x7e>
    122e:	00 c0       	rjmp	.+0      	; 0x1230 <sendchar+0x84>
    1230:	00 00       	nop
    1232:	e7 cf       	rjmp	.-50     	; 0x1202 <sendchar+0x56>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1234:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1238:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    123c:	85 fd       	sbrc	r24, 5
    123e:	0a c0       	rjmp	.+20     	; 0x1254 <sendchar+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1240:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
    1244:	80 ff       	sbrs	r24, 0
    1246:	fc cf       	rjmp	.-8      	; 0x1240 <sendchar+0x94>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1248:	80 91 e8 00 	lds	r24, 0x00E8
    124c:	8e 77       	andi	r24, 0x7E	; 126
    124e:	80 93 e8 00 	sts	0x00E8, r24
    1252:	06 c0       	rjmp	.+12     	; 0x1260 <sendchar+0xb4>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
    1254:	8f b7       	in	r24, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	91 e0       	ldi	r25, 0x01	; 1
    125a:	90 93 4c 01 	sts	0x014C, r25
    125e:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1260:	2f 70       	andi	r18, 0x0F	; 15
    1262:	20 93 e9 00 	sts	0x00E9, r18
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	08 95       	ret
    126a:	2f 70       	andi	r18, 0x0F	; 15
    126c:	20 93 e9 00 	sts	0x00E9, r18
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    1270:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    1272:	08 95       	ret

00001274 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	00 d0       	rcall	.+0      	; 0x127a <send_consumer+0x6>
    127a:	1f 92       	push	r1
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1280:	20 91 d6 01 	lds	r18, 0x01D6
    1284:	24 30       	cpi	r18, 0x04	; 4
    1286:	19 f5       	brne	.+70     	; 0x12ce <send_consumer+0x5a>
        return;

    report_extra_t r = {
    1288:	23 e0       	ldi	r18, 0x03	; 3
    128a:	29 83       	std	Y+1, r18	; 0x01
    128c:	9b 83       	std	Y+3, r25	; 0x03
    128e:	8a 83       	std	Y+2, r24	; 0x02
    1290:	20 93 e9 00 	sts	0x00E9, r18
    1294:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1296:	90 91 e8 00 	lds	r25, 0x00E8
    129a:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    129c:	95 fd       	sbrc	r25, 5
    129e:	06 c0       	rjmp	.+12     	; 0x12ac <send_consumer+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12a0:	95 ed       	ldi	r25, 0xD5	; 213
    12a2:	9a 95       	dec	r25
    12a4:	f1 f7       	brne	.-4      	; 0x12a2 <send_consumer+0x2e>
    12a6:	00 00       	nop
    12a8:	81 11       	cpse	r24, r1
    12aa:	f5 cf       	rjmp	.-22     	; 0x1296 <send_consumer+0x22>
    12ac:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    12b0:	85 ff       	sbrs	r24, 5
    12b2:	0d c0       	rjmp	.+26     	; 0x12ce <send_consumer+0x5a>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    12b4:	40 e0       	ldi	r20, 0x00	; 0
    12b6:	50 e0       	ldi	r21, 0x00	; 0
    12b8:	63 e0       	ldi	r22, 0x03	; 3
    12ba:	70 e0       	ldi	r23, 0x00	; 0
    12bc:	ce 01       	movw	r24, r28
    12be:	01 96       	adiw	r24, 0x01	; 1
    12c0:	0e 94 12 0c 	call	0x1824	; 0x1824 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12c4:	80 91 e8 00 	lds	r24, 0x00E8
    12c8:	8e 77       	andi	r24, 0x7E	; 126
    12ca:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	08 95       	ret

000012da <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	00 d0       	rcall	.+0      	; 0x12e0 <send_system+0x6>
    12e0:	1f 92       	push	r1
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    12e6:	20 91 d6 01 	lds	r18, 0x01D6
    12ea:	24 30       	cpi	r18, 0x04	; 4
    12ec:	21 f5       	brne	.+72     	; 0x1336 <send_system+0x5c>
        return;

    report_extra_t r = {
    12ee:	22 e0       	ldi	r18, 0x02	; 2
    12f0:	29 83       	std	Y+1, r18	; 0x01
    12f2:	9b 83       	std	Y+3, r25	; 0x03
    12f4:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12f6:	83 e0       	ldi	r24, 0x03	; 3
    12f8:	80 93 e9 00 	sts	0x00E9, r24
    12fc:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    12fe:	90 91 e8 00 	lds	r25, 0x00E8
    1302:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1304:	95 fd       	sbrc	r25, 5
    1306:	06 c0       	rjmp	.+12     	; 0x1314 <send_system+0x3a>
    1308:	95 ed       	ldi	r25, 0xD5	; 213
    130a:	9a 95       	dec	r25
    130c:	f1 f7       	brne	.-4      	; 0x130a <send_system+0x30>
    130e:	00 00       	nop
    1310:	81 11       	cpse	r24, r1
    1312:	f5 cf       	rjmp	.-22     	; 0x12fe <send_system+0x24>
    1314:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1318:	85 ff       	sbrs	r24, 5
    131a:	0d c0       	rjmp	.+26     	; 0x1336 <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    131c:	40 e0       	ldi	r20, 0x00	; 0
    131e:	50 e0       	ldi	r21, 0x00	; 0
    1320:	63 e0       	ldi	r22, 0x03	; 3
    1322:	70 e0       	ldi	r23, 0x00	; 0
    1324:	ce 01       	movw	r24, r28
    1326:	01 96       	adiw	r24, 0x01	; 1
    1328:	0e 94 12 0c 	call	0x1824	; 0x1824 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    132c:	80 91 e8 00 	lds	r24, 0x00E8
    1330:	8e 77       	andi	r24, 0x7E	; 126
    1332:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	08 95       	ret

00001342 <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1342:	20 91 d6 01 	lds	r18, 0x01D6
    1346:	24 30       	cpi	r18, 0x04	; 4
    1348:	f1 f4       	brne	.+60     	; 0x1386 <send_mouse+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    134a:	22 e0       	ldi	r18, 0x02	; 2
    134c:	20 93 e9 00 	sts	0x00E9, r18
    1350:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1352:	30 91 e8 00 	lds	r19, 0x00E8
    1356:	21 50       	subi	r18, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1358:	35 fd       	sbrc	r19, 5
    135a:	06 c0       	rjmp	.+12     	; 0x1368 <send_mouse+0x26>
    135c:	35 ed       	ldi	r19, 0xD5	; 213
    135e:	3a 95       	dec	r19
    1360:	f1 f7       	brne	.-4      	; 0x135e <send_mouse+0x1c>
    1362:	00 00       	nop
    1364:	21 11       	cpse	r18, r1
    1366:	f5 cf       	rjmp	.-22     	; 0x1352 <send_mouse+0x10>
    1368:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    136c:	25 ff       	sbrs	r18, 5
    136e:	0b c0       	rjmp	.+22     	; 0x1386 <send_mouse+0x44>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    1370:	40 e0       	ldi	r20, 0x00	; 0
    1372:	50 e0       	ldi	r21, 0x00	; 0
    1374:	65 e0       	ldi	r22, 0x05	; 5
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	0e 94 12 0c 	call	0x1824	; 0x1824 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    137c:	80 91 e8 00 	lds	r24, 0x00E8
    1380:	8e 77       	andi	r24, 0x7E	; 126
    1382:	80 93 e8 00 	sts	0x00E8, r24
    1386:	08 95       	ret

00001388 <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	ec 01       	movw	r28, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    138e:	80 91 d6 01 	lds	r24, 0x01D6
    1392:	84 30       	cpi	r24, 0x04	; 4
    1394:	09 f0       	breq	.+2      	; 0x1398 <send_keyboard+0x10>
    1396:	47 c0       	rjmp	.+142    	; 0x1426 <send_keyboard+0x9e>
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    1398:	80 91 0b 01 	lds	r24, 0x010B
    139c:	88 23       	and	r24, r24
    139e:	e1 f0       	breq	.+56     	; 0x13d8 <send_keyboard+0x50>
    13a0:	80 91 0c 01 	lds	r24, 0x010C
    13a4:	88 23       	and	r24, r24
    13a6:	c1 f0       	breq	.+48     	; 0x13d8 <send_keyboard+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13a8:	85 e0       	ldi	r24, 0x05	; 5
    13aa:	80 93 e9 00 	sts	0x00E9, r24
    13ae:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    13b0:	90 91 e8 00 	lds	r25, 0x00E8
    13b4:	81 50       	subi	r24, 0x01	; 1
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    13b6:	95 fd       	sbrc	r25, 5
    13b8:	06 c0       	rjmp	.+12     	; 0x13c6 <send_keyboard+0x3e>
    13ba:	95 e1       	ldi	r25, 0x15	; 21
    13bc:	9a 95       	dec	r25
    13be:	f1 f7       	brne	.-4      	; 0x13bc <send_keyboard+0x34>
    13c0:	00 00       	nop
    13c2:	81 11       	cpse	r24, r1
    13c4:	f5 cf       	rjmp	.-22     	; 0x13b0 <send_keyboard+0x28>
    13c6:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    13ca:	85 ff       	sbrs	r24, 5
    13cc:	2c c0       	rjmp	.+88     	; 0x1426 <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    13ce:	40 e0       	ldi	r20, 0x00	; 0
    13d0:	50 e0       	ldi	r21, 0x00	; 0
    13d2:	60 e1       	ldi	r22, 0x10	; 16
    13d4:	70 e0       	ldi	r23, 0x00	; 0
    13d6:	17 c0       	rjmp	.+46     	; 0x1406 <send_keyboard+0x7e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	80 93 e9 00 	sts	0x00E9, r24
    13de:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    13e0:	90 91 e8 00 	lds	r25, 0x00E8
    13e4:	81 50       	subi	r24, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    13e6:	95 fd       	sbrc	r25, 5
    13e8:	06 c0       	rjmp	.+12     	; 0x13f6 <send_keyboard+0x6e>
    13ea:	95 ed       	ldi	r25, 0xD5	; 213
    13ec:	9a 95       	dec	r25
    13ee:	f1 f7       	brne	.-4      	; 0x13ec <send_keyboard+0x64>
    13f0:	00 00       	nop
    13f2:	81 11       	cpse	r24, r1
    13f4:	f5 cf       	rjmp	.-22     	; 0x13e0 <send_keyboard+0x58>
    13f6:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    13fa:	85 ff       	sbrs	r24, 5
    13fc:	14 c0       	rjmp	.+40     	; 0x1426 <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    13fe:	40 e0       	ldi	r20, 0x00	; 0
    1400:	50 e0       	ldi	r21, 0x00	; 0
    1402:	68 e0       	ldi	r22, 0x08	; 8
    1404:	70 e0       	ldi	r23, 0x00	; 0
    1406:	ce 01       	movw	r24, r28
    1408:	0e 94 12 0c 	call	0x1824	; 0x1824 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    140c:	80 91 e8 00 	lds	r24, 0x00E8
    1410:	8e 77       	andi	r24, 0x7E	; 126
    1412:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    1416:	80 e1       	ldi	r24, 0x10	; 16
    1418:	fe 01       	movw	r30, r28
    141a:	ad e4       	ldi	r26, 0x4D	; 77
    141c:	b1 e0       	ldi	r27, 0x01	; 1
    141e:	01 90       	ld	r0, Z+
    1420:	0d 92       	st	X+, r0
    1422:	8a 95       	dec	r24
    1424:	e1 f7       	brne	.-8      	; 0x141e <send_keyboard+0x96>
}
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	08 95       	ret

0000142c <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    142c:	84 e1       	ldi	r24, 0x14	; 20
    142e:	92 e0       	ldi	r25, 0x02	; 2
    1430:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    1434:	80 91 d5 01 	lds	r24, 0x01D5
    1438:	81 11       	cpse	r24, r1
    143a:	09 c0       	rjmp	.+18     	; 0x144e <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    143c:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <USB_Disable>
        USB_Init();
    1440:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    1444:	80 91 e2 00 	lds	r24, 0x00E2
    1448:	84 60       	ori	r24, 0x04	; 4
    144a:	80 93 e2 00 	sts	0x00E2, r24
    144e:	08 95       	ret

00001450 <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    1450:	80 e1       	ldi	r24, 0x10	; 16
    1452:	92 e0       	ldi	r25, 0x02	; 2
    1454:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    1458:	10 92 d5 01 	sts	0x01D5, r1
    145c:	08 95       	ret

0000145e <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    145e:	8c e0       	ldi	r24, 0x0C	; 12
    1460:	92 e0       	ldi	r25, 0x02	; 2
    1462:	0c 94 65 06 	jmp	0xcca	; 0xcca <xputs>

00001466 <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    1466:	80 91 4b 01 	lds	r24, 0x014B
    146a:	8f 5f       	subi	r24, 0xFF	; 255
    146c:	80 93 4b 01 	sts	0x014B, r24
    1470:	62 e3       	ldi	r22, 0x32	; 50
    1472:	0e 94 07 2a 	call	0x540e	; 0x540e <__udivmodqi4>
    1476:	91 11       	cpse	r25, r1
    1478:	35 c0       	rjmp	.+106    	; 0x14e4 <EVENT_USB_Device_StartOfFrame+0x7e>
    count = 0;
    147a:	10 92 4b 01 	sts	0x014B, r1

    if (!console_flush) return;
    147e:	80 91 4c 01 	lds	r24, 0x014C
    1482:	88 23       	and	r24, r24
    1484:	79 f1       	breq	.+94     	; 0x14e4 <EVENT_USB_Device_StartOfFrame+0x7e>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1486:	80 91 d6 01 	lds	r24, 0x01D6
    148a:	84 30       	cpi	r24, 0x04	; 4
    148c:	49 f5       	brne	.+82     	; 0x14e0 <EVENT_USB_Device_StartOfFrame+0x7a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    148e:	80 91 e9 00 	lds	r24, 0x00E9
    1492:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1494:	90 91 ec 00 	lds	r25, 0x00EC
    1498:	90 ff       	sbrs	r25, 0
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <EVENT_USB_Device_StartOfFrame+0x3a>
    149c:	90 e8       	ldi	r25, 0x80	; 128
    149e:	01 c0       	rjmp	.+2      	; 0x14a2 <EVENT_USB_Device_StartOfFrame+0x3c>
    14a0:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    14a2:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14a4:	84 e0       	ldi	r24, 0x04	; 4
    14a6:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    14aa:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    14ae:	80 ff       	sbrs	r24, 0
    14b0:	14 c0       	rjmp	.+40     	; 0x14da <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    14b2:	80 91 ee 00 	lds	r24, 0x00EE
    14b6:	87 ff       	sbrs	r24, 7
    14b8:	10 c0       	rjmp	.+32     	; 0x14da <EVENT_USB_Device_StartOfFrame+0x74>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    14ba:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    14be:	85 ff       	sbrs	r24, 5
    14c0:	03 c0       	rjmp	.+6      	; 0x14c8 <EVENT_USB_Device_StartOfFrame+0x62>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    14c2:	10 92 f1 00 	sts	0x00F1, r1
    14c6:	f9 cf       	rjmp	.-14     	; 0x14ba <EVENT_USB_Device_StartOfFrame+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    14c8:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    14cc:	80 ff       	sbrs	r24, 0
    14ce:	05 c0       	rjmp	.+10     	; 0x14da <EVENT_USB_Device_StartOfFrame+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14d0:	80 91 e8 00 	lds	r24, 0x00E8
    14d4:	8e 77       	andi	r24, 0x7E	; 126
    14d6:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14da:	9f 70       	andi	r25, 0x0F	; 15
    14dc:	90 93 e9 00 	sts	0x00E9, r25
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    14e0:	10 92 4c 01 	sts	0x014C, r1
    14e4:	08 95       	ret

000014e6 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    14e6:	42 e0       	ldi	r20, 0x02	; 2
    14e8:	61 ec       	ldi	r22, 0xC1	; 193
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <Endpoint_ConfigureEndpoint_Prv>
    14f0:	42 e0       	ldi	r20, 0x02	; 2
    14f2:	61 ec       	ldi	r22, 0xC1	; 193
    14f4:	82 e0       	ldi	r24, 0x02	; 2
    14f6:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <Endpoint_ConfigureEndpoint_Prv>
    14fa:	42 e0       	ldi	r20, 0x02	; 2
    14fc:	61 ec       	ldi	r22, 0xC1	; 193
    14fe:	83 e0       	ldi	r24, 0x03	; 3
    1500:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <Endpoint_ConfigureEndpoint_Prv>
    1504:	42 e2       	ldi	r20, 0x22	; 34
    1506:	61 ec       	ldi	r22, 0xC1	; 193
    1508:	84 e0       	ldi	r24, 0x04	; 4
    150a:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <Endpoint_ConfigureEndpoint_Prv>
    150e:	42 e1       	ldi	r20, 0x12	; 18
    1510:	61 ec       	ldi	r22, 0xC1	; 193
    1512:	85 e0       	ldi	r24, 0x05	; 5
    1514:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <Endpoint_ConfigureEndpoint_Prv>

00001518 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    1518:	80 91 d8 01 	lds	r24, 0x01D8
    151c:	83 30       	cpi	r24, 0x03	; 3
    151e:	09 f4       	brne	.+2      	; 0x1522 <EVENT_USB_Device_ControlRequest+0xa>
    1520:	55 c0       	rjmp	.+170    	; 0x15cc <EVENT_USB_Device_ControlRequest+0xb4>
    1522:	30 f4       	brcc	.+12     	; 0x1530 <EVENT_USB_Device_ControlRequest+0x18>
    1524:	81 30       	cpi	r24, 0x01	; 1
    1526:	71 f0       	breq	.+28     	; 0x1544 <EVENT_USB_Device_ControlRequest+0x2c>
    1528:	82 30       	cpi	r24, 0x02	; 2
    152a:	09 f4       	brne	.+2      	; 0x152e <EVENT_USB_Device_ControlRequest+0x16>
    152c:	8e c0       	rjmp	.+284    	; 0x164a <EVENT_USB_Device_ControlRequest+0x132>
    152e:	08 95       	ret
    1530:	8a 30       	cpi	r24, 0x0A	; 10
    1532:	09 f4       	brne	.+2      	; 0x1536 <EVENT_USB_Device_ControlRequest+0x1e>
    1534:	7a c0       	rjmp	.+244    	; 0x162a <EVENT_USB_Device_ControlRequest+0x112>
    1536:	8b 30       	cpi	r24, 0x0B	; 11
    1538:	09 f4       	brne	.+2      	; 0x153c <EVENT_USB_Device_ControlRequest+0x24>
    153a:	60 c0       	rjmp	.+192    	; 0x15fc <EVENT_USB_Device_ControlRequest+0xe4>
    153c:	89 30       	cpi	r24, 0x09	; 9
    153e:	09 f0       	breq	.+2      	; 0x1542 <EVENT_USB_Device_ControlRequest+0x2a>
    1540:	9c c0       	rjmp	.+312    	; 0x167a <EVENT_USB_Device_ControlRequest+0x162>
    1542:	20 c0       	rjmp	.+64     	; 0x1584 <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1544:	80 91 d7 01 	lds	r24, 0x01D7
    1548:	81 3a       	cpi	r24, 0xA1	; 161
    154a:	09 f0       	breq	.+2      	; 0x154e <EVENT_USB_Device_ControlRequest+0x36>
    154c:	96 c0       	rjmp	.+300    	; 0x167a <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    154e:	80 91 e8 00 	lds	r24, 0x00E8
    1552:	87 7f       	andi	r24, 0xF7	; 247
    1554:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1558:	80 91 db 01 	lds	r24, 0x01DB
    155c:	90 91 dc 01 	lds	r25, 0x01DC
    1560:	89 2b       	or	r24, r25
    1562:	21 f0       	breq	.+8      	; 0x156c <EVENT_USB_Device_ControlRequest+0x54>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    1564:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	03 c0       	rjmp	.+6      	; 0x1572 <EVENT_USB_Device_ControlRequest+0x5a>
                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    156c:	60 e1       	ldi	r22, 0x10	; 16

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    156e:	8d e4       	ldi	r24, 0x4D	; 77
    1570:	91 e0       	ldi	r25, 0x01	; 1
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1578:	80 91 e8 00 	lds	r24, 0x00E8
    157c:	8b 77       	andi	r24, 0x7B	; 123
    157e:	80 93 e8 00 	sts	0x00E8, r24
    1582:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1584:	80 91 d7 01 	lds	r24, 0x01D7
    1588:	81 32       	cpi	r24, 0x21	; 33
    158a:	09 f0       	breq	.+2      	; 0x158e <EVENT_USB_Device_ControlRequest+0x76>
    158c:	76 c0       	rjmp	.+236    	; 0x167a <EVENT_USB_Device_ControlRequest+0x162>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    158e:	80 91 db 01 	lds	r24, 0x01DB
    1592:	90 91 dc 01 	lds	r25, 0x01DC
    1596:	00 97       	sbiw	r24, 0x00	; 0
    1598:	19 f0       	breq	.+6      	; 0x15a0 <EVENT_USB_Device_ControlRequest+0x88>
    159a:	04 97       	sbiw	r24, 0x04	; 4
    159c:	09 f0       	breq	.+2      	; 0x15a0 <EVENT_USB_Device_ControlRequest+0x88>
    159e:	6d c0       	rjmp	.+218    	; 0x167a <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    15a0:	80 91 e8 00 	lds	r24, 0x00E8
    15a4:	87 7f       	andi	r24, 0xF7	; 247
    15a6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    15aa:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    15ae:	82 fd       	sbrc	r24, 2
    15b0:	05 c0       	rjmp	.+10     	; 0x15bc <EVENT_USB_Device_ControlRequest+0xa4>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    15b2:	80 91 d6 01 	lds	r24, 0x01D6
    15b6:	81 11       	cpse	r24, r1
    15b8:	f8 cf       	rjmp	.-16     	; 0x15aa <EVENT_USB_Device_ControlRequest+0x92>
    15ba:	5f c0       	rjmp	.+190    	; 0x167a <EVENT_USB_Device_ControlRequest+0x162>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    15bc:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    15c0:	80 93 5d 01 	sts	0x015D, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    15c4:	80 91 e8 00 	lds	r24, 0x00E8
    15c8:	8b 77       	andi	r24, 0x7B	; 123
    15ca:	53 c0       	rjmp	.+166    	; 0x1672 <EVENT_USB_Device_ControlRequest+0x15a>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    15cc:	80 91 d7 01 	lds	r24, 0x01D7
    15d0:	81 3a       	cpi	r24, 0xA1	; 161
    15d2:	09 f0       	breq	.+2      	; 0x15d6 <EVENT_USB_Device_ControlRequest+0xbe>
    15d4:	52 c0       	rjmp	.+164    	; 0x167a <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    15d6:	80 91 db 01 	lds	r24, 0x01DB
    15da:	90 91 dc 01 	lds	r25, 0x01DC
    15de:	89 2b       	or	r24, r25
    15e0:	09 f0       	breq	.+2      	; 0x15e4 <EVENT_USB_Device_ControlRequest+0xcc>
    15e2:	4b c0       	rjmp	.+150    	; 0x167a <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    15e4:	80 91 e8 00 	lds	r24, 0x00E8
    15e8:	87 7f       	andi	r24, 0xF7	; 247
    15ea:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    15ee:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    15f2:	80 ff       	sbrs	r24, 0
    15f4:	fc cf       	rjmp	.-8      	; 0x15ee <EVENT_USB_Device_ControlRequest+0xd6>
                    Endpoint_Write_8(keyboard_protocol);
    15f6:	80 91 0b 01 	lds	r24, 0x010B
    15fa:	36 c0       	rjmp	.+108    	; 0x1668 <EVENT_USB_Device_ControlRequest+0x150>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    15fc:	80 91 d7 01 	lds	r24, 0x01D7
    1600:	81 32       	cpi	r24, 0x21	; 33
    1602:	d9 f5       	brne	.+118    	; 0x167a <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1604:	80 91 db 01 	lds	r24, 0x01DB
    1608:	90 91 dc 01 	lds	r25, 0x01DC
    160c:	89 2b       	or	r24, r25
    160e:	a9 f5       	brne	.+106    	; 0x167a <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1610:	80 91 e8 00 	lds	r24, 0x00E8
    1614:	87 7f       	andi	r24, 0xF7	; 247
    1616:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    161a:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    161e:	80 91 d9 01 	lds	r24, 0x01D9
    1622:	80 93 0b 01 	sts	0x010B, r24
                    clear_keyboard();
    1626:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    162a:	80 91 d7 01 	lds	r24, 0x01D7
    162e:	81 32       	cpi	r24, 0x21	; 33
    1630:	21 f5       	brne	.+72     	; 0x167a <EVENT_USB_Device_ControlRequest+0x162>
    1632:	80 91 e8 00 	lds	r24, 0x00E8
    1636:	87 7f       	andi	r24, 0xF7	; 247
    1638:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    163c:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    1640:	80 91 da 01 	lds	r24, 0x01DA
    1644:	80 93 5e 01 	sts	0x015E, r24
    1648:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    164a:	80 91 d7 01 	lds	r24, 0x01D7
    164e:	81 3a       	cpi	r24, 0xA1	; 161
    1650:	a1 f4       	brne	.+40     	; 0x167a <EVENT_USB_Device_ControlRequest+0x162>
    1652:	80 91 e8 00 	lds	r24, 0x00E8
    1656:	87 7f       	andi	r24, 0xF7	; 247
    1658:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    165c:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    1660:	80 ff       	sbrs	r24, 0
    1662:	fc cf       	rjmp	.-8      	; 0x165c <EVENT_USB_Device_ControlRequest+0x144>
                Endpoint_Write_8(keyboard_idle);
    1664:	80 91 5e 01 	lds	r24, 0x015E
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1668:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    166c:	80 91 e8 00 	lds	r24, 0x00E8
    1670:	8e 77       	andi	r24, 0x7E	; 126
    1672:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    1676:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <Endpoint_ClearStatusStage>
    167a:	08 95       	ret

0000167c <hook_early_init>:
}


/* hooks */
__attribute__((weak))
void hook_early_init(void) {}
    167c:	08 95       	ret

0000167e <hook_late_init>:

__attribute__((weak))
void hook_late_init(void) {}
    167e:	08 95       	ret

00001680 <hook_usb_suspend_entry>:

 __attribute__((weak))
void hook_usb_suspend_entry(void)
{
    1680:	08 95       	ret

00001682 <EVENT_USB_Device_Suspend>:
    print("[R]");
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    1682:	88 e0       	ldi	r24, 0x08	; 8
    1684:	92 e0       	ldi	r25, 0x02	; 2
    1686:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    hook_usb_suspend_entry();
    168a:	0c 94 40 0b 	jmp	0x1680	; 0x1680 <hook_usb_suspend_entry>

0000168e <hook_usb_suspend_loop>:
}

__attribute__((weak))
void hook_usb_suspend_loop(void)
{
    suspend_power_down();
    168e:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <suspend_power_down>
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1692:	80 91 d4 01 	lds	r24, 0x01D4
    1696:	88 23       	and	r24, r24
    1698:	29 f0       	breq	.+10     	; 0x16a4 <hook_usb_suspend_loop+0x16>
    169a:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <suspend_wakeup_condition>
    169e:	81 11       	cpse	r24, r1
            USB_Device_SendRemoteWakeup();
    16a0:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <USB_Device_SendRemoteWakeup>
    16a4:	08 95       	ret

000016a6 <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    16a6:	84 b7       	in	r24, 0x34	; 52
    16a8:	87 7f       	andi	r24, 0xF7	; 247
    16aa:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    16ac:	88 e1       	ldi	r24, 0x18	; 24
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	80 93 60 00 	sts	0x0060, r24
    16b6:	10 92 60 00 	sts	0x0060, r1
    16ba:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	80 e8       	ldi	r24, 0x80	; 128
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	80 93 61 00 	sts	0x0061, r24
    16c8:	90 93 61 00 	sts	0x0061, r25
    16cc:	0f be       	out	0x3f, r0	; 63

int main(void)  __attribute__ ((weak));
int main(void)
{
    setup_mcu();
    hook_early_init();
    16ce:	0e 94 3e 0b 	call	0x167c	; 0x167c <hook_early_init>
    keyboard_setup();
    16d2:	0e 94 09 11 	call	0x2212	; 0x2212 <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    16d6:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <USB_Disable>

    USB_Init();
    16da:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <USB_Init>
    16de:	80 91 e2 00 	lds	r24, 0x00E2
    16e2:	84 60       	ori	r24, 0x04	; 4
    16e4:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    16e8:	86 ed       	ldi	r24, 0xD6	; 214
    16ea:	98 e0       	ldi	r25, 0x08	; 8
    16ec:	0e 94 c6 1c 	call	0x398c	; 0x398c <print_set_sendchar>
{
    setup_mcu();
    hook_early_init();
    keyboard_setup();
    setup_usb();
    sei();
    16f0:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    16f2:	80 91 d6 01 	lds	r24, 0x01D6
    16f6:	84 30       	cpi	r24, 0x04	; 4
    16f8:	e1 f7       	brne	.-8      	; 0x16f2 <main+0x4c>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    16fa:	83 ef       	ldi	r24, 0xF3	; 243
    16fc:	91 e0       	ldi	r25, 0x01	; 1
    16fe:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>

    /* init modules */
    keyboard_init();
    1702:	0e 94 0b 11 	call	0x2216	; 0x2216 <keyboard_init>
    host_set_driver(&lufa_driver);
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	91 e0       	ldi	r25, 0x01	; 1
    170a:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    170e:	82 ee       	ldi	r24, 0xE2	; 226
    1710:	91 e0       	ldi	r25, 0x01	; 1
    1712:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    hook_late_init();
    1716:	0e 94 3f 0b 	call	0x167e	; 0x167e <hook_late_init>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    171a:	80 91 d6 01 	lds	r24, 0x01D6
    171e:	85 30       	cpi	r24, 0x05	; 5
    1720:	39 f4       	brne	.+14     	; 0x1730 <main+0x8a>
            print("[s]");
    1722:	8e ed       	ldi	r24, 0xDE	; 222
    1724:	91 e0       	ldi	r25, 0x01	; 1
    1726:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
            hook_usb_suspend_loop();
    172a:	0e 94 47 0b 	call	0x168e	; 0x168e <hook_usb_suspend_loop>
    172e:	f5 cf       	rjmp	.-22     	; 0x171a <main+0x74>
        }

        keyboard_task();
    1730:	0e 94 11 11 	call	0x2222	; 0x2222 <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    1734:	f2 cf       	rjmp	.-28     	; 0x171a <main+0x74>

00001736 <hook_usb_wakeup>:
}

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
    1736:	0c 94 49 1d 	jmp	0x3a92	; 0x3a92 <suspend_wakeup_init>

0000173a <EVENT_USB_Device_WakeUp>:
    hook_usb_suspend_entry();
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    173a:	84 e0       	ldi	r24, 0x04	; 4
    173c:	92 e0       	ldi	r25, 0x02	; 2
    173e:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    hook_usb_wakeup();
    1742:	0c 94 9b 0b 	jmp	0x1736	; 0x1736 <hook_usb_wakeup>

00001746 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    1746:	29 2f       	mov	r18, r25
    1748:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    174a:	23 30       	cpi	r18, 0x03	; 3
    174c:	31 05       	cpc	r19, r1
    174e:	a9 f0       	breq	.+42     	; 0x177a <CALLBACK_USB_GetDescriptor+0x34>
    1750:	6c f4       	brge	.+26     	; 0x176c <CALLBACK_USB_GetDescriptor+0x26>
    1752:	21 30       	cpi	r18, 0x01	; 1
    1754:	31 05       	cpc	r19, r1
    1756:	09 f4       	brne	.+2      	; 0x175a <CALLBACK_USB_GetDescriptor+0x14>
    1758:	42 c0       	rjmp	.+132    	; 0x17de <CALLBACK_USB_GetDescriptor+0x98>
    175a:	22 30       	cpi	r18, 0x02	; 2
    175c:	31 05       	cpc	r19, r1
    175e:	09 f0       	breq	.+2      	; 0x1762 <CALLBACK_USB_GetDescriptor+0x1c>
    1760:	43 c0       	rjmp	.+134    	; 0x17e8 <CALLBACK_USB_GetDescriptor+0xa2>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    1762:	8d e8       	ldi	r24, 0x8D	; 141
    1764:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    1766:	22 e5       	ldi	r18, 0x52	; 82
    1768:	32 e0       	ldi	r19, 0x02	; 2
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    176a:	42 c0       	rjmp	.+132    	; 0x17f0 <CALLBACK_USB_GetDescriptor+0xaa>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    176c:	21 32       	cpi	r18, 0x21	; 33
    176e:	31 05       	cpc	r19, r1
    1770:	c9 f0       	breq	.+50     	; 0x17a4 <CALLBACK_USB_GetDescriptor+0x5e>
    1772:	22 32       	cpi	r18, 0x22	; 34
    1774:	31 05       	cpc	r19, r1
    1776:	19 f1       	breq	.+70     	; 0x17be <CALLBACK_USB_GetDescriptor+0x78>
    1778:	37 c0       	rjmp	.+110    	; 0x17e8 <CALLBACK_USB_GetDescriptor+0xa2>
    177a:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    177c:	81 30       	cpi	r24, 0x01	; 1
    177e:	91 05       	cpc	r25, r1
    1780:	41 f0       	breq	.+16     	; 0x1792 <CALLBACK_USB_GetDescriptor+0x4c>
    1782:	82 30       	cpi	r24, 0x02	; 2
    1784:	91 05       	cpc	r25, r1
    1786:	41 f0       	breq	.+16     	; 0x1798 <CALLBACK_USB_GetDescriptor+0x52>
    1788:	89 2b       	or	r24, r25
    178a:	71 f5       	brne	.+92     	; 0x17e8 <CALLBACK_USB_GetDescriptor+0xa2>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    178c:	ee e4       	ldi	r30, 0x4E	; 78
    178e:	f2 e0       	ldi	r31, 0x02	; 2
    1790:	05 c0       	rjmp	.+10     	; 0x179c <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1792:	ea e2       	ldi	r30, 0x2A	; 42
    1794:	f2 e0       	ldi	r31, 0x02	; 2
    1796:	02 c0       	rjmp	.+4      	; 0x179c <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1798:	e8 e1       	ldi	r30, 0x18	; 24
    179a:	f2 e0       	ldi	r31, 0x02	; 2
    179c:	84 91       	lpm	r24, Z
    179e:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    17a0:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    17a2:	26 c0       	rjmp	.+76     	; 0x17f0 <CALLBACK_USB_GetDescriptor+0xaa>
    17a4:	65 30       	cpi	r22, 0x05	; 5
    17a6:	00 f5       	brcc	.+64     	; 0x17e8 <CALLBACK_USB_GetDescriptor+0xa2>
    17a8:	e6 2f       	mov	r30, r22
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	ee 0f       	add	r30, r30
    17ae:	ff 1f       	adc	r31, r31
    17b0:	ec 5d       	subi	r30, 0xDC	; 220
    17b2:	fe 4f       	sbci	r31, 0xFE	; 254
    17b4:	20 81       	ld	r18, Z
    17b6:	31 81       	ldd	r19, Z+1	; 0x01
    17b8:	89 e0       	ldi	r24, 0x09	; 9
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	19 c0       	rjmp	.+50     	; 0x17f0 <CALLBACK_USB_GetDescriptor+0xaa>
    17be:	65 30       	cpi	r22, 0x05	; 5
    17c0:	98 f4       	brcc	.+38     	; 0x17e8 <CALLBACK_USB_GetDescriptor+0xa2>
    17c2:	e6 2f       	mov	r30, r22
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	df 01       	movw	r26, r30
    17c8:	aa 0f       	add	r26, r26
    17ca:	bb 1f       	adc	r27, r27
    17cc:	a6 5e       	subi	r26, 0xE6	; 230
    17ce:	be 4f       	sbci	r27, 0xFE	; 254
    17d0:	2d 91       	ld	r18, X+
    17d2:	3c 91       	ld	r19, X
    17d4:	eb 5e       	subi	r30, 0xEB	; 235
    17d6:	fe 4f       	sbci	r31, 0xFE	; 254
    17d8:	80 81       	ld	r24, Z
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	09 c0       	rjmp	.+18     	; 0x17f0 <CALLBACK_USB_GetDescriptor+0xaa>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    17de:	82 e1       	ldi	r24, 0x12	; 18
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    17e2:	2f ed       	ldi	r18, 0xDF	; 223
    17e4:	32 e0       	ldi	r19, 0x02	; 2
    17e6:	04 c0       	rjmp	.+8      	; 0x17f0 <CALLBACK_USB_GetDescriptor+0xaa>
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    17f0:	fa 01       	movw	r30, r20
    17f2:	31 83       	std	Z+1, r19	; 0x01
    17f4:	20 83       	st	Z, r18
    return Size;
}
    17f6:	08 95       	ret

000017f8 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    17f8:	80 e1       	ldi	r24, 0x10	; 16
    17fa:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    17fc:	82 e1       	ldi	r24, 0x12	; 18
    17fe:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1800:	09 b4       	in	r0, 0x29	; 41
    1802:	00 fe       	sbrs	r0, 0
    1804:	fd cf       	rjmp	.-6      	; 0x1800 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1806:	80 91 d8 00 	lds	r24, 0x00D8
    180a:	8f 7d       	andi	r24, 0xDF	; 223
    180c:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    1810:	80 91 e0 00 	lds	r24, 0x00E0
    1814:	82 60       	ori	r24, 0x02	; 2
    1816:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    181a:	80 91 e0 00 	lds	r24, 0x00E0
    181e:	81 fd       	sbrc	r24, 1
    1820:	fc cf       	rjmp	.-8      	; 0x181a <USB_Device_SendRemoteWakeup+0x22>
}
    1822:	08 95       	ret

00001824 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1824:	cf 92       	push	r12
    1826:	df 92       	push	r13
    1828:	ef 92       	push	r14
    182a:	ff 92       	push	r15
    182c:	0f 93       	push	r16
    182e:	1f 93       	push	r17
    1830:	cf 93       	push	r28
    1832:	df 93       	push	r29
    1834:	7c 01       	movw	r14, r24
    1836:	8b 01       	movw	r16, r22
    1838:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    183a:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <Endpoint_WaitUntilReady>
    183e:	81 11       	cpse	r24, r1
    1840:	31 c0       	rjmp	.+98     	; 0x18a4 <Endpoint_Write_Stream_LE+0x80>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1842:	20 97       	sbiw	r28, 0x00	; 0
    1844:	31 f0       	breq	.+12     	; 0x1852 <Endpoint_Write_Stream_LE+0x2e>
	{
		Length -= *BytesProcessed;
    1846:	88 81       	ld	r24, Y
    1848:	99 81       	ldd	r25, Y+1	; 0x01
    184a:	08 1b       	sub	r16, r24
    184c:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    184e:	e8 0e       	add	r14, r24
    1850:	f9 1e       	adc	r15, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1852:	c1 2c       	mov	r12, r1
    1854:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1856:	01 15       	cp	r16, r1
    1858:	11 05       	cpc	r17, r1
    185a:	19 f1       	breq	.+70     	; 0x18a2 <Endpoint_Write_Stream_LE+0x7e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    185c:	80 91 e8 00 	lds	r24, 0x00E8
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1860:	85 fd       	sbrc	r24, 5
    1862:	14 c0       	rjmp	.+40     	; 0x188c <Endpoint_Write_Stream_LE+0x68>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1864:	80 91 e8 00 	lds	r24, 0x00E8
    1868:	8e 77       	andi	r24, 0x7E	; 126
    186a:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    186e:	20 97       	sbiw	r28, 0x00	; 0
    1870:	41 f0       	breq	.+16     	; 0x1882 <Endpoint_Write_Stream_LE+0x5e>
			{
				*BytesProcessed += BytesInTransfer;
    1872:	88 81       	ld	r24, Y
    1874:	99 81       	ldd	r25, Y+1	; 0x01
    1876:	8c 0d       	add	r24, r12
    1878:	9d 1d       	adc	r25, r13
    187a:	99 83       	std	Y+1, r25	; 0x01
    187c:	88 83       	st	Y, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    187e:	85 e0       	ldi	r24, 0x05	; 5
    1880:	11 c0       	rjmp	.+34     	; 0x18a4 <Endpoint_Write_Stream_LE+0x80>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1882:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <Endpoint_WaitUntilReady>
    1886:	88 23       	and	r24, r24
    1888:	31 f3       	breq	.-52     	; 0x1856 <Endpoint_Write_Stream_LE+0x32>
    188a:	0c c0       	rjmp	.+24     	; 0x18a4 <Endpoint_Write_Stream_LE+0x80>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    188c:	f7 01       	movw	r30, r14
    188e:	81 91       	ld	r24, Z+
    1890:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1892:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1896:	01 50       	subi	r16, 0x01	; 1
    1898:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    189a:	ff ef       	ldi	r31, 0xFF	; 255
    189c:	cf 1a       	sub	r12, r31
    189e:	df 0a       	sbc	r13, r31
    18a0:	da cf       	rjmp	.-76     	; 0x1856 <Endpoint_Write_Stream_LE+0x32>
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    18a2:	80 e0       	ldi	r24, 0x00	; 0
}
    18a4:	df 91       	pop	r29
    18a6:	cf 91       	pop	r28
    18a8:	1f 91       	pop	r17
    18aa:	0f 91       	pop	r16
    18ac:	ff 90       	pop	r15
    18ae:	ef 90       	pop	r14
    18b0:	df 90       	pop	r13
    18b2:	cf 90       	pop	r12
    18b4:	08 95       	ret

000018b6 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    18b6:	20 91 dd 01 	lds	r18, 0x01DD
    18ba:	30 91 de 01 	lds	r19, 0x01DE
    18be:	26 17       	cp	r18, r22
    18c0:	37 07       	cpc	r19, r23
    18c2:	48 f0       	brcs	.+18     	; 0x18d6 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    18c4:	61 15       	cp	r22, r1
    18c6:	71 05       	cpc	r23, r1
    18c8:	39 f4       	brne	.+14     	; 0x18d8 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18ca:	20 91 e8 00 	lds	r18, 0x00E8
    18ce:	2e 77       	andi	r18, 0x7E	; 126
    18d0:	20 93 e8 00 	sts	0x00E8, r18
    18d4:	01 c0       	rjmp	.+2      	; 0x18d8 <Endpoint_Write_Control_Stream_LE+0x22>
    18d6:	b9 01       	movw	r22, r18
    18d8:	fc 01       	movw	r30, r24
    18da:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    18dc:	61 15       	cp	r22, r1
    18de:	71 05       	cpc	r23, r1
    18e0:	b9 f1       	breq	.+110    	; 0x1950 <Endpoint_Write_Control_Stream_LE+0x9a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18e2:	80 91 d6 01 	lds	r24, 0x01D6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    18e6:	88 23       	and	r24, r24
    18e8:	09 f4       	brne	.+2      	; 0x18ec <Endpoint_Write_Control_Stream_LE+0x36>
    18ea:	40 c0       	rjmp	.+128    	; 0x196c <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18ec:	85 30       	cpi	r24, 0x05	; 5
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <Endpoint_Write_Control_Stream_LE+0x3c>
    18f0:	3f c0       	rjmp	.+126    	; 0x1970 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18f2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    18f6:	83 fd       	sbrc	r24, 3
    18f8:	3d c0       	rjmp	.+122    	; 0x1974 <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18fa:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    18fe:	82 ff       	sbrs	r24, 2
    1900:	06 c0       	rjmp	.+12     	; 0x190e <Endpoint_Write_Control_Stream_LE+0x58>
    1902:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1906:	82 ff       	sbrs	r24, 2
    1908:	26 c0       	rjmp	.+76     	; 0x1956 <Endpoint_Write_Control_Stream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    190e:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    1912:	80 ff       	sbrs	r24, 0
    1914:	e3 cf       	rjmp	.-58     	; 0x18dc <Endpoint_Write_Control_Stream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1916:	20 91 f3 00 	lds	r18, 0x00F3
    191a:	80 91 f2 00 	lds	r24, 0x00F2
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1922:	61 15       	cp	r22, r1
    1924:	71 05       	cpc	r23, r1
    1926:	51 f0       	breq	.+20     	; 0x193c <Endpoint_Write_Control_Stream_LE+0x86>
    1928:	88 30       	cpi	r24, 0x08	; 8
    192a:	91 05       	cpc	r25, r1
    192c:	38 f4       	brcc	.+14     	; 0x193c <Endpoint_Write_Control_Stream_LE+0x86>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    192e:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1930:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1934:	61 50       	subi	r22, 0x01	; 1
    1936:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1938:	01 96       	adiw	r24, 0x01	; 1
    193a:	f3 cf       	rjmp	.-26     	; 0x1922 <Endpoint_Write_Control_Stream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    193c:	21 e0       	ldi	r18, 0x01	; 1
    193e:	08 97       	sbiw	r24, 0x08	; 8
    1940:	09 f0       	breq	.+2      	; 0x1944 <Endpoint_Write_Control_Stream_LE+0x8e>
    1942:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1944:	80 91 e8 00 	lds	r24, 0x00E8
    1948:	8e 77       	andi	r24, 0x7E	; 126
    194a:	80 93 e8 00 	sts	0x00E8, r24
    194e:	c6 cf       	rjmp	.-116    	; 0x18dc <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1950:	21 11       	cpse	r18, r1
    1952:	c7 cf       	rjmp	.-114    	; 0x18e2 <Endpoint_Write_Control_Stream_LE+0x2c>
    1954:	d6 cf       	rjmp	.-84     	; 0x1902 <Endpoint_Write_Control_Stream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1956:	80 91 d6 01 	lds	r24, 0x01D6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    195a:	88 23       	and	r24, r24
    195c:	39 f0       	breq	.+14     	; 0x196c <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    195e:	85 30       	cpi	r24, 0x05	; 5
    1960:	39 f0       	breq	.+14     	; 0x1970 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1962:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1966:	83 ff       	sbrs	r24, 3
    1968:	cc cf       	rjmp	.-104    	; 0x1902 <Endpoint_Write_Control_Stream_LE+0x4c>
    196a:	04 c0       	rjmp	.+8      	; 0x1974 <Endpoint_Write_Control_Stream_LE+0xbe>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    196c:	82 e0       	ldi	r24, 0x02	; 2
    196e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1970:	83 e0       	ldi	r24, 0x03	; 3
    1972:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1974:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1976:	08 95       	ret

00001978 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1978:	20 91 dd 01 	lds	r18, 0x01DD
    197c:	30 91 de 01 	lds	r19, 0x01DE
    1980:	26 17       	cp	r18, r22
    1982:	37 07       	cpc	r19, r23
    1984:	48 f0       	brcs	.+18     	; 0x1998 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1986:	61 15       	cp	r22, r1
    1988:	71 05       	cpc	r23, r1
    198a:	39 f4       	brne	.+14     	; 0x199a <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    198c:	20 91 e8 00 	lds	r18, 0x00E8
    1990:	2e 77       	andi	r18, 0x7E	; 126
    1992:	20 93 e8 00 	sts	0x00E8, r18
    1996:	01 c0       	rjmp	.+2      	; 0x199a <Endpoint_Write_Control_PStream_LE+0x22>
    1998:	b9 01       	movw	r22, r18
    199a:	fc 01       	movw	r30, r24
    199c:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    199e:	61 15       	cp	r22, r1
    19a0:	71 05       	cpc	r23, r1
    19a2:	c1 f1       	breq	.+112    	; 0x1a14 <Endpoint_Write_Control_PStream_LE+0x9c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19a4:	80 91 d6 01 	lds	r24, 0x01D6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19a8:	88 23       	and	r24, r24
    19aa:	09 f4       	brne	.+2      	; 0x19ae <Endpoint_Write_Control_PStream_LE+0x36>
    19ac:	41 c0       	rjmp	.+130    	; 0x1a30 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    19ae:	85 30       	cpi	r24, 0x05	; 5
    19b0:	09 f4       	brne	.+2      	; 0x19b4 <Endpoint_Write_Control_PStream_LE+0x3c>
    19b2:	40 c0       	rjmp	.+128    	; 0x1a34 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    19b4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    19b8:	83 fd       	sbrc	r24, 3
    19ba:	3e c0       	rjmp	.+124    	; 0x1a38 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19bc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    19c0:	82 ff       	sbrs	r24, 2
    19c2:	06 c0       	rjmp	.+12     	; 0x19d0 <Endpoint_Write_Control_PStream_LE+0x58>
    19c4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    19c8:	82 ff       	sbrs	r24, 2
    19ca:	27 c0       	rjmp	.+78     	; 0x1a1a <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    19d0:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    19d4:	80 ff       	sbrs	r24, 0
    19d6:	e3 cf       	rjmp	.-58     	; 0x199e <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    19d8:	20 91 f3 00 	lds	r18, 0x00F3
    19dc:	80 91 f2 00 	lds	r24, 0x00F2
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    19e4:	61 15       	cp	r22, r1
    19e6:	71 05       	cpc	r23, r1
    19e8:	59 f0       	breq	.+22     	; 0x1a00 <Endpoint_Write_Control_PStream_LE+0x88>
    19ea:	88 30       	cpi	r24, 0x08	; 8
    19ec:	91 05       	cpc	r25, r1
    19ee:	40 f4       	brcc	.+16     	; 0x1a00 <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    19f0:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    19f2:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    19f6:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    19f8:	61 50       	subi	r22, 0x01	; 1
    19fa:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    19fc:	01 96       	adiw	r24, 0x01	; 1
    19fe:	f2 cf       	rjmp	.-28     	; 0x19e4 <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1a00:	21 e0       	ldi	r18, 0x01	; 1
    1a02:	08 97       	sbiw	r24, 0x08	; 8
    1a04:	09 f0       	breq	.+2      	; 0x1a08 <Endpoint_Write_Control_PStream_LE+0x90>
    1a06:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a08:	80 91 e8 00 	lds	r24, 0x00E8
    1a0c:	8e 77       	andi	r24, 0x7E	; 126
    1a0e:	80 93 e8 00 	sts	0x00E8, r24
    1a12:	c5 cf       	rjmp	.-118    	; 0x199e <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1a14:	21 11       	cpse	r18, r1
    1a16:	c6 cf       	rjmp	.-116    	; 0x19a4 <Endpoint_Write_Control_PStream_LE+0x2c>
    1a18:	d5 cf       	rjmp	.-86     	; 0x19c4 <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a1a:	80 91 d6 01 	lds	r24, 0x01D6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a1e:	88 23       	and	r24, r24
    1a20:	39 f0       	breq	.+14     	; 0x1a30 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a22:	85 30       	cpi	r24, 0x05	; 5
    1a24:	39 f0       	breq	.+14     	; 0x1a34 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a26:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1a2a:	83 ff       	sbrs	r24, 3
    1a2c:	cb cf       	rjmp	.-106    	; 0x19c4 <Endpoint_Write_Control_PStream_LE+0x4c>
    1a2e:	04 c0       	rjmp	.+8      	; 0x1a38 <Endpoint_Write_Control_PStream_LE+0xc0>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1a30:	82 e0       	ldi	r24, 0x02	; 2
    1a32:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1a34:	83 e0       	ldi	r24, 0x03	; 3
    1a36:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1a38:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1a3a:	08 95       	ret

00001a3c <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1a3c:	98 2f       	mov	r25, r24
    1a3e:	97 30       	cpi	r25, 0x07	; 7
    1a40:	58 f5       	brcc	.+86     	; 0x1a98 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a42:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1a46:	98 17       	cp	r25, r24
    1a48:	39 f0       	breq	.+14     	; 0x1a58 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1a4a:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1a4e:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1a52:	50 91 f0 00 	lds	r21, 0x00F0
    1a56:	03 c0       	rjmp	.+6      	; 0x1a5e <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    1a58:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    1a5a:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1a5c:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1a5e:	21 ff       	sbrs	r18, 1
    1a60:	19 c0       	rjmp	.+50     	; 0x1a94 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1a62:	30 91 eb 00 	lds	r19, 0x00EB
    1a66:	3e 7f       	andi	r19, 0xFE	; 254
    1a68:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1a6c:	30 91 ed 00 	lds	r19, 0x00ED
    1a70:	3d 7f       	andi	r19, 0xFD	; 253
    1a72:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1a76:	30 91 eb 00 	lds	r19, 0x00EB
    1a7a:	31 60       	ori	r19, 0x01	; 1
    1a7c:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1a80:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1a84:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    1a88:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1a8c:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1a90:	27 ff       	sbrs	r18, 7
    1a92:	07 c0       	rjmp	.+14     	; 0x1aa2 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1a94:	9f 5f       	subi	r25, 0xFF	; 255
    1a96:	d3 cf       	rjmp	.-90     	; 0x1a3e <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a98:	8f 70       	andi	r24, 0x0F	; 15
    1a9a:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1aa4:	08 95       	ret

00001aa6 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1aa6:	80 91 d7 01 	lds	r24, 0x01D7
    1aaa:	87 fd       	sbrc	r24, 7
    1aac:	05 c0       	rjmp	.+10     	; 0x1ab8 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1aae:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1ab2:	80 ff       	sbrs	r24, 0
    1ab4:	0e c0       	rjmp	.+28     	; 0x1ad2 <Endpoint_ClearStatusStage+0x2c>
    1ab6:	12 c0       	rjmp	.+36     	; 0x1adc <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1ab8:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1abc:	82 fd       	sbrc	r24, 2
    1abe:	05 c0       	rjmp	.+10     	; 0x1aca <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1ac0:	80 91 d6 01 	lds	r24, 0x01D6
    1ac4:	81 11       	cpse	r24, r1
    1ac6:	f8 cf       	rjmp	.-16     	; 0x1ab8 <Endpoint_ClearStatusStage+0x12>
    1ac8:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1aca:	80 91 e8 00 	lds	r24, 0x00E8
    1ace:	8b 77       	andi	r24, 0x7B	; 123
    1ad0:	08 c0       	rjmp	.+16     	; 0x1ae2 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1ad2:	80 91 d6 01 	lds	r24, 0x01D6
    1ad6:	81 11       	cpse	r24, r1
    1ad8:	ea cf       	rjmp	.-44     	; 0x1aae <Endpoint_ClearStatusStage+0x8>
    1ada:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1adc:	80 91 e8 00 	lds	r24, 0x00E8
    1ae0:	8e 77       	andi	r24, 0x7E	; 126
    1ae2:	80 93 e8 00 	sts	0x00E8, r24
    1ae6:	08 95       	ret

00001ae8 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1ae8:	80 91 e4 00 	lds	r24, 0x00E4
    1aec:	90 91 e5 00 	lds	r25, 0x00E5
    1af0:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1af2:	20 91 ec 00 	lds	r18, 0x00EC
    1af6:	20 ff       	sbrs	r18, 0
    1af8:	21 c0       	rjmp	.+66     	; 0x1b3c <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1afa:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1afe:	20 fd       	sbrc	r18, 0
    1b00:	21 c0       	rjmp	.+66     	; 0x1b44 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b02:	20 91 d6 01 	lds	r18, 0x01D6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b06:	22 23       	and	r18, r18
    1b08:	89 f0       	breq	.+34     	; 0x1b2c <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b0a:	25 30       	cpi	r18, 0x05	; 5
    1b0c:	89 f0       	breq	.+34     	; 0x1b30 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1b0e:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1b12:	25 fd       	sbrc	r18, 5
    1b14:	0f c0       	rjmp	.+30     	; 0x1b34 <Endpoint_WaitUntilReady+0x4c>
    1b16:	20 91 e4 00 	lds	r18, 0x00E4
    1b1a:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1b1e:	28 17       	cp	r18, r24
    1b20:	39 07       	cpc	r19, r25
    1b22:	39 f3       	breq	.-50     	; 0x1af2 <Endpoint_WaitUntilReady+0xa>
    1b24:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1b26:	41 f0       	breq	.+16     	; 0x1b38 <Endpoint_WaitUntilReady+0x50>
    1b28:	c9 01       	movw	r24, r18
    1b2a:	e3 cf       	rjmp	.-58     	; 0x1af2 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1b2c:	82 e0       	ldi	r24, 0x02	; 2
    1b2e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1b30:	83 e0       	ldi	r24, 0x03	; 3
    1b32:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    1b38:	84 e0       	ldi	r24, 0x04	; 4
    1b3a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b3c:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1b40:	22 ff       	sbrs	r18, 2
    1b42:	df cf       	rjmp	.-66     	; 0x1b02 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	08 95       	ret

00001b48 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1b48:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1b4c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1b50:	e0 ee       	ldi	r30, 0xE0	; 224
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	81 60       	ori	r24, 0x01	; 1
    1b58:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1b5a:	e8 ed       	ldi	r30, 0xD8	; 216
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	8f 77       	andi	r24, 0x7F	; 127
    1b62:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1b64:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1b66:	a7 ed       	ldi	r26, 0xD7	; 215
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	8c 91       	ld	r24, X
    1b6c:	8e 7f       	andi	r24, 0xFE	; 254
    1b6e:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1b70:	80 81       	ld	r24, Z
    1b72:	8f 7e       	andi	r24, 0xEF	; 239
    1b74:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1b76:	10 92 d5 01 	sts	0x01D5, r1
    1b7a:	08 95       	ret

00001b7c <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    1b7c:	0f 93       	push	r16
    1b7e:	1f 93       	push	r17
    1b80:	cf 93       	push	r28
    1b82:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1b84:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1b88:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1b8c:	c8 ed       	ldi	r28, 0xD8	; 216
    1b8e:	d0 e0       	ldi	r29, 0x00	; 0
    1b90:	88 81       	ld	r24, Y
    1b92:	8f 77       	andi	r24, 0x7F	; 127
    1b94:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1b96:	88 81       	ld	r24, Y
    1b98:	80 68       	ori	r24, 0x80	; 128
    1b9a:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1b9c:	88 81       	ld	r24, Y
    1b9e:	8f 7d       	andi	r24, 0xDF	; 223
    1ba0:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1ba2:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1ba4:	10 92 d6 01 	sts	0x01D6, r1
	USB_Device_ConfigurationNumber  = 0;
    1ba8:	10 92 d2 01 	sts	0x01D2, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1bac:	10 92 d4 01 	sts	0x01D4, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1bb0:	10 92 d3 01 	sts	0x01D3, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1bb4:	00 ee       	ldi	r16, 0xE0	; 224
    1bb6:	10 e0       	ldi	r17, 0x00	; 0
    1bb8:	f8 01       	movw	r30, r16
    1bba:	80 81       	ld	r24, Z
    1bbc:	8b 7f       	andi	r24, 0xFB	; 251
    1bbe:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1bc0:	88 81       	ld	r24, Y
    1bc2:	81 60       	ori	r24, 0x01	; 1
    1bc4:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1bc6:	42 e0       	ldi	r20, 0x02	; 2
    1bc8:	60 e0       	ldi	r22, 0x00	; 0
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1bd0:	e1 ee       	ldi	r30, 0xE1	; 225
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	8e 7f       	andi	r24, 0xFE	; 254
    1bd8:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1bda:	e2 ee       	ldi	r30, 0xE2	; 226
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	81 60       	ori	r24, 0x01	; 1
    1be2:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1be4:	80 81       	ld	r24, Z
    1be6:	88 60       	ori	r24, 0x08	; 8
    1be8:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1bea:	f8 01       	movw	r30, r16
    1bec:	80 81       	ld	r24, Z
    1bee:	8e 7f       	andi	r24, 0xFE	; 254
    1bf0:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1bf2:	88 81       	ld	r24, Y
    1bf4:	80 61       	ori	r24, 0x10	; 16
    1bf6:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1bf8:	df 91       	pop	r29
    1bfa:	cf 91       	pop	r28
    1bfc:	1f 91       	pop	r17
    1bfe:	0f 91       	pop	r16
    1c00:	08 95       	ret

00001c02 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1c02:	e8 ed       	ldi	r30, 0xD8	; 216
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	8f 7e       	andi	r24, 0xEF	; 239
    1c0a:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1c0c:	e7 ed       	ldi	r30, 0xD7	; 215
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	81 60       	ori	r24, 0x01	; 1
    1c14:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1c16:	84 e0       	ldi	r24, 0x04	; 4
    1c18:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	80 93 d5 01 	sts	0x01D5, r24

	USB_ResetInterface();
    1c20:	0c 94 be 0d 	jmp	0x1b7c	; 0x1b7c <USB_ResetInterface>

00001c24 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1c24:	e8 ed       	ldi	r30, 0xD8	; 216
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	8e 7f       	andi	r24, 0xFE	; 254
    1c2c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1c2e:	10 92 e2 00 	sts	0x00E2, r1
    1c32:	08 95       	ret

00001c34 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1c34:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1c38:	10 92 e1 00 	sts	0x00E1, r1
    1c3c:	08 95       	ret

00001c3e <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1c3e:	1f 92       	push	r1
    1c40:	0f 92       	push	r0
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	0f 92       	push	r0
    1c46:	11 24       	eor	r1, r1
    1c48:	2f 93       	push	r18
    1c4a:	3f 93       	push	r19
    1c4c:	4f 93       	push	r20
    1c4e:	5f 93       	push	r21
    1c50:	6f 93       	push	r22
    1c52:	7f 93       	push	r23
    1c54:	8f 93       	push	r24
    1c56:	9f 93       	push	r25
    1c58:	af 93       	push	r26
    1c5a:	bf 93       	push	r27
    1c5c:	ef 93       	push	r30
    1c5e:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1c60:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1c64:	82 ff       	sbrs	r24, 2
    1c66:	0b c0       	rjmp	.+22     	; 0x1c7e <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1c68:	80 91 e2 00 	lds	r24, 0x00E2
    1c6c:	82 ff       	sbrs	r24, 2
    1c6e:	07 c0       	rjmp	.+14     	; 0x1c7e <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1c70:	80 91 e1 00 	lds	r24, 0x00E1
    1c74:	8b 7f       	andi	r24, 0xFB	; 251
    1c76:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1c7a:	0e 94 33 0a 	call	0x1466	; 0x1466 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1c7e:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1c82:	80 ff       	sbrs	r24, 0
    1c84:	1f c0       	rjmp	.+62     	; 0x1cc4 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1c86:	80 91 d8 00 	lds	r24, 0x00D8
    1c8a:	80 ff       	sbrs	r24, 0
    1c8c:	1b c0       	rjmp	.+54     	; 0x1cc4 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1c8e:	80 91 da 00 	lds	r24, 0x00DA
    1c92:	8e 7f       	andi	r24, 0xFE	; 254
    1c94:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1c98:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1c9c:	80 ff       	sbrs	r24, 0
    1c9e:	0d c0       	rjmp	.+26     	; 0x1cba <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1ca0:	80 e1       	ldi	r24, 0x10	; 16
    1ca2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1ca4:	82 e1       	ldi	r24, 0x12	; 18
    1ca6:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1ca8:	09 b4       	in	r0, 0x29	; 41
    1caa:	00 fe       	sbrs	r0, 0
    1cac:	fd cf       	rjmp	.-6      	; 0x1ca8 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	80 93 d6 01 	sts	0x01D6, r24
			EVENT_USB_Device_Connect();
    1cb4:	0e 94 16 0a 	call	0x142c	; 0x142c <EVENT_USB_Device_Connect>
    1cb8:	05 c0       	rjmp	.+10     	; 0x1cc4 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1cba:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1cbc:	10 92 d6 01 	sts	0x01D6, r1
			EVENT_USB_Device_Disconnect();
    1cc0:	0e 94 28 0a 	call	0x1450	; 0x1450 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1cc4:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1cc8:	80 ff       	sbrs	r24, 0
    1cca:	19 c0       	rjmp	.+50     	; 0x1cfe <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1ccc:	80 91 e2 00 	lds	r24, 0x00E2
    1cd0:	80 ff       	sbrs	r24, 0
    1cd2:	15 c0       	rjmp	.+42     	; 0x1cfe <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1cd4:	80 91 e2 00 	lds	r24, 0x00E2
    1cd8:	8e 7f       	andi	r24, 0xFE	; 254
    1cda:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1cde:	80 91 e2 00 	lds	r24, 0x00E2
    1ce2:	80 61       	ori	r24, 0x10	; 16
    1ce4:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1ce8:	80 91 d8 00 	lds	r24, 0x00D8
    1cec:	80 62       	ori	r24, 0x20	; 32
    1cee:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1cf2:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1cf4:	85 e0       	ldi	r24, 0x05	; 5
    1cf6:	80 93 d6 01 	sts	0x01D6, r24
		EVENT_USB_Device_Suspend();
    1cfa:	0e 94 41 0b 	call	0x1682	; 0x1682 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1cfe:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1d02:	84 ff       	sbrs	r24, 4
    1d04:	30 c0       	rjmp	.+96     	; 0x1d66 <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1d06:	80 91 e2 00 	lds	r24, 0x00E2
    1d0a:	84 ff       	sbrs	r24, 4
    1d0c:	2c c0       	rjmp	.+88     	; 0x1d66 <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1d0e:	80 e1       	ldi	r24, 0x10	; 16
    1d10:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1d12:	82 e1       	ldi	r24, 0x12	; 18
    1d14:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1d16:	09 b4       	in	r0, 0x29	; 41
    1d18:	00 fe       	sbrs	r0, 0
    1d1a:	fd cf       	rjmp	.-6      	; 0x1d16 <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1d1c:	80 91 d8 00 	lds	r24, 0x00D8
    1d20:	8f 7d       	andi	r24, 0xDF	; 223
    1d22:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1d26:	80 91 e1 00 	lds	r24, 0x00E1
    1d2a:	8f 7e       	andi	r24, 0xEF	; 239
    1d2c:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1d30:	80 91 e2 00 	lds	r24, 0x00E2
    1d34:	8f 7e       	andi	r24, 0xEF	; 239
    1d36:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1d3a:	80 91 e2 00 	lds	r24, 0x00E2
    1d3e:	81 60       	ori	r24, 0x01	; 1
    1d40:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1d44:	80 91 d2 01 	lds	r24, 0x01D2
    1d48:	88 23       	and	r24, r24
    1d4a:	11 f0       	breq	.+4      	; 0x1d50 <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1d4c:	84 e0       	ldi	r24, 0x04	; 4
    1d4e:	07 c0       	rjmp	.+14     	; 0x1d5e <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1d50:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1d54:	87 ff       	sbrs	r24, 7
    1d56:	02 c0       	rjmp	.+4      	; 0x1d5c <__vector_10+0x11e>
    1d58:	83 e0       	ldi	r24, 0x03	; 3
    1d5a:	01 c0       	rjmp	.+2      	; 0x1d5e <__vector_10+0x120>
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	80 93 d6 01 	sts	0x01D6, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1d62:	0e 94 9d 0b 	call	0x173a	; 0x173a <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1d66:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1d6a:	83 ff       	sbrs	r24, 3
    1d6c:	29 c0       	rjmp	.+82     	; 0x1dc0 <__vector_10+0x182>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1d6e:	80 91 e2 00 	lds	r24, 0x00E2
    1d72:	83 ff       	sbrs	r24, 3
    1d74:	25 c0       	rjmp	.+74     	; 0x1dc0 <__vector_10+0x182>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1d76:	80 91 e1 00 	lds	r24, 0x00E1
    1d7a:	87 7f       	andi	r24, 0xF7	; 247
    1d7c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1d80:	82 e0       	ldi	r24, 0x02	; 2
    1d82:	80 93 d6 01 	sts	0x01D6, r24
		USB_Device_ConfigurationNumber = 0;
    1d86:	10 92 d2 01 	sts	0x01D2, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1d8a:	80 91 e1 00 	lds	r24, 0x00E1
    1d8e:	8e 7f       	andi	r24, 0xFE	; 254
    1d90:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1d94:	80 91 e2 00 	lds	r24, 0x00E2
    1d98:	8e 7f       	andi	r24, 0xFE	; 254
    1d9a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1d9e:	80 91 e2 00 	lds	r24, 0x00E2
    1da2:	80 61       	ori	r24, 0x10	; 16
    1da4:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1da8:	42 e0       	ldi	r20, 0x02	; 2
    1daa:	60 e0       	ldi	r22, 0x00	; 0
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1db2:	80 91 f0 00 	lds	r24, 0x00F0
    1db6:	88 60       	ori	r24, 0x08	; 8
    1db8:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1dbc:	0e 94 2f 0a 	call	0x145e	; 0x145e <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1dc0:	ff 91       	pop	r31
    1dc2:	ef 91       	pop	r30
    1dc4:	bf 91       	pop	r27
    1dc6:	af 91       	pop	r26
    1dc8:	9f 91       	pop	r25
    1dca:	8f 91       	pop	r24
    1dcc:	7f 91       	pop	r23
    1dce:	6f 91       	pop	r22
    1dd0:	5f 91       	pop	r21
    1dd2:	4f 91       	pop	r20
    1dd4:	3f 91       	pop	r19
    1dd6:	2f 91       	pop	r18
    1dd8:	0f 90       	pop	r0
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	0f 90       	pop	r0
    1dde:	1f 90       	pop	r1
    1de0:	18 95       	reti

00001de2 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1de2:	1f 92       	push	r1
    1de4:	0f 92       	push	r0
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	0f 92       	push	r0
    1dea:	11 24       	eor	r1, r1
    1dec:	2f 93       	push	r18
    1dee:	3f 93       	push	r19
    1df0:	4f 93       	push	r20
    1df2:	5f 93       	push	r21
    1df4:	6f 93       	push	r22
    1df6:	7f 93       	push	r23
    1df8:	8f 93       	push	r24
    1dfa:	9f 93       	push	r25
    1dfc:	af 93       	push	r26
    1dfe:	bf 93       	push	r27
    1e00:	cf 93       	push	r28
    1e02:	ef 93       	push	r30
    1e04:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1e06:	c0 91 e9 00 	lds	r28, 0x00E9
    1e0a:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1e0c:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e10:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1e14:	80 91 f0 00 	lds	r24, 0x00F0
    1e18:	87 7f       	andi	r24, 0xF7	; 247
    1e1a:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1e1e:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1e20:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <USB_Device_ProcessControlRequest>
    1e24:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1e28:	80 91 f0 00 	lds	r24, 0x00F0
    1e2c:	88 60       	ori	r24, 0x08	; 8
    1e2e:	80 93 f0 00 	sts	0x00F0, r24
    1e32:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1e36:	ff 91       	pop	r31
    1e38:	ef 91       	pop	r30
    1e3a:	cf 91       	pop	r28
    1e3c:	bf 91       	pop	r27
    1e3e:	af 91       	pop	r26
    1e40:	9f 91       	pop	r25
    1e42:	8f 91       	pop	r24
    1e44:	7f 91       	pop	r23
    1e46:	6f 91       	pop	r22
    1e48:	5f 91       	pop	r21
    1e4a:	4f 91       	pop	r20
    1e4c:	3f 91       	pop	r19
    1e4e:	2f 91       	pop	r18
    1e50:	0f 90       	pop	r0
    1e52:	0f be       	out	0x3f, r0	; 63
    1e54:	0f 90       	pop	r0
    1e56:	1f 90       	pop	r1
    1e58:	18 95       	reti

00001e5a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1e5a:	1f 93       	push	r17
    1e5c:	cf 93       	push	r28
    1e5e:	df 93       	push	r29
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	aa 97       	sbiw	r28, 0x2a	; 42
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	f8 94       	cli
    1e6a:	de bf       	out	0x3e, r29	; 62
    1e6c:	0f be       	out	0x3f, r0	; 63
    1e6e:	cd bf       	out	0x3d, r28	; 61
    1e70:	e7 ed       	ldi	r30, 0xD7	; 215
    1e72:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1e74:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1e78:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1e7a:	21 e0       	ldi	r18, 0x01	; 1
    1e7c:	ef 3d       	cpi	r30, 0xDF	; 223
    1e7e:	f2 07       	cpc	r31, r18
    1e80:	c9 f7       	brne	.-14     	; 0x1e74 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1e82:	0e 94 8c 0a 	call	0x1518	; 0x1518 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1e86:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1e8a:	83 ff       	sbrs	r24, 3
    1e8c:	1c c1       	rjmp	.+568    	; 0x20c6 <USB_Device_ProcessControlRequest+0x26c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1e8e:	20 91 d7 01 	lds	r18, 0x01D7

		switch (USB_ControlRequest.bRequest)
    1e92:	30 91 d8 01 	lds	r19, 0x01D8
    1e96:	83 2f       	mov	r24, r19
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	8a 30       	cpi	r24, 0x0A	; 10
    1e9c:	91 05       	cpc	r25, r1
    1e9e:	08 f0       	brcs	.+2      	; 0x1ea2 <USB_Device_ProcessControlRequest+0x48>
    1ea0:	12 c1       	rjmp	.+548    	; 0x20c6 <USB_Device_ProcessControlRequest+0x26c>
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	ea 5a       	subi	r30, 0xAA	; 170
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	0c 94 27 2a 	jmp	0x544e	; 0x544e <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1eac:	20 38       	cpi	r18, 0x80	; 128
    1eae:	81 f0       	breq	.+32     	; 0x1ed0 <USB_Device_ProcessControlRequest+0x76>
    1eb0:	22 38       	cpi	r18, 0x82	; 130
    1eb2:	09 f0       	breq	.+2      	; 0x1eb6 <USB_Device_ProcessControlRequest+0x5c>
    1eb4:	08 c1       	rjmp	.+528    	; 0x20c6 <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1eb6:	80 91 db 01 	lds	r24, 0x01DB
    1eba:	8f 70       	andi	r24, 0x0F	; 15
    1ebc:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1ec0:	80 91 eb 00 	lds	r24, 0x00EB
    1ec4:	85 fb       	bst	r24, 5
    1ec6:	88 27       	eor	r24, r24
    1ec8:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1eca:	10 92 e9 00 	sts	0x00E9, r1
    1ece:	06 c0       	rjmp	.+12     	; 0x1edc <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1ed0:	80 91 d3 01 	lds	r24, 0x01D3
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1ed4:	90 91 d4 01 	lds	r25, 0x01D4
    1ed8:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1eda:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1edc:	90 91 e8 00 	lds	r25, 0x00E8
    1ee0:	97 7f       	andi	r25, 0xF7	; 247
    1ee2:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1ee6:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1eea:	10 92 f1 00 	sts	0x00F1, r1
    1eee:	c5 c0       	rjmp	.+394    	; 0x207a <USB_Device_ProcessControlRequest+0x220>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1ef0:	82 2f       	mov	r24, r18
    1ef2:	8d 7f       	andi	r24, 0xFD	; 253
    1ef4:	09 f0       	breq	.+2      	; 0x1ef8 <USB_Device_ProcessControlRequest+0x9e>
    1ef6:	e7 c0       	rjmp	.+462    	; 0x20c6 <USB_Device_ProcessControlRequest+0x26c>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1ef8:	22 23       	and	r18, r18
    1efa:	19 f0       	breq	.+6      	; 0x1f02 <USB_Device_ProcessControlRequest+0xa8>
    1efc:	22 30       	cpi	r18, 0x02	; 2
    1efe:	61 f0       	breq	.+24     	; 0x1f18 <USB_Device_ProcessControlRequest+0xbe>
    1f00:	e2 c0       	rjmp	.+452    	; 0x20c6 <USB_Device_ProcessControlRequest+0x26c>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1f02:	80 91 d9 01 	lds	r24, 0x01D9
    1f06:	81 30       	cpi	r24, 0x01	; 1
    1f08:	09 f0       	breq	.+2      	; 0x1f0c <USB_Device_ProcessControlRequest+0xb2>
    1f0a:	dd c0       	rjmp	.+442    	; 0x20c6 <USB_Device_ProcessControlRequest+0x26c>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1f0c:	33 30       	cpi	r19, 0x03	; 3
    1f0e:	09 f0       	breq	.+2      	; 0x1f12 <USB_Device_ProcessControlRequest+0xb8>
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	80 93 d4 01 	sts	0x01D4, r24
    1f16:	28 c0       	rjmp	.+80     	; 0x1f68 <USB_Device_ProcessControlRequest+0x10e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1f18:	80 91 d9 01 	lds	r24, 0x01D9
    1f1c:	81 11       	cpse	r24, r1
    1f1e:	24 c0       	rjmp	.+72     	; 0x1f68 <USB_Device_ProcessControlRequest+0x10e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1f20:	20 91 db 01 	lds	r18, 0x01DB
    1f24:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1f26:	09 f4       	brne	.+2      	; 0x1f2a <USB_Device_ProcessControlRequest+0xd0>
    1f28:	ce c0       	rjmp	.+412    	; 0x20c6 <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f2a:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1f2e:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1f32:	80 ff       	sbrs	r24, 0
    1f34:	19 c0       	rjmp	.+50     	; 0x1f68 <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1f36:	80 91 eb 00 	lds	r24, 0x00EB
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1f3a:	33 30       	cpi	r19, 0x03	; 3
    1f3c:	11 f4       	brne	.+4      	; 0x1f42 <USB_Device_ProcessControlRequest+0xe8>
    1f3e:	80 62       	ori	r24, 0x20	; 32
    1f40:	11 c0       	rjmp	.+34     	; 0x1f64 <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1f42:	80 61       	ori	r24, 0x10	; 16
    1f44:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	02 2e       	mov	r0, r18
    1f4e:	01 c0       	rjmp	.+2      	; 0x1f52 <USB_Device_ProcessControlRequest+0xf8>
    1f50:	88 0f       	add	r24, r24
    1f52:	0a 94       	dec	r0
    1f54:	ea f7       	brpl	.-6      	; 0x1f50 <USB_Device_ProcessControlRequest+0xf6>
    1f56:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1f5a:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1f5e:	80 91 eb 00 	lds	r24, 0x00EB
    1f62:	88 60       	ori	r24, 0x08	; 8
    1f64:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f68:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f6c:	80 91 e8 00 	lds	r24, 0x00E8
    1f70:	87 7f       	andi	r24, 0xF7	; 247
    1f72:	86 c0       	rjmp	.+268    	; 0x2080 <USB_Device_ProcessControlRequest+0x226>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1f74:	21 11       	cpse	r18, r1
    1f76:	a7 c0       	rjmp	.+334    	; 0x20c6 <USB_Device_ProcessControlRequest+0x26c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1f78:	10 91 d9 01 	lds	r17, 0x01D9
    1f7c:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1f7e:	80 91 e3 00 	lds	r24, 0x00E3
    1f82:	80 78       	andi	r24, 0x80	; 128
    1f84:	81 2b       	or	r24, r17
    1f86:	80 93 e3 00 	sts	0x00E3, r24
    1f8a:	80 91 e8 00 	lds	r24, 0x00E8
    1f8e:	87 7f       	andi	r24, 0xF7	; 247
    1f90:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1f94:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f98:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1f9c:	80 ff       	sbrs	r24, 0
    1f9e:	fc cf       	rjmp	.-8      	; 0x1f98 <USB_Device_ProcessControlRequest+0x13e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1fa0:	80 91 e3 00 	lds	r24, 0x00E3
    1fa4:	80 68       	ori	r24, 0x80	; 128
    1fa6:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1faa:	11 23       	and	r17, r17
    1fac:	11 f0       	breq	.+4      	; 0x1fb2 <USB_Device_ProcessControlRequest+0x158>
    1fae:	83 e0       	ldi	r24, 0x03	; 3
    1fb0:	01 c0       	rjmp	.+2      	; 0x1fb4 <USB_Device_ProcessControlRequest+0x15a>
    1fb2:	82 e0       	ldi	r24, 0x02	; 2
    1fb4:	80 93 d6 01 	sts	0x01D6, r24
    1fb8:	86 c0       	rjmp	.+268    	; 0x20c6 <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1fba:	20 58       	subi	r18, 0x80	; 128
    1fbc:	22 30       	cpi	r18, 0x02	; 2
    1fbe:	08 f0       	brcs	.+2      	; 0x1fc2 <USB_Device_ProcessControlRequest+0x168>
    1fc0:	82 c0       	rjmp	.+260    	; 0x20c6 <USB_Device_ProcessControlRequest+0x26c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1fc2:	80 91 d9 01 	lds	r24, 0x01D9
    1fc6:	90 91 da 01 	lds	r25, 0x01DA
    1fca:	8c 3d       	cpi	r24, 0xDC	; 220
    1fcc:	23 e0       	ldi	r18, 0x03	; 3
    1fce:	92 07       	cpc	r25, r18
    1fd0:	79 f5       	brne	.+94     	; 0x2030 <USB_Device_ProcessControlRequest+0x1d6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1fd2:	83 e0       	ldi	r24, 0x03	; 3
    1fd4:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1fd6:	8a e2       	ldi	r24, 0x2A	; 42
    1fd8:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1fda:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1fdc:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1fde:	de 01       	movw	r26, r28
    1fe0:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1fe4:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1fe6:	51 e2       	ldi	r21, 0x21	; 33
    1fe8:	e3 2f       	mov	r30, r19
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	50 93 57 00 	sts	0x0057, r21
    1ff0:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1ff2:	20 ff       	sbrs	r18, 0
    1ff4:	03 c0       	rjmp	.+6      	; 0x1ffc <USB_Device_ProcessControlRequest+0x1a2>
					{
						SerialByte >>= 4;
    1ff6:	e2 95       	swap	r30
    1ff8:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1ffa:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1ffc:	ef 70       	andi	r30, 0x0F	; 15
    1ffe:	8e 2f       	mov	r24, r30
    2000:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    2002:	ea 30       	cpi	r30, 0x0A	; 10
    2004:	10 f0       	brcs	.+4      	; 0x200a <USB_Device_ProcessControlRequest+0x1b0>
    2006:	c7 96       	adiw	r24, 0x37	; 55
    2008:	01 c0       	rjmp	.+2      	; 0x200c <USB_Device_ProcessControlRequest+0x1b2>
    200a:	c0 96       	adiw	r24, 0x30	; 48
    200c:	8d 93       	st	X+, r24
    200e:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2010:	2f 5f       	subi	r18, 0xFF	; 255
    2012:	24 31       	cpi	r18, 0x14	; 20
    2014:	49 f7       	brne	.-46     	; 0x1fe8 <USB_Device_ProcessControlRequest+0x18e>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    2016:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2018:	80 91 e8 00 	lds	r24, 0x00E8
    201c:	87 7f       	andi	r24, 0xF7	; 247
    201e:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    2022:	6a e2       	ldi	r22, 0x2A	; 42
    2024:	70 e0       	ldi	r23, 0x00	; 0
    2026:	ce 01       	movw	r24, r28
    2028:	01 96       	adiw	r24, 0x01	; 1
    202a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <Endpoint_Write_Control_Stream_LE>
    202e:	14 c0       	rjmp	.+40     	; 0x2058 <USB_Device_ProcessControlRequest+0x1fe>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    2030:	ae 01       	movw	r20, r28
    2032:	4f 5f       	subi	r20, 0xFF	; 255
    2034:	5f 4f       	sbci	r21, 0xFF	; 255
    2036:	60 91 db 01 	lds	r22, 0x01DB
    203a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <CALLBACK_USB_GetDescriptor>
    203e:	00 97       	sbiw	r24, 0x00	; 0
    2040:	09 f4       	brne	.+2      	; 0x2044 <USB_Device_ProcessControlRequest+0x1ea>
    2042:	41 c0       	rjmp	.+130    	; 0x20c6 <USB_Device_ProcessControlRequest+0x26c>
    2044:	20 91 e8 00 	lds	r18, 0x00E8
    2048:	27 7f       	andi	r18, 0xF7	; 247
    204a:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    204e:	bc 01       	movw	r22, r24
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	9a 81       	ldd	r25, Y+2	; 0x02
    2054:	0e 94 bc 0c 	call	0x1978	; 0x1978 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2058:	80 91 e8 00 	lds	r24, 0x00E8
    205c:	8b 77       	andi	r24, 0x7B	; 123
    205e:	80 93 e8 00 	sts	0x00E8, r24
    2062:	31 c0       	rjmp	.+98     	; 0x20c6 <USB_Device_ProcessControlRequest+0x26c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2064:	20 38       	cpi	r18, 0x80	; 128
    2066:	79 f5       	brne	.+94     	; 0x20c6 <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2068:	80 91 e8 00 	lds	r24, 0x00E8
    206c:	87 7f       	andi	r24, 0xF7	; 247
    206e:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2072:	80 91 d2 01 	lds	r24, 0x01D2
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2076:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    207a:	80 91 e8 00 	lds	r24, 0x00E8
    207e:	8e 77       	andi	r24, 0x7E	; 126
    2080:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2084:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <Endpoint_ClearStatusStage>
    2088:	1e c0       	rjmp	.+60     	; 0x20c6 <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    208a:	21 11       	cpse	r18, r1
    208c:	1c c0       	rjmp	.+56     	; 0x20c6 <USB_Device_ProcessControlRequest+0x26c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    208e:	90 91 d9 01 	lds	r25, 0x01D9
    2092:	92 30       	cpi	r25, 0x02	; 2
    2094:	c0 f4       	brcc	.+48     	; 0x20c6 <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2096:	80 91 e8 00 	lds	r24, 0x00E8
    209a:	87 7f       	andi	r24, 0xF7	; 247
    209c:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    20a0:	90 93 d2 01 	sts	0x01D2, r25

	Endpoint_ClearStatusStage();
    20a4:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    20a8:	80 91 d2 01 	lds	r24, 0x01D2
    20ac:	81 11       	cpse	r24, r1
    20ae:	04 c0       	rjmp	.+8      	; 0x20b8 <USB_Device_ProcessControlRequest+0x25e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    20b0:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    20b4:	87 ff       	sbrs	r24, 7
    20b6:	02 c0       	rjmp	.+4      	; 0x20bc <USB_Device_ProcessControlRequest+0x262>
    20b8:	84 e0       	ldi	r24, 0x04	; 4
    20ba:	01 c0       	rjmp	.+2      	; 0x20be <USB_Device_ProcessControlRequest+0x264>
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	80 93 d6 01 	sts	0x01D6, r24

	EVENT_USB_Device_ConfigurationChanged();
    20c2:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    20c6:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    20ca:	83 ff       	sbrs	r24, 3
    20cc:	0a c0       	rjmp	.+20     	; 0x20e2 <USB_Device_ProcessControlRequest+0x288>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20ce:	80 91 e8 00 	lds	r24, 0x00E8
    20d2:	87 7f       	andi	r24, 0xF7	; 247
    20d4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    20d8:	80 91 eb 00 	lds	r24, 0x00EB
    20dc:	80 62       	ori	r24, 0x20	; 32
    20de:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    20e2:	aa 96       	adiw	r28, 0x2a	; 42
    20e4:	0f b6       	in	r0, 0x3f	; 63
    20e6:	f8 94       	cli
    20e8:	de bf       	out	0x3e, r29	; 62
    20ea:	0f be       	out	0x3f, r0	; 63
    20ec:	cd bf       	out	0x3d, r28	; 61
    20ee:	df 91       	pop	r29
    20f0:	cf 91       	pop	r28
    20f2:	1f 91       	pop	r17
    20f4:	08 95       	ret

000020f6 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    20f6:	90 93 64 01 	sts	0x0164, r25
    20fa:	80 93 63 01 	sts	0x0163, r24
    20fe:	08 95       	ret

00002100 <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    2100:	e0 91 63 01 	lds	r30, 0x0163
    2104:	f0 91 64 01 	lds	r31, 0x0164
    2108:	30 97       	sbiw	r30, 0x00	; 0
    210a:	21 f0       	breq	.+8      	; 0x2114 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    210c:	01 90       	ld	r0, Z+
    210e:	f0 81       	ld	r31, Z
    2110:	e0 2d       	mov	r30, r0
    2112:	09 94       	ijmp
}
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	08 95       	ret

00002118 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    2118:	ff 92       	push	r15
    211a:	0f 93       	push	r16
    211c:	1f 93       	push	r17
    211e:	cf 93       	push	r28
    2120:	df 93       	push	r29
    2122:	8c 01       	movw	r16, r24
    if (!driver) return;
    2124:	e0 91 63 01 	lds	r30, 0x0163
    2128:	f0 91 64 01 	lds	r31, 0x0164
    212c:	30 97       	sbiw	r30, 0x00	; 0
    212e:	99 f1       	breq	.+102    	; 0x2196 <host_keyboard_send+0x7e>
    (*driver->send_keyboard)(report);
    2130:	02 80       	ldd	r0, Z+2	; 0x02
    2132:	f3 81       	ldd	r31, Z+3	; 0x03
    2134:	e0 2d       	mov	r30, r0
    2136:	09 95       	icall

    if (debug_keyboard) {
    2138:	80 91 c1 01 	lds	r24, 0x01C1
    213c:	82 ff       	sbrs	r24, 2
    213e:	2b c0       	rjmp	.+86     	; 0x2196 <host_keyboard_send+0x7e>
        dprint("keyboard_report: ");
    2140:	80 ff       	sbrs	r24, 0
    2142:	04 c0       	rjmp	.+8      	; 0x214c <host_keyboard_send+0x34>
    2144:	84 e1       	ldi	r24, 0x14	; 20
    2146:	94 e0       	ldi	r25, 0x04	; 4
    2148:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    214c:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    214e:	80 e1       	ldi	r24, 0x10	; 16
    2150:	f8 2e       	mov	r15, r24
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    2152:	0e e0       	ldi	r16, 0x0E	; 14
    2154:	14 e0       	ldi	r17, 0x04	; 4
    2156:	80 91 c1 01 	lds	r24, 0x01C1
    215a:	80 ff       	sbrs	r24, 0
    215c:	0b c0       	rjmp	.+22     	; 0x2174 <host_keyboard_send+0x5c>
    215e:	88 81       	ld	r24, Y
    2160:	1f 92       	push	r1
    2162:	8f 93       	push	r24
    2164:	1f 93       	push	r17
    2166:	0f 93       	push	r16
    2168:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	fa 94       	dec	r15
    2176:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    2178:	f1 10       	cpse	r15, r1
    217a:	ed cf       	rjmp	.-38     	; 0x2156 <host_keyboard_send+0x3e>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    217c:	80 91 c1 01 	lds	r24, 0x01C1
    2180:	80 ff       	sbrs	r24, 0
    2182:	09 c0       	rjmp	.+18     	; 0x2196 <host_keyboard_send+0x7e>
    2184:	8c e0       	ldi	r24, 0x0C	; 12
    2186:	94 e0       	ldi	r25, 0x04	; 4
    }
}
    2188:	df 91       	pop	r29
    218a:	cf 91       	pop	r28
    218c:	1f 91       	pop	r17
    218e:	0f 91       	pop	r16
    2190:	ff 90       	pop	r15
    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    2192:	0c 94 65 06 	jmp	0xcca	; 0xcca <xputs>
    }
}
    2196:	df 91       	pop	r29
    2198:	cf 91       	pop	r28
    219a:	1f 91       	pop	r17
    219c:	0f 91       	pop	r16
    219e:	ff 90       	pop	r15
    21a0:	08 95       	ret

000021a2 <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    21a2:	e0 91 63 01 	lds	r30, 0x0163
    21a6:	f0 91 64 01 	lds	r31, 0x0164
    21aa:	30 97       	sbiw	r30, 0x00	; 0
    21ac:	21 f0       	breq	.+8      	; 0x21b6 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    21ae:	04 80       	ldd	r0, Z+4	; 0x04
    21b0:	f5 81       	ldd	r31, Z+5	; 0x05
    21b2:	e0 2d       	mov	r30, r0
    21b4:	09 94       	ijmp
    21b6:	08 95       	ret

000021b8 <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    21b8:	20 91 61 01 	lds	r18, 0x0161
    21bc:	30 91 62 01 	lds	r19, 0x0162
    21c0:	82 17       	cp	r24, r18
    21c2:	93 07       	cpc	r25, r19
    21c4:	71 f0       	breq	.+28     	; 0x21e2 <host_system_send+0x2a>
    last_system_report = report;
    21c6:	90 93 62 01 	sts	0x0162, r25
    21ca:	80 93 61 01 	sts	0x0161, r24

    if (!driver) return;
    21ce:	e0 91 63 01 	lds	r30, 0x0163
    21d2:	f0 91 64 01 	lds	r31, 0x0164
    21d6:	30 97       	sbiw	r30, 0x00	; 0
    21d8:	21 f0       	breq	.+8      	; 0x21e2 <host_system_send+0x2a>
    (*driver->send_system)(report);
    21da:	06 80       	ldd	r0, Z+6	; 0x06
    21dc:	f7 81       	ldd	r31, Z+7	; 0x07
    21de:	e0 2d       	mov	r30, r0
    21e0:	09 94       	ijmp
    21e2:	08 95       	ret

000021e4 <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    21e4:	20 91 5f 01 	lds	r18, 0x015F
    21e8:	30 91 60 01 	lds	r19, 0x0160
    21ec:	82 17       	cp	r24, r18
    21ee:	93 07       	cpc	r25, r19
    21f0:	71 f0       	breq	.+28     	; 0x220e <host_consumer_send+0x2a>
    last_consumer_report = report;
    21f2:	90 93 60 01 	sts	0x0160, r25
    21f6:	80 93 5f 01 	sts	0x015F, r24

    if (!driver) return;
    21fa:	e0 91 63 01 	lds	r30, 0x0163
    21fe:	f0 91 64 01 	lds	r31, 0x0164
    2202:	30 97       	sbiw	r30, 0x00	; 0
    2204:	21 f0       	breq	.+8      	; 0x220e <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    2206:	00 84       	ldd	r0, Z+8	; 0x08
    2208:	f1 85       	ldd	r31, Z+9	; 0x09
    220a:	e0 2d       	mov	r30, r0
    220c:	09 94       	ijmp
    220e:	08 95       	ret

00002210 <matrix_setup>:
    return false;
}
#endif


__attribute__ ((weak)) void matrix_setup(void) {}
    2210:	08 95       	ret

00002212 <keyboard_setup>:
void keyboard_setup(void)
{
    matrix_setup();
    2212:	0c 94 08 11 	jmp	0x2210	; 0x2210 <matrix_setup>

00002216 <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    2216:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <timer_init>
    matrix_init();
    221a:	0e 94 26 07 	call	0xe4c	; 0xe4c <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    221e:	0c 94 95 1f 	jmp	0x3f2a	; 0x3f2a <bootmagic>

00002222 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    2222:	5f 92       	push	r5
    2224:	6f 92       	push	r6
    2226:	7f 92       	push	r7
    2228:	8f 92       	push	r8
    222a:	9f 92       	push	r9
    222c:	af 92       	push	r10
    222e:	bf 92       	push	r11
    2230:	cf 92       	push	r12
    2232:	df 92       	push	r13
    2234:	ef 92       	push	r14
    2236:	ff 92       	push	r15
    2238:	0f 93       	push	r16
    223a:	1f 93       	push	r17
    223c:	cf 93       	push	r28
    223e:	df 93       	push	r29
    2240:	00 d0       	rcall	.+0      	; 0x2242 <keyboard_task+0x20>
    2242:	00 d0       	rcall	.+0      	; 0x2244 <keyboard_task+0x22>
    2244:	1f 92       	push	r1
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    224a:	0e 94 61 07 	call	0xec2	; 0xec2 <matrix_scan>
    224e:	96 e6       	ldi	r25, 0x66	; 102
    2250:	c9 2e       	mov	r12, r25
    2252:	91 e0       	ldi	r25, 0x01	; 1
    2254:	d9 2e       	mov	r13, r25
    2256:	00 e0       	ldi	r16, 0x00	; 0
    2258:	10 e0       	ldi	r17, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    225a:	aa 24       	eor	r10, r10
    225c:	a3 94       	inc	r10
    225e:	b1 2c       	mov	r11, r1
    2260:	50 2e       	mov	r5, r16
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    2262:	80 2f       	mov	r24, r16
    2264:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <matrix_get_row>
    2268:	3c 01       	movw	r6, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    226a:	f6 01       	movw	r30, r12
    226c:	e1 90       	ld	r14, Z+
    226e:	f1 90       	ld	r15, Z+
    2270:	6f 01       	movw	r12, r30
    2272:	e8 26       	eor	r14, r24
    2274:	f9 26       	eor	r15, r25
        if (matrix_change) {
    2276:	e1 14       	cp	r14, r1
    2278:	f1 04       	cpc	r15, r1
    227a:	b1 f4       	brne	.+44     	; 0x22a8 <keyboard_task+0x86>
    227c:	0f 5f       	subi	r16, 0xFF	; 255
    227e:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2280:	04 30       	cpi	r16, 0x04	; 4
    2282:	11 05       	cpc	r17, r1
    2284:	69 f7       	brne	.-38     	; 0x2260 <keyboard_task+0x3e>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    2286:	8f ef       	ldi	r24, 0xFF	; 255
    2288:	89 83       	std	Y+1, r24	; 0x01
    228a:	8a 83       	std	Y+2, r24	; 0x02
    228c:	1b 82       	std	Y+3, r1	; 0x03
    228e:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <timer_read>
    2292:	81 60       	ori	r24, 0x01	; 1
    2294:	78 2f       	mov	r23, r24
    2296:	9d 83       	std	Y+5, r25	; 0x05
    2298:	8c 83       	std	Y+4, r24	; 0x04
    229a:	49 81       	ldd	r20, Y+1	; 0x01
    229c:	5a 81       	ldd	r21, Y+2	; 0x02
    229e:	6b 81       	ldd	r22, Y+3	; 0x03
    22a0:	8d 81       	ldd	r24, Y+5	; 0x05
    22a2:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <action_exec>
    22a6:	41 c0       	rjmp	.+130    	; 0x232a <keyboard_task+0x108>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    22a8:	80 91 c1 01 	lds	r24, 0x01C1
    22ac:	81 fd       	sbrc	r24, 1
    22ae:	0e 94 85 08 	call	0x110a	; 0x110a <matrix_print>
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    22b6:	45 01       	movw	r8, r10
    22b8:	02 2e       	mov	r0, r18
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <keyboard_task+0x9e>
    22bc:	88 0c       	add	r8, r8
    22be:	99 1c       	adc	r9, r9
    22c0:	0a 94       	dec	r0
    22c2:	e2 f7       	brpl	.-8      	; 0x22bc <keyboard_task+0x9a>
    22c4:	c4 01       	movw	r24, r8
    22c6:	8e 21       	and	r24, r14
    22c8:	9f 21       	and	r25, r15
    22ca:	89 2b       	or	r24, r25
    22cc:	41 f1       	breq	.+80     	; 0x231e <keyboard_task+0xfc>
                    keyevent_t e = (keyevent_t){
    22ce:	29 83       	std	Y+1, r18	; 0x01
    22d0:	5a 82       	std	Y+2, r5	; 0x02
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    22d2:	68 20       	and	r6, r8
    22d4:	79 20       	and	r7, r9
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	67 28       	or	r6, r7
    22da:	09 f4       	brne	.+2      	; 0x22de <keyboard_task+0xbc>
    22dc:	80 e0       	ldi	r24, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    22de:	8b 83       	std	Y+3, r24	; 0x03
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    22e0:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <timer_read>
    22e4:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    22e6:	78 2f       	mov	r23, r24
    22e8:	9d 83       	std	Y+5, r25	; 0x05
    22ea:	8c 83       	std	Y+4, r24	; 0x04
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    };
                    action_exec(e);
    22ec:	49 81       	ldd	r20, Y+1	; 0x01
    22ee:	5a 81       	ldd	r21, Y+2	; 0x02
    22f0:	6b 81       	ldd	r22, Y+3	; 0x03
    22f2:	8d 81       	ldd	r24, Y+5	; 0x05
    22f4:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <action_exec>
                    hook_matrix_change(e);
    22f8:	49 81       	ldd	r20, Y+1	; 0x01
    22fa:	5a 81       	ldd	r21, Y+2	; 0x02
    22fc:	6b 81       	ldd	r22, Y+3	; 0x03
    22fe:	7c 81       	ldd	r23, Y+4	; 0x04
    2300:	8d 81       	ldd	r24, Y+5	; 0x05
    2302:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    2306:	f8 01       	movw	r30, r16
    2308:	ee 0f       	add	r30, r30
    230a:	ff 1f       	adc	r31, r31
    230c:	ea 59       	subi	r30, 0x9A	; 154
    230e:	fe 4f       	sbci	r31, 0xFE	; 254
    2310:	80 81       	ld	r24, Z
    2312:	91 81       	ldd	r25, Z+1	; 0x01
    2314:	88 25       	eor	r24, r8
    2316:	99 25       	eor	r25, r9
    2318:	91 83       	std	Z+1, r25	; 0x01
    231a:	80 83       	st	Z, r24
    231c:	06 c0       	rjmp	.+12     	; 0x232a <keyboard_task+0x108>
    231e:	2f 5f       	subi	r18, 0xFF	; 255
    2320:	3f 4f       	sbci	r19, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    2322:	2c 30       	cpi	r18, 0x0C	; 12
    2324:	31 05       	cpc	r19, r1
    2326:	39 f6       	brne	.-114    	; 0x22b6 <keyboard_task+0x94>
    2328:	a9 cf       	rjmp	.-174    	; 0x227c <keyboard_task+0x5a>
    // call with pseudo tick event when no real key event.
    action_exec(TICK);

MATRIX_LOOP_END:

    hook_keyboard_loop();
    232a:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    232e:	0e 94 1c 23 	call	0x4638	; 0x4638 <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    2332:	10 91 65 01 	lds	r17, 0x0165
    2336:	0e 94 80 10 	call	0x2100	; 0x2100 <host_keyboard_leds>
    233a:	18 17       	cp	r17, r24
    233c:	71 f1       	breq	.+92     	; 0x239a <keyboard_task+0x178>
        led_status = host_keyboard_leds();
    233e:	0e 94 80 10 	call	0x2100	; 0x2100 <host_keyboard_leds>
    2342:	80 93 65 01 	sts	0x0165, r24
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    2346:	90 91 c1 01 	lds	r25, 0x01C1
    234a:	92 ff       	sbrs	r25, 2
    234c:	0e c0       	rjmp	.+28     	; 0x236a <keyboard_task+0x148>
    234e:	90 ff       	sbrs	r25, 0
    2350:	0c c0       	rjmp	.+24     	; 0x236a <keyboard_task+0x148>
    2352:	1f 92       	push	r1
    2354:	8f 93       	push	r24
    2356:	86 e2       	ldi	r24, 0x26	; 38
    2358:	94 e0       	ldi	r25, 0x04	; 4
    235a:	9f 93       	push	r25
    235c:	8f 93       	push	r24
    235e:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    2362:	0f 90       	pop	r0
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    236a:	80 91 65 01 	lds	r24, 0x0165
    }
}
    236e:	0f 90       	pop	r0
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	0f 90       	pop	r0
    2378:	df 91       	pop	r29
    237a:	cf 91       	pop	r28
    237c:	1f 91       	pop	r17
    237e:	0f 91       	pop	r16
    2380:	ff 90       	pop	r15
    2382:	ef 90       	pop	r14
    2384:	df 90       	pop	r13
    2386:	cf 90       	pop	r12
    2388:	bf 90       	pop	r11
    238a:	af 90       	pop	r10
    238c:	9f 90       	pop	r9
    238e:	8f 90       	pop	r8
    2390:	7f 90       	pop	r7
    2392:	6f 90       	pop	r6
    2394:	5f 90       	pop	r5

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
        hook_keyboard_leds_change(led_status);
    2396:	0c 94 09 1d 	jmp	0x3a12	; 0x3a12 <hook_keyboard_leds_change>
    }
}
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	df 91       	pop	r29
    23a6:	cf 91       	pop	r28
    23a8:	1f 91       	pop	r17
    23aa:	0f 91       	pop	r16
    23ac:	ff 90       	pop	r15
    23ae:	ef 90       	pop	r14
    23b0:	df 90       	pop	r13
    23b2:	cf 90       	pop	r12
    23b4:	bf 90       	pop	r11
    23b6:	af 90       	pop	r10
    23b8:	9f 90       	pop	r9
    23ba:	8f 90       	pop	r8
    23bc:	7f 90       	pop	r7
    23be:	6f 90       	pop	r6
    23c0:	5f 90       	pop	r5
    23c2:	08 95       	ret

000023c4 <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    23c4:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <led_set>

000023c8 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    23c8:	cf 93       	push	r28
    23ca:	df 93       	push	r29
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	2b 97       	sbiw	r28, 0x0b	; 11
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	f8 94       	cli
    23d6:	de bf       	out	0x3e, r29	; 62
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	cd bf       	out	0x3d, r28	; 61
    23dc:	4f 83       	std	Y+7, r20	; 0x07
    23de:	58 87       	std	Y+8, r21	; 0x08
    23e0:	69 87       	std	Y+9, r22	; 0x09
    23e2:	7a 87       	std	Y+10, r23	; 0x0a
    23e4:	8b 87       	std	Y+11, r24	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    23e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    23e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    23ea:	89 2b       	or	r24, r25
    23ec:	31 f0       	breq	.+12     	; 0x23fa <action_exec+0x32>
    23ee:	5f 3f       	cpi	r21, 0xFF	; 255
    23f0:	11 f0       	breq	.+4      	; 0x23f6 <action_exec+0x2e>
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	03 c0       	rjmp	.+6      	; 0x23fc <action_exec+0x34>
    23f6:	4f 3f       	cpi	r20, 0xFF	; 255
    23f8:	e1 f7       	brne	.-8      	; 0x23f2 <action_exec+0x2a>
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    if (!IS_NOEVENT(event)) {
    23fc:	81 11       	cpse	r24, r1
    23fe:	07 c0       	rjmp	.+14     	; 0x240e <action_exec+0x46>
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    2400:	4f 81       	ldd	r20, Y+7	; 0x07
    2402:	58 85       	ldd	r21, Y+8	; 0x08
    2404:	69 85       	ldd	r22, Y+9	; 0x09
    2406:	7a 85       	ldd	r23, Y+10	; 0x0a
    2408:	8b 85       	ldd	r24, Y+11	; 0x0b
    240a:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <hook_matrix_change>
    }

    keyrecord_t record = { .event = event };
    240e:	de 01       	movw	r26, r28
    2410:	11 96       	adiw	r26, 0x01	; 1
    2412:	86 e0       	ldi	r24, 0x06	; 6
    2414:	fd 01       	movw	r30, r26
    2416:	11 92       	st	Z+, r1
    2418:	8a 95       	dec	r24
    241a:	e9 f7       	brne	.-6      	; 0x2416 <action_exec+0x4e>
    241c:	85 e0       	ldi	r24, 0x05	; 5
    241e:	fe 01       	movw	r30, r28
    2420:	37 96       	adiw	r30, 0x07	; 7
    2422:	01 90       	ld	r0, Z+
    2424:	0d 92       	st	X+, r0
    2426:	8a 95       	dec	r24
    2428:	e1 f7       	brne	.-8      	; 0x2422 <action_exec+0x5a>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    242a:	49 81       	ldd	r20, Y+1	; 0x01
    242c:	5a 81       	ldd	r21, Y+2	; 0x02
    242e:	6b 81       	ldd	r22, Y+3	; 0x03
    2430:	7c 81       	ldd	r23, Y+4	; 0x04
    2432:	8d 81       	ldd	r24, Y+5	; 0x05
    2434:	9e 81       	ldd	r25, Y+6	; 0x06
    2436:	0e 94 41 19 	call	0x3282	; 0x3282 <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    243a:	2b 96       	adiw	r28, 0x0b	; 11
    243c:	0f b6       	in	r0, 0x3f	; 63
    243e:	f8 94       	cli
    2440:	de bf       	out	0x3e, r29	; 62
    2442:	0f be       	out	0x3f, r0	; 63
    2444:	cd bf       	out	0x3d, r28	; 61
    2446:	df 91       	pop	r29
    2448:	cf 91       	pop	r28
    244a:	08 95       	ret

0000244c <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    244c:	cf 93       	push	r28
    244e:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    2450:	88 23       	and	r24, r24
    2452:	09 f4       	brne	.+2      	; 0x2456 <register_code+0xa>
    2454:	cc c0       	rjmp	.+408    	; 0x25ee <register_code+0x1a2>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2456:	82 38       	cpi	r24, 0x82	; 130
    2458:	59 f4       	brne	.+22     	; 0x2470 <register_code+0x24>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    245a:	0e 94 80 10 	call	0x2100	; 0x2100 <host_keyboard_leds>
    245e:	81 fd       	sbrc	r24, 1
    2460:	c6 c0       	rjmp	.+396    	; 0x25ee <register_code+0x1a2>
#endif
        add_key(KC_CAPSLOCK);
    2462:	89 e3       	ldi	r24, 0x39	; 57
    2464:	0e 94 be 1b 	call	0x377c	; 0x377c <add_key>
        send_keyboard_report();
    2468:	0e 94 a0 1c 	call	0x3940	; 0x3940 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    246c:	89 e3       	ldi	r24, 0x39	; 57
    246e:	0c c0       	rjmp	.+24     	; 0x2488 <register_code+0x3c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    2470:	83 38       	cpi	r24, 0x83	; 131
    2472:	79 f4       	brne	.+30     	; 0x2492 <register_code+0x46>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    2474:	0e 94 80 10 	call	0x2100	; 0x2100 <host_keyboard_leds>
    2478:	80 fd       	sbrc	r24, 0
    247a:	b9 c0       	rjmp	.+370    	; 0x25ee <register_code+0x1a2>
#endif
        add_key(KC_NUMLOCK);
    247c:	83 e5       	ldi	r24, 0x53	; 83
    247e:	0e 94 be 1b 	call	0x377c	; 0x377c <add_key>
        send_keyboard_report();
    2482:	0e 94 a0 1c 	call	0x3940	; 0x3940 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    2486:	83 e5       	ldi	r24, 0x53	; 83
    2488:	0e 94 0f 1c 	call	0x381e	; 0x381e <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    248c:	cf 91       	pop	r28
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        del_key(KC_NUMLOCK);
        send_keyboard_report();
    248e:	0c 94 a0 1c 	jmp	0x3940	; 0x3940 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2492:	84 38       	cpi	r24, 0x84	; 132
    2494:	59 f4       	brne	.+22     	; 0x24ac <register_code+0x60>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    2496:	0e 94 80 10 	call	0x2100	; 0x2100 <host_keyboard_leds>
    249a:	82 fd       	sbrc	r24, 2
    249c:	a8 c0       	rjmp	.+336    	; 0x25ee <register_code+0x1a2>
#endif
        add_key(KC_SCROLLLOCK);
    249e:	87 e4       	ldi	r24, 0x47	; 71
    24a0:	0e 94 be 1b 	call	0x377c	; 0x377c <add_key>
        send_keyboard_report();
    24a4:	0e 94 a0 1c 	call	0x3940	; 0x3940 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    24a8:	87 e4       	ldi	r24, 0x47	; 71
    24aa:	ee cf       	rjmp	.-36     	; 0x2488 <register_code+0x3c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    24ac:	8c ef       	ldi	r24, 0xFC	; 252
    24ae:	8c 0f       	add	r24, r28
    24b0:	81 3a       	cpi	r24, 0xA1	; 161
    24b2:	48 f4       	brcc	.+18     	; 0x24c6 <register_code+0x7a>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    24b4:	8c 2f       	mov	r24, r28
    24b6:	0e 94 93 27 	call	0x4f26	; 0x4f26 <command_proc>
    24ba:	81 11       	cpse	r24, r1
    24bc:	98 c0       	rjmp	.+304    	; 0x25ee <register_code+0x1a2>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    24be:	8c 2f       	mov	r24, r28
    24c0:	0e 94 be 1b 	call	0x377c	; 0x377c <add_key>
    24c4:	e3 cf       	rjmp	.-58     	; 0x248c <register_code+0x40>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    24c6:	80 e2       	ldi	r24, 0x20	; 32
    24c8:	8c 0f       	add	r24, r28
    24ca:	88 30       	cpi	r24, 0x08	; 8
    24cc:	48 f4       	brcc	.+18     	; 0x24e0 <register_code+0x94>
        add_mods(MOD_BIT(code));
    24ce:	c7 70       	andi	r28, 0x07	; 7
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	01 c0       	rjmp	.+2      	; 0x24d6 <register_code+0x8a>
    24d4:	88 0f       	add	r24, r24
    24d6:	ca 95       	dec	r28
    24d8:	ea f7       	brpl	.-6      	; 0x24d4 <register_code+0x88>
    24da:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <add_mods>
    24de:	d6 cf       	rjmp	.-84     	; 0x248c <register_code+0x40>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    24e0:	8b e5       	ldi	r24, 0x5B	; 91
    24e2:	8c 0f       	add	r24, r28
    24e4:	83 30       	cpi	r24, 0x03	; 3
    24e6:	78 f4       	brcc	.+30     	; 0x2506 <register_code+0xba>
        host_system_send(KEYCODE2SYSTEM(code));
    24e8:	c5 3a       	cpi	r28, 0xA5	; 165
    24ea:	29 f0       	breq	.+10     	; 0x24f6 <register_code+0xaa>
    24ec:	c6 3a       	cpi	r28, 0xA6	; 166
    24ee:	31 f4       	brne	.+12     	; 0x24fc <register_code+0xb0>
    24f0:	82 e8       	ldi	r24, 0x82	; 130
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	05 c0       	rjmp	.+10     	; 0x2500 <register_code+0xb4>
    24f6:	81 e8       	ldi	r24, 0x81	; 129
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	02 c0       	rjmp	.+4      	; 0x2500 <register_code+0xb4>
    24fc:	83 e8       	ldi	r24, 0x83	; 131
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2500:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    2502:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2506:	88 e5       	ldi	r24, 0x58	; 88
    2508:	8c 0f       	add	r24, r28
    250a:	85 31       	cpi	r24, 0x15	; 21
    250c:	08 f0       	brcs	.+2      	; 0x2510 <register_code+0xc4>
    250e:	6f c0       	rjmp	.+222    	; 0x25ee <register_code+0x1a2>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2510:	c8 3a       	cpi	r28, 0xA8	; 168
    2512:	61 f1       	breq	.+88     	; 0x256c <register_code+0x120>
    2514:	c9 3a       	cpi	r28, 0xA9	; 169
    2516:	69 f1       	breq	.+90     	; 0x2572 <register_code+0x126>
    2518:	ca 3a       	cpi	r28, 0xAA	; 170
    251a:	71 f1       	breq	.+92     	; 0x2578 <register_code+0x12c>
    251c:	cb 3a       	cpi	r28, 0xAB	; 171
    251e:	79 f1       	breq	.+94     	; 0x257e <register_code+0x132>
    2520:	cc 3a       	cpi	r28, 0xAC	; 172
    2522:	81 f1       	breq	.+96     	; 0x2584 <register_code+0x138>
    2524:	cd 3a       	cpi	r28, 0xAD	; 173
    2526:	89 f1       	breq	.+98     	; 0x258a <register_code+0x13e>
    2528:	ce 3a       	cpi	r28, 0xAE	; 174
    252a:	91 f1       	breq	.+100    	; 0x2590 <register_code+0x144>
    252c:	cf 3a       	cpi	r28, 0xAF	; 175
    252e:	99 f1       	breq	.+102    	; 0x2596 <register_code+0x14a>
    2530:	c1 3b       	cpi	r28, 0xB1	; 177
    2532:	a1 f1       	breq	.+104    	; 0x259c <register_code+0x150>
    2534:	c0 3b       	cpi	r28, 0xB0	; 176
    2536:	a9 f1       	breq	.+106    	; 0x25a2 <register_code+0x156>
    2538:	c2 3b       	cpi	r28, 0xB2	; 178
    253a:	b1 f1       	breq	.+108    	; 0x25a8 <register_code+0x15c>
    253c:	c3 3b       	cpi	r28, 0xB3	; 179
    253e:	b9 f1       	breq	.+110    	; 0x25ae <register_code+0x162>
    2540:	c4 3b       	cpi	r28, 0xB4	; 180
    2542:	c1 f1       	breq	.+112    	; 0x25b4 <register_code+0x168>
    2544:	c5 3b       	cpi	r28, 0xB5	; 181
    2546:	c9 f1       	breq	.+114    	; 0x25ba <register_code+0x16e>
    2548:	c6 3b       	cpi	r28, 0xB6	; 182
    254a:	d1 f1       	breq	.+116    	; 0x25c0 <register_code+0x174>
    254c:	c7 3b       	cpi	r28, 0xB7	; 183
    254e:	d9 f1       	breq	.+118    	; 0x25c6 <register_code+0x17a>
    2550:	c8 3b       	cpi	r28, 0xB8	; 184
    2552:	e1 f1       	breq	.+120    	; 0x25cc <register_code+0x180>
    2554:	c9 3b       	cpi	r28, 0xB9	; 185
    2556:	e9 f1       	breq	.+122    	; 0x25d2 <register_code+0x186>
    2558:	ca 3b       	cpi	r28, 0xBA	; 186
    255a:	f1 f1       	breq	.+124    	; 0x25d8 <register_code+0x18c>
    255c:	cb 3b       	cpi	r28, 0xBB	; 187
    255e:	f9 f1       	breq	.+126    	; 0x25de <register_code+0x192>
    2560:	cc 3b       	cpi	r28, 0xBC	; 188
    2562:	09 f0       	breq	.+2      	; 0x2566 <register_code+0x11a>
    2564:	3f c0       	rjmp	.+126    	; 0x25e4 <register_code+0x198>
    2566:	8a e2       	ldi	r24, 0x2A	; 42
    2568:	92 e0       	ldi	r25, 0x02	; 2
    256a:	3e c0       	rjmp	.+124    	; 0x25e8 <register_code+0x19c>
    256c:	82 ee       	ldi	r24, 0xE2	; 226
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	3b c0       	rjmp	.+118    	; 0x25e8 <register_code+0x19c>
    2572:	89 ee       	ldi	r24, 0xE9	; 233
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	38 c0       	rjmp	.+112    	; 0x25e8 <register_code+0x19c>
    2578:	8a ee       	ldi	r24, 0xEA	; 234
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	35 c0       	rjmp	.+106    	; 0x25e8 <register_code+0x19c>
    257e:	85 eb       	ldi	r24, 0xB5	; 181
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	32 c0       	rjmp	.+100    	; 0x25e8 <register_code+0x19c>
    2584:	86 eb       	ldi	r24, 0xB6	; 182
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	2f c0       	rjmp	.+94     	; 0x25e8 <register_code+0x19c>
    258a:	83 eb       	ldi	r24, 0xB3	; 179
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	2c c0       	rjmp	.+88     	; 0x25e8 <register_code+0x19c>
    2590:	84 eb       	ldi	r24, 0xB4	; 180
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	29 c0       	rjmp	.+82     	; 0x25e8 <register_code+0x19c>
    2596:	87 eb       	ldi	r24, 0xB7	; 183
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	26 c0       	rjmp	.+76     	; 0x25e8 <register_code+0x19c>
    259c:	8c ec       	ldi	r24, 0xCC	; 204
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	23 c0       	rjmp	.+70     	; 0x25e8 <register_code+0x19c>
    25a2:	8d ec       	ldi	r24, 0xCD	; 205
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	20 c0       	rjmp	.+64     	; 0x25e8 <register_code+0x19c>
    25a8:	83 e8       	ldi	r24, 0x83	; 131
    25aa:	91 e0       	ldi	r25, 0x01	; 1
    25ac:	1d c0       	rjmp	.+58     	; 0x25e8 <register_code+0x19c>
    25ae:	8a e8       	ldi	r24, 0x8A	; 138
    25b0:	91 e0       	ldi	r25, 0x01	; 1
    25b2:	1a c0       	rjmp	.+52     	; 0x25e8 <register_code+0x19c>
    25b4:	82 e9       	ldi	r24, 0x92	; 146
    25b6:	91 e0       	ldi	r25, 0x01	; 1
    25b8:	17 c0       	rjmp	.+46     	; 0x25e8 <register_code+0x19c>
    25ba:	84 e9       	ldi	r24, 0x94	; 148
    25bc:	91 e0       	ldi	r25, 0x01	; 1
    25be:	14 c0       	rjmp	.+40     	; 0x25e8 <register_code+0x19c>
    25c0:	81 e2       	ldi	r24, 0x21	; 33
    25c2:	92 e0       	ldi	r25, 0x02	; 2
    25c4:	11 c0       	rjmp	.+34     	; 0x25e8 <register_code+0x19c>
    25c6:	83 e2       	ldi	r24, 0x23	; 35
    25c8:	92 e0       	ldi	r25, 0x02	; 2
    25ca:	0e c0       	rjmp	.+28     	; 0x25e8 <register_code+0x19c>
    25cc:	84 e2       	ldi	r24, 0x24	; 36
    25ce:	92 e0       	ldi	r25, 0x02	; 2
    25d0:	0b c0       	rjmp	.+22     	; 0x25e8 <register_code+0x19c>
    25d2:	85 e2       	ldi	r24, 0x25	; 37
    25d4:	92 e0       	ldi	r25, 0x02	; 2
    25d6:	08 c0       	rjmp	.+16     	; 0x25e8 <register_code+0x19c>
    25d8:	86 e2       	ldi	r24, 0x26	; 38
    25da:	92 e0       	ldi	r25, 0x02	; 2
    25dc:	05 c0       	rjmp	.+10     	; 0x25e8 <register_code+0x19c>
    25de:	87 e2       	ldi	r24, 0x27	; 39
    25e0:	92 e0       	ldi	r25, 0x02	; 2
    25e2:	02 c0       	rjmp	.+4      	; 0x25e8 <register_code+0x19c>
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    25e8:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    25ea:	0c 94 f2 10 	jmp	0x21e4	; 0x21e4 <host_consumer_send>
    }
}
    25ee:	cf 91       	pop	r28
    25f0:	08 95       	ret

000025f2 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    25f2:	88 23       	and	r24, r24
    25f4:	09 f4       	brne	.+2      	; 0x25f8 <unregister_code+0x6>
    25f6:	4b c0       	rjmp	.+150    	; 0x268e <unregister_code+0x9c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    25f8:	82 38       	cpi	r24, 0x82	; 130
    25fa:	59 f4       	brne	.+22     	; 0x2612 <unregister_code+0x20>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    25fc:	0e 94 80 10 	call	0x2100	; 0x2100 <host_keyboard_leds>
    2600:	81 ff       	sbrs	r24, 1
    2602:	45 c0       	rjmp	.+138    	; 0x268e <unregister_code+0x9c>
#endif
        add_key(KC_CAPSLOCK);
    2604:	89 e3       	ldi	r24, 0x39	; 57
    2606:	0e 94 be 1b 	call	0x377c	; 0x377c <add_key>
        send_keyboard_report();
    260a:	0e 94 a0 1c 	call	0x3940	; 0x3940 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    260e:	89 e3       	ldi	r24, 0x39	; 57
    2610:	0c c0       	rjmp	.+24     	; 0x262a <unregister_code+0x38>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    2612:	83 38       	cpi	r24, 0x83	; 131
    2614:	71 f4       	brne	.+28     	; 0x2632 <unregister_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    2616:	0e 94 80 10 	call	0x2100	; 0x2100 <host_keyboard_leds>
    261a:	80 ff       	sbrs	r24, 0
    261c:	38 c0       	rjmp	.+112    	; 0x268e <unregister_code+0x9c>
#endif
        add_key(KC_NUMLOCK);
    261e:	83 e5       	ldi	r24, 0x53	; 83
    2620:	0e 94 be 1b 	call	0x377c	; 0x377c <add_key>
        send_keyboard_report();
    2624:	0e 94 a0 1c 	call	0x3940	; 0x3940 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    2628:	83 e5       	ldi	r24, 0x53	; 83
    262a:	0e 94 0f 1c 	call	0x381e	; 0x381e <del_key>
        send_keyboard_report();
    262e:	0c 94 a0 1c 	jmp	0x3940	; 0x3940 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2632:	84 38       	cpi	r24, 0x84	; 132
    2634:	59 f4       	brne	.+22     	; 0x264c <unregister_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    2636:	0e 94 80 10 	call	0x2100	; 0x2100 <host_keyboard_leds>
    263a:	82 ff       	sbrs	r24, 2
    263c:	28 c0       	rjmp	.+80     	; 0x268e <unregister_code+0x9c>
#endif
        add_key(KC_SCROLLLOCK);
    263e:	87 e4       	ldi	r24, 0x47	; 71
    2640:	0e 94 be 1b 	call	0x377c	; 0x377c <add_key>
        send_keyboard_report();
    2644:	0e 94 a0 1c 	call	0x3940	; 0x3940 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    2648:	87 e4       	ldi	r24, 0x47	; 71
    264a:	ef cf       	rjmp	.-34     	; 0x262a <unregister_code+0x38>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    264c:	9c ef       	ldi	r25, 0xFC	; 252
    264e:	98 0f       	add	r25, r24
    2650:	91 3a       	cpi	r25, 0xA1	; 161
    2652:	58 f3       	brcs	.-42     	; 0x262a <unregister_code+0x38>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    2654:	90 e2       	ldi	r25, 0x20	; 32
    2656:	98 0f       	add	r25, r24
    2658:	98 30       	cpi	r25, 0x08	; 8
    265a:	50 f4       	brcc	.+20     	; 0x2670 <unregister_code+0x7e>
        del_mods(MOD_BIT(code));
    265c:	87 70       	andi	r24, 0x07	; 7
    265e:	91 e0       	ldi	r25, 0x01	; 1
    2660:	01 c0       	rjmp	.+2      	; 0x2664 <unregister_code+0x72>
    2662:	99 0f       	add	r25, r25
    2664:	8a 95       	dec	r24
    2666:	ea f7       	brpl	.-6      	; 0x2662 <unregister_code+0x70>
    2668:	89 2f       	mov	r24, r25
    266a:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <del_mods>
    266e:	df cf       	rjmp	.-66     	; 0x262e <unregister_code+0x3c>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2670:	9b e5       	ldi	r25, 0x5B	; 91
    2672:	98 0f       	add	r25, r24
    2674:	93 30       	cpi	r25, 0x03	; 3
    2676:	20 f4       	brcc	.+8      	; 0x2680 <unregister_code+0x8e>
        host_system_send(0);
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2680:	88 5a       	subi	r24, 0xA8	; 168
    2682:	85 31       	cpi	r24, 0x15	; 21
    2684:	20 f4       	brcc	.+8      	; 0x268e <unregister_code+0x9c>
        host_consumer_send(0);
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	0c 94 f2 10 	jmp	0x21e4	; 0x21e4 <host_consumer_send>
    268e:	08 95       	ret

00002690 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    2690:	88 23       	and	r24, r24
    2692:	21 f0       	breq	.+8      	; 0x269c <register_mods+0xc>
        add_mods(mods);
    2694:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <add_mods>
        send_keyboard_report();
    2698:	0c 94 a0 1c 	jmp	0x3940	; 0x3940 <send_keyboard_report>
    269c:	08 95       	ret

0000269e <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    269e:	88 23       	and	r24, r24
    26a0:	21 f0       	breq	.+8      	; 0x26aa <unregister_mods+0xc>
        del_mods(mods);
    26a2:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <del_mods>
        send_keyboard_report();
    26a6:	0c 94 a0 1c 	jmp	0x3940	; 0x3940 <send_keyboard_report>
    26aa:	08 95       	ret

000026ac <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    26ac:	cf 92       	push	r12
    26ae:	df 92       	push	r13
    26b0:	ef 92       	push	r14
    26b2:	ff 92       	push	r15
    26b4:	0f 93       	push	r16
    26b6:	1f 93       	push	r17
    26b8:	cf 93       	push	r28
    26ba:	df 93       	push	r29
    26bc:	cd b7       	in	r28, 0x3d	; 61
    26be:	de b7       	in	r29, 0x3e	; 62
    26c0:	28 97       	sbiw	r28, 0x08	; 8
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	f8 94       	cli
    26c6:	de bf       	out	0x3e, r29	; 62
    26c8:	0f be       	out	0x3f, r0	; 63
    26ca:	cd bf       	out	0x3d, r28	; 61
    26cc:	8c 01       	movw	r16, r24
    keyevent_t event = record->event;
    26ce:	85 e0       	ldi	r24, 0x05	; 5
    26d0:	f8 01       	movw	r30, r16
    26d2:	de 01       	movw	r26, r28
    26d4:	11 96       	adiw	r26, 0x01	; 1
    26d6:	01 90       	ld	r0, Z+
    26d8:	0d 92       	st	X+, r0
    26da:	8a 95       	dec	r24
    26dc:	e1 f7       	brne	.-8      	; 0x26d6 <process_action+0x2a>
    26de:	f8 01       	movw	r30, r16
    26e0:	40 81       	ld	r20, Z
    26e2:	31 81       	ldd	r19, Z+1	; 0x01
    26e4:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    26e6:	25 81       	ldd	r18, Z+5	; 0x05
    26e8:	22 95       	swap	r18
    26ea:	2f 70       	andi	r18, 0x0F	; 15
    26ec:	83 81       	ldd	r24, Z+3	; 0x03
    26ee:	94 81       	ldd	r25, Z+4	; 0x04
    26f0:	89 2b       	or	r24, r25
    26f2:	31 f0       	breq	.+12     	; 0x2700 <process_action+0x54>
    26f4:	3f 3f       	cpi	r19, 0xFF	; 255
    26f6:	31 f4       	brne	.+12     	; 0x2704 <process_action+0x58>
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	4f 3f       	cpi	r20, 0xFF	; 255
    26fc:	19 f4       	brne	.+6      	; 0x2704 <process_action+0x58>
    26fe:	03 c0       	rjmp	.+6      	; 0x2706 <process_action+0x5a>
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	01 c0       	rjmp	.+2      	; 0x2706 <process_action+0x5a>
    2704:	80 e0       	ldi	r24, 0x00	; 0
#endif

    if (IS_NOEVENT(event)) { return; }
    2706:	80 fd       	sbrc	r24, 0
    2708:	cf c2       	rjmp	.+1438   	; 0x2ca8 <process_action+0x5fc>

    action_t action = layer_switch_get_action(event.key);
    270a:	49 83       	std	Y+1, r20	; 0x01
    270c:	3a 83       	std	Y+2, r19	; 0x02
    270e:	89 81       	ldd	r24, Y+1	; 0x01
    2710:	9a 81       	ldd	r25, Y+2	; 0x02
    2712:	2f 83       	std	Y+7, r18	; 0x07
    2714:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <layer_switch_get_action>
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    2718:	9e 83       	std	Y+6, r25	; 0x06
    271a:	88 87       	std	Y+8, r24	; 0x08
    271c:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2720:	0e 94 a3 1a 	call	0x3546	; 0x3546 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    2724:	4e 81       	ldd	r20, Y+6	; 0x06
    2726:	e4 2f       	mov	r30, r20
    2728:	e2 95       	swap	r30
    272a:	ef 70       	andi	r30, 0x0F	; 15
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	e0 5a       	subi	r30, 0xA0	; 160
    2730:	ff 4f       	sbci	r31, 0xFF	; 255
    2732:	2f 81       	ldd	r18, Y+7	; 0x07
    2734:	68 85       	ldd	r22, Y+8	; 0x08
    2736:	0c 94 27 2a 	jmp	0x544e	; 0x544e <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    273a:	84 2f       	mov	r24, r20
    273c:	80 7f       	andi	r24, 0xF0	; 240
    273e:	14 2f       	mov	r17, r20
    2740:	1f 70       	andi	r17, 0x0F	; 15
    2742:	88 23       	and	r24, r24
    2744:	11 f0       	breq	.+4      	; 0x274a <process_action+0x9e>
    2746:	12 95       	swap	r17
    2748:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    274a:	ff 20       	and	r15, r15
    274c:	59 f0       	breq	.+22     	; 0x2764 <process_action+0xb8>
                    if (mods) {
    274e:	11 23       	and	r17, r17
    2750:	09 f4       	brne	.+2      	; 0x2754 <process_action+0xa8>
    2752:	5f c2       	rjmp	.+1214   	; 0x2c12 <process_action+0x566>
                        add_weak_mods(mods);
    2754:	81 2f       	mov	r24, r17
    2756:	68 87       	std	Y+8, r22	; 0x08
    2758:	0e 94 77 1c 	call	0x38ee	; 0x38ee <add_weak_mods>
                        send_keyboard_report();
    275c:	0e 94 a0 1c 	call	0x3940	; 0x3940 <send_keyboard_report>
    2760:	68 85       	ldd	r22, Y+8	; 0x08
    2762:	57 c2       	rjmp	.+1198   	; 0x2c12 <process_action+0x566>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    2764:	86 2f       	mov	r24, r22
    2766:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <unregister_code>
                    if (mods) {
    276a:	11 23       	and	r17, r17
    276c:	09 f4       	brne	.+2      	; 0x2770 <process_action+0xc4>
    276e:	9c c2       	rjmp	.+1336   	; 0x2ca8 <process_action+0x5fc>
                        del_weak_mods(mods);
    2770:	81 2f       	mov	r24, r17
    2772:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    2776:	28 96       	adiw	r28, 0x08	; 8
    2778:	0f b6       	in	r0, 0x3f	; 63
    277a:	f8 94       	cli
    277c:	de bf       	out	0x3e, r29	; 62
    277e:	0f be       	out	0x3f, r0	; 63
    2780:	cd bf       	out	0x3d, r28	; 61
    2782:	df 91       	pop	r29
    2784:	cf 91       	pop	r28
    2786:	1f 91       	pop	r17
    2788:	0f 91       	pop	r16
    278a:	ff 90       	pop	r15
    278c:	ef 90       	pop	r14
    278e:	df 90       	pop	r13
    2790:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    2792:	0c 94 a0 1c 	jmp	0x3940	; 0x3940 <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    2796:	84 2f       	mov	r24, r20
    2798:	80 7f       	andi	r24, 0xF0	; 240
    279a:	94 2f       	mov	r25, r20
    279c:	9f 70       	andi	r25, 0x0F	; 15
    279e:	e9 2e       	mov	r14, r25
    27a0:	80 32       	cpi	r24, 0x20	; 32
    27a2:	19 f0       	breq	.+6      	; 0x27aa <process_action+0xfe>
    27a4:	e2 94       	swap	r14
    27a6:	80 ef       	ldi	r24, 0xF0	; 240
    27a8:	e8 22       	and	r14, r24
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    27aa:	66 23       	and	r22, r22
    27ac:	19 f0       	breq	.+6      	; 0x27b4 <process_action+0x108>
    27ae:	61 30       	cpi	r22, 0x01	; 1
    27b0:	01 f1       	breq	.+64     	; 0x27f2 <process_action+0x146>
    27b2:	29 c0       	rjmp	.+82     	; 0x2806 <process_action+0x15a>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    27b4:	ff 20       	and	r15, r15
    27b6:	a9 f0       	breq	.+42     	; 0x27e2 <process_action+0x136>
                            if (tap_count == 0) {
                                register_mods(mods);
    27b8:	8e 2d       	mov	r24, r14
                switch (action.layer_tap.code) {
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
                            if (tap_count == 0) {
    27ba:	22 23       	and	r18, r18
    27bc:	49 f1       	breq	.+82     	; 0x2810 <process_action+0x164>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    27be:	21 30       	cpi	r18, 0x01	; 1
    27c0:	39 f5       	brne	.+78     	; 0x2810 <process_action+0x164>
            break;
#endif
        default:
            break;
    }
}
    27c2:	28 96       	adiw	r28, 0x08	; 8
    27c4:	0f b6       	in	r0, 0x3f	; 63
    27c6:	f8 94       	cli
    27c8:	de bf       	out	0x3e, r29	; 62
    27ca:	0f be       	out	0x3f, r0	; 63
    27cc:	cd bf       	out	0x3d, r28	; 61
    27ce:	df 91       	pop	r29
    27d0:	cf 91       	pop	r28
    27d2:	1f 91       	pop	r17
    27d4:	0f 91       	pop	r16
    27d6:	ff 90       	pop	r15
    27d8:	ef 90       	pop	r14
    27da:	df 90       	pop	r13
    27dc:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    27de:	0c 94 87 1c 	jmp	0x390e	; 0x390e <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    27e2:	22 23       	and	r18, r18
    27e4:	19 f0       	breq	.+6      	; 0x27ec <process_action+0x140>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    27e6:	21 30       	cpi	r18, 0x01	; 1
    27e8:	09 f4       	brne	.+2      	; 0x27ec <process_action+0x140>
    27ea:	5e c2       	rjmp	.+1212   	; 0x2ca8 <process_action+0x5fc>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    27ec:	0e 94 8a 1c 	call	0x3914	; 0x3914 <clear_oneshot_mods>
    27f0:	2c c0       	rjmp	.+88     	; 0x284a <process_action+0x19e>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    27f2:	ff 20       	and	r15, r15
    27f4:	e9 f0       	breq	.+58     	; 0x2830 <process_action+0x184>
                            if (tap_count <= TAPPING_TOGGLE) {
    27f6:	26 30       	cpi	r18, 0x06	; 6
    27f8:	08 f0       	brcs	.+2      	; 0x27fc <process_action+0x150>
    27fa:	56 c2       	rjmp	.+1196   	; 0x2ca8 <process_action+0x5fc>
                                if (mods & get_mods()) {
    27fc:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <get_mods>
    2800:	8e 21       	and	r24, r14
    2802:	29 f0       	breq	.+10     	; 0x280e <process_action+0x162>
    2804:	22 c0       	rjmp	.+68     	; 0x284a <process_action+0x19e>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    2806:	ff 20       	and	r15, r15
    2808:	f1 f0       	breq	.+60     	; 0x2846 <process_action+0x19a>
                            if (tap_count > 0) {
    280a:	21 11       	cpse	r18, r1
    280c:	15 c0       	rjmp	.+42     	; 0x2838 <process_action+0x18c>
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    280e:	8e 2d       	mov	r24, r14
            break;
#endif
        default:
            break;
    }
}
    2810:	28 96       	adiw	r28, 0x08	; 8
    2812:	0f b6       	in	r0, 0x3f	; 63
    2814:	f8 94       	cli
    2816:	de bf       	out	0x3e, r29	; 62
    2818:	0f be       	out	0x3f, r0	; 63
    281a:	cd bf       	out	0x3d, r28	; 61
    281c:	df 91       	pop	r29
    281e:	cf 91       	pop	r28
    2820:	1f 91       	pop	r17
    2822:	0f 91       	pop	r16
    2824:	ff 90       	pop	r15
    2826:	ef 90       	pop	r14
    2828:	df 90       	pop	r13
    282a:	cf 90       	pop	r12
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    282c:	0c 94 48 13 	jmp	0x2690	; 0x2690 <register_mods>
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    2830:	25 30       	cpi	r18, 0x05	; 5
    2832:	08 f0       	brcs	.+2      	; 0x2836 <process_action+0x18a>
    2834:	39 c2       	rjmp	.+1138   	; 0x2ca8 <process_action+0x5fc>
    2836:	09 c0       	rjmp	.+18     	; 0x284a <process_action+0x19e>
                        }
                        break;
                    default:
                        if (event.pressed) {
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
    2838:	f8 01       	movw	r30, r16
    283a:	85 81       	ldd	r24, Z+5	; 0x05
    283c:	80 ff       	sbrs	r24, 0
    283e:	e9 c1       	rjmp	.+978    	; 0x2c12 <process_action+0x566>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    2840:	8f 70       	andi	r24, 0x0F	; 15
    2842:	85 83       	std	Z+5, r24	; 0x05
    2844:	e4 cf       	rjmp	.-56     	; 0x280e <process_action+0x162>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    2846:	21 11       	cpse	r18, r1
    2848:	f8 c1       	rjmp	.+1008   	; 0x2c3a <process_action+0x58e>
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    284a:	8e 2d       	mov	r24, r14
    284c:	66 c1       	rjmp	.+716    	; 0x2b1a <process_action+0x46e>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    284e:	24 2f       	mov	r18, r20
    2850:	26 95       	lsr	r18
    2852:	26 95       	lsr	r18
    2854:	23 70       	andi	r18, 0x03	; 3
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	21 15       	cp	r18, r1
    285a:	31 05       	cpc	r19, r1
    285c:	21 f0       	breq	.+8      	; 0x2866 <process_action+0x1ba>
    285e:	21 30       	cpi	r18, 0x01	; 1
    2860:	31 05       	cpc	r19, r1
    2862:	c9 f0       	breq	.+50     	; 0x2896 <process_action+0x1ea>
    2864:	21 c2       	rjmp	.+1090   	; 0x2ca8 <process_action+0x5fc>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    2866:	ff 20       	and	r15, r15
    2868:	21 f0       	breq	.+8      	; 0x2872 <process_action+0x1c6>
                        host_system_send(action.usage.code);
    286a:	86 2f       	mov	r24, r22
    286c:	94 2f       	mov	r25, r20
    286e:	93 70       	andi	r25, 0x03	; 3
    2870:	02 c0       	rjmp	.+4      	; 0x2876 <process_action+0x1ca>
                    } else {
                        host_system_send(0);
    2872:	80 e0       	ldi	r24, 0x00	; 0
    2874:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2876:	28 96       	adiw	r28, 0x08	; 8
    2878:	0f b6       	in	r0, 0x3f	; 63
    287a:	f8 94       	cli
    287c:	de bf       	out	0x3e, r29	; 62
    287e:	0f be       	out	0x3f, r0	; 63
    2880:	cd bf       	out	0x3d, r28	; 61
    2882:	df 91       	pop	r29
    2884:	cf 91       	pop	r28
    2886:	1f 91       	pop	r17
    2888:	0f 91       	pop	r16
    288a:	ff 90       	pop	r15
    288c:	ef 90       	pop	r14
    288e:	df 90       	pop	r13
    2890:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    2892:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    2896:	ff 20       	and	r15, r15
    2898:	21 f0       	breq	.+8      	; 0x28a2 <process_action+0x1f6>
                        host_consumer_send(action.usage.code);
    289a:	86 2f       	mov	r24, r22
    289c:	94 2f       	mov	r25, r20
    289e:	93 70       	andi	r25, 0x03	; 3
    28a0:	02 c0       	rjmp	.+4      	; 0x28a6 <process_action+0x1fa>
                    } else {
                        host_consumer_send(0);
    28a2:	80 e0       	ldi	r24, 0x00	; 0
    28a4:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    28a6:	28 96       	adiw	r28, 0x08	; 8
    28a8:	0f b6       	in	r0, 0x3f	; 63
    28aa:	f8 94       	cli
    28ac:	de bf       	out	0x3e, r29	; 62
    28ae:	0f be       	out	0x3f, r0	; 63
    28b0:	cd bf       	out	0x3d, r28	; 61
    28b2:	df 91       	pop	r29
    28b4:	cf 91       	pop	r28
    28b6:	1f 91       	pop	r17
    28b8:	0f 91       	pop	r16
    28ba:	ff 90       	pop	r15
    28bc:	ef 90       	pop	r14
    28be:	df 90       	pop	r13
    28c0:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    28c2:	0c 94 f2 10 	jmp	0x21e4	; 0x21e4 <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    28c6:	86 2f       	mov	r24, r22
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    28c8:	ff 20       	and	r15, r15
    28ca:	19 f0       	breq	.+6      	; 0x28d2 <process_action+0x226>
                mousekey_on(action.key.code);
    28cc:	0e 94 a2 21 	call	0x4344	; 0x4344 <mousekey_on>
    28d0:	02 c0       	rjmp	.+4      	; 0x28d6 <process_action+0x22a>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    28d2:	0e 94 0a 22 	call	0x4414	; 0x4414 <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    28d6:	28 96       	adiw	r28, 0x08	; 8
    28d8:	0f b6       	in	r0, 0x3f	; 63
    28da:	f8 94       	cli
    28dc:	de bf       	out	0x3e, r29	; 62
    28de:	0f be       	out	0x3f, r0	; 63
    28e0:	cd bf       	out	0x3d, r28	; 61
    28e2:	df 91       	pop	r29
    28e4:	cf 91       	pop	r28
    28e6:	1f 91       	pop	r17
    28e8:	0f 91       	pop	r16
    28ea:	ff 90       	pop	r15
    28ec:	ef 90       	pop	r14
    28ee:	df 90       	pop	r13
    28f0:	cf 90       	pop	r12
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    28f2:	0c 94 8f 22 	jmp	0x451e	; 0x451e <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    28f6:	84 2f       	mov	r24, r20
    28f8:	83 70       	andi	r24, 0x03	; 3
    28fa:	09 f0       	breq	.+2      	; 0x28fe <process_action+0x252>
    28fc:	76 c0       	rjmp	.+236    	; 0x29ea <process_action+0x33e>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    28fe:	f1 10       	cpse	r15, r1
    2900:	d3 c1       	rjmp	.+934    	; 0x2ca8 <process_action+0x5fc>
                    uint8_t shift = action.layer_bitop.part*4;
    2902:	26 2f       	mov	r18, r22
    2904:	22 95       	swap	r18
    2906:	26 95       	lsr	r18
    2908:	27 70       	andi	r18, 0x07	; 7
    290a:	22 0f       	add	r18, r18
    290c:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    290e:	86 2f       	mov	r24, r22
    2910:	8f 70       	andi	r24, 0x0F	; 15
    2912:	c8 2e       	mov	r12, r24
    2914:	d1 2c       	mov	r13, r1
    2916:	e1 2c       	mov	r14, r1
    2918:	f1 2c       	mov	r15, r1
    291a:	02 2e       	mov	r0, r18
    291c:	04 c0       	rjmp	.+8      	; 0x2926 <process_action+0x27a>
    291e:	cc 0c       	add	r12, r12
    2920:	dd 1c       	adc	r13, r13
    2922:	ee 1c       	adc	r14, r14
    2924:	ff 1c       	adc	r15, r15
    2926:	0a 94       	dec	r0
    2928:	d2 f7       	brpl	.-12     	; 0x291e <process_action+0x272>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    292a:	64 ff       	sbrs	r22, 4
    292c:	10 c0       	rjmp	.+32     	; 0x294e <process_action+0x2a2>
    292e:	6f e0       	ldi	r22, 0x0F	; 15
    2930:	70 e0       	ldi	r23, 0x00	; 0
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	04 c0       	rjmp	.+8      	; 0x2940 <process_action+0x294>
    2938:	66 0f       	add	r22, r22
    293a:	77 1f       	adc	r23, r23
    293c:	88 1f       	adc	r24, r24
    293e:	99 1f       	adc	r25, r25
    2940:	2a 95       	dec	r18
    2942:	d2 f7       	brpl	.-12     	; 0x2938 <process_action+0x28c>
    2944:	60 95       	com	r22
    2946:	70 95       	com	r23
    2948:	80 95       	com	r24
    294a:	90 95       	com	r25
    294c:	03 c0       	rjmp	.+6      	; 0x2954 <process_action+0x2a8>
    294e:	60 e0       	ldi	r22, 0x00	; 0
    2950:	70 e0       	ldi	r23, 0x00	; 0
    2952:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2954:	24 2f       	mov	r18, r20
    2956:	26 95       	lsr	r18
    2958:	26 95       	lsr	r18
    295a:	23 70       	andi	r18, 0x03	; 3
    295c:	42 2f       	mov	r20, r18
    295e:	50 e0       	ldi	r21, 0x00	; 0
    2960:	42 30       	cpi	r20, 0x02	; 2
    2962:	51 05       	cpc	r21, r1
    2964:	d1 f0       	breq	.+52     	; 0x299a <process_action+0x2ee>
    2966:	43 30       	cpi	r20, 0x03	; 3
    2968:	51 05       	cpc	r21, r1
    296a:	59 f1       	breq	.+86     	; 0x29c2 <process_action+0x316>
    296c:	6c 29       	or	r22, r12
    296e:	7d 29       	or	r23, r13
    2970:	8e 29       	or	r24, r14
    2972:	9f 29       	or	r25, r15
    2974:	41 30       	cpi	r20, 0x01	; 1
    2976:	51 05       	cpc	r21, r1
    2978:	41 f1       	breq	.+80     	; 0x29ca <process_action+0x31e>
            break;
#endif
        default:
            break;
    }
}
    297a:	28 96       	adiw	r28, 0x08	; 8
    297c:	0f b6       	in	r0, 0x3f	; 63
    297e:	f8 94       	cli
    2980:	de bf       	out	0x3e, r29	; 62
    2982:	0f be       	out	0x3f, r0	; 63
    2984:	cd bf       	out	0x3d, r28	; 61
    2986:	df 91       	pop	r29
    2988:	cf 91       	pop	r28
    298a:	1f 91       	pop	r17
    298c:	0f 91       	pop	r16
    298e:	ff 90       	pop	r15
    2990:	ef 90       	pop	r14
    2992:	df 90       	pop	r13
    2994:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2996:	0c 94 b8 1a 	jmp	0x3570	; 0x3570 <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    299a:	6c 29       	or	r22, r12
    299c:	7d 29       	or	r23, r13
    299e:	8e 29       	or	r24, r14
    29a0:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    29a2:	28 96       	adiw	r28, 0x08	; 8
    29a4:	0f b6       	in	r0, 0x3f	; 63
    29a6:	f8 94       	cli
    29a8:	de bf       	out	0x3e, r29	; 62
    29aa:	0f be       	out	0x3f, r0	; 63
    29ac:	cd bf       	out	0x3d, r28	; 61
    29ae:	df 91       	pop	r29
    29b0:	cf 91       	pop	r28
    29b2:	1f 91       	pop	r17
    29b4:	0f 91       	pop	r16
    29b6:	ff 90       	pop	r15
    29b8:	ef 90       	pop	r14
    29ba:	df 90       	pop	r13
    29bc:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    29be:	0c 94 ca 1a 	jmp	0x3594	; 0x3594 <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    29c2:	0e 94 b8 1a 	call	0x3570	; 0x3570 <default_layer_and>
    29c6:	c7 01       	movw	r24, r14
    29c8:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    29ca:	28 96       	adiw	r28, 0x08	; 8
    29cc:	0f b6       	in	r0, 0x3f	; 63
    29ce:	f8 94       	cli
    29d0:	de bf       	out	0x3e, r29	; 62
    29d2:	0f be       	out	0x3f, r0	; 63
    29d4:	cd bf       	out	0x3d, r28	; 61
    29d6:	df 91       	pop	r29
    29d8:	cf 91       	pop	r28
    29da:	1f 91       	pop	r17
    29dc:	0f 91       	pop	r16
    29de:	ff 90       	pop	r15
    29e0:	ef 90       	pop	r14
    29e2:	df 90       	pop	r13
    29e4:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    29e6:	0c 94 a6 1a 	jmp	0x354c	; 0x354c <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    29ea:	ff 20       	and	r15, r15
    29ec:	19 f0       	breq	.+6      	; 0x29f4 <process_action+0x348>
    29ee:	84 2f       	mov	r24, r20
    29f0:	81 70       	andi	r24, 0x01	; 1
    29f2:	01 c0       	rjmp	.+2      	; 0x29f6 <process_action+0x34a>
    29f4:	86 95       	lsr	r24
    29f6:	88 23       	and	r24, r24
    29f8:	09 f4       	brne	.+2      	; 0x29fc <process_action+0x350>
    29fa:	56 c1       	rjmp	.+684    	; 0x2ca8 <process_action+0x5fc>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    29fc:	26 2f       	mov	r18, r22
    29fe:	22 95       	swap	r18
    2a00:	26 95       	lsr	r18
    2a02:	27 70       	andi	r18, 0x07	; 7
    2a04:	22 0f       	add	r18, r18
    2a06:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2a08:	86 2f       	mov	r24, r22
    2a0a:	8f 70       	andi	r24, 0x0F	; 15
    2a0c:	c8 2e       	mov	r12, r24
    2a0e:	d1 2c       	mov	r13, r1
    2a10:	e1 2c       	mov	r14, r1
    2a12:	f1 2c       	mov	r15, r1
    2a14:	02 2e       	mov	r0, r18
    2a16:	04 c0       	rjmp	.+8      	; 0x2a20 <process_action+0x374>
    2a18:	cc 0c       	add	r12, r12
    2a1a:	dd 1c       	adc	r13, r13
    2a1c:	ee 1c       	adc	r14, r14
    2a1e:	ff 1c       	adc	r15, r15
    2a20:	0a 94       	dec	r0
    2a22:	d2 f7       	brpl	.-12     	; 0x2a18 <process_action+0x36c>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2a24:	64 ff       	sbrs	r22, 4
    2a26:	10 c0       	rjmp	.+32     	; 0x2a48 <process_action+0x39c>
    2a28:	6f e0       	ldi	r22, 0x0F	; 15
    2a2a:	70 e0       	ldi	r23, 0x00	; 0
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	04 c0       	rjmp	.+8      	; 0x2a3a <process_action+0x38e>
    2a32:	66 0f       	add	r22, r22
    2a34:	77 1f       	adc	r23, r23
    2a36:	88 1f       	adc	r24, r24
    2a38:	99 1f       	adc	r25, r25
    2a3a:	2a 95       	dec	r18
    2a3c:	d2 f7       	brpl	.-12     	; 0x2a32 <process_action+0x386>
    2a3e:	60 95       	com	r22
    2a40:	70 95       	com	r23
    2a42:	80 95       	com	r24
    2a44:	90 95       	com	r25
    2a46:	03 c0       	rjmp	.+6      	; 0x2a4e <process_action+0x3a2>
    2a48:	60 e0       	ldi	r22, 0x00	; 0
    2a4a:	70 e0       	ldi	r23, 0x00	; 0
    2a4c:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2a4e:	24 2f       	mov	r18, r20
    2a50:	26 95       	lsr	r18
    2a52:	26 95       	lsr	r18
    2a54:	23 70       	andi	r18, 0x03	; 3
    2a56:	42 2f       	mov	r20, r18
    2a58:	50 e0       	ldi	r21, 0x00	; 0
    2a5a:	42 30       	cpi	r20, 0x02	; 2
    2a5c:	51 05       	cpc	r21, r1
    2a5e:	d1 f0       	breq	.+52     	; 0x2a94 <process_action+0x3e8>
    2a60:	43 30       	cpi	r20, 0x03	; 3
    2a62:	51 05       	cpc	r21, r1
    2a64:	59 f1       	breq	.+86     	; 0x2abc <process_action+0x410>
    2a66:	6c 29       	or	r22, r12
    2a68:	7d 29       	or	r23, r13
    2a6a:	8e 29       	or	r24, r14
    2a6c:	9f 29       	or	r25, r15
    2a6e:	41 30       	cpi	r20, 0x01	; 1
    2a70:	51 05       	cpc	r21, r1
    2a72:	41 f1       	breq	.+80     	; 0x2ac4 <process_action+0x418>
            break;
#endif
        default:
            break;
    }
}
    2a74:	28 96       	adiw	r28, 0x08	; 8
    2a76:	0f b6       	in	r0, 0x3f	; 63
    2a78:	f8 94       	cli
    2a7a:	de bf       	out	0x3e, r29	; 62
    2a7c:	0f be       	out	0x3f, r0	; 63
    2a7e:	cd bf       	out	0x3d, r28	; 61
    2a80:	df 91       	pop	r29
    2a82:	cf 91       	pop	r28
    2a84:	1f 91       	pop	r17
    2a86:	0f 91       	pop	r16
    2a88:	ff 90       	pop	r15
    2a8a:	ef 90       	pop	r14
    2a8c:	df 90       	pop	r13
    2a8e:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2a90:	0c 94 57 1b 	jmp	0x36ae	; 0x36ae <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2a94:	6c 29       	or	r22, r12
    2a96:	7d 29       	or	r23, r13
    2a98:	8e 29       	or	r24, r14
    2a9a:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2a9c:	28 96       	adiw	r28, 0x08	; 8
    2a9e:	0f b6       	in	r0, 0x3f	; 63
    2aa0:	f8 94       	cli
    2aa2:	de bf       	out	0x3e, r29	; 62
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	cd bf       	out	0x3d, r28	; 61
    2aa8:	df 91       	pop	r29
    2aaa:	cf 91       	pop	r28
    2aac:	1f 91       	pop	r17
    2aae:	0f 91       	pop	r16
    2ab0:	ff 90       	pop	r15
    2ab2:	ef 90       	pop	r14
    2ab4:	df 90       	pop	r13
    2ab6:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2ab8:	0c 94 69 1b 	jmp	0x36d2	; 0x36d2 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2abc:	0e 94 57 1b 	call	0x36ae	; 0x36ae <layer_and>
    2ac0:	c7 01       	movw	r24, r14
    2ac2:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2ac4:	28 96       	adiw	r28, 0x08	; 8
    2ac6:	0f b6       	in	r0, 0x3f	; 63
    2ac8:	f8 94       	cli
    2aca:	de bf       	out	0x3e, r29	; 62
    2acc:	0f be       	out	0x3f, r0	; 63
    2ace:	cd bf       	out	0x3d, r28	; 61
    2ad0:	df 91       	pop	r29
    2ad2:	cf 91       	pop	r28
    2ad4:	1f 91       	pop	r17
    2ad6:	0f 91       	pop	r16
    2ad8:	ff 90       	pop	r15
    2ada:	ef 90       	pop	r14
    2adc:	df 90       	pop	r13
    2ade:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2ae0:	0c 94 45 1b 	jmp	0x368a	; 0x368a <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2ae4:	60 3f       	cpi	r22, 0xF0	; 240
    2ae6:	49 f1       	breq	.+82     	; 0x2b3a <process_action+0x48e>
    2ae8:	18 f4       	brcc	.+6      	; 0x2af0 <process_action+0x444>
    2aea:	60 3e       	cpi	r22, 0xE0	; 224
    2aec:	48 f4       	brcc	.+18     	; 0x2b00 <process_action+0x454>
    2aee:	8c c0       	rjmp	.+280    	; 0x2c08 <process_action+0x55c>
    2af0:	62 3f       	cpi	r22, 0xF2	; 242
    2af2:	09 f4       	brne	.+2      	; 0x2af6 <process_action+0x44a>
    2af4:	51 c0       	rjmp	.+162    	; 0x2b98 <process_action+0x4ec>
    2af6:	e0 f1       	brcs	.+120    	; 0x2b70 <process_action+0x4c4>
    2af8:	63 3f       	cpi	r22, 0xF3	; 243
    2afa:	09 f4       	brne	.+2      	; 0x2afe <process_action+0x452>
    2afc:	61 c0       	rjmp	.+194    	; 0x2bc0 <process_action+0x514>
    2afe:	84 c0       	rjmp	.+264    	; 0x2c08 <process_action+0x55c>
    2b00:	16 2f       	mov	r17, r22
    2b02:	1f 70       	andi	r17, 0x0F	; 15
    2b04:	84 2f       	mov	r24, r20
    2b06:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    2b08:	ff 20       	and	r15, r15
    2b0a:	21 f0       	breq	.+8      	; 0x2b14 <process_action+0x468>
                        layer_on(action.layer_tap.val);
    2b0c:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    2b10:	81 2f       	mov	r24, r17
    2b12:	7e ce       	rjmp	.-772    	; 0x2810 <process_action+0x164>
                    } else {
                        layer_off(action.layer_tap.val);
    2b14:	0e 94 0b 1b 	call	0x3616	; 0x3616 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    2b18:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2b1a:	28 96       	adiw	r28, 0x08	; 8
    2b1c:	0f b6       	in	r0, 0x3f	; 63
    2b1e:	f8 94       	cli
    2b20:	de bf       	out	0x3e, r29	; 62
    2b22:	0f be       	out	0x3f, r0	; 63
    2b24:	cd bf       	out	0x3d, r28	; 61
    2b26:	df 91       	pop	r29
    2b28:	cf 91       	pop	r28
    2b2a:	1f 91       	pop	r17
    2b2c:	0f 91       	pop	r16
    2b2e:	ff 90       	pop	r15
    2b30:	ef 90       	pop	r14
    2b32:	df 90       	pop	r13
    2b34:	cf 90       	pop	r12
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    2b36:	0c 94 4f 13 	jmp	0x269e	; 0x269e <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2b3a:	ff 20       	and	r15, r15
    2b3c:	a9 f0       	breq	.+42     	; 0x2b68 <process_action+0x4bc>
                        if (tap_count < TAPPING_TOGGLE) {
    2b3e:	25 30       	cpi	r18, 0x05	; 5
    2b40:	08 f0       	brcs	.+2      	; 0x2b44 <process_action+0x498>
    2b42:	b2 c0       	rjmp	.+356    	; 0x2ca8 <process_action+0x5fc>
                            layer_invert(action.layer_tap.val);
    2b44:	84 2f       	mov	r24, r20
    2b46:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2b48:	28 96       	adiw	r28, 0x08	; 8
    2b4a:	0f b6       	in	r0, 0x3f	; 63
    2b4c:	f8 94       	cli
    2b4e:	de bf       	out	0x3e, r29	; 62
    2b50:	0f be       	out	0x3f, r0	; 63
    2b52:	cd bf       	out	0x3d, r28	; 61
    2b54:	df 91       	pop	r29
    2b56:	cf 91       	pop	r28
    2b58:	1f 91       	pop	r17
    2b5a:	0f 91       	pop	r16
    2b5c:	ff 90       	pop	r15
    2b5e:	ef 90       	pop	r14
    2b60:	df 90       	pop	r13
    2b62:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    2b64:	0c 94 2a 1b 	jmp	0x3654	; 0x3654 <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2b68:	26 30       	cpi	r18, 0x06	; 6
    2b6a:	08 f0       	brcs	.+2      	; 0x2b6e <process_action+0x4c2>
    2b6c:	9d c0       	rjmp	.+314    	; 0x2ca8 <process_action+0x5fc>
    2b6e:	ea cf       	rjmp	.-44     	; 0x2b44 <process_action+0x498>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2b70:	ff 20       	and	r15, r15
    2b72:	a1 f0       	breq	.+40     	; 0x2b9c <process_action+0x4f0>
    2b74:	84 2f       	mov	r24, r20
    2b76:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2b78:	28 96       	adiw	r28, 0x08	; 8
    2b7a:	0f b6       	in	r0, 0x3f	; 63
    2b7c:	f8 94       	cli
    2b7e:	de bf       	out	0x3e, r29	; 62
    2b80:	0f be       	out	0x3f, r0	; 63
    2b82:	cd bf       	out	0x3d, r28	; 61
    2b84:	df 91       	pop	r29
    2b86:	cf 91       	pop	r28
    2b88:	1f 91       	pop	r17
    2b8a:	0f 91       	pop	r16
    2b8c:	ff 90       	pop	r15
    2b8e:	ef 90       	pop	r14
    2b90:	df 90       	pop	r13
    2b92:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2b94:	0c 94 f0 1a 	jmp	0x35e0	; 0x35e0 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2b98:	ff 20       	and	r15, r15
    2b9a:	61 f3       	breq	.-40     	; 0x2b74 <process_action+0x4c8>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2b9c:	84 2f       	mov	r24, r20
    2b9e:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2ba0:	28 96       	adiw	r28, 0x08	; 8
    2ba2:	0f b6       	in	r0, 0x3f	; 63
    2ba4:	f8 94       	cli
    2ba6:	de bf       	out	0x3e, r29	; 62
    2ba8:	0f be       	out	0x3f, r0	; 63
    2baa:	cd bf       	out	0x3d, r28	; 61
    2bac:	df 91       	pop	r29
    2bae:	cf 91       	pop	r28
    2bb0:	1f 91       	pop	r17
    2bb2:	0f 91       	pop	r16
    2bb4:	ff 90       	pop	r15
    2bb6:	ef 90       	pop	r14
    2bb8:	df 90       	pop	r13
    2bba:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2bbc:	0c 94 0b 1b 	jmp	0x3616	; 0x3616 <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2bc0:	ff 20       	and	r15, r15
    2bc2:	91 f0       	breq	.+36     	; 0x2be8 <process_action+0x53c>
    2bc4:	84 2f       	mov	r24, r20
    2bc6:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2bc8:	28 96       	adiw	r28, 0x08	; 8
    2bca:	0f b6       	in	r0, 0x3f	; 63
    2bcc:	f8 94       	cli
    2bce:	de bf       	out	0x3e, r29	; 62
    2bd0:	0f be       	out	0x3f, r0	; 63
    2bd2:	cd bf       	out	0x3d, r28	; 61
    2bd4:	df 91       	pop	r29
    2bd6:	cf 91       	pop	r28
    2bd8:	1f 91       	pop	r17
    2bda:	0f 91       	pop	r16
    2bdc:	ff 90       	pop	r15
    2bde:	ef 90       	pop	r14
    2be0:	df 90       	pop	r13
    2be2:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2be4:	0c 94 e1 1a 	jmp	0x35c2	; 0x35c2 <layer_move>
            break;
#endif
        default:
            break;
    }
}
    2be8:	28 96       	adiw	r28, 0x08	; 8
    2bea:	0f b6       	in	r0, 0x3f	; 63
    2bec:	f8 94       	cli
    2bee:	de bf       	out	0x3e, r29	; 62
    2bf0:	0f be       	out	0x3f, r0	; 63
    2bf2:	cd bf       	out	0x3d, r28	; 61
    2bf4:	df 91       	pop	r29
    2bf6:	cf 91       	pop	r28
    2bf8:	1f 91       	pop	r17
    2bfa:	0f 91       	pop	r16
    2bfc:	ff 90       	pop	r15
    2bfe:	ef 90       	pop	r14
    2c00:	df 90       	pop	r13
    2c02:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    2c04:	0c 94 dc 1a 	jmp	0x35b8	; 0x35b8 <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2c08:	ff 20       	and	r15, r15
    2c0a:	a1 f0       	breq	.+40     	; 0x2c34 <process_action+0x588>
                        if (tap_count > 0) {
    2c0c:	22 23       	and	r18, r18
    2c0e:	09 f4       	brne	.+2      	; 0x2c12 <process_action+0x566>
    2c10:	b1 cf       	rjmp	.-158    	; 0x2b74 <process_action+0x4c8>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2c12:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2c14:	28 96       	adiw	r28, 0x08	; 8
    2c16:	0f b6       	in	r0, 0x3f	; 63
    2c18:	f8 94       	cli
    2c1a:	de bf       	out	0x3e, r29	; 62
    2c1c:	0f be       	out	0x3f, r0	; 63
    2c1e:	cd bf       	out	0x3d, r28	; 61
    2c20:	df 91       	pop	r29
    2c22:	cf 91       	pop	r28
    2c24:	1f 91       	pop	r17
    2c26:	0f 91       	pop	r16
    2c28:	ff 90       	pop	r15
    2c2a:	ef 90       	pop	r14
    2c2c:	df 90       	pop	r13
    2c2e:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2c30:	0c 94 26 12 	jmp	0x244c	; 0x244c <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    2c34:	22 23       	and	r18, r18
    2c36:	09 f4       	brne	.+2      	; 0x2c3a <process_action+0x58e>
    2c38:	b1 cf       	rjmp	.-158    	; 0x2b9c <process_action+0x4f0>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2c3a:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2c3c:	28 96       	adiw	r28, 0x08	; 8
    2c3e:	0f b6       	in	r0, 0x3f	; 63
    2c40:	f8 94       	cli
    2c42:	de bf       	out	0x3e, r29	; 62
    2c44:	0f be       	out	0x3f, r0	; 63
    2c46:	cd bf       	out	0x3d, r28	; 61
    2c48:	df 91       	pop	r29
    2c4a:	cf 91       	pop	r28
    2c4c:	1f 91       	pop	r17
    2c4e:	0f 91       	pop	r16
    2c50:	ff 90       	pop	r15
    2c52:	ef 90       	pop	r14
    2c54:	df 90       	pop	r13
    2c56:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2c58:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2c5c:	4f 70       	andi	r20, 0x0F	; 15
    2c5e:	c8 01       	movw	r24, r16
    2c60:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    2c64:	28 96       	adiw	r28, 0x08	; 8
    2c66:	0f b6       	in	r0, 0x3f	; 63
    2c68:	f8 94       	cli
    2c6a:	de bf       	out	0x3e, r29	; 62
    2c6c:	0f be       	out	0x3f, r0	; 63
    2c6e:	cd bf       	out	0x3d, r28	; 61
    2c70:	df 91       	pop	r29
    2c72:	cf 91       	pop	r28
    2c74:	1f 91       	pop	r17
    2c76:	0f 91       	pop	r16
    2c78:	ff 90       	pop	r15
    2c7a:	ef 90       	pop	r14
    2c7c:	df 90       	pop	r13
    2c7e:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2c80:	0c 94 ee 19 	jmp	0x33dc	; 0x33dc <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2c84:	4f 70       	andi	r20, 0x0F	; 15
    2c86:	c8 01       	movw	r24, r16
            break;
#endif
        default:
            break;
    }
}
    2c88:	28 96       	adiw	r28, 0x08	; 8
    2c8a:	0f b6       	in	r0, 0x3f	; 63
    2c8c:	f8 94       	cli
    2c8e:	de bf       	out	0x3e, r29	; 62
    2c90:	0f be       	out	0x3f, r0	; 63
    2c92:	cd bf       	out	0x3d, r28	; 61
    2c94:	df 91       	pop	r29
    2c96:	cf 91       	pop	r28
    2c98:	1f 91       	pop	r17
    2c9a:	0f 91       	pop	r16
    2c9c:	ff 90       	pop	r15
    2c9e:	ef 90       	pop	r14
    2ca0:	df 90       	pop	r13
    2ca2:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2ca4:	0c 94 3a 1f 	jmp	0x3e74	; 0x3e74 <action_function>
            break;
#endif
        default:
            break;
    }
}
    2ca8:	28 96       	adiw	r28, 0x08	; 8
    2caa:	0f b6       	in	r0, 0x3f	; 63
    2cac:	f8 94       	cli
    2cae:	de bf       	out	0x3e, r29	; 62
    2cb0:	0f be       	out	0x3f, r0	; 63
    2cb2:	cd bf       	out	0x3d, r28	; 61
    2cb4:	df 91       	pop	r29
    2cb6:	cf 91       	pop	r28
    2cb8:	1f 91       	pop	r17
    2cba:	0f 91       	pop	r16
    2cbc:	ff 90       	pop	r15
    2cbe:	ef 90       	pop	r14
    2cc0:	df 90       	pop	r13
    2cc2:	cf 90       	pop	r12
    2cc4:	08 95       	ret

00002cc6 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2cc6:	0e 94 84 1c 	call	0x3908	; 0x3908 <clear_weak_mods>
    clear_keys();
    2cca:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <clear_keys>
    send_keyboard_report();
    2cce:	0e 94 a0 1c 	call	0x3940	; 0x3940 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2cd2:	0e 94 bd 23 	call	0x477a	; 0x477a <mousekey_clear>
    mousekey_send();
    2cd6:	0e 94 8f 22 	call	0x451e	; 0x451e <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <host_system_send>
    host_consumer_send(0);
    2ce2:	80 e0       	ldi	r24, 0x00	; 0
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	0c 94 f2 10 	jmp	0x21e4	; 0x21e4 <host_consumer_send>

00002cea <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    2cea:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <clear_mods>
    clear_keyboard_but_mods();
    2cee:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <clear_keyboard_but_mods>

00002cf2 <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    2cf2:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <layer_switch_get_action>

    switch (action.kind.id) {
    2cf6:	29 2f       	mov	r18, r25
    2cf8:	22 95       	swap	r18
    2cfa:	2f 70       	andi	r18, 0x0F	; 15
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	2c 30       	cpi	r18, 0x0C	; 12
    2d00:	31 05       	cpc	r19, r1
    2d02:	4c f4       	brge	.+18     	; 0x2d16 <is_tap_key+0x24>
    2d04:	2a 30       	cpi	r18, 0x0A	; 10
    2d06:	31 05       	cpc	r19, r1
    2d08:	6c f4       	brge	.+26     	; 0x2d24 <is_tap_key+0x32>
    2d0a:	22 50       	subi	r18, 0x02	; 2
    2d0c:	31 09       	sbc	r19, r1
    2d0e:	22 30       	cpi	r18, 0x02	; 2
    2d10:	31 05       	cpc	r19, r1
    2d12:	90 f4       	brcc	.+36     	; 0x2d38 <is_tap_key+0x46>
    2d14:	07 c0       	rjmp	.+14     	; 0x2d24 <is_tap_key+0x32>
    2d16:	2c 30       	cpi	r18, 0x0C	; 12
    2d18:	31 05       	cpc	r19, r1
    2d1a:	51 f0       	breq	.+20     	; 0x2d30 <is_tap_key+0x3e>
    2d1c:	2f 30       	cpi	r18, 0x0F	; 15
    2d1e:	31 05       	cpc	r19, r1
    2d20:	39 f0       	breq	.+14     	; 0x2d30 <is_tap_key+0x3e>
    2d22:	0a c0       	rjmp	.+20     	; 0x2d38 <is_tap_key+0x46>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2d24:	80 3e       	cpi	r24, 0xE0	; 224
    2d26:	10 f0       	brcs	.+4      	; 0x2d2c <is_tap_key+0x3a>
    2d28:	80 3f       	cpi	r24, 0xF0	; 240
    2d2a:	31 f4       	brne	.+12     	; 0x2d38 <is_tap_key+0x46>
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	08 95       	ret
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2d30:	93 fb       	bst	r25, 3
    2d32:	88 27       	eor	r24, r24
    2d34:	80 f9       	bld	r24, 0
    2d36:	08 95       	ret
            switch (action.layer_tap.code) {
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
            }
            return false;
    2d38:	80 e0       	ldi	r24, 0x00	; 0
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    2d3a:	08 95       	ret

00002d3c <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2d3c:	cf 93       	push	r28
    2d3e:	df 93       	push	r29
    2d40:	00 d0       	rcall	.+0      	; 0x2d42 <debug_event+0x6>
    2d42:	00 d0       	rcall	.+0      	; 0x2d44 <debug_event+0x8>
    2d44:	1f 92       	push	r1
    2d46:	cd b7       	in	r28, 0x3d	; 61
    2d48:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2d4a:	0f 90       	pop	r0
    2d4c:	0f 90       	pop	r0
    2d4e:	0f 90       	pop	r0
    2d50:	0f 90       	pop	r0
    2d52:	0f 90       	pop	r0
    2d54:	df 91       	pop	r29
    2d56:	cf 91       	pop	r28
    2d58:	08 95       	ret

00002d5a <debug_record>:

void debug_record(keyrecord_t record)
{
    2d5a:	cf 93       	push	r28
    2d5c:	df 93       	push	r29
    2d5e:	00 d0       	rcall	.+0      	; 0x2d60 <debug_record+0x6>
    2d60:	00 d0       	rcall	.+0      	; 0x2d62 <debug_record+0x8>
    2d62:	00 d0       	rcall	.+0      	; 0x2d64 <debug_record+0xa>
    2d64:	cd b7       	in	r28, 0x3d	; 61
    2d66:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2d68:	26 96       	adiw	r28, 0x06	; 6
    2d6a:	0f b6       	in	r0, 0x3f	; 63
    2d6c:	f8 94       	cli
    2d6e:	de bf       	out	0x3e, r29	; 62
    2d70:	0f be       	out	0x3f, r0	; 63
    2d72:	cd bf       	out	0x3d, r28	; 61
    2d74:	df 91       	pop	r29
    2d76:	cf 91       	pop	r28
    2d78:	08 95       	ret

00002d7a <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2d7a:	1f 93       	push	r17
    2d7c:	cf 93       	push	r28
    2d7e:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d80:	c0 91 6e 01 	lds	r28, 0x016E
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2d84:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d86:	80 91 6f 01 	lds	r24, 0x016F
    2d8a:	c8 17       	cp	r28, r24
    2d8c:	99 f0       	breq	.+38     	; 0x2db4 <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2d8e:	d0 e0       	ldi	r29, 0x00	; 0
    2d90:	1c 9f       	mul	r17, r28
    2d92:	f0 01       	movw	r30, r0
    2d94:	1d 9f       	mul	r17, r29
    2d96:	f0 0d       	add	r31, r0
    2d98:	11 24       	eor	r1, r1
    2d9a:	e0 59       	subi	r30, 0x90	; 144
    2d9c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d9e:	40 81       	ld	r20, Z
    2da0:	51 81       	ldd	r21, Z+1	; 0x01
    2da2:	62 81       	ldd	r22, Z+2	; 0x02
    2da4:	73 81       	ldd	r23, Z+3	; 0x03
    2da6:	84 81       	ldd	r24, Z+4	; 0x04
    2da8:	95 81       	ldd	r25, Z+5	; 0x05
    2daa:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2dae:	21 96       	adiw	r28, 0x01	; 1
    2db0:	c7 70       	andi	r28, 0x07	; 7
    2db2:	e9 cf       	rjmp	.-46     	; 0x2d86 <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2db4:	df 91       	pop	r29
    2db6:	cf 91       	pop	r28
    2db8:	1f 91       	pop	r17
    2dba:	08 95       	ret

00002dbc <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2dbc:	40 91 a0 01 	lds	r20, 0x01A0
    2dc0:	50 91 a1 01 	lds	r21, 0x01A1
    2dc4:	60 91 a2 01 	lds	r22, 0x01A2
    2dc8:	70 91 a3 01 	lds	r23, 0x01A3
    2dcc:	80 91 a4 01 	lds	r24, 0x01A4
    2dd0:	90 91 a5 01 	lds	r25, 0x01A5
    2dd4:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <debug_record>

00002dd8 <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    2dd8:	cf 93       	push	r28
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2dda:	80 91 a5 01 	lds	r24, 0x01A5
    2dde:	82 95       	swap	r24
    2de0:	8f 70       	andi	r24, 0x0F	; 15
    2de2:	09 f0       	breq	.+2      	; 0x2de6 <waiting_buffer_scan_tap+0xe>
    2de4:	5f c0       	rjmp	.+190    	; 0x2ea4 <waiting_buffer_scan_tap+0xcc>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2de6:	80 91 a2 01 	lds	r24, 0x01A2
    2dea:	88 23       	and	r24, r24
    2dec:	09 f4       	brne	.+2      	; 0x2df0 <waiting_buffer_scan_tap+0x18>
    2dee:	5a c0       	rjmp	.+180    	; 0x2ea4 <waiting_buffer_scan_tap+0xcc>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2df0:	20 91 6e 01 	lds	r18, 0x016E
    2df4:	a0 91 6f 01 	lds	r26, 0x016F
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2df8:	60 91 a0 01 	lds	r22, 0x01A0
    2dfc:	70 91 a1 01 	lds	r23, 0x01A1
    2e00:	80 91 a3 01 	lds	r24, 0x01A3
    2e04:	90 91 a4 01 	lds	r25, 0x01A4
    2e08:	31 e0       	ldi	r19, 0x01	; 1
    2e0a:	6f 3f       	cpi	r22, 0xFF	; 255
    2e0c:	09 f0       	breq	.+2      	; 0x2e10 <waiting_buffer_scan_tap+0x38>
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	b3 2f       	mov	r27, r19
    2e12:	c6 e0       	ldi	r28, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e14:	2a 17       	cp	r18, r26
    2e16:	09 f4       	brne	.+2      	; 0x2e1a <waiting_buffer_scan_tap+0x42>
    2e18:	45 c0       	rjmp	.+138    	; 0x2ea4 <waiting_buffer_scan_tap+0xcc>
    2e1a:	00 97       	sbiw	r24, 0x00	; 0
    2e1c:	21 f0       	breq	.+8      	; 0x2e26 <waiting_buffer_scan_tap+0x4e>
    2e1e:	7f 3f       	cpi	r23, 0xFF	; 255
    2e20:	21 f4       	brne	.+8      	; 0x2e2a <waiting_buffer_scan_tap+0x52>
    2e22:	4b 2f       	mov	r20, r27
    2e24:	03 c0       	rjmp	.+6      	; 0x2e2c <waiting_buffer_scan_tap+0x54>
    2e26:	41 e0       	ldi	r20, 0x01	; 1
    2e28:	01 c0       	rjmp	.+2      	; 0x2e2c <waiting_buffer_scan_tap+0x54>
    2e2a:	40 e0       	ldi	r20, 0x00	; 0
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2e2e:	40 fd       	sbrc	r20, 0
    2e30:	35 c0       	rjmp	.+106    	; 0x2e9c <waiting_buffer_scan_tap+0xc4>
    2e32:	c2 9f       	mul	r28, r18
    2e34:	f0 01       	movw	r30, r0
    2e36:	c3 9f       	mul	r28, r19
    2e38:	f0 0d       	add	r31, r0
    2e3a:	11 24       	eor	r1, r1
    2e3c:	e0 59       	subi	r30, 0x90	; 144
    2e3e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e40:	41 81       	ldd	r20, Z+1	; 0x01
    2e42:	74 13       	cpse	r23, r20
    2e44:	2b c0       	rjmp	.+86     	; 0x2e9c <waiting_buffer_scan_tap+0xc4>
    2e46:	40 81       	ld	r20, Z
    2e48:	64 13       	cpse	r22, r20
    2e4a:	28 c0       	rjmp	.+80     	; 0x2e9c <waiting_buffer_scan_tap+0xc4>
    2e4c:	42 81       	ldd	r20, Z+2	; 0x02
    2e4e:	41 11       	cpse	r20, r1
    2e50:	25 c0       	rjmp	.+74     	; 0x2e9c <waiting_buffer_scan_tap+0xc4>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2e52:	43 81       	ldd	r20, Z+3	; 0x03
    2e54:	54 81       	ldd	r21, Z+4	; 0x04
    2e56:	48 17       	cp	r20, r24
    2e58:	59 07       	cpc	r21, r25
    2e5a:	10 f4       	brcc	.+4      	; 0x2e60 <waiting_buffer_scan_tap+0x88>
    2e5c:	41 50       	subi	r20, 0x01	; 1
    2e5e:	51 09       	sbc	r21, r1
    2e60:	48 1b       	sub	r20, r24
    2e62:	59 0b       	sbc	r21, r25
    2e64:	48 3c       	cpi	r20, 0xC8	; 200
    2e66:	51 05       	cpc	r21, r1
    2e68:	c8 f4       	brcc	.+50     	; 0x2e9c <waiting_buffer_scan_tap+0xc4>
            tapping_key.tap.count = 1;
    2e6a:	80 91 a5 01 	lds	r24, 0x01A5
    2e6e:	8f 70       	andi	r24, 0x0F	; 15
    2e70:	80 61       	ori	r24, 0x10	; 16
    2e72:	80 93 a5 01 	sts	0x01A5, r24
            waiting_buffer[i].tap.count = 1;
    2e76:	86 e0       	ldi	r24, 0x06	; 6
    2e78:	82 9f       	mul	r24, r18
    2e7a:	f0 01       	movw	r30, r0
    2e7c:	83 9f       	mul	r24, r19
    2e7e:	f0 0d       	add	r31, r0
    2e80:	11 24       	eor	r1, r1
    2e82:	eb 58       	subi	r30, 0x8B	; 139
    2e84:	fe 4f       	sbci	r31, 0xFE	; 254
    2e86:	80 81       	ld	r24, Z
    2e88:	8f 70       	andi	r24, 0x0F	; 15
    2e8a:	80 61       	ori	r24, 0x10	; 16
    2e8c:	80 83       	st	Z, r24
            process_action(&tapping_key);
    2e8e:	80 ea       	ldi	r24, 0xA0	; 160
    2e90:	91 e0       	ldi	r25, 0x01	; 1
    2e92:	0e 94 56 13 	call	0x26ac	; 0x26ac <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    2e96:	cf 91       	pop	r28
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    2e98:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e9c:	2f 5f       	subi	r18, 0xFF	; 255
    2e9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea0:	27 70       	andi	r18, 0x07	; 7
    2ea2:	b8 cf       	rjmp	.-144    	; 0x2e14 <waiting_buffer_scan_tap+0x3c>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    2ea4:	cf 91       	pop	r28
    2ea6:	08 95       	ret

00002ea8 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    2ea8:	cf 92       	push	r12
    2eaa:	df 92       	push	r13
    2eac:	ef 92       	push	r14
    2eae:	ff 92       	push	r15
    2eb0:	0f 93       	push	r16
    2eb2:	1f 93       	push	r17
    2eb4:	cf 93       	push	r28
    2eb6:	df 93       	push	r29
    2eb8:	cd b7       	in	r28, 0x3d	; 61
    2eba:	de b7       	in	r29, 0x3e	; 62
    2ebc:	62 97       	sbiw	r28, 0x12	; 18
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	f8 94       	cli
    2ec2:	de bf       	out	0x3e, r29	; 62
    2ec4:	0f be       	out	0x3f, r0	; 63
    2ec6:	cd bf       	out	0x3d, r28	; 61
    2ec8:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    2eca:	85 e0       	ldi	r24, 0x05	; 5
    2ecc:	f8 01       	movw	r30, r16
    2ece:	de 01       	movw	r26, r28
    2ed0:	1d 96       	adiw	r26, 0x0d	; 13
    2ed2:	01 90       	ld	r0, Z+
    2ed4:	0d 92       	st	X+, r0
    2ed6:	8a 95       	dec	r24
    2ed8:	e1 f7       	brne	.-8      	; 0x2ed2 <process_tapping+0x2a>
    2eda:	d8 01       	movw	r26, r16
    2edc:	4c 91       	ld	r20, X
    2ede:	11 96       	adiw	r26, 0x01	; 1
    2ee0:	5c 91       	ld	r21, X
    2ee2:	11 97       	sbiw	r26, 0x01	; 1
    2ee4:	12 96       	adiw	r26, 0x02	; 2
    2ee6:	6c 91       	ld	r22, X
    2ee8:	12 97       	sbiw	r26, 0x02	; 2
    2eea:	13 96       	adiw	r26, 0x03	; 3
    2eec:	ed 90       	ld	r14, X+
    2eee:	fc 90       	ld	r15, X
    2ef0:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    2ef2:	70 91 a0 01 	lds	r23, 0x01A0
    2ef6:	e0 91 a1 01 	lds	r30, 0x01A1
    2efa:	20 91 a3 01 	lds	r18, 0x01A3
    2efe:	30 91 a4 01 	lds	r19, 0x01A4
    2f02:	21 15       	cp	r18, r1
    2f04:	31 05       	cpc	r19, r1
    2f06:	31 f0       	breq	.+12     	; 0x2f14 <process_tapping+0x6c>
    2f08:	ef 3f       	cpi	r30, 0xFF	; 255
    2f0a:	31 f4       	brne	.+12     	; 0x2f18 <process_tapping+0x70>
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	7f 3f       	cpi	r23, 0xFF	; 255
    2f10:	19 f4       	brne	.+6      	; 0x2f18 <process_tapping+0x70>
    2f12:	03 c0       	rjmp	.+6      	; 0x2f1a <process_tapping+0x72>
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    2f16:	01 c0       	rjmp	.+2      	; 0x2f1a <process_tapping+0x72>
    2f18:	80 e0       	ldi	r24, 0x00	; 0
    2f1a:	b8 2f       	mov	r27, r24
    2f1c:	b1 70       	andi	r27, 0x01	; 1
    2f1e:	cb 2e       	mov	r12, r27
    2f20:	80 fd       	sbrc	r24, 0
    2f22:	6c c1       	rjmp	.+728    	; 0x31fc <process_tapping+0x354>
    2f24:	d0 90 a2 01 	lds	r13, 0x01A2
    2f28:	dd 20       	and	r13, r13
    2f2a:	09 f4       	brne	.+2      	; 0x2f2e <process_tapping+0x86>
    2f2c:	f5 c0       	rjmp	.+490    	; 0x3118 <process_tapping+0x270>
    2f2e:	f0 91 a5 01 	lds	r31, 0x01A5
        if (WITHIN_TAPPING_TERM(event)) {
    2f32:	e2 16       	cp	r14, r18
    2f34:	f3 06       	cpc	r15, r19
    2f36:	38 f0       	brcs	.+14     	; 0x2f46 <process_tapping+0x9e>
    2f38:	c7 01       	movw	r24, r14
    2f3a:	82 1b       	sub	r24, r18
    2f3c:	93 0b       	sbc	r25, r19
    2f3e:	88 3c       	cpi	r24, 0xC8	; 200
    2f40:	91 05       	cpc	r25, r1
    2f42:	48 f0       	brcs	.+18     	; 0x2f56 <process_tapping+0xae>
    2f44:	9b c0       	rjmp	.+310    	; 0x307c <process_tapping+0x1d4>
    2f46:	20 95       	com	r18
    2f48:	30 95       	com	r19
    2f4a:	2e 0d       	add	r18, r14
    2f4c:	3f 1d       	adc	r19, r15
    2f4e:	28 3c       	cpi	r18, 0xC8	; 200
    2f50:	31 05       	cpc	r19, r1
    2f52:	08 f0       	brcs	.+2      	; 0x2f56 <process_tapping+0xae>
    2f54:	93 c0       	rjmp	.+294    	; 0x307c <process_tapping+0x1d4>
            if (tapping_key.tap.count == 0) {
    2f56:	8f 2f       	mov	r24, r31
    2f58:	80 7f       	andi	r24, 0xF0	; 240
    2f5a:	09 f0       	breq	.+2      	; 0x2f5e <process_tapping+0xb6>
    2f5c:	52 c0       	rjmp	.+164    	; 0x3002 <process_tapping+0x15a>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2f5e:	e5 13       	cpse	r30, r21
    2f60:	14 c0       	rjmp	.+40     	; 0x2f8a <process_tapping+0xe2>
    2f62:	74 13       	cpse	r23, r20
    2f64:	12 c0       	rjmp	.+36     	; 0x2f8a <process_tapping+0xe2>
    2f66:	d6 2e       	mov	r13, r22
    2f68:	61 11       	cpse	r22, r1
    2f6a:	0f c0       	rjmp	.+30     	; 0x2f8a <process_tapping+0xe2>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    2f6c:	ff 70       	andi	r31, 0x0F	; 15
    2f6e:	f0 61       	ori	r31, 0x10	; 16
    2f70:	f0 93 a5 01 	sts	0x01A5, r31
                    debug_tapping_key();
    2f74:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <debug_tapping_key>
                    process_action(&tapping_key);
    2f78:	80 ea       	ldi	r24, 0xA0	; 160
    2f7a:	91 e0       	ldi	r25, 0x01	; 1
    2f7c:	0e 94 56 13 	call	0x26ac	; 0x26ac <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    2f80:	80 91 a5 01 	lds	r24, 0x01A5
    2f84:	f8 01       	movw	r30, r16
    2f86:	85 83       	std	Z+5, r24	; 0x05
                    // enqueue
                    return false;
    2f88:	6c c1       	rjmp	.+728    	; 0x3262 <process_tapping+0x3ba>
    2f8a:	ef 28       	or	r14, r15
    2f8c:	31 f0       	breq	.+12     	; 0x2f9a <process_tapping+0xf2>
    2f8e:	5f 3f       	cpi	r21, 0xFF	; 255
    2f90:	31 f4       	brne	.+12     	; 0x2f9e <process_tapping+0xf6>
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    2f94:	4f 3f       	cpi	r20, 0xFF	; 255
    2f96:	19 f4       	brne	.+6      	; 0x2f9e <process_tapping+0xf6>
    2f98:	03 c0       	rjmp	.+6      	; 0x2fa0 <process_tapping+0xf8>
    2f9a:	81 e0       	ldi	r24, 0x01	; 1
    2f9c:	01 c0       	rjmp	.+2      	; 0x2fa0 <process_tapping+0xf8>
    2f9e:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    2fa0:	80 fd       	sbrc	r24, 0
    2fa2:	03 c0       	rjmp	.+6      	; 0x2faa <process_tapping+0x102>
    2fa4:	81 e0       	ldi	r24, 0x01	; 1
    2fa6:	86 27       	eor	r24, r22
    2fa8:	01 c0       	rjmp	.+2      	; 0x2fac <process_tapping+0x104>
    2faa:	80 e0       	ldi	r24, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    2fac:	f8 2f       	mov	r31, r24
    2fae:	f1 70       	andi	r31, 0x01	; 1
    2fb0:	ff 2e       	mov	r15, r31
    2fb2:	80 ff       	sbrs	r24, 0
    2fb4:	1c c0       	rjmp	.+56     	; 0x2fee <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2fb6:	80 91 6e 01 	lds	r24, 0x016E
    2fba:	20 91 6f 01 	lds	r18, 0x016F
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2fbe:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2fc0:	82 17       	cp	r24, r18
    2fc2:	09 f4       	brne	.+2      	; 0x2fc6 <process_tapping+0x11e>
    2fc4:	28 c1       	rjmp	.+592    	; 0x3216 <process_tapping+0x36e>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	38 9f       	mul	r19, r24
    2fca:	f0 01       	movw	r30, r0
    2fcc:	39 9f       	mul	r19, r25
    2fce:	f0 0d       	add	r31, r0
    2fd0:	11 24       	eor	r1, r1
    2fd2:	e0 59       	subi	r30, 0x90	; 144
    2fd4:	fe 4f       	sbci	r31, 0xFE	; 254
    2fd6:	71 81       	ldd	r23, Z+1	; 0x01
    2fd8:	57 13       	cpse	r21, r23
    2fda:	06 c0       	rjmp	.+12     	; 0x2fe8 <process_tapping+0x140>
    2fdc:	70 81       	ld	r23, Z
    2fde:	47 13       	cpse	r20, r23
    2fe0:	03 c0       	rjmp	.+6      	; 0x2fe8 <process_tapping+0x140>
    2fe2:	72 81       	ldd	r23, Z+2	; 0x02
    2fe4:	67 13       	cpse	r22, r23
    2fe6:	03 c0       	rjmp	.+6      	; 0x2fee <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2fe8:	01 96       	adiw	r24, 0x01	; 1
    2fea:	87 70       	andi	r24, 0x07	; 7
    2fec:	e9 cf       	rjmp	.-46     	; 0x2fc0 <process_tapping+0x118>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    2fee:	d6 2e       	mov	r13, r22
    2ff0:	66 23       	and	r22, r22
    2ff2:	09 f4       	brne	.+2      	; 0x2ff6 <process_tapping+0x14e>
    2ff4:	36 c1       	rjmp	.+620    	; 0x3262 <process_tapping+0x3ba>
                        tapping_key.tap.interrupted = true;
    2ff6:	80 91 a5 01 	lds	r24, 0x01A5
    2ffa:	81 60       	ori	r24, 0x01	; 1
    2ffc:	80 93 a5 01 	sts	0x01A5, r24
    3000:	53 c0       	rjmp	.+166    	; 0x30a8 <process_tapping+0x200>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3002:	e5 13       	cpse	r30, r21
    3004:	08 c0       	rjmp	.+16     	; 0x3016 <process_tapping+0x16e>
    3006:	74 13       	cpse	r23, r20
    3008:	06 c0       	rjmp	.+12     	; 0x3016 <process_tapping+0x16e>
    300a:	61 11       	cpse	r22, r1
    300c:	04 c0       	rjmp	.+8      	; 0x3016 <process_tapping+0x16e>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    300e:	d8 01       	movw	r26, r16
    3010:	15 96       	adiw	r26, 0x05	; 5
    3012:	fc 93       	st	X, r31
    3014:	ae c0       	rjmp	.+348    	; 0x3172 <process_tapping+0x2ca>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    3016:	4d 87       	std	Y+13, r20	; 0x0d
    3018:	5e 87       	std	Y+14, r21	; 0x0e
    301a:	8d 85       	ldd	r24, Y+13	; 0x0d
    301c:	9e 85       	ldd	r25, Y+14	; 0x0e
    301e:	6a 8b       	std	Y+18, r22	; 0x12
    3020:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <is_tap_key>
    3024:	6a 89       	ldd	r22, Y+18	; 0x12
    3026:	88 23       	and	r24, r24
    3028:	29 f1       	breq	.+74     	; 0x3074 <process_tapping+0x1cc>
    302a:	d6 2e       	mov	r13, r22
    302c:	66 23       	and	r22, r22
    302e:	11 f1       	breq	.+68     	; 0x3074 <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    3030:	20 91 a5 01 	lds	r18, 0x01A5
    3034:	82 2f       	mov	r24, r18
    3036:	82 95       	swap	r24
    3038:	8f 70       	andi	r24, 0x0F	; 15
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	02 97       	sbiw	r24, 0x02	; 2
    303e:	0c f4       	brge	.+2      	; 0x3042 <process_tapping+0x19a>
    3040:	60 c0       	rjmp	.+192    	; 0x3102 <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    3042:	80 91 a0 01 	lds	r24, 0x01A0
    3046:	90 91 a1 01 	lds	r25, 0x01A1
    304a:	98 87       	std	Y+8, r25	; 0x08
    304c:	8f 83       	std	Y+7, r24	; 0x07
    304e:	19 86       	std	Y+9, r1	; 0x09
    3050:	fb 86       	std	Y+11, r15	; 0x0b
    3052:	ea 86       	std	Y+10, r14	; 0x0a
    3054:	2c 87       	std	Y+12, r18	; 0x0c
    3056:	ce 01       	movw	r24, r28
    3058:	07 96       	adiw	r24, 0x07	; 7
    305a:	51 c0       	rjmp	.+162    	; 0x30fe <process_tapping+0x256>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    305c:	e5 17       	cp	r30, r21
    305e:	31 f1       	breq	.+76     	; 0x30ac <process_tapping+0x204>
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = (keyrecord_t){};
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    3060:	4d 87       	std	Y+13, r20	; 0x0d
    3062:	5e 87       	std	Y+14, r21	; 0x0e
    3064:	8d 85       	ldd	r24, Y+13	; 0x0d
    3066:	9e 85       	ldd	r25, Y+14	; 0x0e
    3068:	6a 8b       	std	Y+18, r22	; 0x12
    306a:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <is_tap_key>
    306e:	6a 89       	ldd	r22, Y+18	; 0x12
    3070:	81 11       	cpse	r24, r1
    3072:	2e c0       	rjmp	.+92     	; 0x30d0 <process_tapping+0x228>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    3074:	c8 01       	movw	r24, r16
    3076:	0e 94 56 13 	call	0x26ac	; 0x26ac <process_action>
    307a:	a4 c0       	rjmp	.+328    	; 0x31c4 <process_tapping+0x31c>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    307c:	8f 2f       	mov	r24, r31
    307e:	80 7f       	andi	r24, 0xF0	; 240
    3080:	69 f7       	brne	.-38     	; 0x305c <process_tapping+0x1b4>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    3082:	7e 2d       	mov	r23, r14
    3084:	f9 8a       	std	Y+17, r15	; 0x11
    3086:	e8 8a       	std	Y+16, r14	; 0x10
    3088:	89 89       	ldd	r24, Y+17	; 0x11
    308a:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <debug_event>
                process_action(&tapping_key);
    308e:	80 ea       	ldi	r24, 0xA0	; 160
    3090:	91 e0       	ldi	r25, 0x01	; 1
    3092:	0e 94 56 13 	call	0x26ac	; 0x26ac <process_action>
                tapping_key = (keyrecord_t){};
    3096:	e0 ea       	ldi	r30, 0xA0	; 160
    3098:	f1 e0       	ldi	r31, 0x01	; 1
    309a:	86 e0       	ldi	r24, 0x06	; 6
    309c:	df 01       	movw	r26, r30
    309e:	1d 92       	st	X+, r1
    30a0:	8a 95       	dec	r24
    30a2:	e9 f7       	brne	.-6      	; 0x309e <process_tapping+0x1f6>
                debug_tapping_key();
    30a4:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <debug_tapping_key>
                return false;
    30a8:	d1 2c       	mov	r13, r1
    30aa:	db c0       	rjmp	.+438    	; 0x3262 <process_tapping+0x3ba>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    30ac:	74 13       	cpse	r23, r20
    30ae:	d8 cf       	rjmp	.-80     	; 0x3060 <process_tapping+0x1b8>
    30b0:	61 11       	cpse	r22, r1
    30b2:	d6 cf       	rjmp	.-84     	; 0x3060 <process_tapping+0x1b8>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    30b4:	d8 01       	movw	r26, r16
    30b6:	15 96       	adiw	r26, 0x05	; 5
    30b8:	fc 93       	st	X, r31
                    process_action(keyp);
    30ba:	c8 01       	movw	r24, r16
    30bc:	0e 94 56 13 	call	0x26ac	; 0x26ac <process_action>
                    tapping_key = (keyrecord_t){};
    30c0:	e0 ea       	ldi	r30, 0xA0	; 160
    30c2:	f1 e0       	ldi	r31, 0x01	; 1
    30c4:	86 e0       	ldi	r24, 0x06	; 6
    30c6:	df 01       	movw	r26, r30
    30c8:	1d 92       	st	X+, r1
    30ca:	8a 95       	dec	r24
    30cc:	e9 f7       	brne	.-6      	; 0x30c8 <process_tapping+0x220>
                    return true;
    30ce:	c9 c0       	rjmp	.+402    	; 0x3262 <process_tapping+0x3ba>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    30d0:	d6 2e       	mov	r13, r22
    30d2:	66 23       	and	r22, r22
    30d4:	79 f2       	breq	.-98     	; 0x3074 <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    30d6:	20 91 a5 01 	lds	r18, 0x01A5
    30da:	82 2f       	mov	r24, r18
    30dc:	82 95       	swap	r24
    30de:	8f 70       	andi	r24, 0x0F	; 15
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	02 97       	sbiw	r24, 0x02	; 2
    30e4:	74 f0       	brlt	.+28     	; 0x3102 <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    30e6:	80 91 a0 01 	lds	r24, 0x01A0
    30ea:	90 91 a1 01 	lds	r25, 0x01A1
    30ee:	9a 83       	std	Y+2, r25	; 0x02
    30f0:	89 83       	std	Y+1, r24	; 0x01
    30f2:	1b 82       	std	Y+3, r1	; 0x03
    30f4:	fd 82       	std	Y+5, r15	; 0x05
    30f6:	ec 82       	std	Y+4, r14	; 0x04
    30f8:	2e 83       	std	Y+6, r18	; 0x06
    30fa:	ce 01       	movw	r24, r28
    30fc:	01 96       	adiw	r24, 0x01	; 1
    30fe:	0e 94 56 13 	call	0x26ac	; 0x26ac <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    3102:	86 e0       	ldi	r24, 0x06	; 6
    3104:	f8 01       	movw	r30, r16
    3106:	a0 ea       	ldi	r26, 0xA0	; 160
    3108:	b1 e0       	ldi	r27, 0x01	; 1
    310a:	01 90       	ld	r0, Z+
    310c:	0d 92       	st	X+, r0
    310e:	8a 95       	dec	r24
    3110:	e1 f7       	brne	.-8      	; 0x310a <process_tapping+0x262>
                    waiting_buffer_scan_tap();
    3112:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <waiting_buffer_scan_tap>
    3116:	6f c0       	rjmp	.+222    	; 0x31f6 <process_tapping+0x34e>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    3118:	e2 16       	cp	r14, r18
    311a:	f3 06       	cpc	r15, r19
    311c:	28 f0       	brcs	.+10     	; 0x3128 <process_tapping+0x280>
    311e:	c7 01       	movw	r24, r14
    3120:	82 1b       	sub	r24, r18
    3122:	93 0b       	sbc	r25, r19
    3124:	9c 01       	movw	r18, r24
    3126:	04 c0       	rjmp	.+8      	; 0x3130 <process_tapping+0x288>
    3128:	20 95       	com	r18
    312a:	30 95       	com	r19
    312c:	2e 0d       	add	r18, r14
    312e:	3f 1d       	adc	r19, r15
    3130:	28 3c       	cpi	r18, 0xC8	; 200
    3132:	31 05       	cpc	r19, r1
    3134:	08 f0       	brcs	.+2      	; 0x3138 <process_tapping+0x290>
    3136:	52 c0       	rjmp	.+164    	; 0x31dc <process_tapping+0x334>
            if (event.pressed) {
    3138:	d6 2e       	mov	r13, r22
    313a:	66 23       	and	r22, r22
    313c:	09 f4       	brne	.+2      	; 0x3140 <process_tapping+0x298>
    313e:	9a cf       	rjmp	.-204    	; 0x3074 <process_tapping+0x1cc>
                if (IS_TAPPING_KEY(event.key)) {
    3140:	e5 13       	cpse	r30, r21
    3142:	2c c0       	rjmp	.+88     	; 0x319c <process_tapping+0x2f4>
    3144:	74 13       	cpse	r23, r20
    3146:	2a c0       	rjmp	.+84     	; 0x319c <process_tapping+0x2f4>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    3148:	80 91 a5 01 	lds	r24, 0x01A5
    314c:	80 fd       	sbrc	r24, 0
    314e:	1d c0       	rjmp	.+58     	; 0x318a <process_tapping+0x2e2>
    3150:	98 2f       	mov	r25, r24
    3152:	92 95       	swap	r25
    3154:	9f 70       	andi	r25, 0x0F	; 15
    3156:	c9 f0       	breq	.+50     	; 0x318a <process_tapping+0x2e2>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    3158:	d8 01       	movw	r26, r16
    315a:	15 96       	adiw	r26, 0x05	; 5
    315c:	8c 93       	st	X, r24
    315e:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    3160:	9f 30       	cpi	r25, 0x0F	; 15
    3162:	39 f0       	breq	.+14     	; 0x3172 <process_tapping+0x2ca>
    3164:	9f 5f       	subi	r25, 0xFF	; 255
    3166:	92 95       	swap	r25
    3168:	90 7f       	andi	r25, 0xF0	; 240
    316a:	8f 70       	andi	r24, 0x0F	; 15
    316c:	89 2b       	or	r24, r25
    316e:	15 96       	adiw	r26, 0x05	; 5
    3170:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    3172:	c8 01       	movw	r24, r16
    3174:	0e 94 56 13 	call	0x26ac	; 0x26ac <process_action>
                        tapping_key = *keyp;
    3178:	86 e0       	ldi	r24, 0x06	; 6
    317a:	f8 01       	movw	r30, r16
    317c:	a0 ea       	ldi	r26, 0xA0	; 160
    317e:	b1 e0       	ldi	r27, 0x01	; 1
    3180:	01 90       	ld	r0, Z+
    3182:	0d 92       	st	X+, r0
    3184:	8a 95       	dec	r24
    3186:	e1 f7       	brne	.-8      	; 0x3180 <process_tapping+0x2d8>
    3188:	36 c0       	rjmp	.+108    	; 0x31f6 <process_tapping+0x34e>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    318a:	86 e0       	ldi	r24, 0x06	; 6
    318c:	f8 01       	movw	r30, r16
    318e:	a0 ea       	ldi	r26, 0xA0	; 160
    3190:	b1 e0       	ldi	r27, 0x01	; 1
    3192:	01 90       	ld	r0, Z+
    3194:	0d 92       	st	X+, r0
    3196:	8a 95       	dec	r24
    3198:	e1 f7       	brne	.-8      	; 0x3192 <process_tapping+0x2ea>
                        return true;
    319a:	63 c0       	rjmp	.+198    	; 0x3262 <process_tapping+0x3ba>
                    }
                } else if (is_tap_key(event.key)) {
    319c:	4d 87       	std	Y+13, r20	; 0x0d
    319e:	5e 87       	std	Y+14, r21	; 0x0e
    31a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    31a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    31a4:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <is_tap_key>
    31a8:	88 23       	and	r24, r24
    31aa:	79 f0       	breq	.+30     	; 0x31ca <process_tapping+0x322>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    31ac:	86 e0       	ldi	r24, 0x06	; 6
    31ae:	f8 01       	movw	r30, r16
    31b0:	a0 ea       	ldi	r26, 0xA0	; 160
    31b2:	b1 e0       	ldi	r27, 0x01	; 1
    31b4:	01 90       	ld	r0, Z+
    31b6:	0d 92       	st	X+, r0
    31b8:	8a 95       	dec	r24
    31ba:	e1 f7       	brne	.-8      	; 0x31b4 <process_tapping+0x30c>
                    waiting_buffer_scan_tap();
    31bc:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    31c0:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <debug_tapping_key>
                    return true;
    31c4:	dd 24       	eor	r13, r13
    31c6:	d3 94       	inc	r13
    31c8:	4c c0       	rjmp	.+152    	; 0x3262 <process_tapping+0x3ba>
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    31ca:	80 91 a5 01 	lds	r24, 0x01A5
    31ce:	81 60       	ori	r24, 0x01	; 1
    31d0:	80 93 a5 01 	sts	0x01A5, r24
                    process_action(keyp);
    31d4:	c8 01       	movw	r24, r16
    31d6:	0e 94 56 13 	call	0x26ac	; 0x26ac <process_action>
                    return true;
    31da:	43 c0       	rjmp	.+134    	; 0x3262 <process_tapping+0x3ba>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    31dc:	7e 2d       	mov	r23, r14
    31de:	f9 8a       	std	Y+17, r15	; 0x11
    31e0:	e8 8a       	std	Y+16, r14	; 0x10
    31e2:	89 89       	ldd	r24, Y+17	; 0x11
    31e4:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <debug_event>
            tapping_key = (keyrecord_t){};
    31e8:	e0 ea       	ldi	r30, 0xA0	; 160
    31ea:	f1 e0       	ldi	r31, 0x01	; 1
    31ec:	86 e0       	ldi	r24, 0x06	; 6
    31ee:	df 01       	movw	r26, r30
    31f0:	1d 92       	st	X+, r1
    31f2:	8a 95       	dec	r24
    31f4:	e9 f7       	brne	.-6      	; 0x31f0 <process_tapping+0x348>
            debug_tapping_key();
    31f6:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <debug_tapping_key>
            return false;
    31fa:	33 c0       	rjmp	.+102    	; 0x3262 <process_tapping+0x3ba>
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    31fc:	66 23       	and	r22, r22
    31fe:	09 f4       	brne	.+2      	; 0x3202 <process_tapping+0x35a>
    3200:	39 cf       	rjmp	.-398    	; 0x3074 <process_tapping+0x1cc>
    3202:	4d 87       	std	Y+13, r20	; 0x0d
    3204:	5e 87       	std	Y+14, r21	; 0x0e
    3206:	8d 85       	ldd	r24, Y+13	; 0x0d
    3208:	9e 85       	ldd	r25, Y+14	; 0x0e
    320a:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <is_tap_key>
    320e:	88 23       	and	r24, r24
    3210:	09 f4       	brne	.+2      	; 0x3214 <process_tapping+0x36c>
    3212:	30 cf       	rjmp	.-416    	; 0x3074 <process_tapping+0x1cc>
    3214:	cb cf       	rjmp	.-106    	; 0x31ac <process_tapping+0x304>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    3216:	4d 87       	std	Y+13, r20	; 0x0d
    3218:	5e 87       	std	Y+14, r21	; 0x0e
    321a:	8d 85       	ldd	r24, Y+13	; 0x0d
    321c:	9e 85       	ldd	r25, Y+14	; 0x0e
    321e:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <layer_switch_get_action>
                    switch (action.kind.id) {
    3222:	29 2f       	mov	r18, r25
    3224:	22 95       	swap	r18
    3226:	2f 70       	andi	r18, 0x0F	; 15
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	22 30       	cpi	r18, 0x02	; 2
    322c:	31 05       	cpc	r19, r1
    322e:	2c f4       	brge	.+10     	; 0x323a <process_tapping+0x392>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    3230:	9f 70       	andi	r25, 0x0F	; 15
    3232:	41 f0       	breq	.+16     	; 0x3244 <process_tapping+0x39c>
    3234:	81 11       	cpse	r24, r1
    3236:	06 c0       	rjmp	.+12     	; 0x3244 <process_tapping+0x39c>
    3238:	0c c0       	rjmp	.+24     	; 0x3252 <process_tapping+0x3aa>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    323a:	24 30       	cpi	r18, 0x04	; 4
    323c:	31 05       	cpc	r19, r1
    323e:	2c f4       	brge	.+10     	; 0x324a <process_tapping+0x3a2>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3240:	9f 70       	andi	r25, 0x0F	; 15
    3242:	49 f4       	brne	.+18     	; 0x3256 <process_tapping+0x3ae>
                            if (IS_MOD(action.key.code)) return false;
    3244:	80 5e       	subi	r24, 0xE0	; 224
    3246:	88 30       	cpi	r24, 0x08	; 8
    3248:	20 f0       	brcs	.+8      	; 0x3252 <process_tapping+0x3aa>
                            break;
                    }
                    // Release of key should be process immediately.
                    debug("Tapping: release event of a key pressed before tapping\n");
                    process_action(keyp);
    324a:	c8 01       	movw	r24, r16
    324c:	0e 94 56 13 	call	0x26ac	; 0x26ac <process_action>
                    return true;
    3250:	cf 2c       	mov	r12, r15
    3252:	dc 2c       	mov	r13, r12
    3254:	06 c0       	rjmp	.+12     	; 0x3262 <process_tapping+0x3ba>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3256:	d8 01       	movw	r26, r16
    3258:	15 96       	adiw	r26, 0x05	; 5
    325a:	9c 91       	ld	r25, X
    325c:	90 7f       	andi	r25, 0xF0	; 240
    325e:	91 f7       	brne	.-28     	; 0x3244 <process_tapping+0x39c>
    3260:	f8 cf       	rjmp	.-16     	; 0x3252 <process_tapping+0x3aa>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    3262:	8d 2d       	mov	r24, r13
    3264:	62 96       	adiw	r28, 0x12	; 18
    3266:	0f b6       	in	r0, 0x3f	; 63
    3268:	f8 94       	cli
    326a:	de bf       	out	0x3e, r29	; 62
    326c:	0f be       	out	0x3f, r0	; 63
    326e:	cd bf       	out	0x3d, r28	; 61
    3270:	df 91       	pop	r29
    3272:	cf 91       	pop	r28
    3274:	1f 91       	pop	r17
    3276:	0f 91       	pop	r16
    3278:	ff 90       	pop	r15
    327a:	ef 90       	pop	r14
    327c:	df 90       	pop	r13
    327e:	cf 90       	pop	r12
    3280:	08 95       	ret

00003282 <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    3282:	1f 93       	push	r17
    3284:	cf 93       	push	r28
    3286:	df 93       	push	r29
    3288:	cd b7       	in	r28, 0x3d	; 61
    328a:	de b7       	in	r29, 0x3e	; 62
    328c:	2c 97       	sbiw	r28, 0x0c	; 12
    328e:	0f b6       	in	r0, 0x3f	; 63
    3290:	f8 94       	cli
    3292:	de bf       	out	0x3e, r29	; 62
    3294:	0f be       	out	0x3f, r0	; 63
    3296:	cd bf       	out	0x3d, r28	; 61
    3298:	4f 83       	std	Y+7, r20	; 0x07
    329a:	58 87       	std	Y+8, r21	; 0x08
    329c:	69 87       	std	Y+9, r22	; 0x09
    329e:	7a 87       	std	Y+10, r23	; 0x0a
    32a0:	8b 87       	std	Y+11, r24	; 0x0b
    32a2:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    32a4:	ce 01       	movw	r24, r28
    32a6:	07 96       	adiw	r24, 0x07	; 7
    32a8:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <process_tapping>
    32ac:	88 23       	and	r24, r24
    32ae:	c1 f0       	breq	.+48     	; 0x32e0 <action_tapping_process+0x5e>
        if (!IS_NOEVENT(record.event)) {
    32b0:	2f 81       	ldd	r18, Y+7	; 0x07
    32b2:	38 85       	ldd	r19, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    32b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    32b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    32b8:	89 2b       	or	r24, r25
    32ba:	31 f0       	breq	.+12     	; 0x32c8 <action_tapping_process+0x46>
    32bc:	3f 3f       	cpi	r19, 0xFF	; 255
    32be:	11 f0       	breq	.+4      	; 0x32c4 <action_tapping_process+0x42>
    32c0:	80 e0       	ldi	r24, 0x00	; 0
    32c2:	03 c0       	rjmp	.+6      	; 0x32ca <action_tapping_process+0x48>
    32c4:	2f 3f       	cpi	r18, 0xFF	; 255
    32c6:	e1 f7       	brne	.-8      	; 0x32c0 <action_tapping_process+0x3e>
    32c8:	81 e0       	ldi	r24, 0x01	; 1
    32ca:	81 11       	cpse	r24, r1
    32cc:	47 c0       	rjmp	.+142    	; 0x335c <action_tapping_process+0xda>
            debug("processed: "); debug_record(record); debug("\n");
    32ce:	4f 81       	ldd	r20, Y+7	; 0x07
    32d0:	58 85       	ldd	r21, Y+8	; 0x08
    32d2:	69 85       	ldd	r22, Y+9	; 0x09
    32d4:	7a 85       	ldd	r23, Y+10	; 0x0a
    32d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    32d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    32da:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <debug_record>
    32de:	3e c0       	rjmp	.+124    	; 0x335c <action_tapping_process+0xda>
    32e0:	86 e0       	ldi	r24, 0x06	; 6
    32e2:	fe 01       	movw	r30, r28
    32e4:	37 96       	adiw	r30, 0x07	; 7
    32e6:	de 01       	movw	r26, r28
    32e8:	11 96       	adiw	r26, 0x01	; 1
    32ea:	01 90       	ld	r0, Z+
    32ec:	0d 92       	st	X+, r0
    32ee:	8a 95       	dec	r24
    32f0:	e1 f7       	brne	.-8      	; 0x32ea <action_tapping_process+0x68>
    32f2:	ff 81       	ldd	r31, Y+7	; 0x07
    32f4:	e8 85       	ldd	r30, Y+8	; 0x08
    32f6:	4a 85       	ldd	r20, Y+10	; 0x0a
    32f8:	5b 85       	ldd	r21, Y+11	; 0x0b
    32fa:	41 15       	cp	r20, r1
    32fc:	51 05       	cpc	r21, r1
    32fe:	31 f0       	breq	.+12     	; 0x330c <action_tapping_process+0x8a>
    3300:	ef 3f       	cpi	r30, 0xFF	; 255
    3302:	31 f4       	brne	.+12     	; 0x3310 <action_tapping_process+0x8e>
    3304:	81 e0       	ldi	r24, 0x01	; 1
    3306:	ff 3f       	cpi	r31, 0xFF	; 255
    3308:	19 f4       	brne	.+6      	; 0x3310 <action_tapping_process+0x8e>
    330a:	03 c0       	rjmp	.+6      	; 0x3312 <action_tapping_process+0x90>
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	01 c0       	rjmp	.+2      	; 0x3312 <action_tapping_process+0x90>
    3310:	80 e0       	ldi	r24, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    3312:	80 fd       	sbrc	r24, 0
    3314:	23 c0       	rjmp	.+70     	; 0x335c <action_tapping_process+0xda>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    3316:	20 91 6f 01 	lds	r18, 0x016F
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	c9 01       	movw	r24, r18
    331e:	01 96       	adiw	r24, 0x01	; 1
    3320:	87 70       	andi	r24, 0x07	; 7
    3322:	99 27       	eor	r25, r25
    3324:	60 91 6e 01 	lds	r22, 0x016E
    3328:	70 e0       	ldi	r23, 0x00	; 0
    332a:	86 17       	cp	r24, r22
    332c:	97 07       	cpc	r25, r23
    332e:	f1 f1       	breq	.+124    	; 0x33ac <action_tapping_process+0x12a>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    3330:	f9 83       	std	Y+1, r31	; 0x01
    3332:	ea 83       	std	Y+2, r30	; 0x02
    3334:	5d 83       	std	Y+5, r21	; 0x05
    3336:	4c 83       	std	Y+4, r20	; 0x04
    3338:	96 e0       	ldi	r25, 0x06	; 6
    333a:	92 9f       	mul	r25, r18
    333c:	d0 01       	movw	r26, r0
    333e:	93 9f       	mul	r25, r19
    3340:	b0 0d       	add	r27, r0
    3342:	11 24       	eor	r1, r1
    3344:	a0 59       	subi	r26, 0x90	; 144
    3346:	be 4f       	sbci	r27, 0xFE	; 254
    3348:	fe 01       	movw	r30, r28
    334a:	31 96       	adiw	r30, 0x01	; 1
    334c:	01 90       	ld	r0, Z+
    334e:	0d 92       	st	X+, r0
    3350:	9a 95       	dec	r25
    3352:	e1 f7       	brne	.-8      	; 0x334c <action_tapping_process+0xca>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    3354:	80 93 6f 01 	sts	0x016F, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    3358:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    335c:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    335e:	80 91 6e 01 	lds	r24, 0x016E
    3362:	90 91 6f 01 	lds	r25, 0x016F
    3366:	89 17       	cp	r24, r25
    3368:	79 f1       	breq	.+94     	; 0x33c8 <action_tapping_process+0x146>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    336a:	18 9f       	mul	r17, r24
    336c:	c0 01       	movw	r24, r0
    336e:	11 24       	eor	r1, r1
    3370:	80 59       	subi	r24, 0x90	; 144
    3372:	9e 4f       	sbci	r25, 0xFE	; 254
    3374:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <process_tapping>
    3378:	88 23       	and	r24, r24
    337a:	31 f1       	breq	.+76     	; 0x33c8 <action_tapping_process+0x146>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    337c:	e0 91 6e 01 	lds	r30, 0x016E
    3380:	1e 9f       	mul	r17, r30
    3382:	f0 01       	movw	r30, r0
    3384:	11 24       	eor	r1, r1
    3386:	e0 59       	subi	r30, 0x90	; 144
    3388:	fe 4f       	sbci	r31, 0xFE	; 254
    338a:	40 81       	ld	r20, Z
    338c:	51 81       	ldd	r21, Z+1	; 0x01
    338e:	62 81       	ldd	r22, Z+2	; 0x02
    3390:	73 81       	ldd	r23, Z+3	; 0x03
    3392:	84 81       	ldd	r24, Z+4	; 0x04
    3394:	95 81       	ldd	r25, Z+5	; 0x05
    3396:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    339a:	80 91 6e 01 	lds	r24, 0x016E
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	01 96       	adiw	r24, 0x01	; 1
    33a2:	87 70       	andi	r24, 0x07	; 7
    33a4:	99 27       	eor	r25, r25
    33a6:	80 93 6e 01 	sts	0x016E, r24
    33aa:	d9 cf       	rjmp	.-78     	; 0x335e <action_tapping_process+0xdc>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    33ac:	0e 94 75 16 	call	0x2cea	; 0x2cea <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    33b0:	10 92 6f 01 	sts	0x016F, r1
    waiting_buffer_tail = 0;
    33b4:	10 92 6e 01 	sts	0x016E, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    33b8:	e0 ea       	ldi	r30, 0xA0	; 160
    33ba:	f1 e0       	ldi	r31, 0x01	; 1
    33bc:	86 e0       	ldi	r24, 0x06	; 6
    33be:	df 01       	movw	r26, r30
    33c0:	1d 92       	st	X+, r1
    33c2:	8a 95       	dec	r24
    33c4:	e9 f7       	brne	.-6      	; 0x33c0 <action_tapping_process+0x13e>
    33c6:	ca cf       	rjmp	.-108    	; 0x335c <action_tapping_process+0xda>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    33c8:	2c 96       	adiw	r28, 0x0c	; 12
    33ca:	0f b6       	in	r0, 0x3f	; 63
    33cc:	f8 94       	cli
    33ce:	de bf       	out	0x3e, r29	; 62
    33d0:	0f be       	out	0x3f, r0	; 63
    33d2:	cd bf       	out	0x3d, r28	; 61
    33d4:	df 91       	pop	r29
    33d6:	cf 91       	pop	r28
    33d8:	1f 91       	pop	r17
    33da:	08 95       	ret

000033dc <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    33dc:	df 92       	push	r13
    33de:	ef 92       	push	r14
    33e0:	ff 92       	push	r15
    33e2:	0f 93       	push	r16
    33e4:	1f 93       	push	r17
    33e6:	cf 93       	push	r28
    33e8:	df 93       	push	r29
    33ea:	fc 01       	movw	r30, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    33ec:	00 97       	sbiw	r24, 0x00	; 0
    33ee:	09 f4       	brne	.+2      	; 0x33f2 <action_macro_play+0x16>
    33f0:	8a c0       	rjmp	.+276    	; 0x3506 <action_macro_play+0x12a>
    33f2:	e1 2c       	mov	r14, r1
    33f4:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    33f6:	dd 24       	eor	r13, r13
    33f8:	d3 94       	inc	r13

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    33fa:	ef 01       	movw	r28, r30
    33fc:	21 96       	adiw	r28, 0x01	; 1
    33fe:	84 91       	lpm	r24, Z
    3400:	85 37       	cpi	r24, 0x75	; 117
    3402:	09 f4       	brne	.+2      	; 0x3406 <action_macro_play+0x2a>
    3404:	61 c0       	rjmp	.+194    	; 0x34c8 <action_macro_play+0xec>
    3406:	58 f4       	brcc	.+22     	; 0x341e <action_macro_play+0x42>
    3408:	84 37       	cpi	r24, 0x74	; 116
    340a:	08 f0       	brcs	.+2      	; 0x340e <action_macro_play+0x32>
    340c:	4e c0       	rjmp	.+156    	; 0x34aa <action_macro_play+0xce>
    340e:	84 30       	cpi	r24, 0x04	; 4
    3410:	08 f0       	brcs	.+2      	; 0x3414 <action_macro_play+0x38>
    3412:	6a c0       	rjmp	.+212    	; 0x34e8 <action_macro_play+0x10c>
    3414:	81 30       	cpi	r24, 0x01	; 1
    3416:	d1 f0       	breq	.+52     	; 0x344c <action_macro_play+0x70>
    3418:	82 30       	cpi	r24, 0x02	; 2
    341a:	71 f1       	breq	.+92     	; 0x3478 <action_macro_play+0x9c>
    341c:	74 c0       	rjmp	.+232    	; 0x3506 <action_macro_play+0x12a>
    341e:	88 37       	cpi	r24, 0x78	; 120
    3420:	09 f4       	brne	.+2      	; 0x3424 <action_macro_play+0x48>
    3422:	5d c0       	rjmp	.+186    	; 0x34de <action_macro_play+0x102>
    3424:	50 f4       	brcc	.+20     	; 0x343a <action_macro_play+0x5e>
    3426:	86 37       	cpi	r24, 0x76	; 118
    3428:	09 f4       	brne	.+2      	; 0x342c <action_macro_play+0x50>
    342a:	55 c0       	rjmp	.+170    	; 0x34d6 <action_macro_play+0xfa>
    342c:	87 37       	cpi	r24, 0x77	; 119
    342e:	09 f0       	breq	.+2      	; 0x3432 <action_macro_play+0x56>
    3430:	6a c0       	rjmp	.+212    	; 0x3506 <action_macro_play+0x12a>
                break;
            case MOD_STORE:
                mod_storage = get_mods();
                break;
            case MOD_RESTORE:
                set_mods(mod_storage);
    3432:	8e 2d       	mov	r24, r14
    3434:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <set_mods>
    3438:	54 c0       	rjmp	.+168    	; 0x34e2 <action_macro_play+0x106>

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    343a:	9c e7       	ldi	r25, 0x7C	; 124
    343c:	98 0f       	add	r25, r24
    343e:	90 37       	cpi	r25, 0x70	; 112
    3440:	08 f0       	brcs	.+2      	; 0x3444 <action_macro_play+0x68>
    3442:	61 c0       	rjmp	.+194    	; 0x3506 <action_macro_play+0x12a>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    3444:	8f 77       	andi	r24, 0x7F	; 127
    3446:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <unregister_code>
                break;
    344a:	50 c0       	rjmp	.+160    	; 0x34ec <action_macro_play+0x110>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    344c:	8f 01       	movw	r16, r30
    344e:	0e 5f       	subi	r16, 0xFE	; 254
    3450:	1f 4f       	sbci	r17, 0xFF	; 255
    3452:	fe 01       	movw	r30, r28
    3454:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3456:	90 e2       	ldi	r25, 0x20	; 32
    3458:	98 0f       	add	r25, r24
    345a:	98 30       	cpi	r25, 0x08	; 8
    345c:	50 f4       	brcc	.+20     	; 0x3472 <action_macro_play+0x96>
                    add_weak_mods(MOD_BIT(macro));
    345e:	87 70       	andi	r24, 0x07	; 7
    3460:	fd 2d       	mov	r31, r13
    3462:	01 c0       	rjmp	.+2      	; 0x3466 <action_macro_play+0x8a>
    3464:	ff 0f       	add	r31, r31
    3466:	8a 95       	dec	r24
    3468:	ea f7       	brpl	.-6      	; 0x3464 <action_macro_play+0x88>
    346a:	8f 2f       	mov	r24, r31
    346c:	0e 94 77 1c 	call	0x38ee	; 0x38ee <add_weak_mods>
    3470:	15 c0       	rjmp	.+42     	; 0x349c <action_macro_play+0xc0>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    3472:	0e 94 26 12 	call	0x244c	; 0x244c <register_code>
    3476:	14 c0       	rjmp	.+40     	; 0x34a0 <action_macro_play+0xc4>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    3478:	8f 01       	movw	r16, r30
    347a:	0e 5f       	subi	r16, 0xFE	; 254
    347c:	1f 4f       	sbci	r17, 0xFF	; 255
    347e:	fe 01       	movw	r30, r28
    3480:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3482:	90 e2       	ldi	r25, 0x20	; 32
    3484:	98 0f       	add	r25, r24
    3486:	98 30       	cpi	r25, 0x08	; 8
    3488:	68 f4       	brcc	.+26     	; 0x34a4 <action_macro_play+0xc8>
                    del_weak_mods(MOD_BIT(macro));
    348a:	87 70       	andi	r24, 0x07	; 7
    348c:	fd 2d       	mov	r31, r13
    348e:	01 c0       	rjmp	.+2      	; 0x3492 <action_macro_play+0xb6>
    3490:	ff 0f       	add	r31, r31
    3492:	8a 95       	dec	r24
    3494:	ea f7       	brpl	.-6      	; 0x3490 <action_macro_play+0xb4>
    3496:	8f 2f       	mov	r24, r31
    3498:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <del_weak_mods>
                    send_keyboard_report();
    349c:	0e 94 a0 1c 	call	0x3940	; 0x3940 <send_keyboard_report>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    34a0:	e8 01       	movw	r28, r16
    34a2:	24 c0       	rjmp	.+72     	; 0x34ec <action_macro_play+0x110>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                    send_keyboard_report();
                } else {
                    unregister_code(macro);
    34a4:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <unregister_code>
    34a8:	fb cf       	rjmp	.-10     	; 0x34a0 <action_macro_play+0xc4>
                }
                break;
            case WAIT:
                MACRO_READ();
    34aa:	9f 01       	movw	r18, r30
    34ac:	2e 5f       	subi	r18, 0xFE	; 254
    34ae:	3f 4f       	sbci	r19, 0xFF	; 255
    34b0:	fe 01       	movw	r30, r28
    34b2:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    34b4:	cc 23       	and	r28, r28
    34b6:	69 f0       	breq	.+26     	; 0x34d2 <action_macro_play+0xf6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    34b8:	8f e9       	ldi	r24, 0x9F	; 159
    34ba:	9f e0       	ldi	r25, 0x0F	; 15
    34bc:	01 97       	sbiw	r24, 0x01	; 1
    34be:	f1 f7       	brne	.-4      	; 0x34bc <action_macro_play+0xe0>
    34c0:	00 c0       	rjmp	.+0      	; 0x34c2 <action_macro_play+0xe6>
    34c2:	00 00       	nop
    34c4:	c1 50       	subi	r28, 0x01	; 1
    34c6:	f6 cf       	rjmp	.-20     	; 0x34b4 <action_macro_play+0xd8>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    34c8:	9f 01       	movw	r18, r30
    34ca:	2e 5f       	subi	r18, 0xFE	; 254
    34cc:	3f 4f       	sbci	r19, 0xFF	; 255
    34ce:	fe 01       	movw	r30, r28
    34d0:	f4 90       	lpm	r15, Z
    34d2:	e9 01       	movw	r28, r18
                dprintf("INTERVAL(%u)\n", interval);
                break;
    34d4:	0b c0       	rjmp	.+22     	; 0x34ec <action_macro_play+0x110>
            case MOD_STORE:
                mod_storage = get_mods();
    34d6:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <get_mods>
    34da:	e8 2e       	mov	r14, r24
                break;
    34dc:	07 c0       	rjmp	.+14     	; 0x34ec <action_macro_play+0x110>
            case MOD_RESTORE:
                set_mods(mod_storage);
                send_keyboard_report();
                break;
            case MOD_CLEAR:
                clear_mods();
    34de:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <clear_mods>
                send_keyboard_report();
    34e2:	0e 94 a0 1c 	call	0x3940	; 0x3940 <send_keyboard_report>
                break;
    34e6:	02 c0       	rjmp	.+4      	; 0x34ec <action_macro_play+0x110>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    34e8:	0e 94 26 12 	call	0x244c	; 0x244c <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    34ec:	9f 2d       	mov	r25, r15
    34ee:	99 23       	and	r25, r25
    34f0:	41 f0       	breq	.+16     	; 0x3502 <action_macro_play+0x126>
    34f2:	ef e9       	ldi	r30, 0x9F	; 159
    34f4:	ff e0       	ldi	r31, 0x0F	; 15
    34f6:	31 97       	sbiw	r30, 0x01	; 1
    34f8:	f1 f7       	brne	.-4      	; 0x34f6 <action_macro_play+0x11a>
    34fa:	00 c0       	rjmp	.+0      	; 0x34fc <action_macro_play+0x120>
    34fc:	00 00       	nop
    34fe:	91 50       	subi	r25, 0x01	; 1
    3500:	f6 cf       	rjmp	.-20     	; 0x34ee <action_macro_play+0x112>
    3502:	fe 01       	movw	r30, r28
    3504:	7a cf       	rjmp	.-268    	; 0x33fa <action_macro_play+0x1e>
    }
}
    3506:	df 91       	pop	r29
    3508:	cf 91       	pop	r28
    350a:	1f 91       	pop	r17
    350c:	0f 91       	pop	r16
    350e:	ff 90       	pop	r15
    3510:	ef 90       	pop	r14
    3512:	df 90       	pop	r13
    3514:	08 95       	ret

00003516 <default_layer_state_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3516:	60 93 aa 01 	sts	0x01AA, r22
    351a:	70 93 ab 01 	sts	0x01AB, r23
    351e:	80 93 ac 01 	sts	0x01AC, r24
    3522:	90 93 ad 01 	sts	0x01AD, r25
    hook_default_layer_change(default_layer_state);
    3526:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <hook_default_layer_change>
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    352a:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <clear_keyboard_but_mods>

0000352e <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    352e:	60 93 a6 01 	sts	0x01A6, r22
    3532:	70 93 a7 01 	sts	0x01A7, r23
    3536:	80 93 a8 01 	sts	0x01A8, r24
    353a:	90 93 a9 01 	sts	0x01A9, r25
    hook_layer_change(layer_state);
    353e:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <hook_layer_change>
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3542:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <clear_keyboard_but_mods>

00003546 <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    3546:	08 95       	ret

00003548 <default_layer_set>:
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}

void default_layer_set(uint32_t state)
{
    default_layer_state_set(state);
    3548:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <default_layer_state_set>

0000354c <default_layer_or>:
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    354c:	0f 93       	push	r16
    354e:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    3550:	00 91 aa 01 	lds	r16, 0x01AA
    3554:	10 91 ab 01 	lds	r17, 0x01AB
    3558:	20 91 ac 01 	lds	r18, 0x01AC
    355c:	30 91 ad 01 	lds	r19, 0x01AD
    3560:	60 2b       	or	r22, r16
    3562:	71 2b       	or	r23, r17
    3564:	82 2b       	or	r24, r18
    3566:	93 2b       	or	r25, r19
}
    3568:	1f 91       	pop	r17
    356a:	0f 91       	pop	r16
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
    356c:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <default_layer_state_set>

00003570 <default_layer_and>:
}
void default_layer_and(uint32_t state)
{
    3570:	0f 93       	push	r16
    3572:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    3574:	00 91 aa 01 	lds	r16, 0x01AA
    3578:	10 91 ab 01 	lds	r17, 0x01AB
    357c:	20 91 ac 01 	lds	r18, 0x01AC
    3580:	30 91 ad 01 	lds	r19, 0x01AD
    3584:	60 23       	and	r22, r16
    3586:	71 23       	and	r23, r17
    3588:	82 23       	and	r24, r18
    358a:	93 23       	and	r25, r19
}
    358c:	1f 91       	pop	r17
    358e:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
    3590:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <default_layer_state_set>

00003594 <default_layer_xor>:
}
void default_layer_xor(uint32_t state)
{
    3594:	0f 93       	push	r16
    3596:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    3598:	00 91 aa 01 	lds	r16, 0x01AA
    359c:	10 91 ab 01 	lds	r17, 0x01AB
    35a0:	20 91 ac 01 	lds	r18, 0x01AC
    35a4:	30 91 ad 01 	lds	r19, 0x01AD
    35a8:	60 27       	eor	r22, r16
    35aa:	71 27       	eor	r23, r17
    35ac:	82 27       	eor	r24, r18
    35ae:	93 27       	eor	r25, r19
}
    35b0:	1f 91       	pop	r17
    35b2:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
    35b4:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <default_layer_state_set>

000035b8 <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    35b8:	60 e0       	ldi	r22, 0x00	; 0
    35ba:	70 e0       	ldi	r23, 0x00	; 0
    35bc:	cb 01       	movw	r24, r22
    35be:	0c 94 97 1a 	jmp	0x352e	; 0x352e <layer_state_set>

000035c2 <layer_move>:
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    35c2:	41 e0       	ldi	r20, 0x01	; 1
    35c4:	50 e0       	ldi	r21, 0x00	; 0
    35c6:	60 e0       	ldi	r22, 0x00	; 0
    35c8:	70 e0       	ldi	r23, 0x00	; 0
    35ca:	04 c0       	rjmp	.+8      	; 0x35d4 <layer_move+0x12>
    35cc:	44 0f       	add	r20, r20
    35ce:	55 1f       	adc	r21, r21
    35d0:	66 1f       	adc	r22, r22
    35d2:	77 1f       	adc	r23, r23
    35d4:	8a 95       	dec	r24
    35d6:	d2 f7       	brpl	.-12     	; 0x35cc <layer_move+0xa>
    35d8:	cb 01       	movw	r24, r22
    35da:	ba 01       	movw	r22, r20
    35dc:	0c 94 97 1a 	jmp	0x352e	; 0x352e <layer_state_set>

000035e0 <layer_on>:
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    35e0:	41 e0       	ldi	r20, 0x01	; 1
    35e2:	50 e0       	ldi	r21, 0x00	; 0
    35e4:	60 e0       	ldi	r22, 0x00	; 0
    35e6:	70 e0       	ldi	r23, 0x00	; 0
    35e8:	04 c0       	rjmp	.+8      	; 0x35f2 <layer_on+0x12>
    35ea:	44 0f       	add	r20, r20
    35ec:	55 1f       	adc	r21, r21
    35ee:	66 1f       	adc	r22, r22
    35f0:	77 1f       	adc	r23, r23
    35f2:	8a 95       	dec	r24
    35f4:	d2 f7       	brpl	.-12     	; 0x35ea <layer_on+0xa>
    35f6:	80 91 a6 01 	lds	r24, 0x01A6
    35fa:	90 91 a7 01 	lds	r25, 0x01A7
    35fe:	a0 91 a8 01 	lds	r26, 0x01A8
    3602:	b0 91 a9 01 	lds	r27, 0x01A9
    3606:	48 2b       	or	r20, r24
    3608:	59 2b       	or	r21, r25
    360a:	6a 2b       	or	r22, r26
    360c:	7b 2b       	or	r23, r27
    360e:	cb 01       	movw	r24, r22
    3610:	ba 01       	movw	r22, r20
    3612:	0c 94 97 1a 	jmp	0x352e	; 0x352e <layer_state_set>

00003616 <layer_off>:
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    3616:	41 e0       	ldi	r20, 0x01	; 1
    3618:	50 e0       	ldi	r21, 0x00	; 0
    361a:	60 e0       	ldi	r22, 0x00	; 0
    361c:	70 e0       	ldi	r23, 0x00	; 0
    361e:	04 c0       	rjmp	.+8      	; 0x3628 <layer_off+0x12>
    3620:	44 0f       	add	r20, r20
    3622:	55 1f       	adc	r21, r21
    3624:	66 1f       	adc	r22, r22
    3626:	77 1f       	adc	r23, r23
    3628:	8a 95       	dec	r24
    362a:	d2 f7       	brpl	.-12     	; 0x3620 <layer_off+0xa>
    362c:	40 95       	com	r20
    362e:	50 95       	com	r21
    3630:	60 95       	com	r22
    3632:	70 95       	com	r23
    3634:	80 91 a6 01 	lds	r24, 0x01A6
    3638:	90 91 a7 01 	lds	r25, 0x01A7
    363c:	a0 91 a8 01 	lds	r26, 0x01A8
    3640:	b0 91 a9 01 	lds	r27, 0x01A9
    3644:	48 23       	and	r20, r24
    3646:	59 23       	and	r21, r25
    3648:	6a 23       	and	r22, r26
    364a:	7b 23       	and	r23, r27
    364c:	cb 01       	movw	r24, r22
    364e:	ba 01       	movw	r22, r20
    3650:	0c 94 97 1a 	jmp	0x352e	; 0x352e <layer_state_set>

00003654 <layer_invert>:
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    3654:	41 e0       	ldi	r20, 0x01	; 1
    3656:	50 e0       	ldi	r21, 0x00	; 0
    3658:	60 e0       	ldi	r22, 0x00	; 0
    365a:	70 e0       	ldi	r23, 0x00	; 0
    365c:	04 c0       	rjmp	.+8      	; 0x3666 <layer_invert+0x12>
    365e:	44 0f       	add	r20, r20
    3660:	55 1f       	adc	r21, r21
    3662:	66 1f       	adc	r22, r22
    3664:	77 1f       	adc	r23, r23
    3666:	8a 95       	dec	r24
    3668:	d2 f7       	brpl	.-12     	; 0x365e <layer_invert+0xa>
    366a:	80 91 a6 01 	lds	r24, 0x01A6
    366e:	90 91 a7 01 	lds	r25, 0x01A7
    3672:	a0 91 a8 01 	lds	r26, 0x01A8
    3676:	b0 91 a9 01 	lds	r27, 0x01A9
    367a:	48 27       	eor	r20, r24
    367c:	59 27       	eor	r21, r25
    367e:	6a 27       	eor	r22, r26
    3680:	7b 27       	eor	r23, r27
    3682:	cb 01       	movw	r24, r22
    3684:	ba 01       	movw	r22, r20
    3686:	0c 94 97 1a 	jmp	0x352e	; 0x352e <layer_state_set>

0000368a <layer_or>:
}

void layer_or(uint32_t state)
{
    368a:	0f 93       	push	r16
    368c:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    368e:	00 91 a6 01 	lds	r16, 0x01A6
    3692:	10 91 a7 01 	lds	r17, 0x01A7
    3696:	20 91 a8 01 	lds	r18, 0x01A8
    369a:	30 91 a9 01 	lds	r19, 0x01A9
    369e:	60 2b       	or	r22, r16
    36a0:	71 2b       	or	r23, r17
    36a2:	82 2b       	or	r24, r18
    36a4:	93 2b       	or	r25, r19
}
    36a6:	1f 91       	pop	r17
    36a8:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
    36aa:	0c 94 97 1a 	jmp	0x352e	; 0x352e <layer_state_set>

000036ae <layer_and>:
}
void layer_and(uint32_t state)
{
    36ae:	0f 93       	push	r16
    36b0:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    36b2:	00 91 a6 01 	lds	r16, 0x01A6
    36b6:	10 91 a7 01 	lds	r17, 0x01A7
    36ba:	20 91 a8 01 	lds	r18, 0x01A8
    36be:	30 91 a9 01 	lds	r19, 0x01A9
    36c2:	60 23       	and	r22, r16
    36c4:	71 23       	and	r23, r17
    36c6:	82 23       	and	r24, r18
    36c8:	93 23       	and	r25, r19
}
    36ca:	1f 91       	pop	r17
    36cc:	0f 91       	pop	r16
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
    36ce:	0c 94 97 1a 	jmp	0x352e	; 0x352e <layer_state_set>

000036d2 <layer_xor>:
}
void layer_xor(uint32_t state)
{
    36d2:	0f 93       	push	r16
    36d4:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    36d6:	00 91 a6 01 	lds	r16, 0x01A6
    36da:	10 91 a7 01 	lds	r17, 0x01A7
    36de:	20 91 a8 01 	lds	r18, 0x01A8
    36e2:	30 91 a9 01 	lds	r19, 0x01A9
    36e6:	60 27       	eor	r22, r16
    36e8:	71 27       	eor	r23, r17
    36ea:	82 27       	eor	r24, r18
    36ec:	93 27       	eor	r25, r19
}
    36ee:	1f 91       	pop	r17
    36f0:	0f 91       	pop	r16
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
    36f2:	0c 94 97 1a 	jmp	0x352e	; 0x352e <layer_state_set>

000036f6 <layer_debug>:
}

void layer_debug(void)
{
    36f6:	08 95       	ret

000036f8 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    36f8:	cf 92       	push	r12
    36fa:	df 92       	push	r13
    36fc:	ef 92       	push	r14
    36fe:	ff 92       	push	r15
    3700:	0f 93       	push	r16
    3702:	1f 93       	push	r17
    3704:	cf 93       	push	r28
    3706:	df 93       	push	r29
    3708:	ec 01       	movw	r28, r24
    action_t action = { .code = ACTION_TRANSPARENT };

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    370a:	c0 90 aa 01 	lds	r12, 0x01AA
    370e:	d0 90 ab 01 	lds	r13, 0x01AB
    3712:	e0 90 ac 01 	lds	r14, 0x01AC
    3716:	f0 90 ad 01 	lds	r15, 0x01AD
    371a:	80 91 a6 01 	lds	r24, 0x01A6
    371e:	90 91 a7 01 	lds	r25, 0x01A7
    3722:	a0 91 a8 01 	lds	r26, 0x01A8
    3726:	b0 91 a9 01 	lds	r27, 0x01A9
    372a:	c8 2a       	or	r12, r24
    372c:	d9 2a       	or	r13, r25
    372e:	ea 2a       	or	r14, r26
    3730:	fb 2a       	or	r15, r27
    3732:	0f e1       	ldi	r16, 0x1F	; 31
    3734:	10 e0       	ldi	r17, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    3736:	b7 01       	movw	r22, r14
    3738:	a6 01       	movw	r20, r12
    373a:	00 2e       	mov	r0, r16
    373c:	04 c0       	rjmp	.+8      	; 0x3746 <layer_switch_get_action+0x4e>
    373e:	76 95       	lsr	r23
    3740:	67 95       	ror	r22
    3742:	57 95       	ror	r21
    3744:	47 95       	ror	r20
    3746:	0a 94       	dec	r0
    3748:	d2 f7       	brpl	.-12     	; 0x373e <layer_switch_get_action+0x46>
    374a:	40 ff       	sbrs	r20, 0
    374c:	07 c0       	rjmp	.+14     	; 0x375c <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    374e:	be 01       	movw	r22, r28
    3750:	80 2f       	mov	r24, r16
    3752:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    3756:	81 30       	cpi	r24, 0x01	; 1
    3758:	91 05       	cpc	r25, r1
    375a:	39 f4       	brne	.+14     	; 0x376a <layer_switch_get_action+0x72>
    375c:	01 50       	subi	r16, 0x01	; 1
    375e:	11 09       	sbc	r17, r1
    3760:	50 f7       	brcc	.-44     	; 0x3736 <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    3762:	be 01       	movw	r22, r28
    3764:	80 e0       	ldi	r24, 0x00	; 0
    3766:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    376a:	df 91       	pop	r29
    376c:	cf 91       	pop	r28
    376e:	1f 91       	pop	r17
    3770:	0f 91       	pop	r16
    3772:	ff 90       	pop	r15
    3774:	ef 90       	pop	r14
    3776:	df 90       	pop	r13
    3778:	cf 90       	pop	r12
    377a:	08 95       	ret

0000377c <add_key>:

/* key */
void add_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    377c:	90 91 0b 01 	lds	r25, 0x010B
    3780:	99 23       	and	r25, r25
    3782:	61 f1       	breq	.+88     	; 0x37dc <add_key+0x60>
    3784:	90 91 0c 01 	lds	r25, 0x010C
    3788:	99 23       	and	r25, r25
    378a:	41 f1       	breq	.+80     	; 0x37dc <add_key+0x60>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    378c:	98 2f       	mov	r25, r24
    378e:	96 95       	lsr	r25
    3790:	96 95       	lsr	r25
    3792:	96 95       	lsr	r25
    3794:	9f 30       	cpi	r25, 0x0F	; 15
    3796:	88 f4       	brcc	.+34     	; 0x37ba <add_key+0x3e>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    3798:	e0 91 0d 01 	lds	r30, 0x010D
    379c:	f0 91 0e 01 	lds	r31, 0x010E
    37a0:	e9 0f       	add	r30, r25
    37a2:	f1 1d       	adc	r31, r1
    37a4:	87 70       	andi	r24, 0x07	; 7
    37a6:	21 e0       	ldi	r18, 0x01	; 1
    37a8:	30 e0       	ldi	r19, 0x00	; 0
    37aa:	01 c0       	rjmp	.+2      	; 0x37ae <add_key+0x32>
    37ac:	22 0f       	add	r18, r18
    37ae:	8a 95       	dec	r24
    37b0:	ea f7       	brpl	.-6      	; 0x37ac <add_key+0x30>
    37b2:	81 81       	ldd	r24, Z+1	; 0x01
    37b4:	82 2b       	or	r24, r18
    37b6:	81 83       	std	Z+1, r24	; 0x01
    37b8:	08 95       	ret
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    37ba:	90 91 c1 01 	lds	r25, 0x01C1
    37be:	90 ff       	sbrs	r25, 0
    37c0:	2d c0       	rjmp	.+90     	; 0x381c <add_key+0xa0>
    37c2:	1f 92       	push	r1
    37c4:	8f 93       	push	r24
    37c6:	8f e4       	ldi	r24, 0x4F	; 79
    37c8:	94 e0       	ldi	r25, 0x04	; 4
    37ca:	9f 93       	push	r25
    37cc:	8f 93       	push	r24
    37ce:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    37d2:	0f 90       	pop	r0
    37d4:	0f 90       	pop	r0
    37d6:	0f 90       	pop	r0
    37d8:	0f 90       	pop	r0
    37da:	08 95       	ret
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    37dc:	40 91 0d 01 	lds	r20, 0x010D
    37e0:	50 91 0e 01 	lds	r21, 0x010E
    37e4:	20 e0       	ldi	r18, 0x00	; 0
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	9f ef       	ldi	r25, 0xFF	; 255
    37ea:	fa 01       	movw	r30, r20
    37ec:	e2 0f       	add	r30, r18
    37ee:	f3 1f       	adc	r31, r19
    37f0:	62 81       	ldd	r22, Z+2	; 0x02
    37f2:	68 17       	cp	r22, r24
    37f4:	99 f0       	breq	.+38     	; 0x381c <add_key+0xa0>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    37f6:	9f 3f       	cpi	r25, 0xFF	; 255
    37f8:	19 f4       	brne	.+6      	; 0x3800 <add_key+0x84>
    37fa:	61 11       	cpse	r22, r1
    37fc:	01 c0       	rjmp	.+2      	; 0x3800 <add_key+0x84>
    37fe:	92 2f       	mov	r25, r18
    3800:	2f 5f       	subi	r18, 0xFF	; 255
    3802:	3f 4f       	sbci	r19, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    3804:	2e 30       	cpi	r18, 0x0E	; 14
    3806:	31 05       	cpc	r19, r1
    3808:	81 f7       	brne	.-32     	; 0x37ea <add_key+0x6e>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    380a:	9f 3f       	cpi	r25, 0xFF	; 255
    380c:	39 f0       	breq	.+14     	; 0x381c <add_key+0xa0>
            keyboard_report->keys[empty] = code;
    380e:	fa 01       	movw	r30, r20
    3810:	e9 0f       	add	r30, r25
    3812:	f1 1d       	adc	r31, r1
    3814:	97 fd       	sbrc	r25, 7
    3816:	fa 95       	dec	r31
    3818:	82 83       	std	Z+2, r24	; 0x02
    381a:	08 95       	ret
    381c:	08 95       	ret

0000381e <del_key>:
}

void del_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    381e:	90 91 0b 01 	lds	r25, 0x010B
    3822:	99 23       	and	r25, r25
    3824:	69 f1       	breq	.+90     	; 0x3880 <del_key+0x62>
    3826:	90 91 0c 01 	lds	r25, 0x010C
    382a:	99 23       	and	r25, r25
    382c:	49 f1       	breq	.+82     	; 0x3880 <del_key+0x62>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    382e:	98 2f       	mov	r25, r24
    3830:	96 95       	lsr	r25
    3832:	96 95       	lsr	r25
    3834:	96 95       	lsr	r25
    3836:	9f 30       	cpi	r25, 0x0F	; 15
    3838:	90 f4       	brcc	.+36     	; 0x385e <del_key+0x40>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    383a:	e0 91 0d 01 	lds	r30, 0x010D
    383e:	f0 91 0e 01 	lds	r31, 0x010E
    3842:	e9 0f       	add	r30, r25
    3844:	f1 1d       	adc	r31, r1
    3846:	87 70       	andi	r24, 0x07	; 7
    3848:	21 e0       	ldi	r18, 0x01	; 1
    384a:	30 e0       	ldi	r19, 0x00	; 0
    384c:	01 c0       	rjmp	.+2      	; 0x3850 <del_key+0x32>
    384e:	22 0f       	add	r18, r18
    3850:	8a 95       	dec	r24
    3852:	ea f7       	brpl	.-6      	; 0x384e <del_key+0x30>
    3854:	20 95       	com	r18
    3856:	81 81       	ldd	r24, Z+1	; 0x01
    3858:	28 23       	and	r18, r24
    385a:	21 83       	std	Z+1, r18	; 0x01
    385c:	08 95       	ret
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    385e:	90 91 c1 01 	lds	r25, 0x01C1
    3862:	90 ff       	sbrs	r25, 0
    3864:	1f c0       	rjmp	.+62     	; 0x38a4 <del_key+0x86>
    3866:	1f 92       	push	r1
    3868:	8f 93       	push	r24
    386a:	81 e3       	ldi	r24, 0x31	; 49
    386c:	94 e0       	ldi	r25, 0x04	; 4
    386e:	9f 93       	push	r25
    3870:	8f 93       	push	r24
    3872:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    3876:	0f 90       	pop	r0
    3878:	0f 90       	pop	r0
    387a:	0f 90       	pop	r0
    387c:	0f 90       	pop	r0
    387e:	08 95       	ret
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3880:	40 91 0d 01 	lds	r20, 0x010D
    3884:	50 91 0e 01 	lds	r21, 0x010E
    3888:	20 e0       	ldi	r18, 0x00	; 0
    388a:	30 e0       	ldi	r19, 0x00	; 0
    388c:	fa 01       	movw	r30, r20
    388e:	e2 0f       	add	r30, r18
    3890:	f3 1f       	adc	r31, r19
    3892:	92 81       	ldd	r25, Z+2	; 0x02
    3894:	98 13       	cpse	r25, r24
    3896:	01 c0       	rjmp	.+2      	; 0x389a <del_key+0x7c>
            keyboard_report->keys[i] = 0;
    3898:	12 82       	std	Z+2, r1	; 0x02
    389a:	2f 5f       	subi	r18, 0xFF	; 255
    389c:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    389e:	2e 30       	cpi	r18, 0x0E	; 14
    38a0:	31 05       	cpc	r19, r1
    38a2:	a1 f7       	brne	.-24     	; 0x388c <del_key+0x6e>
    38a4:	08 95       	ret

000038a6 <clear_keys>:
#endif
    del_key_byte(key);
}

void clear_keys(void)
{
    38a6:	81 e0       	ldi	r24, 0x01	; 1
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    38aa:	e0 91 0d 01 	lds	r30, 0x010D
    38ae:	f0 91 0e 01 	lds	r31, 0x010E
    38b2:	e8 0f       	add	r30, r24
    38b4:	f9 1f       	adc	r31, r25
    38b6:	10 82       	st	Z, r1
    38b8:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    38ba:	80 31       	cpi	r24, 0x10	; 16
    38bc:	91 05       	cpc	r25, r1
    38be:	a9 f7       	brne	.-22     	; 0x38aa <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    38c0:	08 95       	ret

000038c2 <get_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
    38c2:	80 91 c0 01 	lds	r24, 0x01C0
    38c6:	08 95       	ret

000038c8 <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    38c8:	90 91 c0 01 	lds	r25, 0x01C0
    38cc:	98 2b       	or	r25, r24
    38ce:	90 93 c0 01 	sts	0x01C0, r25
    38d2:	08 95       	ret

000038d4 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    38d4:	80 95       	com	r24
    38d6:	90 91 c0 01 	lds	r25, 0x01C0
    38da:	98 23       	and	r25, r24
    38dc:	90 93 c0 01 	sts	0x01C0, r25
    38e0:	08 95       	ret

000038e2 <set_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
    38e2:	80 93 c0 01 	sts	0x01C0, r24
    38e6:	08 95       	ret

000038e8 <clear_mods>:
void clear_mods(void) { real_mods = 0; }
    38e8:	10 92 c0 01 	sts	0x01C0, r1
    38ec:	08 95       	ret

000038ee <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    38ee:	90 91 bf 01 	lds	r25, 0x01BF
    38f2:	98 2b       	or	r25, r24
    38f4:	90 93 bf 01 	sts	0x01BF, r25
    38f8:	08 95       	ret

000038fa <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    38fa:	80 95       	com	r24
    38fc:	90 91 bf 01 	lds	r25, 0x01BF
    3900:	98 23       	and	r25, r24
    3902:	90 93 bf 01 	sts	0x01BF, r25
    3906:	08 95       	ret

00003908 <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    3908:	10 92 bf 01 	sts	0x01BF, r1
    390c:	08 95       	ret

0000390e <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    390e:	80 93 ae 01 	sts	0x01AE, r24
    3912:	08 95       	ret

00003914 <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3914:	10 92 ae 01 	sts	0x01AE, r1
    3918:	08 95       	ret

0000391a <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    391a:	40 91 0d 01 	lds	r20, 0x010D
    391e:	50 91 0e 01 	lds	r21, 0x010E
    3922:	20 e0       	ldi	r18, 0x00	; 0
    3924:	30 e0       	ldi	r19, 0x00	; 0
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    3926:	80 e0       	ldi	r24, 0x00	; 0
    3928:	fa 01       	movw	r30, r20
    392a:	e2 0f       	add	r30, r18
    392c:	f3 1f       	adc	r31, r19
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    392e:	91 81       	ldd	r25, Z+1	; 0x01
    3930:	91 11       	cpse	r25, r1
            cnt++;
    3932:	8f 5f       	subi	r24, 0xFF	; 255
    3934:	2f 5f       	subi	r18, 0xFF	; 255
    3936:	3f 4f       	sbci	r19, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3938:	2f 30       	cpi	r18, 0x0F	; 15
    393a:	31 05       	cpc	r19, r1
    393c:	a9 f7       	brne	.-22     	; 0x3928 <has_anykey+0xe>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    393e:	08 95       	ret

00003940 <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    3940:	e0 91 0d 01 	lds	r30, 0x010D
    3944:	f0 91 0e 01 	lds	r31, 0x010E
    3948:	80 91 c0 01 	lds	r24, 0x01C0
    394c:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    394e:	e0 91 0d 01 	lds	r30, 0x010D
    3952:	f0 91 0e 01 	lds	r31, 0x010E
    3956:	80 81       	ld	r24, Z
    3958:	90 91 bf 01 	lds	r25, 0x01BF
    395c:	89 2b       	or	r24, r25
    395e:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    3960:	90 91 ae 01 	lds	r25, 0x01AE
    3964:	99 23       	and	r25, r25
    3966:	61 f0       	breq	.+24     	; 0x3980 <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3968:	e0 91 0d 01 	lds	r30, 0x010D
    396c:	f0 91 0e 01 	lds	r31, 0x010E
    3970:	80 81       	ld	r24, Z
    3972:	89 2b       	or	r24, r25
    3974:	80 83       	st	Z, r24
        if (has_anykey()) {
    3976:	0e 94 8d 1c 	call	0x391a	; 0x391a <has_anykey>
    397a:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    397c:	10 92 ae 01 	sts	0x01AE, r1
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    3980:	80 91 0d 01 	lds	r24, 0x010D
    3984:	90 91 0e 01 	lds	r25, 0x010E
    3988:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <host_keyboard_send>

0000398c <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    398c:	90 93 39 01 	sts	0x0139, r25
    3990:	80 93 38 01 	sts	0x0138, r24
    3994:	08 95       	ret

00003996 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3996:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3998:	98 2f       	mov	r25, r24
    399a:	9c 7c       	andi	r25, 0xCC	; 204
    399c:	96 95       	lsr	r25
    399e:	96 95       	lsr	r25
    39a0:	83 73       	andi	r24, 0x33	; 51
    39a2:	44 e0       	ldi	r20, 0x04	; 4
    39a4:	84 9f       	mul	r24, r20
    39a6:	90 01       	movw	r18, r0
    39a8:	11 24       	eor	r1, r1
    39aa:	92 2b       	or	r25, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    39ac:	89 2f       	mov	r24, r25
    39ae:	8a 7a       	andi	r24, 0xAA	; 170
    39b0:	86 95       	lsr	r24
    39b2:	95 75       	andi	r25, 0x55	; 85
    39b4:	99 0f       	add	r25, r25
    return bits;
}
    39b6:	89 2b       	or	r24, r25
    39b8:	08 95       	ret

000039ba <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    39ba:	1f 93       	push	r17
    39bc:	cf 93       	push	r28
    39be:	df 93       	push	r29
    39c0:	1f 92       	push	r1
    39c2:	cd b7       	in	r28, 0x3d	; 61
    39c4:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    39c6:	99 83       	std	Y+1, r25	; 0x01
    39c8:	0e 94 cb 1c 	call	0x3996	; 0x3996 <bitrev>
    39cc:	18 2f       	mov	r17, r24
    39ce:	99 81       	ldd	r25, Y+1	; 0x01
    39d0:	89 2f       	mov	r24, r25
    39d2:	0e 94 cb 1c 	call	0x3996	; 0x3996 <bitrev>
    39d6:	21 2f       	mov	r18, r17
    39d8:	30 e0       	ldi	r19, 0x00	; 0
    39da:	32 2f       	mov	r19, r18
    39dc:	22 27       	eor	r18, r18
    return bits;
}
    39de:	a9 01       	movw	r20, r18
    39e0:	48 2b       	or	r20, r24
    39e2:	ca 01       	movw	r24, r20
    39e4:	0f 90       	pop	r0
    39e6:	df 91       	pop	r29
    39e8:	cf 91       	pop	r28
    39ea:	1f 91       	pop	r17
    39ec:	08 95       	ret

000039ee <hook_keyboard_loop>:
/* -------------------------------------------------
 * Definitions of default hooks
 * ------------------------------------------------- */

__attribute__((weak))
void hook_keyboard_loop(void) {}
    39ee:	08 95       	ret

000039f0 <hook_matrix_change>:

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    39f0:	cf 93       	push	r28
    39f2:	df 93       	push	r29
    39f4:	00 d0       	rcall	.+0      	; 0x39f6 <hook_matrix_change+0x6>
    39f6:	00 d0       	rcall	.+0      	; 0x39f8 <hook_matrix_change+0x8>
    39f8:	1f 92       	push	r1
    39fa:	cd b7       	in	r28, 0x3d	; 61
    39fc:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    39fe:	0f 90       	pop	r0
    3a00:	0f 90       	pop	r0
    3a02:	0f 90       	pop	r0
    3a04:	0f 90       	pop	r0
    3a06:	0f 90       	pop	r0
    3a08:	df 91       	pop	r29
    3a0a:	cf 91       	pop	r28
    3a0c:	08 95       	ret

00003a0e <hook_default_layer_change>:

__attribute__((weak))
void hook_default_layer_change(uint32_t default_layer_state) {
    3a0e:	08 95       	ret

00003a10 <hook_layer_change>:
    (void)default_layer_state;
}

__attribute__((weak))
void hook_layer_change(uint32_t layer_state) {
    3a10:	08 95       	ret

00003a12 <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    3a12:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <keyboard_set_leds>

00003a16 <hook_bootmagic>:
}

__attribute__((weak))
void hook_bootmagic(void) {}
    3a16:	08 95       	ret

00003a18 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3a18:	80 91 d6 01 	lds	r24, 0x01D6
    3a1c:	84 30       	cpi	r24, 0x04	; 4
    3a1e:	09 f1       	breq	.+66     	; 0x3a62 <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    3a20:	10 92 c2 01 	sts	0x01C2, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3a24:	20 e4       	ldi	r18, 0x40	; 64
    3a26:	88 e1       	ldi	r24, 0x18	; 24
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	0f b6       	in	r0, 0x3f	; 63
    3a2c:	f8 94       	cli
    3a2e:	a8 95       	wdr
    3a30:	80 93 60 00 	sts	0x0060, r24
    3a34:	0f be       	out	0x3f, r0	; 63
    3a36:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3a3a:	83 b7       	in	r24, 0x33	; 51
    3a3c:	81 7f       	andi	r24, 0xF1	; 241
    3a3e:	84 60       	ori	r24, 0x04	; 4
    3a40:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3a42:	83 b7       	in	r24, 0x33	; 51
    3a44:	81 60       	ori	r24, 0x01	; 1
    3a46:	83 bf       	out	0x33, r24	; 51
    sei();
    3a48:	78 94       	sei
    sleep_cpu();
    3a4a:	88 95       	sleep
    sleep_disable();
    3a4c:	83 b7       	in	r24, 0x33	; 51
    3a4e:	8e 7f       	andi	r24, 0xFE	; 254
    3a50:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    3a52:	88 e1       	ldi	r24, 0x18	; 24
    3a54:	0f b6       	in	r0, 0x3f	; 63
    3a56:	f8 94       	cli
    3a58:	80 93 60 00 	sts	0x0060, r24
    3a5c:	10 92 60 00 	sts	0x0060, r1
    3a60:	0f be       	out	0x3f, r0	; 63
    3a62:	08 95       	ret

00003a64 <matrix_power_up>:
void suspend_power_down(void)
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
    3a64:	08 95       	ret

00003a66 <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    3a66:	08 95       	ret

00003a68 <suspend_wakeup_condition>:
bool suspend_wakeup_condition(void)
{
    3a68:	cf 93       	push	r28
    matrix_power_up();
    3a6a:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <matrix_power_up>
    matrix_scan();
    3a6e:	0e 94 61 07 	call	0xec2	; 0xec2 <matrix_scan>
    matrix_power_down();
    3a72:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3a76:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3a78:	8c 2f       	mov	r24, r28
    3a7a:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <matrix_get_row>
    3a7e:	89 2b       	or	r24, r25
    3a80:	29 f4       	brne	.+10     	; 0x3a8c <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3a82:	cf 5f       	subi	r28, 0xFF	; 255
    3a84:	c4 30       	cpi	r28, 0x04	; 4
    3a86:	c1 f7       	brne	.-16     	; 0x3a78 <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    3a88:	80 e0       	ldi	r24, 0x00	; 0
    3a8a:	01 c0       	rjmp	.+2      	; 0x3a8e <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    3a8c:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    3a8e:	cf 91       	pop	r28
    3a90:	08 95       	ret

00003a92 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    3a92:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <clear_keyboard>

00003a96 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3a96:	1f 92       	push	r1
    3a98:	0f 92       	push	r0
    3a9a:	0f b6       	in	r0, 0x3f	; 63
    3a9c:	0f 92       	push	r0
    3a9e:	11 24       	eor	r1, r1
    3aa0:	8f 93       	push	r24
    3aa2:	9f 93       	push	r25
    3aa4:	af 93       	push	r26
    3aa6:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3aa8:	80 91 c2 01 	lds	r24, 0x01C2
    3aac:	81 11       	cpse	r24, r1
    3aae:	13 c0       	rjmp	.+38     	; 0x3ad6 <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3ab0:	80 91 c3 01 	lds	r24, 0x01C3
    3ab4:	90 91 c4 01 	lds	r25, 0x01C4
    3ab8:	a0 91 c5 01 	lds	r26, 0x01C5
    3abc:	b0 91 c6 01 	lds	r27, 0x01C6
    3ac0:	41 96       	adiw	r24, 0x11	; 17
    3ac2:	a1 1d       	adc	r26, r1
    3ac4:	b1 1d       	adc	r27, r1
    3ac6:	80 93 c3 01 	sts	0x01C3, r24
    3aca:	90 93 c4 01 	sts	0x01C4, r25
    3ace:	a0 93 c5 01 	sts	0x01C5, r26
    3ad2:	b0 93 c6 01 	sts	0x01C6, r27
            break;
        default:
            ;
    }
}
    3ad6:	bf 91       	pop	r27
    3ad8:	af 91       	pop	r26
    3ada:	9f 91       	pop	r25
    3adc:	8f 91       	pop	r24
    3ade:	0f 90       	pop	r0
    3ae0:	0f be       	out	0x3f, r0	; 63
    3ae2:	0f 90       	pop	r0
    3ae4:	1f 90       	pop	r1
    3ae6:	18 95       	reti

00003ae8 <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    3ae8:	82 e0       	ldi	r24, 0x02	; 2
    3aea:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3aec:	93 e0       	ldi	r25, 0x03	; 3
    3aee:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    3af0:	9a ef       	ldi	r25, 0xFA	; 250
    3af2:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    3af4:	80 93 6e 00 	sts	0x006E, r24
    3af8:	08 95       	ret

00003afa <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3afa:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3afc:	f8 94       	cli
    t = timer_count;
    3afe:	80 91 c3 01 	lds	r24, 0x01C3
    3b02:	90 91 c4 01 	lds	r25, 0x01C4
    3b06:	a0 91 c5 01 	lds	r26, 0x01C5
    3b0a:	b0 91 c6 01 	lds	r27, 0x01C6
    SREG = sreg;
    3b0e:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    3b10:	08 95       	ret

00003b12 <timer_read32>:
inline
uint32_t timer_read32(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3b12:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3b14:	f8 94       	cli
    t = timer_count;
    3b16:	60 91 c3 01 	lds	r22, 0x01C3
    3b1a:	70 91 c4 01 	lds	r23, 0x01C4
    3b1e:	80 91 c5 01 	lds	r24, 0x01C5
    3b22:	90 91 c6 01 	lds	r25, 0x01C6
    SREG = sreg;
    3b26:	2f bf       	out	0x3f, r18	; 63

    return t;
}
    3b28:	08 95       	ret

00003b2a <timer_elapsed>:

inline
uint16_t timer_elapsed(uint16_t last)
{
    3b2a:	cf 92       	push	r12
    3b2c:	df 92       	push	r13
    3b2e:	ef 92       	push	r14
    3b30:	ff 92       	push	r15
    3b32:	0f 93       	push	r16
    3b34:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    3b36:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3b38:	f8 94       	cli
    t = timer_count;
    3b3a:	40 91 c3 01 	lds	r20, 0x01C3
    3b3e:	50 91 c4 01 	lds	r21, 0x01C4
    3b42:	60 91 c5 01 	lds	r22, 0x01C5
    3b46:	70 91 c6 01 	lds	r23, 0x01C6
    SREG = sreg;
    3b4a:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    3b4c:	6a 01       	movw	r12, r20
    3b4e:	7b 01       	movw	r14, r22
    3b50:	ee 24       	eor	r14, r14
    3b52:	ff 24       	eor	r15, r15
    3b54:	8c 01       	movw	r16, r24
    3b56:	20 e0       	ldi	r18, 0x00	; 0
    3b58:	30 e0       	ldi	r19, 0x00	; 0
    3b5a:	c0 16       	cp	r12, r16
    3b5c:	d1 06       	cpc	r13, r17
    3b5e:	e2 06       	cpc	r14, r18
    3b60:	f3 06       	cpc	r15, r19
    3b62:	10 f4       	brcc	.+4      	; 0x3b68 <timer_elapsed+0x3e>
    3b64:	41 50       	subi	r20, 0x01	; 1
    3b66:	51 09       	sbc	r21, r1
    3b68:	48 1b       	sub	r20, r24
    3b6a:	59 0b       	sbc	r21, r25
}
    3b6c:	ca 01       	movw	r24, r20
    3b6e:	1f 91       	pop	r17
    3b70:	0f 91       	pop	r16
    3b72:	ff 90       	pop	r15
    3b74:	ef 90       	pop	r14
    3b76:	df 90       	pop	r13
    3b78:	cf 90       	pop	r12
    3b7a:	08 95       	ret

00003b7c <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3b7c:	1f 92       	push	r1
    3b7e:	0f 92       	push	r0
    3b80:	0f b6       	in	r0, 0x3f	; 63
    3b82:	0f 92       	push	r0
    3b84:	11 24       	eor	r1, r1
    3b86:	8f 93       	push	r24
    3b88:	9f 93       	push	r25
    3b8a:	af 93       	push	r26
    3b8c:	bf 93       	push	r27
    timer_count++;
    3b8e:	80 91 c3 01 	lds	r24, 0x01C3
    3b92:	90 91 c4 01 	lds	r25, 0x01C4
    3b96:	a0 91 c5 01 	lds	r26, 0x01C5
    3b9a:	b0 91 c6 01 	lds	r27, 0x01C6
    3b9e:	01 96       	adiw	r24, 0x01	; 1
    3ba0:	a1 1d       	adc	r26, r1
    3ba2:	b1 1d       	adc	r27, r1
    3ba4:	80 93 c3 01 	sts	0x01C3, r24
    3ba8:	90 93 c4 01 	sts	0x01C4, r25
    3bac:	a0 93 c5 01 	sts	0x01C5, r26
    3bb0:	b0 93 c6 01 	sts	0x01C6, r27
}
    3bb4:	bf 91       	pop	r27
    3bb6:	af 91       	pop	r26
    3bb8:	9f 91       	pop	r25
    3bba:	8f 91       	pop	r24
    3bbc:	0f 90       	pop	r0
    3bbe:	0f be       	out	0x3f, r0	; 63
    3bc0:	0f 90       	pop	r0
    3bc2:	1f 90       	pop	r1
    3bc4:	18 95       	reti

00003bc6 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    3bc6:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <USB_Disable>
    cli();
    3bca:	f8 94       	cli
    3bcc:	2f ef       	ldi	r18, 0xFF	; 255
    3bce:	87 ea       	ldi	r24, 0xA7	; 167
    3bd0:	91 e6       	ldi	r25, 0x61	; 97
    3bd2:	21 50       	subi	r18, 0x01	; 1
    3bd4:	80 40       	sbci	r24, 0x00	; 0
    3bd6:	90 40       	sbci	r25, 0x00	; 0
    3bd8:	e1 f7       	brne	.-8      	; 0x3bd2 <bootloader_jump+0xc>
    3bda:	00 c0       	rjmp	.+0      	; 0x3bdc <bootloader_jump+0x16>
    3bdc:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    3bde:	87 e0       	ldi	r24, 0x07	; 7
    3be0:	90 eb       	ldi	r25, 0xB0	; 176
    3be2:	dc 01       	movw	r26, r24
    3be4:	80 93 e0 01 	sts	0x01E0, r24
    3be8:	90 93 e1 01 	sts	0x01E1, r25
    3bec:	a0 93 e2 01 	sts	0x01E2, r26
    3bf0:	b0 93 e3 01 	sts	0x01E3, r27
    wdt_enable(WDTO_250MS);
    3bf4:	2c e0       	ldi	r18, 0x0C	; 12
    3bf6:	88 e1       	ldi	r24, 0x18	; 24
    3bf8:	90 e0       	ldi	r25, 0x00	; 0
    3bfa:	0f b6       	in	r0, 0x3f	; 63
    3bfc:	f8 94       	cli
    3bfe:	a8 95       	wdr
    3c00:	80 93 60 00 	sts	0x0060, r24
    3c04:	0f be       	out	0x3f, r0	; 63
    3c06:	20 93 60 00 	sts	0x0060, r18
    3c0a:	ff cf       	rjmp	.-2      	; 0x3c0a <bootloader_jump+0x44>

00003c0c <keycode_to_action>:

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    switch (keycode) {
    3c0c:	8d 3b       	cpi	r24, 0xBD	; 189
    3c0e:	60 f4       	brcc	.+24     	; 0x3c28 <keycode_to_action+0x1c>
    3c10:	88 3a       	cpi	r24, 0xA8	; 168
    3c12:	80 f5       	brcc	.+96     	; 0x3c74 <keycode_to_action+0x68>
    3c14:	85 3a       	cpi	r24, 0xA5	; 165
    3c16:	28 f5       	brcc	.+74     	; 0x3c62 <keycode_to_action+0x56>
    3c18:	84 30       	cpi	r24, 0x04	; 4
    3c1a:	08 f5       	brcc	.+66     	; 0x3c5e <keycode_to_action+0x52>
    3c1c:	81 30       	cpi	r24, 0x01	; 1
    3c1e:	09 f0       	breq	.+2      	; 0x3c22 <keycode_to_action+0x16>
    3c20:	6b c0       	rjmp	.+214    	; 0x3cf8 <keycode_to_action+0xec>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    3c22:	81 e0       	ldi	r24, 0x01	; 1
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	08 95       	ret

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    switch (keycode) {
    3c28:	88 3e       	cpi	r24, 0xE8	; 232
    3c2a:	98 f4       	brcc	.+38     	; 0x3c52 <keycode_to_action+0x46>
    3c2c:	80 3e       	cpi	r24, 0xE0	; 224
    3c2e:	b8 f4       	brcc	.+46     	; 0x3c5e <keycode_to_action+0x52>
    3c30:	8f 3b       	cpi	r24, 0xBF	; 191
    3c32:	09 f0       	breq	.+2      	; 0x3c36 <keycode_to_action+0x2a>
    3c34:	61 c0       	rjmp	.+194    	; 0x3cf8 <keycode_to_action+0xec>
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    3c36:	0e 94 75 16 	call	0x2cea	; 0x2cea <clear_keyboard>
    3c3a:	2f ef       	ldi	r18, 0xFF	; 255
    3c3c:	80 e7       	ldi	r24, 0x70	; 112
    3c3e:	92 e0       	ldi	r25, 0x02	; 2
    3c40:	21 50       	subi	r18, 0x01	; 1
    3c42:	80 40       	sbci	r24, 0x00	; 0
    3c44:	90 40       	sbci	r25, 0x00	; 0
    3c46:	e1 f7       	brne	.-8      	; 0x3c40 <keycode_to_action+0x34>
    3c48:	00 c0       	rjmp	.+0      	; 0x3c4a <keycode_to_action+0x3e>
    3c4a:	00 00       	nop
            wait_ms(50);
            bootloader_jump(); // not return
    3c4c:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <bootloader_jump>
    3c50:	53 c0       	rjmp	.+166    	; 0x3cf8 <keycode_to_action+0xec>

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    switch (keycode) {
    3c52:	80 3f       	cpi	r24, 0xF0	; 240
    3c54:	08 f4       	brcc	.+2      	; 0x3c58 <keycode_to_action+0x4c>
    3c56:	50 c0       	rjmp	.+160    	; 0x3cf8 <keycode_to_action+0xec>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	90 65       	ori	r25, 0x50	; 80
            break;
    3c5c:	08 95       	ret
{
    action_t action = {};
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    3c5e:	90 e0       	ldi	r25, 0x00	; 0
            break;
    3c60:	08 95       	ret
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3c62:	85 3a       	cpi	r24, 0xA5	; 165
    3c64:	09 f4       	brne	.+2      	; 0x3c68 <keycode_to_action+0x5c>
    3c66:	4b c0       	rjmp	.+150    	; 0x3cfe <keycode_to_action+0xf2>
    3c68:	86 3a       	cpi	r24, 0xA6	; 166
    3c6a:	09 f0       	breq	.+2      	; 0x3c6e <keycode_to_action+0x62>
    3c6c:	4b c0       	rjmp	.+150    	; 0x3d04 <keycode_to_action+0xf8>
    3c6e:	82 e8       	ldi	r24, 0x82	; 130
    3c70:	90 e4       	ldi	r25, 0x40	; 64
    3c72:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3c74:	88 3a       	cpi	r24, 0xA8	; 168
    3c76:	09 f4       	brne	.+2      	; 0x3c7a <keycode_to_action+0x6e>
    3c78:	48 c0       	rjmp	.+144    	; 0x3d0a <keycode_to_action+0xfe>
    3c7a:	89 3a       	cpi	r24, 0xA9	; 169
    3c7c:	09 f4       	brne	.+2      	; 0x3c80 <keycode_to_action+0x74>
    3c7e:	48 c0       	rjmp	.+144    	; 0x3d10 <keycode_to_action+0x104>
    3c80:	8a 3a       	cpi	r24, 0xAA	; 170
    3c82:	09 f4       	brne	.+2      	; 0x3c86 <keycode_to_action+0x7a>
    3c84:	48 c0       	rjmp	.+144    	; 0x3d16 <keycode_to_action+0x10a>
    3c86:	8b 3a       	cpi	r24, 0xAB	; 171
    3c88:	09 f4       	brne	.+2      	; 0x3c8c <keycode_to_action+0x80>
    3c8a:	48 c0       	rjmp	.+144    	; 0x3d1c <keycode_to_action+0x110>
    3c8c:	8c 3a       	cpi	r24, 0xAC	; 172
    3c8e:	09 f4       	brne	.+2      	; 0x3c92 <keycode_to_action+0x86>
    3c90:	48 c0       	rjmp	.+144    	; 0x3d22 <keycode_to_action+0x116>
    3c92:	8d 3a       	cpi	r24, 0xAD	; 173
    3c94:	09 f4       	brne	.+2      	; 0x3c98 <keycode_to_action+0x8c>
    3c96:	48 c0       	rjmp	.+144    	; 0x3d28 <keycode_to_action+0x11c>
    3c98:	8e 3a       	cpi	r24, 0xAE	; 174
    3c9a:	09 f4       	brne	.+2      	; 0x3c9e <keycode_to_action+0x92>
    3c9c:	48 c0       	rjmp	.+144    	; 0x3d2e <keycode_to_action+0x122>
    3c9e:	8f 3a       	cpi	r24, 0xAF	; 175
    3ca0:	09 f4       	brne	.+2      	; 0x3ca4 <keycode_to_action+0x98>
    3ca2:	48 c0       	rjmp	.+144    	; 0x3d34 <keycode_to_action+0x128>
    3ca4:	81 3b       	cpi	r24, 0xB1	; 177
    3ca6:	09 f4       	brne	.+2      	; 0x3caa <keycode_to_action+0x9e>
    3ca8:	48 c0       	rjmp	.+144    	; 0x3d3a <keycode_to_action+0x12e>
    3caa:	80 3b       	cpi	r24, 0xB0	; 176
    3cac:	09 f4       	brne	.+2      	; 0x3cb0 <keycode_to_action+0xa4>
    3cae:	48 c0       	rjmp	.+144    	; 0x3d40 <keycode_to_action+0x134>
    3cb0:	82 3b       	cpi	r24, 0xB2	; 178
    3cb2:	09 f4       	brne	.+2      	; 0x3cb6 <keycode_to_action+0xaa>
    3cb4:	48 c0       	rjmp	.+144    	; 0x3d46 <keycode_to_action+0x13a>
    3cb6:	83 3b       	cpi	r24, 0xB3	; 179
    3cb8:	09 f4       	brne	.+2      	; 0x3cbc <keycode_to_action+0xb0>
    3cba:	48 c0       	rjmp	.+144    	; 0x3d4c <keycode_to_action+0x140>
    3cbc:	84 3b       	cpi	r24, 0xB4	; 180
    3cbe:	09 f4       	brne	.+2      	; 0x3cc2 <keycode_to_action+0xb6>
    3cc0:	48 c0       	rjmp	.+144    	; 0x3d52 <keycode_to_action+0x146>
    3cc2:	85 3b       	cpi	r24, 0xB5	; 181
    3cc4:	09 f4       	brne	.+2      	; 0x3cc8 <keycode_to_action+0xbc>
    3cc6:	48 c0       	rjmp	.+144    	; 0x3d58 <keycode_to_action+0x14c>
    3cc8:	86 3b       	cpi	r24, 0xB6	; 182
    3cca:	09 f4       	brne	.+2      	; 0x3cce <keycode_to_action+0xc2>
    3ccc:	48 c0       	rjmp	.+144    	; 0x3d5e <keycode_to_action+0x152>
    3cce:	87 3b       	cpi	r24, 0xB7	; 183
    3cd0:	09 f4       	brne	.+2      	; 0x3cd4 <keycode_to_action+0xc8>
    3cd2:	48 c0       	rjmp	.+144    	; 0x3d64 <keycode_to_action+0x158>
    3cd4:	88 3b       	cpi	r24, 0xB8	; 184
    3cd6:	09 f4       	brne	.+2      	; 0x3cda <keycode_to_action+0xce>
    3cd8:	48 c0       	rjmp	.+144    	; 0x3d6a <keycode_to_action+0x15e>
    3cda:	89 3b       	cpi	r24, 0xB9	; 185
    3cdc:	09 f4       	brne	.+2      	; 0x3ce0 <keycode_to_action+0xd4>
    3cde:	48 c0       	rjmp	.+144    	; 0x3d70 <keycode_to_action+0x164>
    3ce0:	8a 3b       	cpi	r24, 0xBA	; 186
    3ce2:	09 f4       	brne	.+2      	; 0x3ce6 <keycode_to_action+0xda>
    3ce4:	48 c0       	rjmp	.+144    	; 0x3d76 <keycode_to_action+0x16a>
    3ce6:	8b 3b       	cpi	r24, 0xBB	; 187
    3ce8:	09 f4       	brne	.+2      	; 0x3cec <keycode_to_action+0xe0>
    3cea:	48 c0       	rjmp	.+144    	; 0x3d7c <keycode_to_action+0x170>
    3cec:	8c 3b       	cpi	r24, 0xBC	; 188
    3cee:	09 f0       	breq	.+2      	; 0x3cf2 <keycode_to_action+0xe6>
    3cf0:	48 c0       	rjmp	.+144    	; 0x3d82 <keycode_to_action+0x176>
    3cf2:	8a e2       	ldi	r24, 0x2A	; 42
    3cf4:	96 e4       	ldi	r25, 0x46	; 70
    3cf6:	08 95       	ret
            clear_keyboard();
            wait_ms(50);
            bootloader_jump(); // not return
            break;
        default:
            action.code = ACTION_NO;
    3cf8:	80 e0       	ldi	r24, 0x00	; 0
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	08 95       	ret
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3cfe:	81 e8       	ldi	r24, 0x81	; 129
    3d00:	90 e4       	ldi	r25, 0x40	; 64
    3d02:	08 95       	ret
    3d04:	83 e8       	ldi	r24, 0x83	; 131
    3d06:	90 e4       	ldi	r25, 0x40	; 64
    3d08:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3d0a:	82 ee       	ldi	r24, 0xE2	; 226
    3d0c:	94 e4       	ldi	r25, 0x44	; 68
    3d0e:	08 95       	ret
    3d10:	89 ee       	ldi	r24, 0xE9	; 233
    3d12:	94 e4       	ldi	r25, 0x44	; 68
    3d14:	08 95       	ret
    3d16:	8a ee       	ldi	r24, 0xEA	; 234
    3d18:	94 e4       	ldi	r25, 0x44	; 68
    3d1a:	08 95       	ret
    3d1c:	85 eb       	ldi	r24, 0xB5	; 181
    3d1e:	94 e4       	ldi	r25, 0x44	; 68
    3d20:	08 95       	ret
    3d22:	86 eb       	ldi	r24, 0xB6	; 182
    3d24:	94 e4       	ldi	r25, 0x44	; 68
    3d26:	08 95       	ret
    3d28:	83 eb       	ldi	r24, 0xB3	; 179
    3d2a:	94 e4       	ldi	r25, 0x44	; 68
    3d2c:	08 95       	ret
    3d2e:	84 eb       	ldi	r24, 0xB4	; 180
    3d30:	94 e4       	ldi	r25, 0x44	; 68
    3d32:	08 95       	ret
    3d34:	87 eb       	ldi	r24, 0xB7	; 183
    3d36:	94 e4       	ldi	r25, 0x44	; 68
    3d38:	08 95       	ret
    3d3a:	8c ec       	ldi	r24, 0xCC	; 204
    3d3c:	94 e4       	ldi	r25, 0x44	; 68
    3d3e:	08 95       	ret
    3d40:	8d ec       	ldi	r24, 0xCD	; 205
    3d42:	94 e4       	ldi	r25, 0x44	; 68
    3d44:	08 95       	ret
    3d46:	83 e8       	ldi	r24, 0x83	; 131
    3d48:	95 e4       	ldi	r25, 0x45	; 69
    3d4a:	08 95       	ret
    3d4c:	8a e8       	ldi	r24, 0x8A	; 138
    3d4e:	95 e4       	ldi	r25, 0x45	; 69
    3d50:	08 95       	ret
    3d52:	82 e9       	ldi	r24, 0x92	; 146
    3d54:	95 e4       	ldi	r25, 0x45	; 69
    3d56:	08 95       	ret
    3d58:	84 e9       	ldi	r24, 0x94	; 148
    3d5a:	95 e4       	ldi	r25, 0x45	; 69
    3d5c:	08 95       	ret
    3d5e:	81 e2       	ldi	r24, 0x21	; 33
    3d60:	96 e4       	ldi	r25, 0x46	; 70
    3d62:	08 95       	ret
    3d64:	83 e2       	ldi	r24, 0x23	; 35
    3d66:	96 e4       	ldi	r25, 0x46	; 70
    3d68:	08 95       	ret
    3d6a:	84 e2       	ldi	r24, 0x24	; 36
    3d6c:	96 e4       	ldi	r25, 0x46	; 70
    3d6e:	08 95       	ret
    3d70:	85 e2       	ldi	r24, 0x25	; 37
    3d72:	96 e4       	ldi	r25, 0x46	; 70
    3d74:	08 95       	ret
    3d76:	86 e2       	ldi	r24, 0x26	; 38
    3d78:	96 e4       	ldi	r25, 0x46	; 70
    3d7a:	08 95       	ret
    3d7c:	87 e2       	ldi	r24, 0x27	; 39
    3d7e:	96 e4       	ldi	r25, 0x46	; 70
    3d80:	08 95       	ret
    3d82:	80 e0       	ldi	r24, 0x00	; 0
    3d84:	94 e4       	ldi	r25, 0x44	; 68
        default:
            action.code = ACTION_NO;
            break;
    }
    return action;
}
    3d86:	08 95       	ret

00003d88 <action_for_key>:


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3d88:	0e 94 07 07 	call	0xe0e	; 0xe0e <keymap_key_to_keycode>
    switch (keycode) {
    3d8c:	80 3e       	cpi	r24, 0xE0	; 224
    3d8e:	a8 f4       	brcc	.+42     	; 0x3dba <action_for_key+0x32>
    3d90:	80 3c       	cpi	r24, 0xC0	; 192
    3d92:	00 f5       	brcc	.+64     	; 0x3dd4 <action_for_key+0x4c>
    3d94:	81 33       	cpi	r24, 0x31	; 49
    3d96:	09 f4       	brne	.+2      	; 0x3d9a <action_for_key+0x12>
    3d98:	5c c0       	rjmp	.+184    	; 0x3e52 <action_for_key+0xca>
    3d9a:	38 f4       	brcc	.+14     	; 0x3daa <action_for_key+0x22>
    3d9c:	89 32       	cpi	r24, 0x29	; 41
    3d9e:	09 f4       	brne	.+2      	; 0x3da2 <action_for_key+0x1a>
    3da0:	52 c0       	rjmp	.+164    	; 0x3e46 <action_for_key+0xbe>
    3da2:	8a 32       	cpi	r24, 0x2A	; 42
    3da4:	09 f4       	brne	.+2      	; 0x3da8 <action_for_key+0x20>
    3da6:	5b c0       	rjmp	.+182    	; 0x3e5e <action_for_key+0xd6>
    3da8:	5f c0       	rjmp	.+190    	; 0x3e68 <action_for_key+0xe0>
    3daa:	89 33       	cpi	r24, 0x39	; 57
    3dac:	b1 f0       	breq	.+44     	; 0x3dda <action_for_key+0x52>
    3dae:	82 38       	cpi	r24, 0x82	; 130
    3db0:	a1 f0       	breq	.+40     	; 0x3dda <action_for_key+0x52>
    3db2:	85 33       	cpi	r24, 0x35	; 53
    3db4:	09 f4       	brne	.+2      	; 0x3db8 <action_for_key+0x30>
    3db6:	41 c0       	rjmp	.+130    	; 0x3e3a <action_for_key+0xb2>
    3db8:	57 c0       	rjmp	.+174    	; 0x3e68 <action_for_key+0xe0>
    3dba:	83 3e       	cpi	r24, 0xE3	; 227
    3dbc:	41 f1       	breq	.+80     	; 0x3e0e <action_for_key+0x86>
    3dbe:	28 f4       	brcc	.+10     	; 0x3dca <action_for_key+0x42>
    3dc0:	80 3e       	cpi	r24, 0xE0	; 224
    3dc2:	99 f0       	breq	.+38     	; 0x3dea <action_for_key+0x62>
    3dc4:	82 3e       	cpi	r24, 0xE2	; 226
    3dc6:	b9 f0       	breq	.+46     	; 0x3df6 <action_for_key+0x6e>
    3dc8:	4f c0       	rjmp	.+158    	; 0x3e68 <action_for_key+0xe0>
    3dca:	86 3e       	cpi	r24, 0xE6	; 230
    3dcc:	31 f1       	breq	.+76     	; 0x3e1a <action_for_key+0x92>
    3dce:	87 3e       	cpi	r24, 0xE7	; 231
    3dd0:	71 f1       	breq	.+92     	; 0x3e2e <action_for_key+0xa6>
    3dd2:	4a c0       	rjmp	.+148    	; 0x3e68 <action_for_key+0xe0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    3dd4:	0e 94 16 07 	call	0xe2c	; 0xe2c <keymap_fn_to_action>
    3dd8:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3dda:	90 91 df 01 	lds	r25, 0x01DF
    3dde:	90 fd       	sbrc	r25, 0
    3de0:	02 c0       	rjmp	.+4      	; 0x3de6 <action_for_key+0x5e>
    3de2:	91 ff       	sbrs	r25, 1
    3de4:	41 c0       	rjmp	.+130    	; 0x3e68 <action_for_key+0xe0>
                return keycode_to_action(KC_LCTL);
    3de6:	80 ee       	ldi	r24, 0xE0	; 224
    3de8:	3f c0       	rjmp	.+126    	; 0x3e68 <action_for_key+0xe0>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    3dea:	80 91 df 01 	lds	r24, 0x01DF
    3dee:	80 ff       	sbrs	r24, 0
    3df0:	fa cf       	rjmp	.-12     	; 0x3de6 <action_for_key+0x5e>
                return keycode_to_action(KC_CAPSLOCK);
    3df2:	89 e3       	ldi	r24, 0x39	; 57
    3df4:	39 c0       	rjmp	.+114    	; 0x3e68 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    3df6:	80 91 df 01 	lds	r24, 0x01DF
    3dfa:	82 ff       	sbrs	r24, 2
    3dfc:	0c c0       	rjmp	.+24     	; 0x3e16 <action_for_key+0x8e>
                if (keymap_config.no_gui) {
    3dfe:	80 91 df 01 	lds	r24, 0x01DF
    3e02:	84 ff       	sbrs	r24, 4
    3e04:	02 c0       	rjmp	.+4      	; 0x3e0a <action_for_key+0x82>
                    return keycode_to_action(ACTION_NO);
    3e06:	80 e0       	ldi	r24, 0x00	; 0
    3e08:	2f c0       	rjmp	.+94     	; 0x3e68 <action_for_key+0xe0>
                }
                return keycode_to_action(KC_LGUI);
    3e0a:	83 ee       	ldi	r24, 0xE3	; 227
    3e0c:	2d c0       	rjmp	.+90     	; 0x3e68 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    3e0e:	80 91 df 01 	lds	r24, 0x01DF
    3e12:	82 ff       	sbrs	r24, 2
    3e14:	f4 cf       	rjmp	.-24     	; 0x3dfe <action_for_key+0x76>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    3e16:	82 ee       	ldi	r24, 0xE2	; 226
    3e18:	27 c0       	rjmp	.+78     	; 0x3e68 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    3e1a:	80 91 df 01 	lds	r24, 0x01DF
    3e1e:	83 ff       	sbrs	r24, 3
    3e20:	0a c0       	rjmp	.+20     	; 0x3e36 <action_for_key+0xae>
                if (keymap_config.no_gui) {
    3e22:	80 91 df 01 	lds	r24, 0x01DF
    3e26:	84 fd       	sbrc	r24, 4
    3e28:	ee cf       	rjmp	.-36     	; 0x3e06 <action_for_key+0x7e>
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
    3e2a:	87 ee       	ldi	r24, 0xE7	; 231
    3e2c:	1d c0       	rjmp	.+58     	; 0x3e68 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    3e2e:	80 91 df 01 	lds	r24, 0x01DF
    3e32:	83 ff       	sbrs	r24, 3
    3e34:	f6 cf       	rjmp	.-20     	; 0x3e22 <action_for_key+0x9a>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    3e36:	86 ee       	ldi	r24, 0xE6	; 230
    3e38:	17 c0       	rjmp	.+46     	; 0x3e68 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    3e3a:	80 91 df 01 	lds	r24, 0x01DF
    3e3e:	85 ff       	sbrs	r24, 5
    3e40:	06 c0       	rjmp	.+12     	; 0x3e4e <action_for_key+0xc6>
                return keycode_to_action(KC_ESC);
    3e42:	89 e2       	ldi	r24, 0x29	; 41
    3e44:	11 c0       	rjmp	.+34     	; 0x3e68 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    3e46:	80 91 df 01 	lds	r24, 0x01DF
    3e4a:	85 ff       	sbrs	r24, 5
    3e4c:	fa cf       	rjmp	.-12     	; 0x3e42 <action_for_key+0xba>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    3e4e:	85 e3       	ldi	r24, 0x35	; 53
    3e50:	0b c0       	rjmp	.+22     	; 0x3e68 <action_for_key+0xe0>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    3e52:	80 91 df 01 	lds	r24, 0x01DF
    3e56:	86 ff       	sbrs	r24, 6
    3e58:	06 c0       	rjmp	.+12     	; 0x3e66 <action_for_key+0xde>
                return keycode_to_action(KC_BSPACE);
    3e5a:	8a e2       	ldi	r24, 0x2A	; 42
    3e5c:	05 c0       	rjmp	.+10     	; 0x3e68 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    3e5e:	80 91 df 01 	lds	r24, 0x01DF
    3e62:	86 ff       	sbrs	r24, 6
    3e64:	fa cf       	rjmp	.-12     	; 0x3e5a <action_for_key+0xd2>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    3e66:	81 e3       	ldi	r24, 0x31	; 49
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    3e68:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <keycode_to_action>
    }
}
    3e6c:	08 95       	ret

00003e6e <action_get_macro>:
{
    (void)record;
    (void)id;
    (void)opt;
    return MACRO_NONE;
}
    3e6e:	80 e0       	ldi	r24, 0x00	; 0
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	08 95       	ret

00003e74 <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    3e74:	08 95       	ret

00003e76 <scan_key>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_key(uint16_t code)
{
    3e76:	bf 92       	push	r11
    3e78:	cf 92       	push	r12
    3e7a:	df 92       	push	r13
    3e7c:	ef 92       	push	r14
    3e7e:	ff 92       	push	r15
    3e80:	0f 93       	push	r16
    3e82:	1f 93       	push	r17
    3e84:	cf 93       	push	r28
    3e86:	df 93       	push	r29
    3e88:	8c 01       	movw	r16, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3e8a:	b1 2c       	mov	r11, r1
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3e8c:	ee 24       	eor	r14, r14
    3e8e:	e3 94       	inc	r14
    3e90:	f1 2c       	mov	r15, r1
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
    3e92:	8b 2d       	mov	r24, r11
    3e94:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <matrix_get_row>
    3e98:	6c 01       	movw	r12, r24
    3e9a:	c0 e0       	ldi	r28, 0x00	; 0
    3e9c:	d0 e0       	ldi	r29, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3e9e:	97 01       	movw	r18, r14
    3ea0:	0c 2e       	mov	r0, r28
    3ea2:	02 c0       	rjmp	.+4      	; 0x3ea8 <scan_key+0x32>
    3ea4:	22 0f       	add	r18, r18
    3ea6:	33 1f       	adc	r19, r19
    3ea8:	0a 94       	dec	r0
    3eaa:	e2 f7       	brpl	.-8      	; 0x3ea4 <scan_key+0x2e>
    3eac:	2c 21       	and	r18, r12
    3eae:	3d 21       	and	r19, r13
    3eb0:	23 2b       	or	r18, r19
    3eb2:	b1 f0       	breq	.+44     	; 0x3ee0 <scan_key+0x6a>
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
    3eb4:	6c 2f       	mov	r22, r28
    3eb6:	7b 2d       	mov	r23, r11
    3eb8:	80 e0       	ldi	r24, 0x00	; 0
    3eba:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <action_for_key>
    3ebe:	9c 01       	movw	r18, r24
                if (action.code == code ||
    3ec0:	80 17       	cp	r24, r16
    3ec2:	91 07       	cpc	r25, r17
    3ec4:	59 f0       	breq	.+22     	; 0x3edc <scan_key+0x66>
    3ec6:	83 2f       	mov	r24, r19
    3ec8:	80 7e       	andi	r24, 0xE0	; 224
    3eca:	93 2f       	mov	r25, r19
    3ecc:	90 7c       	andi	r25, 0xC0	; 192
    3ece:	11 f0       	breq	.+4      	; 0x3ed4 <scan_key+0x5e>
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
    3ed0:	80 3a       	cpi	r24, 0xA0	; 160
    3ed2:	31 f4       	brne	.+12     	; 0x3ee0 <scan_key+0x6a>
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
                     action.key.code == code)) {
    3ed4:	30 e0       	ldi	r19, 0x00	; 0
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
    3ed6:	20 17       	cp	r18, r16
    3ed8:	31 07       	cpc	r19, r17
    3eda:	11 f4       	brne	.+4      	; 0x3ee0 <scan_key+0x6a>
                     action.key.code == code)) {
                    return true;
    3edc:	81 e0       	ldi	r24, 0x01	; 1
    3ede:	09 c0       	rjmp	.+18     	; 0x3ef2 <scan_key+0x7c>
    3ee0:	21 96       	adiw	r28, 0x01	; 1

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    3ee2:	cc 30       	cpi	r28, 0x0C	; 12
    3ee4:	d1 05       	cpc	r29, r1
    3ee6:	d9 f6       	brne	.-74     	; 0x3e9e <scan_key+0x28>
    }
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3ee8:	b3 94       	inc	r11
    3eea:	84 e0       	ldi	r24, 0x04	; 4
    3eec:	b8 12       	cpse	r11, r24
    3eee:	d1 cf       	rjmp	.-94     	; 0x3e92 <scan_key+0x1c>
                    return true;
                }
            }
        }
    }
    return false;
    3ef0:	80 e0       	ldi	r24, 0x00	; 0
}
    3ef2:	df 91       	pop	r29
    3ef4:	cf 91       	pop	r28
    3ef6:	1f 91       	pop	r17
    3ef8:	0f 91       	pop	r16
    3efa:	ff 90       	pop	r15
    3efc:	ef 90       	pop	r14
    3efe:	df 90       	pop	r13
    3f00:	cf 90       	pop	r12
    3f02:	bf 90       	pop	r11
    3f04:	08 95       	ret

00003f06 <bootmagic_scan_key>:

bool bootmagic_scan_key(uint16_t code)
{
    3f06:	cf 93       	push	r28
    3f08:	df 93       	push	r29
    3f0a:	ec 01       	movw	r28, r24
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    3f0c:	8c e2       	ldi	r24, 0x2C	; 44
    3f0e:	90 e0       	ldi	r25, 0x00	; 0
    3f10:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <scan_key>
    3f14:	88 23       	and	r24, r24
    3f16:	29 f0       	breq	.+10     	; 0x3f22 <bootmagic_scan_key+0x1c>

    return scan_key(code);
    3f18:	ce 01       	movw	r24, r28
}
    3f1a:	df 91       	pop	r29
    3f1c:	cf 91       	pop	r28

bool bootmagic_scan_key(uint16_t code)
{
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;

    return scan_key(code);
    3f1e:	0c 94 3b 1f 	jmp	0x3e76	; 0x3e76 <scan_key>
}
    3f22:	80 e0       	ldi	r24, 0x00	; 0
    3f24:	df 91       	pop	r29
    3f26:	cf 91       	pop	r28
    3f28:	08 95       	ret

00003f2a <bootmagic>:
#include "hook.h"

keymap_config_t keymap_config;

void bootmagic(void)
{
    3f2a:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    3f2c:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <eeconfig_is_enabled>
    3f30:	81 11       	cpse	r24, r1
    3f32:	02 c0       	rjmp	.+4      	; 0x3f38 <bootmagic+0xe>
        eeconfig_init();
    3f34:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("bootmagic scan: ... ");
    3f38:	84 e7       	ldi	r24, 0x74	; 116
    3f3a:	94 e0       	ldi	r25, 0x04	; 4
    3f3c:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); wait_ms(10); }
    3f40:	c5 e6       	ldi	r28, 0x65	; 101
    3f42:	c1 50       	subi	r28, 0x01	; 1
    3f44:	49 f0       	breq	.+18     	; 0x3f58 <bootmagic+0x2e>
    3f46:	0e 94 61 07 	call	0xec2	; 0xec2 <matrix_scan>
    3f4a:	8f e3       	ldi	r24, 0x3F	; 63
    3f4c:	9c e9       	ldi	r25, 0x9C	; 156
    3f4e:	01 97       	sbiw	r24, 0x01	; 1
    3f50:	f1 f7       	brne	.-4      	; 0x3f4e <bootmagic+0x24>
    3f52:	00 c0       	rjmp	.+0      	; 0x3f54 <bootmagic+0x2a>
    3f54:	00 00       	nop
    3f56:	f5 cf       	rjmp	.-22     	; 0x3f42 <bootmagic+0x18>
    print("done.\n");
    3f58:	8d e6       	ldi	r24, 0x6D	; 109
    3f5a:	94 e0       	ldi	r25, 0x04	; 4
    3f5c:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
    3f60:	89 e2       	ldi	r24, 0x29	; 41
    3f62:	90 e0       	ldi	r25, 0x00	; 0
    3f64:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <bootmagic_scan_key>
    3f68:	81 11       	cpse	r24, r1
    3f6a:	29 c1       	rjmp	.+594    	; 0x41be <bootmagic+0x294>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    3f6c:	8a e2       	ldi	r24, 0x2A	; 42
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
    3f70:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <bootmagic_scan_key>
    3f74:	81 11       	cpse	r24, r1
        eeconfig_init();
    3f76:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
    3f7a:	85 e0       	ldi	r24, 0x05	; 5
    3f7c:	90 e0       	ldi	r25, 0x00	; 0
    3f7e:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <bootmagic_scan_key>
    3f82:	81 11       	cpse	r24, r1
        bootloader_jump();
    3f84:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <bootloader_jump>
    }

    /* user-defined checks */
    hook_bootmagic();
    3f88:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <hook_bootmagic>

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    3f8c:	0e 94 06 21 	call	0x420c	; 0x420c <eeconfig_read_debug>
    3f90:	80 93 c1 01 	sts	0x01C1, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    3f94:	87 e0       	ldi	r24, 0x07	; 7
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <bootmagic_scan_key>
    3f9c:	88 23       	and	r24, r24
    3f9e:	b1 f1       	breq	.+108    	; 0x400c <bootmagic+0xe2>
        if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    3fa0:	8b e1       	ldi	r24, 0x1B	; 27
    3fa2:	90 e0       	ldi	r25, 0x00	; 0
    3fa4:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <bootmagic_scan_key>
    3fa8:	88 23       	and	r24, r24
    3faa:	51 f0       	breq	.+20     	; 0x3fc0 <bootmagic+0x96>
            debug_config.matrix = !debug_config.matrix;
    3fac:	90 91 c1 01 	lds	r25, 0x01C1
    3fb0:	91 fb       	bst	r25, 1
    3fb2:	88 27       	eor	r24, r24
    3fb4:	80 f9       	bld	r24, 0
    3fb6:	21 e0       	ldi	r18, 0x01	; 1
    3fb8:	82 27       	eor	r24, r18
    3fba:	80 fb       	bst	r24, 0
    3fbc:	91 f9       	bld	r25, 1
    3fbe:	24 c0       	rjmp	.+72     	; 0x4008 <bootmagic+0xde>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    3fc0:	8e e0       	ldi	r24, 0x0E	; 14
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <bootmagic_scan_key>
    3fc8:	88 23       	and	r24, r24
    3fca:	51 f0       	breq	.+20     	; 0x3fe0 <bootmagic+0xb6>
            debug_config.keyboard = !debug_config.keyboard;
    3fcc:	90 91 c1 01 	lds	r25, 0x01C1
    3fd0:	92 fb       	bst	r25, 2
    3fd2:	88 27       	eor	r24, r24
    3fd4:	80 f9       	bld	r24, 0
    3fd6:	21 e0       	ldi	r18, 0x01	; 1
    3fd8:	82 27       	eor	r24, r18
    3fda:	80 fb       	bst	r24, 0
    3fdc:	92 f9       	bld	r25, 2
    3fde:	14 c0       	rjmp	.+40     	; 0x4008 <bootmagic+0xde>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    3fe0:	80 e1       	ldi	r24, 0x10	; 16
    3fe2:	90 e0       	ldi	r25, 0x00	; 0
    3fe4:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <bootmagic_scan_key>
    3fe8:	90 91 c1 01 	lds	r25, 0x01C1
    3fec:	88 23       	and	r24, r24
    3fee:	41 f0       	breq	.+16     	; 0x4000 <bootmagic+0xd6>
            debug_config.mouse = !debug_config.mouse;
    3ff0:	93 fb       	bst	r25, 3
    3ff2:	88 27       	eor	r24, r24
    3ff4:	80 f9       	bld	r24, 0
    3ff6:	21 e0       	ldi	r18, 0x01	; 1
    3ff8:	82 27       	eor	r24, r18
    3ffa:	80 fb       	bst	r24, 0
    3ffc:	93 f9       	bld	r25, 3
    3ffe:	04 c0       	rjmp	.+8      	; 0x4008 <bootmagic+0xde>
        } else {
            debug_config.enable = !debug_config.enable;
    4000:	89 2f       	mov	r24, r25
    4002:	80 95       	com	r24
    4004:	80 fb       	bst	r24, 0
    4006:	90 f9       	bld	r25, 0
    4008:	90 93 c1 01 	sts	0x01C1, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    400c:	80 91 c1 01 	lds	r24, 0x01C1
    4010:	0e 94 0a 21 	call	0x4214	; 0x4214 <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    4014:	0e 94 18 21 	call	0x4230	; 0x4230 <eeconfig_read_keymap>
    4018:	80 93 df 01 	sts	0x01DF, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    401c:	80 ee       	ldi	r24, 0xE0	; 224
    401e:	90 e0       	ldi	r25, 0x00	; 0
    4020:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <bootmagic_scan_key>
    4024:	88 23       	and	r24, r24
    4026:	41 f0       	breq	.+16     	; 0x4038 <bootmagic+0x10e>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    4028:	80 91 df 01 	lds	r24, 0x01DF
    402c:	98 2f       	mov	r25, r24
    402e:	90 95       	com	r25
    4030:	90 fb       	bst	r25, 0
    4032:	80 f9       	bld	r24, 0
    4034:	80 93 df 01 	sts	0x01DF, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    4038:	89 e3       	ldi	r24, 0x39	; 57
    403a:	90 e0       	ldi	r25, 0x00	; 0
    403c:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <bootmagic_scan_key>
    4040:	88 23       	and	r24, r24
    4042:	59 f0       	breq	.+22     	; 0x405a <bootmagic+0x130>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    4044:	90 91 df 01 	lds	r25, 0x01DF
    4048:	91 fb       	bst	r25, 1
    404a:	88 27       	eor	r24, r24
    404c:	80 f9       	bld	r24, 0
    404e:	21 e0       	ldi	r18, 0x01	; 1
    4050:	82 27       	eor	r24, r18
    4052:	80 fb       	bst	r24, 0
    4054:	91 f9       	bld	r25, 1
    4056:	90 93 df 01 	sts	0x01DF, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    405a:	82 ee       	ldi	r24, 0xE2	; 226
    405c:	90 e0       	ldi	r25, 0x00	; 0
    405e:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <bootmagic_scan_key>
    4062:	88 23       	and	r24, r24
    4064:	59 f0       	breq	.+22     	; 0x407c <bootmagic+0x152>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    4066:	90 91 df 01 	lds	r25, 0x01DF
    406a:	92 fb       	bst	r25, 2
    406c:	88 27       	eor	r24, r24
    406e:	80 f9       	bld	r24, 0
    4070:	21 e0       	ldi	r18, 0x01	; 1
    4072:	82 27       	eor	r24, r18
    4074:	80 fb       	bst	r24, 0
    4076:	92 f9       	bld	r25, 2
    4078:	90 93 df 01 	sts	0x01DF, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    407c:	86 ee       	ldi	r24, 0xE6	; 230
    407e:	90 e0       	ldi	r25, 0x00	; 0
    4080:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <bootmagic_scan_key>
    4084:	88 23       	and	r24, r24
    4086:	59 f0       	breq	.+22     	; 0x409e <bootmagic+0x174>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    4088:	90 91 df 01 	lds	r25, 0x01DF
    408c:	93 fb       	bst	r25, 3
    408e:	88 27       	eor	r24, r24
    4090:	80 f9       	bld	r24, 0
    4092:	21 e0       	ldi	r18, 0x01	; 1
    4094:	82 27       	eor	r24, r18
    4096:	80 fb       	bst	r24, 0
    4098:	93 f9       	bld	r25, 3
    409a:	90 93 df 01 	sts	0x01DF, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
    409e:	83 ee       	ldi	r24, 0xE3	; 227
    40a0:	90 e0       	ldi	r25, 0x00	; 0
    40a2:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <bootmagic_scan_key>
    40a6:	88 23       	and	r24, r24
    40a8:	59 f0       	breq	.+22     	; 0x40c0 <bootmagic+0x196>
        keymap_config.no_gui = !keymap_config.no_gui;
    40aa:	90 91 df 01 	lds	r25, 0x01DF
    40ae:	94 fb       	bst	r25, 4
    40b0:	88 27       	eor	r24, r24
    40b2:	80 f9       	bld	r24, 0
    40b4:	21 e0       	ldi	r18, 0x01	; 1
    40b6:	82 27       	eor	r24, r18
    40b8:	80 fb       	bst	r24, 0
    40ba:	94 f9       	bld	r25, 4
    40bc:	90 93 df 01 	sts	0x01DF, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    40c0:	85 e3       	ldi	r24, 0x35	; 53
    40c2:	90 e0       	ldi	r25, 0x00	; 0
    40c4:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <bootmagic_scan_key>
    40c8:	88 23       	and	r24, r24
    40ca:	59 f0       	breq	.+22     	; 0x40e2 <bootmagic+0x1b8>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    40cc:	90 91 df 01 	lds	r25, 0x01DF
    40d0:	95 fb       	bst	r25, 5
    40d2:	88 27       	eor	r24, r24
    40d4:	80 f9       	bld	r24, 0
    40d6:	21 e0       	ldi	r18, 0x01	; 1
    40d8:	82 27       	eor	r24, r18
    40da:	80 fb       	bst	r24, 0
    40dc:	95 f9       	bld	r25, 5
    40de:	90 93 df 01 	sts	0x01DF, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    40e2:	81 e3       	ldi	r24, 0x31	; 49
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <bootmagic_scan_key>
    40ea:	88 23       	and	r24, r24
    40ec:	59 f0       	breq	.+22     	; 0x4104 <bootmagic+0x1da>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    40ee:	90 91 df 01 	lds	r25, 0x01DF
    40f2:	96 fb       	bst	r25, 6
    40f4:	88 27       	eor	r24, r24
    40f6:	80 f9       	bld	r24, 0
    40f8:	21 e0       	ldi	r18, 0x01	; 1
    40fa:	82 27       	eor	r24, r18
    40fc:	80 fb       	bst	r24, 0
    40fe:	96 f9       	bld	r25, 6
    4100:	90 93 df 01 	sts	0x01DF, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
    4104:	81 e1       	ldi	r24, 0x11	; 17
    4106:	90 e0       	ldi	r25, 0x00	; 0
    4108:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <bootmagic_scan_key>
    410c:	88 23       	and	r24, r24
    410e:	59 f0       	breq	.+22     	; 0x4126 <bootmagic+0x1fc>
        keymap_config.nkro = !keymap_config.nkro;
    4110:	90 91 df 01 	lds	r25, 0x01DF
    4114:	97 fb       	bst	r25, 7
    4116:	88 27       	eor	r24, r24
    4118:	80 f9       	bld	r24, 0
    411a:	21 e0       	ldi	r18, 0x01	; 1
    411c:	82 27       	eor	r24, r18
    411e:	80 fb       	bst	r24, 0
    4120:	97 f9       	bld	r25, 7
    4122:	90 93 df 01 	sts	0x01DF, r25
    }
    eeconfig_write_keymap(keymap_config.raw);
    4126:	80 91 df 01 	lds	r24, 0x01DF
    412a:	0e 94 1c 21 	call	0x4238	; 0x4238 <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    412e:	80 91 df 01 	lds	r24, 0x01DF
    4132:	87 fb       	bst	r24, 7
    4134:	88 27       	eor	r24, r24
    4136:	80 f9       	bld	r24, 0
    4138:	80 93 0c 01 	sts	0x010C, r24
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    413c:	87 e2       	ldi	r24, 0x27	; 39
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <bootmagic_scan_key>
    4144:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    4146:	8e e1       	ldi	r24, 0x1E	; 30
    4148:	90 e0       	ldi	r25, 0x00	; 0
    414a:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <bootmagic_scan_key>
    414e:	81 11       	cpse	r24, r1
    4150:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    4152:	8f e1       	ldi	r24, 0x1F	; 31
    4154:	90 e0       	ldi	r25, 0x00	; 0
    4156:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <bootmagic_scan_key>
    415a:	81 11       	cpse	r24, r1
    415c:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    415e:	80 e2       	ldi	r24, 0x20	; 32
    4160:	90 e0       	ldi	r25, 0x00	; 0
    4162:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <bootmagic_scan_key>
    4166:	81 11       	cpse	r24, r1
    4168:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    416a:	81 e2       	ldi	r24, 0x21	; 33
    416c:	90 e0       	ldi	r25, 0x00	; 0
    416e:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <bootmagic_scan_key>
    4172:	81 11       	cpse	r24, r1
    4174:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    4176:	82 e2       	ldi	r24, 0x22	; 34
    4178:	90 e0       	ldi	r25, 0x00	; 0
    417a:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <bootmagic_scan_key>
    417e:	81 11       	cpse	r24, r1
    4180:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    4182:	83 e2       	ldi	r24, 0x23	; 35
    4184:	90 e0       	ldi	r25, 0x00	; 0
    4186:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <bootmagic_scan_key>
    418a:	81 11       	cpse	r24, r1
    418c:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    418e:	84 e2       	ldi	r24, 0x24	; 36
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <bootmagic_scan_key>
    4196:	88 23       	and	r24, r24
    4198:	11 f0       	breq	.+4      	; 0x419e <bootmagic+0x274>
    419a:	c0 68       	ori	r28, 0x80	; 128
    419c:	02 c0       	rjmp	.+4      	; 0x41a2 <bootmagic+0x278>
    if (default_layer) {
    419e:	cc 23       	and	r28, r28
    41a0:	29 f0       	breq	.+10     	; 0x41ac <bootmagic+0x282>
        eeconfig_write_default_layer(default_layer);
    41a2:	8c 2f       	mov	r24, r28
    41a4:	0e 94 13 21 	call	0x4226	; 0x4226 <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    41a8:	6c 2f       	mov	r22, r28
    41aa:	03 c0       	rjmp	.+6      	; 0x41b2 <bootmagic+0x288>
    } else {
        default_layer = eeconfig_read_default_layer();
    41ac:	0e 94 0f 21 	call	0x421e	; 0x421e <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    41b0:	68 2f       	mov	r22, r24
    41b2:	70 e0       	ldi	r23, 0x00	; 0
    41b4:	80 e0       	ldi	r24, 0x00	; 0
    41b6:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    41b8:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    41ba:	0c 94 a4 1a 	jmp	0x3548	; 0x3548 <default_layer_set>
    }
}
    41be:	cf 91       	pop	r28
    41c0:	08 95       	ret

000041c2 <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    41c2:	6d ee       	ldi	r22, 0xED	; 237
    41c4:	7e ef       	ldi	r23, 0xFE	; 254
    41c6:	80 e0       	ldi	r24, 0x00	; 0
    41c8:	90 e0       	ldi	r25, 0x00	; 0
    41ca:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <__eewr_word_m32u4>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    41ce:	60 e0       	ldi	r22, 0x00	; 0
    41d0:	82 e0       	ldi	r24, 0x02	; 2
    41d2:	90 e0       	ldi	r25, 0x00	; 0
    41d4:	0e 94 4f 2a 	call	0x549e	; 0x549e <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    41d8:	60 e0       	ldi	r22, 0x00	; 0
    41da:	83 e0       	ldi	r24, 0x03	; 3
    41dc:	90 e0       	ldi	r25, 0x00	; 0
    41de:	0e 94 4f 2a 	call	0x549e	; 0x549e <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    41e2:	60 e0       	ldi	r22, 0x00	; 0
    41e4:	84 e0       	ldi	r24, 0x04	; 4
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    41e8:	0e 94 4f 2a 	call	0x549e	; 0x549e <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    41ec:	60 e0       	ldi	r22, 0x00	; 0
    41ee:	85 e0       	ldi	r24, 0x05	; 5
    41f0:	90 e0       	ldi	r25, 0x00	; 0
    41f2:	0c 94 4f 2a 	jmp	0x549e	; 0x549e <__eewr_byte_m32u4>

000041f6 <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    41f6:	80 e0       	ldi	r24, 0x00	; 0
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	0e 94 49 2a 	call	0x5492	; 0x5492 <__eerd_word_m32u4>
    41fe:	21 e0       	ldi	r18, 0x01	; 1
    4200:	8d 3e       	cpi	r24, 0xED	; 237
    4202:	9e 4f       	sbci	r25, 0xFE	; 254
    4204:	09 f0       	breq	.+2      	; 0x4208 <eeconfig_is_enabled+0x12>
    4206:	20 e0       	ldi	r18, 0x00	; 0
}
    4208:	82 2f       	mov	r24, r18
    420a:	08 95       	ret

0000420c <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    420c:	82 e0       	ldi	r24, 0x02	; 2
    420e:	90 e0       	ldi	r25, 0x00	; 0
    4210:	0c 94 41 2a 	jmp	0x5482	; 0x5482 <__eerd_byte_m32u4>

00004214 <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    4214:	68 2f       	mov	r22, r24
    4216:	82 e0       	ldi	r24, 0x02	; 2
    4218:	90 e0       	ldi	r25, 0x00	; 0
    421a:	0c 94 4f 2a 	jmp	0x549e	; 0x549e <__eewr_byte_m32u4>

0000421e <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    421e:	83 e0       	ldi	r24, 0x03	; 3
    4220:	90 e0       	ldi	r25, 0x00	; 0
    4222:	0c 94 41 2a 	jmp	0x5482	; 0x5482 <__eerd_byte_m32u4>

00004226 <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    4226:	68 2f       	mov	r22, r24
    4228:	83 e0       	ldi	r24, 0x03	; 3
    422a:	90 e0       	ldi	r25, 0x00	; 0
    422c:	0c 94 4f 2a 	jmp	0x549e	; 0x549e <__eewr_byte_m32u4>

00004230 <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    4230:	84 e0       	ldi	r24, 0x04	; 4
    4232:	90 e0       	ldi	r25, 0x00	; 0
    4234:	0c 94 41 2a 	jmp	0x5482	; 0x5482 <__eerd_byte_m32u4>

00004238 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    4238:	68 2f       	mov	r22, r24
    423a:	84 e0       	ldi	r24, 0x04	; 4
    423c:	90 e0       	ldi	r25, 0x00	; 0
    423e:	0c 94 4f 2a 	jmp	0x549e	; 0x549e <__eewr_byte_m32u4>

00004242 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4242:	80 91 c9 01 	lds	r24, 0x01C9
    4246:	80 ff       	sbrs	r24, 0
    4248:	0b c0       	rjmp	.+22     	; 0x4260 <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    424a:	60 91 12 01 	lds	r22, 0x0112
    424e:	85 e0       	ldi	r24, 0x05	; 5
    4250:	68 9f       	mul	r22, r24
    4252:	b0 01       	movw	r22, r0
    4254:	11 24       	eor	r1, r1
    4256:	75 95       	asr	r23
    4258:	67 95       	ror	r22
    425a:	75 95       	asr	r23
    425c:	67 95       	ror	r22
    425e:	2a c0       	rjmp	.+84     	; 0x42b4 <move_unit+0x72>
    } else if (mousekey_accel & (1<<1)) {
    4260:	81 ff       	sbrs	r24, 1
    4262:	09 c0       	rjmp	.+18     	; 0x4276 <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    4264:	60 91 12 01 	lds	r22, 0x0112
    4268:	85 e0       	ldi	r24, 0x05	; 5
    426a:	68 9f       	mul	r22, r24
    426c:	b0 01       	movw	r22, r0
    426e:	11 24       	eor	r1, r1
    4270:	75 95       	asr	r23
    4272:	67 95       	ror	r22
    4274:	1f c0       	rjmp	.+62     	; 0x42b4 <move_unit+0x72>
    } else if (mousekey_accel & (1<<2)) {
    4276:	82 ff       	sbrs	r24, 2
    4278:	07 c0       	rjmp	.+14     	; 0x4288 <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    427a:	60 91 12 01 	lds	r22, 0x0112
    427e:	85 e0       	ldi	r24, 0x05	; 5
    4280:	68 9f       	mul	r22, r24
    4282:	b0 01       	movw	r22, r0
    4284:	11 24       	eor	r1, r1
    4286:	16 c0       	rjmp	.+44     	; 0x42b4 <move_unit+0x72>
    } else if (mousekey_repeat == 0) {
    4288:	40 91 ca 01 	lds	r20, 0x01CA
    428c:	44 23       	and	r20, r20
    428e:	c9 f0       	breq	.+50     	; 0x42c2 <move_unit+0x80>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    4290:	60 91 11 01 	lds	r22, 0x0111
    4294:	46 17       	cp	r20, r22
    4296:	88 f7       	brcc	.-30     	; 0x427a <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    4298:	20 91 12 01 	lds	r18, 0x0112
    429c:	85 e0       	ldi	r24, 0x05	; 5
    429e:	28 9f       	mul	r18, r24
    42a0:	90 01       	movw	r18, r0
    42a2:	11 24       	eor	r1, r1
    42a4:	42 9f       	mul	r20, r18
    42a6:	c0 01       	movw	r24, r0
    42a8:	43 9f       	mul	r20, r19
    42aa:	90 0d       	add	r25, r0
    42ac:	11 24       	eor	r1, r1
    42ae:	70 e0       	ldi	r23, 0x00	; 0
    42b0:	0e 94 13 2a 	call	0x5426	; 0x5426 <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    42b4:	60 38       	cpi	r22, 0x80	; 128
    42b6:	71 05       	cpc	r23, r1
    42b8:	40 f4       	brcc	.+16     	; 0x42ca <move_unit+0x88>
    42ba:	61 15       	cp	r22, r1
    42bc:	71 05       	cpc	r23, r1
    42be:	39 f0       	breq	.+14     	; 0x42ce <move_unit+0x8c>
    42c0:	02 c0       	rjmp	.+4      	; 0x42c6 <move_unit+0x84>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    42c2:	65 e0       	ldi	r22, 0x05	; 5
    42c4:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    42c6:	86 2f       	mov	r24, r22
    42c8:	08 95       	ret
    42ca:	8f e7       	ldi	r24, 0x7F	; 127
    42cc:	08 95       	ret
    42ce:	81 e0       	ldi	r24, 0x01	; 1
}
    42d0:	08 95       	ret

000042d2 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    42d2:	80 91 c9 01 	lds	r24, 0x01C9
    42d6:	80 ff       	sbrs	r24, 0
    42d8:	08 c0       	rjmp	.+16     	; 0x42ea <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    42da:	60 91 10 01 	lds	r22, 0x0110
    42de:	70 e0       	ldi	r23, 0x00	; 0
    42e0:	75 95       	asr	r23
    42e2:	67 95       	ror	r22
    42e4:	75 95       	asr	r23
    42e6:	67 95       	ror	r22
    42e8:	21 c0       	rjmp	.+66     	; 0x432c <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    42ea:	81 ff       	sbrs	r24, 1
    42ec:	06 c0       	rjmp	.+12     	; 0x42fa <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    42ee:	60 91 10 01 	lds	r22, 0x0110
    42f2:	70 e0       	ldi	r23, 0x00	; 0
    42f4:	75 95       	asr	r23
    42f6:	67 95       	ror	r22
    42f8:	19 c0       	rjmp	.+50     	; 0x432c <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    42fa:	82 ff       	sbrs	r24, 2
    42fc:	04 c0       	rjmp	.+8      	; 0x4306 <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    42fe:	60 91 10 01 	lds	r22, 0x0110
    4302:	70 e0       	ldi	r23, 0x00	; 0
    4304:	10 c0       	rjmp	.+32     	; 0x4326 <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    4306:	80 91 ca 01 	lds	r24, 0x01CA
    430a:	88 23       	and	r24, r24
    430c:	c1 f0       	breq	.+48     	; 0x433e <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    430e:	60 91 0f 01 	lds	r22, 0x010F
    4312:	86 17       	cp	r24, r22
    4314:	a0 f7       	brcc	.-24     	; 0x42fe <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    4316:	90 91 10 01 	lds	r25, 0x0110
    431a:	98 9f       	mul	r25, r24
    431c:	c0 01       	movw	r24, r0
    431e:	11 24       	eor	r1, r1
    4320:	70 e0       	ldi	r23, 0x00	; 0
    4322:	0e 94 13 2a 	call	0x5426	; 0x5426 <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    4326:	60 38       	cpi	r22, 0x80	; 128
    4328:	71 05       	cpc	r23, r1
    432a:	28 f4       	brcc	.+10     	; 0x4336 <wheel_unit+0x64>
    432c:	61 15       	cp	r22, r1
    432e:	71 05       	cpc	r23, r1
    4330:	21 f0       	breq	.+8      	; 0x433a <wheel_unit+0x68>
    4332:	86 2f       	mov	r24, r22
    4334:	08 95       	ret
    4336:	8f e7       	ldi	r24, 0x7F	; 127
    4338:	08 95       	ret
    433a:	81 e0       	ldi	r24, 0x01	; 1
    433c:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    433e:	61 e0       	ldi	r22, 0x01	; 1
    4340:	70 e0       	ldi	r23, 0x00	; 0
    4342:	f4 cf       	rjmp	.-24     	; 0x432c <wheel_unit+0x5a>

00004344 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    4344:	80 3f       	cpi	r24, 0xF0	; 240
    4346:	21 f4       	brne	.+8      	; 0x4350 <mousekey_on+0xc>
    4348:	0e 94 21 21 	call	0x4242	; 0x4242 <move_unit>
    434c:	81 95       	neg	r24
    434e:	04 c0       	rjmp	.+8      	; 0x4358 <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    4350:	81 3f       	cpi	r24, 0xF1	; 241
    4352:	29 f4       	brne	.+10     	; 0x435e <mousekey_on+0x1a>
    4354:	0e 94 21 21 	call	0x4242	; 0x4242 <move_unit>
    4358:	80 93 cd 01 	sts	0x01CD, r24
    435c:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    435e:	82 3f       	cpi	r24, 0xF2	; 242
    4360:	21 f4       	brne	.+8      	; 0x436a <mousekey_on+0x26>
    4362:	0e 94 21 21 	call	0x4242	; 0x4242 <move_unit>
    4366:	81 95       	neg	r24
    4368:	04 c0       	rjmp	.+8      	; 0x4372 <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    436a:	83 3f       	cpi	r24, 0xF3	; 243
    436c:	29 f4       	brne	.+10     	; 0x4378 <mousekey_on+0x34>
    436e:	0e 94 21 21 	call	0x4242	; 0x4242 <move_unit>
    4372:	80 93 cc 01 	sts	0x01CC, r24
    4376:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    4378:	89 3f       	cpi	r24, 0xF9	; 249
    437a:	19 f4       	brne	.+6      	; 0x4382 <mousekey_on+0x3e>
    437c:	0e 94 69 21 	call	0x42d2	; 0x42d2 <wheel_unit>
    4380:	05 c0       	rjmp	.+10     	; 0x438c <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    4382:	8a 3f       	cpi	r24, 0xFA	; 250
    4384:	31 f4       	brne	.+12     	; 0x4392 <mousekey_on+0x4e>
    4386:	0e 94 69 21 	call	0x42d2	; 0x42d2 <wheel_unit>
    438a:	81 95       	neg	r24
    438c:	80 93 ce 01 	sts	0x01CE, r24
    4390:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    4392:	8b 3f       	cpi	r24, 0xFB	; 251
    4394:	21 f4       	brne	.+8      	; 0x439e <mousekey_on+0x5a>
    4396:	0e 94 69 21 	call	0x42d2	; 0x42d2 <wheel_unit>
    439a:	81 95       	neg	r24
    439c:	04 c0       	rjmp	.+8      	; 0x43a6 <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    439e:	8c 3f       	cpi	r24, 0xFC	; 252
    43a0:	29 f4       	brne	.+10     	; 0x43ac <mousekey_on+0x68>
    43a2:	0e 94 69 21 	call	0x42d2	; 0x42d2 <wheel_unit>
    43a6:	80 93 cf 01 	sts	0x01CF, r24
    43aa:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    43ac:	84 3f       	cpi	r24, 0xF4	; 244
    43ae:	21 f4       	brne	.+8      	; 0x43b8 <mousekey_on+0x74>
    43b0:	80 91 cb 01 	lds	r24, 0x01CB
    43b4:	81 60       	ori	r24, 0x01	; 1
    43b6:	17 c0       	rjmp	.+46     	; 0x43e6 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    43b8:	85 3f       	cpi	r24, 0xF5	; 245
    43ba:	21 f4       	brne	.+8      	; 0x43c4 <mousekey_on+0x80>
    43bc:	80 91 cb 01 	lds	r24, 0x01CB
    43c0:	82 60       	ori	r24, 0x02	; 2
    43c2:	11 c0       	rjmp	.+34     	; 0x43e6 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    43c4:	86 3f       	cpi	r24, 0xF6	; 246
    43c6:	21 f4       	brne	.+8      	; 0x43d0 <mousekey_on+0x8c>
    43c8:	80 91 cb 01 	lds	r24, 0x01CB
    43cc:	84 60       	ori	r24, 0x04	; 4
    43ce:	0b c0       	rjmp	.+22     	; 0x43e6 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    43d0:	87 3f       	cpi	r24, 0xF7	; 247
    43d2:	21 f4       	brne	.+8      	; 0x43dc <mousekey_on+0x98>
    43d4:	80 91 cb 01 	lds	r24, 0x01CB
    43d8:	88 60       	ori	r24, 0x08	; 8
    43da:	05 c0       	rjmp	.+10     	; 0x43e6 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    43dc:	88 3f       	cpi	r24, 0xF8	; 248
    43de:	31 f4       	brne	.+12     	; 0x43ec <mousekey_on+0xa8>
    43e0:	80 91 cb 01 	lds	r24, 0x01CB
    43e4:	80 61       	ori	r24, 0x10	; 16
    43e6:	80 93 cb 01 	sts	0x01CB, r24
    43ea:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    43ec:	8d 3f       	cpi	r24, 0xFD	; 253
    43ee:	21 f4       	brne	.+8      	; 0x43f8 <mousekey_on+0xb4>
    43f0:	80 91 c9 01 	lds	r24, 0x01C9
    43f4:	81 60       	ori	r24, 0x01	; 1
    43f6:	0b c0       	rjmp	.+22     	; 0x440e <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    43f8:	8e 3f       	cpi	r24, 0xFE	; 254
    43fa:	21 f4       	brne	.+8      	; 0x4404 <mousekey_on+0xc0>
    43fc:	80 91 c9 01 	lds	r24, 0x01C9
    4400:	82 60       	ori	r24, 0x02	; 2
    4402:	05 c0       	rjmp	.+10     	; 0x440e <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    4404:	8f 3f       	cpi	r24, 0xFF	; 255
    4406:	29 f4       	brne	.+10     	; 0x4412 <mousekey_on+0xce>
    4408:	80 91 c9 01 	lds	r24, 0x01C9
    440c:	84 60       	ori	r24, 0x04	; 4
    440e:	80 93 c9 01 	sts	0x01C9, r24
    4412:	08 95       	ret

00004414 <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    4414:	80 3f       	cpi	r24, 0xF0	; 240
    4416:	39 f4       	brne	.+14     	; 0x4426 <mousekey_off+0x12>
    4418:	80 91 cd 01 	lds	r24, 0x01CD
    441c:	87 ff       	sbrs	r24, 7
    441e:	6c c0       	rjmp	.+216    	; 0x44f8 <mousekey_off+0xe4>
    4420:	10 92 cd 01 	sts	0x01CD, r1
    4424:	69 c0       	rjmp	.+210    	; 0x44f8 <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    4426:	81 3f       	cpi	r24, 0xF1	; 241
    4428:	29 f4       	brne	.+10     	; 0x4434 <mousekey_off+0x20>
    442a:	80 91 cd 01 	lds	r24, 0x01CD
    442e:	18 16       	cp	r1, r24
    4430:	bc f3       	brlt	.-18     	; 0x4420 <mousekey_off+0xc>
    4432:	62 c0       	rjmp	.+196    	; 0x44f8 <mousekey_off+0xe4>
    4434:	90 91 cc 01 	lds	r25, 0x01CC
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    4438:	82 3f       	cpi	r24, 0xF2	; 242
    443a:	29 f4       	brne	.+10     	; 0x4446 <mousekey_off+0x32>
    443c:	97 ff       	sbrs	r25, 7
    443e:	5c c0       	rjmp	.+184    	; 0x44f8 <mousekey_off+0xe4>
    4440:	10 92 cc 01 	sts	0x01CC, r1
    4444:	59 c0       	rjmp	.+178    	; 0x44f8 <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    4446:	83 3f       	cpi	r24, 0xF3	; 243
    4448:	19 f4       	brne	.+6      	; 0x4450 <mousekey_off+0x3c>
    444a:	19 16       	cp	r1, r25
    444c:	cc f3       	brlt	.-14     	; 0x4440 <mousekey_off+0x2c>
    444e:	54 c0       	rjmp	.+168    	; 0x44f8 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    4450:	89 3f       	cpi	r24, 0xF9	; 249
    4452:	41 f4       	brne	.+16     	; 0x4464 <mousekey_off+0x50>
    4454:	80 91 ce 01 	lds	r24, 0x01CE
    4458:	18 16       	cp	r1, r24
    445a:	0c f0       	brlt	.+2      	; 0x445e <mousekey_off+0x4a>
    445c:	4d c0       	rjmp	.+154    	; 0x44f8 <mousekey_off+0xe4>
    445e:	10 92 ce 01 	sts	0x01CE, r1
    4462:	4a c0       	rjmp	.+148    	; 0x44f8 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    4464:	8a 3f       	cpi	r24, 0xFA	; 250
    4466:	29 f4       	brne	.+10     	; 0x4472 <mousekey_off+0x5e>
    4468:	80 91 ce 01 	lds	r24, 0x01CE
    446c:	87 ff       	sbrs	r24, 7
    446e:	44 c0       	rjmp	.+136    	; 0x44f8 <mousekey_off+0xe4>
    4470:	f6 cf       	rjmp	.-20     	; 0x445e <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    4472:	8b 3f       	cpi	r24, 0xFB	; 251
    4474:	39 f4       	brne	.+14     	; 0x4484 <mousekey_off+0x70>
    4476:	80 91 cf 01 	lds	r24, 0x01CF
    447a:	87 ff       	sbrs	r24, 7
    447c:	3d c0       	rjmp	.+122    	; 0x44f8 <mousekey_off+0xe4>
    447e:	10 92 cf 01 	sts	0x01CF, r1
    4482:	3a c0       	rjmp	.+116    	; 0x44f8 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    4484:	8c 3f       	cpi	r24, 0xFC	; 252
    4486:	29 f4       	brne	.+10     	; 0x4492 <mousekey_off+0x7e>
    4488:	80 91 cf 01 	lds	r24, 0x01CF
    448c:	18 16       	cp	r1, r24
    448e:	bc f3       	brlt	.-18     	; 0x447e <mousekey_off+0x6a>
    4490:	33 c0       	rjmp	.+102    	; 0x44f8 <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    4492:	84 3f       	cpi	r24, 0xF4	; 244
    4494:	21 f4       	brne	.+8      	; 0x449e <mousekey_off+0x8a>
    4496:	80 91 cb 01 	lds	r24, 0x01CB
    449a:	8e 7f       	andi	r24, 0xFE	; 254
    449c:	17 c0       	rjmp	.+46     	; 0x44cc <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    449e:	85 3f       	cpi	r24, 0xF5	; 245
    44a0:	21 f4       	brne	.+8      	; 0x44aa <mousekey_off+0x96>
    44a2:	80 91 cb 01 	lds	r24, 0x01CB
    44a6:	8d 7f       	andi	r24, 0xFD	; 253
    44a8:	11 c0       	rjmp	.+34     	; 0x44cc <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    44aa:	86 3f       	cpi	r24, 0xF6	; 246
    44ac:	21 f4       	brne	.+8      	; 0x44b6 <mousekey_off+0xa2>
    44ae:	80 91 cb 01 	lds	r24, 0x01CB
    44b2:	8b 7f       	andi	r24, 0xFB	; 251
    44b4:	0b c0       	rjmp	.+22     	; 0x44cc <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    44b6:	87 3f       	cpi	r24, 0xF7	; 247
    44b8:	21 f4       	brne	.+8      	; 0x44c2 <mousekey_off+0xae>
    44ba:	80 91 cb 01 	lds	r24, 0x01CB
    44be:	87 7f       	andi	r24, 0xF7	; 247
    44c0:	05 c0       	rjmp	.+10     	; 0x44cc <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    44c2:	88 3f       	cpi	r24, 0xF8	; 248
    44c4:	31 f4       	brne	.+12     	; 0x44d2 <mousekey_off+0xbe>
    44c6:	80 91 cb 01 	lds	r24, 0x01CB
    44ca:	8f 7e       	andi	r24, 0xEF	; 239
    44cc:	80 93 cb 01 	sts	0x01CB, r24
    44d0:	13 c0       	rjmp	.+38     	; 0x44f8 <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    44d2:	8d 3f       	cpi	r24, 0xFD	; 253
    44d4:	21 f4       	brne	.+8      	; 0x44de <mousekey_off+0xca>
    44d6:	80 91 c9 01 	lds	r24, 0x01C9
    44da:	8e 7f       	andi	r24, 0xFE	; 254
    44dc:	0b c0       	rjmp	.+22     	; 0x44f4 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    44de:	8e 3f       	cpi	r24, 0xFE	; 254
    44e0:	21 f4       	brne	.+8      	; 0x44ea <mousekey_off+0xd6>
    44e2:	80 91 c9 01 	lds	r24, 0x01C9
    44e6:	8d 7f       	andi	r24, 0xFD	; 253
    44e8:	05 c0       	rjmp	.+10     	; 0x44f4 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    44ea:	8f 3f       	cpi	r24, 0xFF	; 255
    44ec:	29 f4       	brne	.+10     	; 0x44f8 <mousekey_off+0xe4>
    44ee:	80 91 c9 01 	lds	r24, 0x01C9
    44f2:	8b 7f       	andi	r24, 0xFB	; 251
    44f4:	80 93 c9 01 	sts	0x01C9, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    44f8:	80 91 cc 01 	lds	r24, 0x01CC
    44fc:	81 11       	cpse	r24, r1
    44fe:	0e c0       	rjmp	.+28     	; 0x451c <mousekey_off+0x108>
    4500:	80 91 cd 01 	lds	r24, 0x01CD
    4504:	81 11       	cpse	r24, r1
    4506:	0a c0       	rjmp	.+20     	; 0x451c <mousekey_off+0x108>
    4508:	80 91 ce 01 	lds	r24, 0x01CE
    450c:	81 11       	cpse	r24, r1
    450e:	06 c0       	rjmp	.+12     	; 0x451c <mousekey_off+0x108>
    4510:	80 91 cf 01 	lds	r24, 0x01CF
    4514:	81 11       	cpse	r24, r1
    4516:	02 c0       	rjmp	.+4      	; 0x451c <mousekey_off+0x108>
        mousekey_repeat = 0;
    4518:	10 92 ca 01 	sts	0x01CA, r1
    451c:	08 95       	ret

0000451e <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    451e:	80 91 c1 01 	lds	r24, 0x01C1
    4522:	83 ff       	sbrs	r24, 3
    4524:	7e c0       	rjmp	.+252    	; 0x4622 <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    4526:	80 eb       	ldi	r24, 0xB0	; 176
    4528:	94 e0       	ldi	r25, 0x04	; 4
    452a:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    phex(mouse_report.buttons); print("|");
    452e:	80 91 cb 01 	lds	r24, 0x01CB
    4532:	1f 92       	push	r1
    4534:	8f 93       	push	r24
    4536:	8b ea       	ldi	r24, 0xAB	; 171
    4538:	94 e0       	ldi	r25, 0x04	; 4
    453a:	9f 93       	push	r25
    453c:	8f 93       	push	r24
    453e:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    4542:	89 ea       	ldi	r24, 0xA9	; 169
    4544:	94 e0       	ldi	r25, 0x04	; 4
    4546:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    print_decs(mouse_report.x); print(" ");
    454a:	20 91 cc 01 	lds	r18, 0x01CC
    454e:	82 2f       	mov	r24, r18
    4550:	99 27       	eor	r25, r25
    4552:	87 fd       	sbrc	r24, 7
    4554:	90 95       	com	r25
    4556:	9f 93       	push	r25
    4558:	2f 93       	push	r18
    455a:	86 ea       	ldi	r24, 0xA6	; 166
    455c:	94 e0       	ldi	r25, 0x04	; 4
    455e:	9f 93       	push	r25
    4560:	8f 93       	push	r24
    4562:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    4566:	84 ea       	ldi	r24, 0xA4	; 164
    4568:	94 e0       	ldi	r25, 0x04	; 4
    456a:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    print_decs(mouse_report.y); print(" ");
    456e:	20 91 cd 01 	lds	r18, 0x01CD
    4572:	82 2f       	mov	r24, r18
    4574:	99 27       	eor	r25, r25
    4576:	87 fd       	sbrc	r24, 7
    4578:	90 95       	com	r25
    457a:	9f 93       	push	r25
    457c:	2f 93       	push	r18
    457e:	81 ea       	ldi	r24, 0xA1	; 161
    4580:	94 e0       	ldi	r25, 0x04	; 4
    4582:	9f 93       	push	r25
    4584:	8f 93       	push	r24
    4586:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    458a:	8f e9       	ldi	r24, 0x9F	; 159
    458c:	94 e0       	ldi	r25, 0x04	; 4
    458e:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    print_decs(mouse_report.v); print(" ");
    4592:	20 91 ce 01 	lds	r18, 0x01CE
    4596:	82 2f       	mov	r24, r18
    4598:	99 27       	eor	r25, r25
    459a:	87 fd       	sbrc	r24, 7
    459c:	90 95       	com	r25
    459e:	9f 93       	push	r25
    45a0:	2f 93       	push	r18
    45a2:	8c e9       	ldi	r24, 0x9C	; 156
    45a4:	94 e0       	ldi	r25, 0x04	; 4
    45a6:	9f 93       	push	r25
    45a8:	8f 93       	push	r24
    45aa:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    45ae:	8a e9       	ldi	r24, 0x9A	; 154
    45b0:	94 e0       	ldi	r25, 0x04	; 4
    45b2:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    print_decs(mouse_report.h); print("](");
    45b6:	20 91 cf 01 	lds	r18, 0x01CF
    45ba:	82 2f       	mov	r24, r18
    45bc:	99 27       	eor	r25, r25
    45be:	87 fd       	sbrc	r24, 7
    45c0:	90 95       	com	r25
    45c2:	9f 93       	push	r25
    45c4:	2f 93       	push	r18
    45c6:	87 e9       	ldi	r24, 0x97	; 151
    45c8:	94 e0       	ldi	r25, 0x04	; 4
    45ca:	9f 93       	push	r25
    45cc:	8f 93       	push	r24
    45ce:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    45d2:	84 e9       	ldi	r24, 0x94	; 148
    45d4:	94 e0       	ldi	r25, 0x04	; 4
    45d6:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    print_dec(mousekey_repeat); print("/");
    45da:	80 91 ca 01 	lds	r24, 0x01CA
    45de:	1f 92       	push	r1
    45e0:	8f 93       	push	r24
    45e2:	81 e9       	ldi	r24, 0x91	; 145
    45e4:	94 e0       	ldi	r25, 0x04	; 4
    45e6:	9f 93       	push	r25
    45e8:	8f 93       	push	r24
    45ea:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    45ee:	8f e8       	ldi	r24, 0x8F	; 143
    45f0:	94 e0       	ldi	r25, 0x04	; 4
    45f2:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    print_dec(mousekey_accel); print(")\n");
    45f6:	80 91 c9 01 	lds	r24, 0x01C9
    45fa:	1f 92       	push	r1
    45fc:	8f 93       	push	r24
    45fe:	8c e8       	ldi	r24, 0x8C	; 140
    4600:	94 e0       	ldi	r25, 0x04	; 4
    4602:	9f 93       	push	r25
    4604:	8f 93       	push	r24
    4606:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    460a:	89 e8       	ldi	r24, 0x89	; 137
    460c:	94 e0       	ldi	r25, 0x04	; 4
    460e:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    4612:	8d b7       	in	r24, 0x3d	; 61
    4614:	9e b7       	in	r25, 0x3e	; 62
    4616:	4c 96       	adiw	r24, 0x1c	; 28
    4618:	0f b6       	in	r0, 0x3f	; 63
    461a:	f8 94       	cli
    461c:	9e bf       	out	0x3e, r25	; 62
    461e:	0f be       	out	0x3f, r0	; 63
    4620:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    4622:	8b ec       	ldi	r24, 0xCB	; 203
    4624:	91 e0       	ldi	r25, 0x01	; 1
    4626:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <host_mouse_send>
    last_timer = timer_read();
    462a:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <timer_read>
    462e:	90 93 c8 01 	sts	0x01C8, r25
    4632:	80 93 c7 01 	sts	0x01C7, r24
    4636:	08 95       	ret

00004638 <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    4638:	1f 93       	push	r17
    463a:	cf 93       	push	r28
    463c:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    463e:	80 91 c7 01 	lds	r24, 0x01C7
    4642:	90 91 c8 01 	lds	r25, 0x01C8
    4646:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <timer_elapsed>
    464a:	40 91 ca 01 	lds	r20, 0x01CA
    464e:	44 23       	and	r20, r20
    4650:	21 f0       	breq	.+8      	; 0x465a <mousekey_task+0x22>
    4652:	20 91 13 01 	lds	r18, 0x0113
    4656:	30 e0       	ldi	r19, 0x00	; 0
    4658:	06 c0       	rjmp	.+12     	; 0x4666 <mousekey_task+0x2e>
    465a:	20 91 14 01 	lds	r18, 0x0114
    465e:	5a e0       	ldi	r21, 0x0A	; 10
    4660:	25 9f       	mul	r18, r21
    4662:	90 01       	movw	r18, r0
    4664:	11 24       	eor	r1, r1
    4666:	82 17       	cp	r24, r18
    4668:	93 07       	cpc	r25, r19
    466a:	08 f4       	brcc	.+2      	; 0x466e <mousekey_task+0x36>
    466c:	82 c0       	rjmp	.+260    	; 0x4772 <mousekey_task+0x13a>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    466e:	80 91 cc 01 	lds	r24, 0x01CC
    4672:	10 91 cd 01 	lds	r17, 0x01CD
    4676:	d0 91 ce 01 	lds	r29, 0x01CE
    467a:	c0 91 cf 01 	lds	r28, 0x01CF
    467e:	81 11       	cpse	r24, r1
    4680:	07 c0       	rjmp	.+14     	; 0x4690 <mousekey_task+0x58>
    4682:	11 11       	cpse	r17, r1
    4684:	05 c0       	rjmp	.+10     	; 0x4690 <mousekey_task+0x58>
    4686:	d1 11       	cpse	r29, r1
    4688:	03 c0       	rjmp	.+6      	; 0x4690 <mousekey_task+0x58>
    468a:	cc 23       	and	r28, r28
    468c:	09 f4       	brne	.+2      	; 0x4690 <mousekey_task+0x58>
    468e:	71 c0       	rjmp	.+226    	; 0x4772 <mousekey_task+0x13a>
        return;

    if (mousekey_repeat != UINT8_MAX)
    4690:	4f 3f       	cpi	r20, 0xFF	; 255
    4692:	19 f0       	breq	.+6      	; 0x469a <mousekey_task+0x62>
        mousekey_repeat++;
    4694:	4f 5f       	subi	r20, 0xFF	; 255
    4696:	40 93 ca 01 	sts	0x01CA, r20


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    469a:	18 16       	cp	r1, r24
    469c:	24 f4       	brge	.+8      	; 0x46a6 <mousekey_task+0x6e>
    469e:	0e 94 21 21 	call	0x4242	; 0x4242 <move_unit>
    46a2:	80 93 cc 01 	sts	0x01CC, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    46a6:	80 91 cc 01 	lds	r24, 0x01CC
    46aa:	87 ff       	sbrs	r24, 7
    46ac:	05 c0       	rjmp	.+10     	; 0x46b8 <mousekey_task+0x80>
    46ae:	0e 94 21 21 	call	0x4242	; 0x4242 <move_unit>
    46b2:	81 95       	neg	r24
    46b4:	80 93 cc 01 	sts	0x01CC, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    46b8:	11 16       	cp	r1, r17
    46ba:	24 f4       	brge	.+8      	; 0x46c4 <mousekey_task+0x8c>
    46bc:	0e 94 21 21 	call	0x4242	; 0x4242 <move_unit>
    46c0:	80 93 cd 01 	sts	0x01CD, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    46c4:	80 91 cd 01 	lds	r24, 0x01CD
    46c8:	87 ff       	sbrs	r24, 7
    46ca:	05 c0       	rjmp	.+10     	; 0x46d6 <mousekey_task+0x9e>
    46cc:	0e 94 21 21 	call	0x4242	; 0x4242 <move_unit>
    46d0:	81 95       	neg	r24
    46d2:	80 93 cd 01 	sts	0x01CD, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    46d6:	60 91 cc 01 	lds	r22, 0x01CC
    46da:	66 23       	and	r22, r22
    46dc:	39 f1       	breq	.+78     	; 0x472c <mousekey_task+0xf4>
    46de:	10 91 cd 01 	lds	r17, 0x01CD
    46e2:	11 23       	and	r17, r17
    46e4:	19 f1       	breq	.+70     	; 0x472c <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    46e6:	77 27       	eor	r23, r23
    46e8:	67 fd       	sbrc	r22, 7
    46ea:	70 95       	com	r23
    46ec:	87 2f       	mov	r24, r23
    46ee:	97 2f       	mov	r25, r23
    46f0:	0e 94 18 29 	call	0x5230	; 0x5230 <__floatsisf>
    46f4:	23 e3       	ldi	r18, 0x33	; 51
    46f6:	33 e3       	ldi	r19, 0x33	; 51
    46f8:	43 e3       	ldi	r20, 0x33	; 51
    46fa:	5f e3       	ldi	r21, 0x3F	; 63
    46fc:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <__mulsf3>
    4700:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__fixsfsi>
    4704:	60 93 cc 01 	sts	0x01CC, r22
        mouse_report.y *= 0.7;
    4708:	61 2f       	mov	r22, r17
    470a:	77 27       	eor	r23, r23
    470c:	67 fd       	sbrc	r22, 7
    470e:	70 95       	com	r23
    4710:	87 2f       	mov	r24, r23
    4712:	97 2f       	mov	r25, r23
    4714:	0e 94 18 29 	call	0x5230	; 0x5230 <__floatsisf>
    4718:	23 e3       	ldi	r18, 0x33	; 51
    471a:	33 e3       	ldi	r19, 0x33	; 51
    471c:	43 e3       	ldi	r20, 0x33	; 51
    471e:	5f e3       	ldi	r21, 0x3F	; 63
    4720:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <__mulsf3>
    4724:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__fixsfsi>
    4728:	60 93 cd 01 	sts	0x01CD, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    472c:	1d 16       	cp	r1, r29
    472e:	24 f4       	brge	.+8      	; 0x4738 <mousekey_task+0x100>
    4730:	0e 94 69 21 	call	0x42d2	; 0x42d2 <wheel_unit>
    4734:	80 93 ce 01 	sts	0x01CE, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    4738:	80 91 ce 01 	lds	r24, 0x01CE
    473c:	87 ff       	sbrs	r24, 7
    473e:	05 c0       	rjmp	.+10     	; 0x474a <mousekey_task+0x112>
    4740:	0e 94 69 21 	call	0x42d2	; 0x42d2 <wheel_unit>
    4744:	81 95       	neg	r24
    4746:	80 93 ce 01 	sts	0x01CE, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    474a:	1c 16       	cp	r1, r28
    474c:	24 f4       	brge	.+8      	; 0x4756 <mousekey_task+0x11e>
    474e:	0e 94 69 21 	call	0x42d2	; 0x42d2 <wheel_unit>
    4752:	80 93 cf 01 	sts	0x01CF, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    4756:	80 91 cf 01 	lds	r24, 0x01CF
    475a:	87 ff       	sbrs	r24, 7
    475c:	05 c0       	rjmp	.+10     	; 0x4768 <mousekey_task+0x130>
    475e:	0e 94 69 21 	call	0x42d2	; 0x42d2 <wheel_unit>
    4762:	81 95       	neg	r24
    4764:	80 93 cf 01 	sts	0x01CF, r24

    mousekey_send();
}
    4768:	df 91       	pop	r29
    476a:	cf 91       	pop	r28
    476c:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    476e:	0c 94 8f 22 	jmp	0x451e	; 0x451e <mousekey_send>
}
    4772:	df 91       	pop	r29
    4774:	cf 91       	pop	r28
    4776:	1f 91       	pop	r17
    4778:	08 95       	ret

0000477a <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    477a:	eb ec       	ldi	r30, 0xCB	; 203
    477c:	f1 e0       	ldi	r31, 0x01	; 1
    477e:	85 e0       	ldi	r24, 0x05	; 5
    4780:	df 01       	movw	r26, r30
    4782:	1d 92       	st	X+, r1
    4784:	8a 95       	dec	r24
    4786:	e9 f7       	brne	.-6      	; 0x4782 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    4788:	10 92 ca 01 	sts	0x01CA, r1
    mousekey_accel = 0;
    478c:	10 92 c9 01 	sts	0x01C9, r1
    4790:	08 95       	ret

00004792 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    4792:	83 ed       	ldi	r24, 0xD3	; 211
    4794:	96 e0       	ldi	r25, 0x06	; 6
    4796:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    479a:	1f 92       	push	r1
    479c:	81 e0       	ldi	r24, 0x01	; 1
    479e:	8f 93       	push	r24
    47a0:	1f 92       	push	r1
    47a2:	85 e0       	ldi	r24, 0x05	; 5
    47a4:	8f 93       	push	r24
    47a6:	85 e8       	ldi	r24, 0x85	; 133
    47a8:	96 e0       	ldi	r25, 0x06	; 6
    47aa:	9f 93       	push	r25
    47ac:	8f 93       	push	r24
    47ae:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    47b2:	0f 90       	pop	r0
    47b4:	0f 90       	pop	r0
    47b6:	0f 90       	pop	r0
    47b8:	0f 90       	pop	r0
    47ba:	0f 90       	pop	r0
    47bc:	0f 90       	pop	r0
    47be:	08 95       	ret

000047c0 <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    47c0:	83 30       	cpi	r24, 0x03	; 3
    47c2:	e9 f1       	breq	.+122    	; 0x483e <mousekey_param_inc+0x7e>
    47c4:	28 f4       	brcc	.+10     	; 0x47d0 <mousekey_param_inc+0x10>
    47c6:	81 30       	cpi	r24, 0x01	; 1
    47c8:	61 f0       	breq	.+24     	; 0x47e2 <mousekey_param_inc+0x22>
    47ca:	82 30       	cpi	r24, 0x02	; 2
    47cc:	09 f1       	breq	.+66     	; 0x4810 <mousekey_param_inc+0x50>
    47ce:	08 95       	ret
    47d0:	85 30       	cpi	r24, 0x05	; 5
    47d2:	09 f4       	brne	.+2      	; 0x47d6 <mousekey_param_inc+0x16>
    47d4:	62 c0       	rjmp	.+196    	; 0x489a <mousekey_param_inc+0xda>
    47d6:	08 f4       	brcc	.+2      	; 0x47da <mousekey_param_inc+0x1a>
    47d8:	49 c0       	rjmp	.+146    	; 0x486c <mousekey_param_inc+0xac>
    47da:	86 30       	cpi	r24, 0x06	; 6
    47dc:	09 f4       	brne	.+2      	; 0x47e0 <mousekey_param_inc+0x20>
    47de:	74 c0       	rjmp	.+232    	; 0x48c8 <mousekey_param_inc+0x108>
    47e0:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    47e2:	20 91 14 01 	lds	r18, 0x0114
    47e6:	86 2f       	mov	r24, r22
    47e8:	90 e0       	ldi	r25, 0x00	; 0
    47ea:	82 0f       	add	r24, r18
    47ec:	91 1d       	adc	r25, r1
    47ee:	8f 3f       	cpi	r24, 0xFF	; 255
    47f0:	91 05       	cpc	r25, r1
    47f2:	20 f4       	brcc	.+8      	; 0x47fc <mousekey_param_inc+0x3c>
                mk_delay += inc;
    47f4:	62 0f       	add	r22, r18
    47f6:	60 93 14 01 	sts	0x0114, r22
    47fa:	03 c0       	rjmp	.+6      	; 0x4802 <mousekey_param_inc+0x42>
            else
                mk_delay = UINT8_MAX;
    47fc:	8f ef       	ldi	r24, 0xFF	; 255
    47fe:	80 93 14 01 	sts	0x0114, r24
            PRINT_SET_VAL(mk_delay);
    4802:	80 91 14 01 	lds	r24, 0x0114
    4806:	1f 92       	push	r1
    4808:	8f 93       	push	r24
    480a:	8e eb       	ldi	r24, 0xBE	; 190
    480c:	95 e0       	ldi	r25, 0x05	; 5
    480e:	72 c0       	rjmp	.+228    	; 0x48f4 <mousekey_param_inc+0x134>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    4810:	20 91 13 01 	lds	r18, 0x0113
    4814:	86 2f       	mov	r24, r22
    4816:	90 e0       	ldi	r25, 0x00	; 0
    4818:	82 0f       	add	r24, r18
    481a:	91 1d       	adc	r25, r1
    481c:	8f 3f       	cpi	r24, 0xFF	; 255
    481e:	91 05       	cpc	r25, r1
    4820:	20 f4       	brcc	.+8      	; 0x482a <mousekey_param_inc+0x6a>
                mk_interval += inc;
    4822:	62 0f       	add	r22, r18
    4824:	60 93 13 01 	sts	0x0113, r22
    4828:	03 c0       	rjmp	.+6      	; 0x4830 <mousekey_param_inc+0x70>
            else
                mk_interval = UINT8_MAX;
    482a:	8f ef       	ldi	r24, 0xFF	; 255
    482c:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_interval);
    4830:	80 91 13 01 	lds	r24, 0x0113
    4834:	1f 92       	push	r1
    4836:	8f 93       	push	r24
    4838:	8c ea       	ldi	r24, 0xAC	; 172
    483a:	95 e0       	ldi	r25, 0x05	; 5
    483c:	5b c0       	rjmp	.+182    	; 0x48f4 <mousekey_param_inc+0x134>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    483e:	20 91 12 01 	lds	r18, 0x0112
    4842:	86 2f       	mov	r24, r22
    4844:	90 e0       	ldi	r25, 0x00	; 0
    4846:	82 0f       	add	r24, r18
    4848:	91 1d       	adc	r25, r1
    484a:	8f 3f       	cpi	r24, 0xFF	; 255
    484c:	91 05       	cpc	r25, r1
    484e:	20 f4       	brcc	.+8      	; 0x4858 <mousekey_param_inc+0x98>
                mk_max_speed += inc;
    4850:	62 0f       	add	r22, r18
    4852:	60 93 12 01 	sts	0x0112, r22
    4856:	03 c0       	rjmp	.+6      	; 0x485e <mousekey_param_inc+0x9e>
            else
                mk_max_speed = UINT8_MAX;
    4858:	8f ef       	ldi	r24, 0xFF	; 255
    485a:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_max_speed);
    485e:	80 91 12 01 	lds	r24, 0x0112
    4862:	1f 92       	push	r1
    4864:	8f 93       	push	r24
    4866:	89 e9       	ldi	r24, 0x99	; 153
    4868:	95 e0       	ldi	r25, 0x05	; 5
    486a:	44 c0       	rjmp	.+136    	; 0x48f4 <mousekey_param_inc+0x134>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    486c:	20 91 11 01 	lds	r18, 0x0111
    4870:	86 2f       	mov	r24, r22
    4872:	90 e0       	ldi	r25, 0x00	; 0
    4874:	82 0f       	add	r24, r18
    4876:	91 1d       	adc	r25, r1
    4878:	8f 3f       	cpi	r24, 0xFF	; 255
    487a:	91 05       	cpc	r25, r1
    487c:	20 f4       	brcc	.+8      	; 0x4886 <mousekey_param_inc+0xc6>
                mk_time_to_max += inc;
    487e:	62 0f       	add	r22, r18
    4880:	60 93 11 01 	sts	0x0111, r22
    4884:	03 c0       	rjmp	.+6      	; 0x488c <mousekey_param_inc+0xcc>
            else
                mk_time_to_max = UINT8_MAX;
    4886:	8f ef       	ldi	r24, 0xFF	; 255
    4888:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_time_to_max);
    488c:	80 91 11 01 	lds	r24, 0x0111
    4890:	1f 92       	push	r1
    4892:	8f 93       	push	r24
    4894:	84 e8       	ldi	r24, 0x84	; 132
    4896:	95 e0       	ldi	r25, 0x05	; 5
    4898:	2d c0       	rjmp	.+90     	; 0x48f4 <mousekey_param_inc+0x134>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    489a:	20 91 10 01 	lds	r18, 0x0110
    489e:	86 2f       	mov	r24, r22
    48a0:	90 e0       	ldi	r25, 0x00	; 0
    48a2:	82 0f       	add	r24, r18
    48a4:	91 1d       	adc	r25, r1
    48a6:	8f 3f       	cpi	r24, 0xFF	; 255
    48a8:	91 05       	cpc	r25, r1
    48aa:	20 f4       	brcc	.+8      	; 0x48b4 <mousekey_param_inc+0xf4>
                mk_wheel_max_speed += inc;
    48ac:	62 0f       	add	r22, r18
    48ae:	60 93 10 01 	sts	0x0110, r22
    48b2:	03 c0       	rjmp	.+6      	; 0x48ba <mousekey_param_inc+0xfa>
            else
                mk_wheel_max_speed = UINT8_MAX;
    48b4:	8f ef       	ldi	r24, 0xFF	; 255
    48b6:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    48ba:	80 91 10 01 	lds	r24, 0x0110
    48be:	1f 92       	push	r1
    48c0:	8f 93       	push	r24
    48c2:	8b e6       	ldi	r24, 0x6B	; 107
    48c4:	95 e0       	ldi	r25, 0x05	; 5
    48c6:	16 c0       	rjmp	.+44     	; 0x48f4 <mousekey_param_inc+0x134>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    48c8:	20 91 0f 01 	lds	r18, 0x010F
    48cc:	86 2f       	mov	r24, r22
    48ce:	90 e0       	ldi	r25, 0x00	; 0
    48d0:	82 0f       	add	r24, r18
    48d2:	91 1d       	adc	r25, r1
    48d4:	8f 3f       	cpi	r24, 0xFF	; 255
    48d6:	91 05       	cpc	r25, r1
    48d8:	20 f4       	brcc	.+8      	; 0x48e2 <mousekey_param_inc+0x122>
                mk_wheel_time_to_max += inc;
    48da:	62 0f       	add	r22, r18
    48dc:	60 93 0f 01 	sts	0x010F, r22
    48e0:	03 c0       	rjmp	.+6      	; 0x48e8 <mousekey_param_inc+0x128>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    48e2:	8f ef       	ldi	r24, 0xFF	; 255
    48e4:	80 93 0f 01 	sts	0x010F, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    48e8:	80 91 0f 01 	lds	r24, 0x010F
    48ec:	1f 92       	push	r1
    48ee:	8f 93       	push	r24
    48f0:	80 e5       	ldi	r24, 0x50	; 80
    48f2:	95 e0       	ldi	r25, 0x05	; 5
    48f4:	9f 93       	push	r25
    48f6:	8f 93       	push	r24
    48f8:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
            break;
    48fc:	0f 90       	pop	r0
    48fe:	0f 90       	pop	r0
    4900:	0f 90       	pop	r0
    4902:	0f 90       	pop	r0
    4904:	08 95       	ret

00004906 <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    4906:	83 30       	cpi	r24, 0x03	; 3
    4908:	81 f1       	breq	.+96     	; 0x496a <mousekey_param_dec+0x64>
    490a:	28 f4       	brcc	.+10     	; 0x4916 <mousekey_param_dec+0x10>
    490c:	81 30       	cpi	r24, 0x01	; 1
    490e:	59 f0       	breq	.+22     	; 0x4926 <mousekey_param_dec+0x20>
    4910:	82 30       	cpi	r24, 0x02	; 2
    4912:	d1 f0       	breq	.+52     	; 0x4948 <mousekey_param_dec+0x42>
    4914:	08 95       	ret
    4916:	85 30       	cpi	r24, 0x05	; 5
    4918:	09 f4       	brne	.+2      	; 0x491c <mousekey_param_dec+0x16>
    491a:	49 c0       	rjmp	.+146    	; 0x49ae <mousekey_param_dec+0xa8>
    491c:	b8 f1       	brcs	.+110    	; 0x498c <mousekey_param_dec+0x86>
    491e:	86 30       	cpi	r24, 0x06	; 6
    4920:	09 f4       	brne	.+2      	; 0x4924 <mousekey_param_dec+0x1e>
    4922:	56 c0       	rjmp	.+172    	; 0x49d0 <mousekey_param_dec+0xca>
    4924:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    4926:	80 91 14 01 	lds	r24, 0x0114
    492a:	68 17       	cp	r22, r24
    492c:	20 f4       	brcc	.+8      	; 0x4936 <mousekey_param_dec+0x30>
                mk_delay -= dec;
    492e:	86 1b       	sub	r24, r22
    4930:	80 93 14 01 	sts	0x0114, r24
    4934:	02 c0       	rjmp	.+4      	; 0x493a <mousekey_param_dec+0x34>
            else
                mk_delay = 0;
    4936:	10 92 14 01 	sts	0x0114, r1
            PRINT_SET_VAL(mk_delay);
    493a:	80 91 14 01 	lds	r24, 0x0114
    493e:	1f 92       	push	r1
    4940:	8f 93       	push	r24
    4942:	81 e4       	ldi	r24, 0x41	; 65
    4944:	95 e0       	ldi	r25, 0x05	; 5
    4946:	54 c0       	rjmp	.+168    	; 0x49f0 <mousekey_param_dec+0xea>
            break;
        case 2:
            if (mk_interval > dec)
    4948:	80 91 13 01 	lds	r24, 0x0113
    494c:	68 17       	cp	r22, r24
    494e:	20 f4       	brcc	.+8      	; 0x4958 <mousekey_param_dec+0x52>
                mk_interval -= dec;
    4950:	86 1b       	sub	r24, r22
    4952:	80 93 13 01 	sts	0x0113, r24
    4956:	02 c0       	rjmp	.+4      	; 0x495c <mousekey_param_dec+0x56>
            else
                mk_interval = 0;
    4958:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_interval);
    495c:	80 91 13 01 	lds	r24, 0x0113
    4960:	1f 92       	push	r1
    4962:	8f 93       	push	r24
    4964:	8f e2       	ldi	r24, 0x2F	; 47
    4966:	95 e0       	ldi	r25, 0x05	; 5
    4968:	43 c0       	rjmp	.+134    	; 0x49f0 <mousekey_param_dec+0xea>
            break;
        case 3:
            if (mk_max_speed > dec)
    496a:	80 91 12 01 	lds	r24, 0x0112
    496e:	68 17       	cp	r22, r24
    4970:	20 f4       	brcc	.+8      	; 0x497a <mousekey_param_dec+0x74>
                mk_max_speed -= dec;
    4972:	86 1b       	sub	r24, r22
    4974:	80 93 12 01 	sts	0x0112, r24
    4978:	02 c0       	rjmp	.+4      	; 0x497e <mousekey_param_dec+0x78>
            else
                mk_max_speed = 0;
    497a:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_max_speed);
    497e:	80 91 12 01 	lds	r24, 0x0112
    4982:	1f 92       	push	r1
    4984:	8f 93       	push	r24
    4986:	8c e1       	ldi	r24, 0x1C	; 28
    4988:	95 e0       	ldi	r25, 0x05	; 5
    498a:	32 c0       	rjmp	.+100    	; 0x49f0 <mousekey_param_dec+0xea>
            break;
        case 4:
            if (mk_time_to_max > dec)
    498c:	80 91 11 01 	lds	r24, 0x0111
    4990:	68 17       	cp	r22, r24
    4992:	20 f4       	brcc	.+8      	; 0x499c <mousekey_param_dec+0x96>
                mk_time_to_max -= dec;
    4994:	86 1b       	sub	r24, r22
    4996:	80 93 11 01 	sts	0x0111, r24
    499a:	02 c0       	rjmp	.+4      	; 0x49a0 <mousekey_param_dec+0x9a>
            else
                mk_time_to_max = 0;
    499c:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_time_to_max);
    49a0:	80 91 11 01 	lds	r24, 0x0111
    49a4:	1f 92       	push	r1
    49a6:	8f 93       	push	r24
    49a8:	87 e0       	ldi	r24, 0x07	; 7
    49aa:	95 e0       	ldi	r25, 0x05	; 5
    49ac:	21 c0       	rjmp	.+66     	; 0x49f0 <mousekey_param_dec+0xea>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    49ae:	80 91 10 01 	lds	r24, 0x0110
    49b2:	68 17       	cp	r22, r24
    49b4:	20 f4       	brcc	.+8      	; 0x49be <mousekey_param_dec+0xb8>
                mk_wheel_max_speed -= dec;
    49b6:	86 1b       	sub	r24, r22
    49b8:	80 93 10 01 	sts	0x0110, r24
    49bc:	02 c0       	rjmp	.+4      	; 0x49c2 <mousekey_param_dec+0xbc>
            else
                mk_wheel_max_speed = 0;
    49be:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    49c2:	80 91 10 01 	lds	r24, 0x0110
    49c6:	1f 92       	push	r1
    49c8:	8f 93       	push	r24
    49ca:	8e ee       	ldi	r24, 0xEE	; 238
    49cc:	94 e0       	ldi	r25, 0x04	; 4
    49ce:	10 c0       	rjmp	.+32     	; 0x49f0 <mousekey_param_dec+0xea>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    49d0:	80 91 0f 01 	lds	r24, 0x010F
    49d4:	68 17       	cp	r22, r24
    49d6:	20 f4       	brcc	.+8      	; 0x49e0 <mousekey_param_dec+0xda>
                mk_wheel_time_to_max -= dec;
    49d8:	86 1b       	sub	r24, r22
    49da:	80 93 0f 01 	sts	0x010F, r24
    49de:	02 c0       	rjmp	.+4      	; 0x49e4 <mousekey_param_dec+0xde>
            else
                mk_wheel_time_to_max = 0;
    49e0:	10 92 0f 01 	sts	0x010F, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    49e4:	80 91 0f 01 	lds	r24, 0x010F
    49e8:	1f 92       	push	r1
    49ea:	8f 93       	push	r24
    49ec:	83 ed       	ldi	r24, 0xD3	; 211
    49ee:	94 e0       	ldi	r25, 0x04	; 4
    49f0:	9f 93       	push	r25
    49f2:	8f 93       	push	r24
    49f4:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
            break;
    49f8:	0f 90       	pop	r0
    49fa:	0f 90       	pop	r0
    49fc:	0f 90       	pop	r0
    49fe:	0f 90       	pop	r0
    4a00:	08 95       	ret

00004a02 <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    4a02:	cf 93       	push	r28
    4a04:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    4a06:	1f 92       	push	r1
    4a08:	8f 93       	push	r24
    4a0a:	28 ed       	ldi	r18, 0xD8	; 216
    4a0c:	37 e0       	ldi	r19, 0x07	; 7
    4a0e:	3f 93       	push	r19
    4a10:	2f 93       	push	r18
    4a12:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    default_layer_set(1UL<<layer);
    4a16:	61 e0       	ldi	r22, 0x01	; 1
    4a18:	70 e0       	ldi	r23, 0x00	; 0
    4a1a:	80 e0       	ldi	r24, 0x00	; 0
    4a1c:	90 e0       	ldi	r25, 0x00	; 0
    4a1e:	04 c0       	rjmp	.+8      	; 0x4a28 <switch_default_layer+0x26>
    4a20:	66 0f       	add	r22, r22
    4a22:	77 1f       	adc	r23, r23
    4a24:	88 1f       	adc	r24, r24
    4a26:	99 1f       	adc	r25, r25
    4a28:	ca 95       	dec	r28
    4a2a:	d2 f7       	brpl	.-12     	; 0x4a20 <switch_default_layer+0x1e>
    4a2c:	0e 94 a4 1a 	call	0x3548	; 0x3548 <default_layer_set>
    clear_keyboard();
    4a30:	0f 90       	pop	r0
    4a32:	0f 90       	pop	r0
    4a34:	0f 90       	pop	r0
    4a36:	0f 90       	pop	r0
}
    4a38:	cf 91       	pop	r28

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
    4a3a:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <clear_keyboard>

00004a3e <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    4a3e:	cf 93       	push	r28
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4a40:	8b 31       	cpi	r24, 0x1B	; 27
    4a42:	09 f4       	brne	.+2      	; 0x4a46 <command_common+0x8>
    4a44:	cb c1       	rjmp	.+918    	; 0x4ddc <command_common+0x39e>
    4a46:	08 f0       	brcs	.+2      	; 0x4a4a <command_common+0xc>
    4a48:	49 c0       	rjmp	.+146    	; 0x4adc <command_common+0x9e>
    4a4a:	8e 30       	cpi	r24, 0x0E	; 14
    4a4c:	09 f4       	brne	.+2      	; 0x4a50 <command_common+0x12>
    4a4e:	d9 c1       	rjmp	.+946    	; 0x4e02 <command_common+0x3c4>
    4a50:	00 f5       	brcc	.+64     	; 0x4a92 <command_common+0x54>
    4a52:	87 30       	cpi	r24, 0x07	; 7
    4a54:	09 f4       	brne	.+2      	; 0x4a58 <command_common+0x1a>
    4a56:	a9 c1       	rjmp	.+850    	; 0x4daa <command_common+0x36c>
    4a58:	a8 f4       	brcc	.+42     	; 0x4a84 <command_common+0x46>
    4a5a:	86 30       	cpi	r24, 0x06	; 6
    4a5c:	09 f0       	breq	.+2      	; 0x4a60 <command_common+0x22>
    4a5e:	57 c2       	rjmp	.+1198   	; 0x4f0e <command_common+0x4d0>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    4a60:	80 91 c1 01 	lds	r24, 0x01C1
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    4a64:	81 7f       	andi	r24, 0xF1	; 241
    4a66:	8e 7f       	andi	r24, 0xFE	; 254
    4a68:	80 93 c1 01 	sts	0x01C1, r24
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4a6c:	8d ed       	ldi	r24, 0xDD	; 221
    4a6e:	97 e0       	ldi	r25, 0x07	; 7
    4a70:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
    4a74:	87 e1       	ldi	r24, 0x17	; 23
    4a76:	9c e0       	ldi	r25, 0x0C	; 12
    4a78:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
            command_state = CONSOLE;
    4a7c:	81 e0       	ldi	r24, 0x01	; 1
    4a7e:	80 93 d1 01 	sts	0x01D1, r24
    4a82:	91 c1       	rjmp	.+802    	; 0x4da6 <command_common+0x368>
static bool command_common(uint8_t code)
{
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4a84:	88 30       	cpi	r24, 0x08	; 8
    4a86:	09 f4       	brne	.+2      	; 0x4a8a <command_common+0x4c>
    4a88:	5b c0       	rjmp	.+182    	; 0x4b40 <command_common+0x102>
    4a8a:	8b 30       	cpi	r24, 0x0B	; 11
    4a8c:	09 f4       	brne	.+2      	; 0x4a90 <command_common+0x52>
    4a8e:	87 c1       	rjmp	.+782    	; 0x4d9e <command_common+0x360>
    4a90:	3e c2       	rjmp	.+1148   	; 0x4f0e <command_common+0x4d0>
    4a92:	81 31       	cpi	r24, 0x11	; 17
    4a94:	09 f4       	brne	.+2      	; 0x4a98 <command_common+0x5a>
    4a96:	23 c2       	rjmp	.+1094   	; 0x4ede <command_common+0x4a0>
    4a98:	20 f4       	brcc	.+8      	; 0x4aa2 <command_common+0x64>
    4a9a:	80 31       	cpi	r24, 0x10	; 16
    4a9c:	09 f4       	brne	.+2      	; 0x4aa0 <command_common+0x62>
    4a9e:	c4 c1       	rjmp	.+904    	; 0x4e28 <command_common+0x3ea>
    4aa0:	36 c2       	rjmp	.+1132   	; 0x4f0e <command_common+0x4d0>
    4aa2:	86 31       	cpi	r24, 0x16	; 22
    4aa4:	09 f4       	brne	.+2      	; 0x4aa8 <command_common+0x6a>
    4aa6:	da c1       	rjmp	.+948    	; 0x4e5c <command_common+0x41e>
    4aa8:	89 31       	cpi	r24, 0x19	; 25
    4aaa:	09 f0       	breq	.+2      	; 0x4aae <command_common+0x70>
    4aac:	30 c2       	rjmp	.+1120   	; 0x4f0e <command_common+0x4d0>
            } else {
                print("\nmouse: off\n");
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    4aae:	8b e8       	ldi	r24, 0x8B	; 139
    4ab0:	9b e0       	ldi	r25, 0x0B	; 11
    4ab2:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    4ab6:	8f e5       	ldi	r24, 0x5F	; 95
    4ab8:	9b e0       	ldi	r25, 0x0B	; 11
    4aba:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    4abe:	8f e1       	ldi	r24, 0x1F	; 31
    4ac0:	9b e0       	ldi	r25, 0x0B	; 11
    4ac2:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    4ac6:	82 ef       	ldi	r24, 0xF2	; 242
    4ac8:	9a e0       	ldi	r25, 0x0A	; 10
    4aca:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
            /* build options */
            print("OPTIONS:"
    4ace:	8d ea       	ldi	r24, 0xAD	; 173
    4ad0:	9a e0       	ldi	r25, 0x0A	; 10
    4ad2:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4ad6:	8f e7       	ldi	r24, 0x7F	; 127
    4ad8:	9a e0       	ldi	r25, 0x0A	; 10
    4ada:	63 c1       	rjmp	.+710    	; 0x4da2 <command_common+0x364>
static bool command_common(uint8_t code)
{
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4adc:	85 33       	cpi	r24, 0x35	; 53
    4ade:	09 f4       	brne	.+2      	; 0x4ae2 <command_common+0xa4>
    4ae0:	10 c2       	rjmp	.+1056   	; 0x4f02 <command_common+0x4c4>
    4ae2:	68 f4       	brcc	.+26     	; 0x4afe <command_common+0xc0>
    4ae4:	87 32       	cpi	r24, 0x27	; 39
    4ae6:	09 f4       	brne	.+2      	; 0x4aea <command_common+0xac>
    4ae8:	0c c2       	rjmp	.+1048   	; 0x4f02 <command_common+0x4c4>
    4aea:	28 f4       	brcc	.+10     	; 0x4af6 <command_common+0xb8>
    4aec:	8e 31       	cpi	r24, 0x1E	; 30
    4aee:	08 f4       	brcc	.+2      	; 0x4af2 <command_common+0xb4>
    4af0:	0e c2       	rjmp	.+1052   	; 0x4f0e <command_common+0x4d0>
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    4af2:	8d 51       	subi	r24, 0x1D	; 29
    4af4:	09 c2       	rjmp	.+1042   	; 0x4f08 <command_common+0x4ca>
static bool command_common(uint8_t code)
{
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4af6:	89 32       	cpi	r24, 0x29	; 41
    4af8:	09 f4       	brne	.+2      	; 0x4afc <command_common+0xbe>
    4afa:	03 c2       	rjmp	.+1030   	; 0x4f02 <command_common+0x4c4>
    4afc:	08 c2       	rjmp	.+1040   	; 0x4f0e <command_common+0x4d0>
    4afe:	83 34       	cpi	r24, 0x43	; 67
    4b00:	38 f4       	brcc	.+14     	; 0x4b10 <command_common+0xd2>
    4b02:	8a 33       	cpi	r24, 0x3A	; 58
    4b04:	08 f0       	brcs	.+2      	; 0x4b08 <command_common+0xca>
    4b06:	ff c1       	rjmp	.+1022   	; 0x4f06 <command_common+0x4c8>
    4b08:	88 33       	cpi	r24, 0x38	; 56
    4b0a:	09 f4       	brne	.+2      	; 0x4b0e <command_common+0xd0>
    4b0c:	48 c1       	rjmp	.+656    	; 0x4d9e <command_common+0x360>
    4b0e:	ff c1       	rjmp	.+1022   	; 0x4f0e <command_common+0x4d0>
    4b10:	83 34       	cpi	r24, 0x43	; 67
    4b12:	09 f4       	brne	.+2      	; 0x4b16 <command_common+0xd8>
    4b14:	f6 c1       	rjmp	.+1004   	; 0x4f02 <command_common+0x4c4>
    4b16:	88 34       	cpi	r24, 0x48	; 72
    4b18:	09 f0       	breq	.+2      	; 0x4b1c <command_common+0xde>
    4b1a:	f9 c1       	rjmp	.+1010   	; 0x4f0e <command_common+0x4d0>
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    4b1c:	0e 94 75 16 	call	0x2cea	; 0x2cea <clear_keyboard>
            print("\n\nbootloader... ");
    4b20:	86 e0       	ldi	r24, 0x06	; 6
    4b22:	9c e0       	ldi	r25, 0x0C	; 12
    4b24:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    4b28:	9f ef       	ldi	r25, 0xFF	; 255
    4b2a:	23 ed       	ldi	r18, 0xD3	; 211
    4b2c:	80 e3       	ldi	r24, 0x30	; 48
    4b2e:	91 50       	subi	r25, 0x01	; 1
    4b30:	20 40       	sbci	r18, 0x00	; 0
    4b32:	80 40       	sbci	r24, 0x00	; 0
    4b34:	e1 f7       	brne	.-8      	; 0x4b2e <command_common+0xf0>
    4b36:	00 c0       	rjmp	.+0      	; 0x4b38 <command_common+0xfa>
    4b38:	00 00       	nop
            wait_ms(1000);
            bootloader_jump(); // not return
    4b3a:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <bootloader_jump>
    4b3e:	33 c1       	rjmp	.+614    	; 0x4da6 <command_common+0x368>
            led_set(host_keyboard_leds());
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    4b40:	8b e1       	ldi	r24, 0x1B	; 27
    4b42:	9c e0       	ldi	r25, 0x0C	; 12
    4b44:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4b48:	8c ed       	ldi	r24, 0xDC	; 220
    4b4a:	99 e0       	ldi	r25, 0x09	; 9
    4b4c:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    4b50:	0e 94 0f 21 	call	0x421e	; 0x421e <eeconfig_read_default_layer>
    4b54:	1f 92       	push	r1
    4b56:	8f 93       	push	r24
    4b58:	89 ed       	ldi	r24, 0xD9	; 217
    4b5a:	99 e0       	ldi	r25, 0x09	; 9
    4b5c:	9f 93       	push	r25
    4b5e:	8f 93       	push	r24
    4b60:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    4b64:	87 ed       	ldi	r24, 0xD7	; 215
    4b66:	99 e0       	ldi	r25, 0x09	; 9
    4b68:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    4b6c:	0e 94 06 21 	call	0x420c	; 0x420c <eeconfig_read_debug>
    4b70:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4b72:	84 ec       	ldi	r24, 0xC4	; 196
    4b74:	99 e0       	ldi	r25, 0x09	; 9
    4b76:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    4b7a:	1f 92       	push	r1
    4b7c:	cf 93       	push	r28
    4b7e:	2f eb       	ldi	r18, 0xBF	; 191
    4b80:	39 e0       	ldi	r19, 0x09	; 9
    4b82:	3f 93       	push	r19
    4b84:	2f 93       	push	r18
    4b86:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    4b8a:	8d eb       	ldi	r24, 0xBD	; 189
    4b8c:	99 e0       	ldi	r25, 0x09	; 9
    4b8e:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4b92:	83 eb       	ldi	r24, 0xB3	; 179
    4b94:	99 e0       	ldi	r25, 0x09	; 9
    4b96:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    4b9a:	8c 2f       	mov	r24, r28
    4b9c:	81 70       	andi	r24, 0x01	; 1
    4b9e:	1f 92       	push	r1
    4ba0:	8f 93       	push	r24
    4ba2:	20 eb       	ldi	r18, 0xB0	; 176
    4ba4:	39 e0       	ldi	r19, 0x09	; 9
    4ba6:	3f 93       	push	r19
    4ba8:	2f 93       	push	r18
    4baa:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    4bae:	8e ea       	ldi	r24, 0xAE	; 174
    4bb0:	99 e0       	ldi	r25, 0x09	; 9
    4bb2:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4bb6:	84 ea       	ldi	r24, 0xA4	; 164
    4bb8:	99 e0       	ldi	r25, 0x09	; 9
    4bba:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    4bbe:	c1 fb       	bst	r28, 1
    4bc0:	88 27       	eor	r24, r24
    4bc2:	80 f9       	bld	r24, 0
    4bc4:	1f 92       	push	r1
    4bc6:	8f 93       	push	r24
    4bc8:	21 ea       	ldi	r18, 0xA1	; 161
    4bca:	39 e0       	ldi	r19, 0x09	; 9
    4bcc:	3f 93       	push	r19
    4bce:	2f 93       	push	r18
    4bd0:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    4bd4:	8f e9       	ldi	r24, 0x9F	; 159
    4bd6:	99 e0       	ldi	r25, 0x09	; 9
    4bd8:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4bdc:	83 e9       	ldi	r24, 0x93	; 147
    4bde:	99 e0       	ldi	r25, 0x09	; 9
    4be0:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    4be4:	c2 fb       	bst	r28, 2
    4be6:	88 27       	eor	r24, r24
    4be8:	80 f9       	bld	r24, 0
    4bea:	1f 92       	push	r1
    4bec:	8f 93       	push	r24
    4bee:	20 e9       	ldi	r18, 0x90	; 144
    4bf0:	39 e0       	ldi	r19, 0x09	; 9
    4bf2:	3f 93       	push	r19
    4bf4:	2f 93       	push	r18
    4bf6:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    4bfa:	8e e8       	ldi	r24, 0x8E	; 142
    4bfc:	99 e0       	ldi	r25, 0x09	; 9
    4bfe:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4c02:	85 e8       	ldi	r24, 0x85	; 133
    4c04:	99 e0       	ldi	r25, 0x09	; 9
    4c06:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    4c0a:	c3 fb       	bst	r28, 3
    4c0c:	cc 27       	eor	r28, r28
    4c0e:	c0 f9       	bld	r28, 0
    4c10:	1f 92       	push	r1
    4c12:	cf 93       	push	r28
    4c14:	82 e8       	ldi	r24, 0x82	; 130
    4c16:	99 e0       	ldi	r25, 0x09	; 9
    4c18:	9f 93       	push	r25
    4c1a:	8f 93       	push	r24
    4c1c:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    4c20:	80 e8       	ldi	r24, 0x80	; 128
    4c22:	99 e0       	ldi	r25, 0x09	; 9
    4c24:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    4c28:	0e 94 18 21 	call	0x4230	; 0x4230 <eeconfig_read_keymap>
    4c2c:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4c2e:	8c e6       	ldi	r24, 0x6C	; 108
    4c30:	99 e0       	ldi	r25, 0x09	; 9
    4c32:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    4c36:	1f 92       	push	r1
    4c38:	cf 93       	push	r28
    4c3a:	27 e6       	ldi	r18, 0x67	; 103
    4c3c:	39 e0       	ldi	r19, 0x09	; 9
    4c3e:	3f 93       	push	r19
    4c40:	2f 93       	push	r18
    4c42:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    4c46:	85 e6       	ldi	r24, 0x65	; 101
    4c48:	99 e0       	ldi	r25, 0x09	; 9
    4c4a:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    4c4e:	8c e4       	ldi	r24, 0x4C	; 76
    4c50:	99 e0       	ldi	r25, 0x09	; 9
    4c52:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    4c56:	8c 2f       	mov	r24, r28
    4c58:	81 70       	andi	r24, 0x01	; 1
    4c5a:	1f 92       	push	r1
    4c5c:	8f 93       	push	r24
    4c5e:	29 e4       	ldi	r18, 0x49	; 73
    4c60:	39 e0       	ldi	r19, 0x09	; 9
    4c62:	3f 93       	push	r19
    4c64:	2f 93       	push	r18
    4c66:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    4c6a:	8d b7       	in	r24, 0x3d	; 61
    4c6c:	9e b7       	in	r25, 0x3e	; 62
    4c6e:	80 96       	adiw	r24, 0x20	; 32
    4c70:	0f b6       	in	r0, 0x3f	; 63
    4c72:	f8 94       	cli
    4c74:	9e bf       	out	0x3e, r25	; 62
    4c76:	0f be       	out	0x3f, r0	; 63
    4c78:	8d bf       	out	0x3d, r24	; 61
    4c7a:	87 e4       	ldi	r24, 0x47	; 71
    4c7c:	99 e0       	ldi	r25, 0x09	; 9
    4c7e:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    4c82:	80 e3       	ldi	r24, 0x30	; 48
    4c84:	99 e0       	ldi	r25, 0x09	; 9
    4c86:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    4c8a:	c1 fb       	bst	r28, 1
    4c8c:	88 27       	eor	r24, r24
    4c8e:	80 f9       	bld	r24, 0
    4c90:	1f 92       	push	r1
    4c92:	8f 93       	push	r24
    4c94:	2d e2       	ldi	r18, 0x2D	; 45
    4c96:	39 e0       	ldi	r19, 0x09	; 9
    4c98:	3f 93       	push	r19
    4c9a:	2f 93       	push	r18
    4c9c:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    4ca0:	8b e2       	ldi	r24, 0x2B	; 43
    4ca2:	99 e0       	ldi	r25, 0x09	; 9
    4ca4:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    4ca8:	89 e1       	ldi	r24, 0x19	; 25
    4caa:	99 e0       	ldi	r25, 0x09	; 9
    4cac:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    4cb0:	c2 fb       	bst	r28, 2
    4cb2:	88 27       	eor	r24, r24
    4cb4:	80 f9       	bld	r24, 0
    4cb6:	1f 92       	push	r1
    4cb8:	8f 93       	push	r24
    4cba:	26 e1       	ldi	r18, 0x16	; 22
    4cbc:	39 e0       	ldi	r19, 0x09	; 9
    4cbe:	3f 93       	push	r19
    4cc0:	2f 93       	push	r18
    4cc2:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    4cc6:	84 e1       	ldi	r24, 0x14	; 20
    4cc8:	99 e0       	ldi	r25, 0x09	; 9
    4cca:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    4cce:	82 e0       	ldi	r24, 0x02	; 2
    4cd0:	99 e0       	ldi	r25, 0x09	; 9
    4cd2:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    4cd6:	c3 fb       	bst	r28, 3
    4cd8:	88 27       	eor	r24, r24
    4cda:	80 f9       	bld	r24, 0
    4cdc:	1f 92       	push	r1
    4cde:	8f 93       	push	r24
    4ce0:	2f ef       	ldi	r18, 0xFF	; 255
    4ce2:	38 e0       	ldi	r19, 0x08	; 8
    4ce4:	3f 93       	push	r19
    4ce6:	2f 93       	push	r18
    4ce8:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    4cec:	8d ef       	ldi	r24, 0xFD	; 253
    4cee:	98 e0       	ldi	r25, 0x08	; 8
    4cf0:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    4cf4:	83 ef       	ldi	r24, 0xF3	; 243
    4cf6:	98 e0       	ldi	r25, 0x08	; 8
    4cf8:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    4cfc:	c4 fb       	bst	r28, 4
    4cfe:	88 27       	eor	r24, r24
    4d00:	80 f9       	bld	r24, 0
    4d02:	1f 92       	push	r1
    4d04:	8f 93       	push	r24
    4d06:	20 ef       	ldi	r18, 0xF0	; 240
    4d08:	38 e0       	ldi	r19, 0x08	; 8
    4d0a:	3f 93       	push	r19
    4d0c:	2f 93       	push	r18
    4d0e:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    4d12:	8e ee       	ldi	r24, 0xEE	; 238
    4d14:	98 e0       	ldi	r25, 0x08	; 8
    4d16:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    4d1a:	8c ed       	ldi	r24, 0xDC	; 220
    4d1c:	98 e0       	ldi	r25, 0x08	; 8
    4d1e:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    4d22:	c5 fb       	bst	r28, 5
    4d24:	88 27       	eor	r24, r24
    4d26:	80 f9       	bld	r24, 0
    4d28:	1f 92       	push	r1
    4d2a:	8f 93       	push	r24
    4d2c:	29 ed       	ldi	r18, 0xD9	; 217
    4d2e:	38 e0       	ldi	r19, 0x08	; 8
    4d30:	3f 93       	push	r19
    4d32:	2f 93       	push	r18
    4d34:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    4d38:	87 ed       	ldi	r24, 0xD7	; 215
    4d3a:	98 e0       	ldi	r25, 0x08	; 8
    4d3c:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    4d40:	8b eb       	ldi	r24, 0xBB	; 187
    4d42:	98 e0       	ldi	r25, 0x08	; 8
    4d44:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    4d48:	c6 fb       	bst	r28, 6
    4d4a:	88 27       	eor	r24, r24
    4d4c:	80 f9       	bld	r24, 0
    4d4e:	1f 92       	push	r1
    4d50:	8f 93       	push	r24
    4d52:	28 eb       	ldi	r18, 0xB8	; 184
    4d54:	38 e0       	ldi	r19, 0x08	; 8
    4d56:	3f 93       	push	r19
    4d58:	2f 93       	push	r18
    4d5a:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    4d5e:	86 eb       	ldi	r24, 0xB6	; 182
    4d60:	98 e0       	ldi	r25, 0x08	; 8
    4d62:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    4d66:	8e ea       	ldi	r24, 0xAE	; 174
    4d68:	98 e0       	ldi	r25, 0x08	; 8
    4d6a:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    4d6e:	c7 fb       	bst	r28, 7
    4d70:	cc 27       	eor	r28, r28
    4d72:	c0 f9       	bld	r28, 0
    4d74:	1f 92       	push	r1
    4d76:	cf 93       	push	r28
    4d78:	8b ea       	ldi	r24, 0xAB	; 171
    4d7a:	98 e0       	ldi	r25, 0x08	; 8
    4d7c:	9f 93       	push	r25
    4d7e:	8f 93       	push	r24
    4d80:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    4d84:	89 ea       	ldi	r24, 0xA9	; 169
    4d86:	98 e0       	ldi	r25, 0x08	; 8
    4d88:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    4d8c:	8d b7       	in	r24, 0x3d	; 61
    4d8e:	9e b7       	in	r25, 0x3e	; 62
    4d90:	4c 96       	adiw	r24, 0x1c	; 28
    4d92:	0f b6       	in	r0, 0x3f	; 63
    4d94:	f8 94       	cli
    4d96:	9e bf       	out	0x3e, r25	; 62
    4d98:	0f be       	out	0x3f, r0	; 63
    4d9a:	8d bf       	out	0x3d, r24	; 61
    4d9c:	04 c0       	rjmp	.+8      	; 0x4da6 <command_common+0x368>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    4d9e:	84 e0       	ldi	r24, 0x04	; 4
    4da0:	98 e0       	ldi	r25, 0x08	; 8
    4da2:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    4da6:	c1 e0       	ldi	r28, 0x01	; 1
    4da8:	b7 c0       	rjmp	.+366    	; 0x4f18 <command_common+0x4da>
            print("\n\nbootloader... ");
            wait_ms(1000);
            bootloader_jump(); // not return
            break;
        case KC_D:
            if (debug_enable) {
    4daa:	80 91 c1 01 	lds	r24, 0x01C1
    4dae:	c8 2f       	mov	r28, r24
    4db0:	c1 70       	andi	r28, 0x01	; 1
    4db2:	80 ff       	sbrs	r24, 0
    4db4:	09 c0       	rjmp	.+18     	; 0x4dc8 <command_common+0x38a>
                print("\ndebug: off\n");
    4db6:	89 ef       	ldi	r24, 0xF9	; 249
    4db8:	9b e0       	ldi	r25, 0x0B	; 11
    4dba:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
                debug_matrix   = false;
    4dbe:	80 91 c1 01 	lds	r24, 0x01C1
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    4dc2:	81 7f       	andi	r24, 0xF1	; 241
    4dc4:	8e 7f       	andi	r24, 0xFE	; 254
    4dc6:	44 c0       	rjmp	.+136    	; 0x4e50 <command_common+0x412>
            } else {
                print("\ndebug: on\n");
    4dc8:	8d ee       	ldi	r24, 0xED	; 237
    4dca:	9b e0       	ldi	r25, 0x0B	; 11
    4dcc:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
                debug_enable   = true;
    4dd0:	80 91 c1 01 	lds	r24, 0x01C1
    4dd4:	81 60       	ori	r24, 0x01	; 1
    4dd6:	80 93 c1 01 	sts	0x01C1, r24
    4dda:	e5 cf       	rjmp	.-54     	; 0x4da6 <command_common+0x368>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    4ddc:	80 91 c1 01 	lds	r24, 0x01C1
    4de0:	81 fb       	bst	r24, 1
    4de2:	cc 27       	eor	r28, r28
    4de4:	c0 f9       	bld	r28, 0
    4de6:	91 e0       	ldi	r25, 0x01	; 1
    4de8:	c9 27       	eor	r28, r25
    4dea:	c0 fb       	bst	r28, 0
    4dec:	81 f9       	bld	r24, 1
    4dee:	80 93 c1 01 	sts	0x01C1, r24
            if (debug_matrix) {
    4df2:	cc 23       	and	r28, r28
    4df4:	19 f0       	breq	.+6      	; 0x4dfc <command_common+0x3be>
                print("\nmatrix: on\n");
    4df6:	80 ee       	ldi	r24, 0xE0	; 224
    4df8:	9b e0       	ldi	r25, 0x0B	; 11
    4dfa:	25 c0       	rjmp	.+74     	; 0x4e46 <command_common+0x408>
                debug_enable = true;
            } else {
                print("\nmatrix: off\n");
    4dfc:	82 ed       	ldi	r24, 0xD2	; 210
    4dfe:	9b e0       	ldi	r25, 0x0B	; 11
    4e00:	d0 cf       	rjmp	.-96     	; 0x4da2 <command_common+0x364>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    4e02:	80 91 c1 01 	lds	r24, 0x01C1
    4e06:	82 fb       	bst	r24, 2
    4e08:	cc 27       	eor	r28, r28
    4e0a:	c0 f9       	bld	r28, 0
    4e0c:	91 e0       	ldi	r25, 0x01	; 1
    4e0e:	c9 27       	eor	r28, r25
    4e10:	c0 fb       	bst	r28, 0
    4e12:	82 f9       	bld	r24, 2
    4e14:	80 93 c1 01 	sts	0x01C1, r24
            if (debug_keyboard) {
    4e18:	cc 23       	and	r28, r28
    4e1a:	19 f0       	breq	.+6      	; 0x4e22 <command_common+0x3e4>
                print("\nkeyboard: on\n");
    4e1c:	83 ec       	ldi	r24, 0xC3	; 195
    4e1e:	9b e0       	ldi	r25, 0x0B	; 11
    4e20:	12 c0       	rjmp	.+36     	; 0x4e46 <command_common+0x408>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    4e22:	83 eb       	ldi	r24, 0xB3	; 179
    4e24:	9b e0       	ldi	r25, 0x0B	; 11
    4e26:	bd cf       	rjmp	.-134    	; 0x4da2 <command_common+0x364>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    4e28:	80 91 c1 01 	lds	r24, 0x01C1
    4e2c:	83 fb       	bst	r24, 3
    4e2e:	cc 27       	eor	r28, r28
    4e30:	c0 f9       	bld	r28, 0
    4e32:	91 e0       	ldi	r25, 0x01	; 1
    4e34:	c9 27       	eor	r28, r25
    4e36:	c0 fb       	bst	r28, 0
    4e38:	83 f9       	bld	r24, 3
    4e3a:	80 93 c1 01 	sts	0x01C1, r24
            if (debug_mouse) {
    4e3e:	cc 23       	and	r28, r28
    4e40:	51 f0       	breq	.+20     	; 0x4e56 <command_common+0x418>
                print("\nmouse: on\n");
    4e42:	87 ea       	ldi	r24, 0xA7	; 167
    4e44:	9b e0       	ldi	r25, 0x0B	; 11
    4e46:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
                debug_enable = true;
    4e4a:	80 91 c1 01 	lds	r24, 0x01C1
    4e4e:	81 60       	ori	r24, 0x01	; 1
    4e50:	80 93 c1 01 	sts	0x01C1, r24
    4e54:	61 c0       	rjmp	.+194    	; 0x4f18 <command_common+0x4da>
            } else {
                print("\nmouse: off\n");
    4e56:	8a e9       	ldi	r24, 0x9A	; 154
    4e58:	9b e0       	ldi	r25, 0x0B	; 11
    4e5a:	a3 cf       	rjmp	.-186    	; 0x4da2 <command_common+0x364>
            // TODO
            );
#endif
            break;
        case KC_S:
            print("\n\t- Status -\n");
    4e5c:	81 e7       	ldi	r24, 0x71	; 113
    4e5e:	9a e0       	ldi	r25, 0x0A	; 10
    4e60:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
            print_val_hex8(host_keyboard_leds());
    4e64:	0e 94 80 10 	call	0x2100	; 0x2100 <host_keyboard_leds>
    4e68:	1f 92       	push	r1
    4e6a:	8f 93       	push	r24
    4e6c:	87 e5       	ldi	r24, 0x57	; 87
    4e6e:	9a e0       	ldi	r25, 0x0A	; 10
    4e70:	9f 93       	push	r25
    4e72:	8f 93       	push	r24
    4e74:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
            print_val_hex8(keyboard_protocol);
    4e78:	80 91 0b 01 	lds	r24, 0x010B
    4e7c:	1f 92       	push	r1
    4e7e:	8f 93       	push	r24
    4e80:	80 e4       	ldi	r24, 0x40	; 64
    4e82:	9a e0       	ldi	r25, 0x0A	; 10
    4e84:	9f 93       	push	r25
    4e86:	8f 93       	push	r24
    4e88:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
            print_val_hex8(keyboard_idle);
    4e8c:	80 91 5e 01 	lds	r24, 0x015E
    4e90:	1f 92       	push	r1
    4e92:	8f 93       	push	r24
    4e94:	8d e2       	ldi	r24, 0x2D	; 45
    4e96:	9a e0       	ldi	r25, 0x0A	; 10
    4e98:	9f 93       	push	r25
    4e9a:	8f 93       	push	r24
    4e9c:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
    4ea0:	80 91 0c 01 	lds	r24, 0x010C
    4ea4:	1f 92       	push	r1
    4ea6:	8f 93       	push	r24
    4ea8:	8a e1       	ldi	r24, 0x1A	; 26
    4eaa:	9a e0       	ldi	r25, 0x0A	; 10
    4eac:	9f 93       	push	r25
    4eae:	8f 93       	push	r24
    4eb0:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
#endif
            print_val_hex32(timer_read32());
    4eb4:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <timer_read32>
    4eb8:	9f 93       	push	r25
    4eba:	8f 93       	push	r24
    4ebc:	7f 93       	push	r23
    4ebe:	6f 93       	push	r22
    4ec0:	83 e0       	ldi	r24, 0x03	; 3
    4ec2:	9a e0       	ldi	r25, 0x0A	; 10
    4ec4:	9f 93       	push	r25
    4ec6:	8f 93       	push	r24
    4ec8:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    4ecc:	8d b7       	in	r24, 0x3d	; 61
    4ece:	9e b7       	in	r25, 0x3e	; 62
    4ed0:	46 96       	adiw	r24, 0x16	; 22
    4ed2:	0f b6       	in	r0, 0x3f	; 63
    4ed4:	f8 94       	cli
    4ed6:	9e bf       	out	0x3e, r25	; 62
    4ed8:	0f be       	out	0x3f, r0	; 63
    4eda:	8d bf       	out	0x3d, r24	; 61
    4edc:	64 cf       	rjmp	.-312    	; 0x4da6 <command_common+0x368>
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    4ede:	0e 94 75 16 	call	0x2cea	; 0x2cea <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    4ee2:	c0 91 0c 01 	lds	r28, 0x010C
    4ee6:	81 e0       	ldi	r24, 0x01	; 1
    4ee8:	c8 27       	eor	r28, r24
    4eea:	c0 93 0c 01 	sts	0x010C, r28
            if (keyboard_nkro) {
    4eee:	cc 23       	and	r28, r28
    4ef0:	29 f0       	breq	.+10     	; 0x4efc <command_common+0x4be>
                print("NKRO: on\n");
    4ef2:	89 ef       	ldi	r24, 0xF9	; 249
    4ef4:	99 e0       	ldi	r25, 0x09	; 9
    4ef6:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    4efa:	0e c0       	rjmp	.+28     	; 0x4f18 <command_common+0x4da>
            } else {
                print("NKRO: off\n");
    4efc:	8e ee       	ldi	r24, 0xEE	; 238
    4efe:	99 e0       	ldi	r25, 0x09	; 9
    4f00:	50 cf       	rjmp	.-352    	; 0x4da2 <command_common+0x364>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    4f02:	80 e0       	ldi	r24, 0x00	; 0
    4f04:	01 c0       	rjmp	.+2      	; 0x4f08 <command_common+0x4ca>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    4f06:	89 53       	subi	r24, 0x39	; 57
    4f08:	0e 94 01 25 	call	0x4a02	; 0x4a02 <switch_default_layer>
    4f0c:	4c cf       	rjmp	.-360    	; 0x4da6 <command_common+0x368>
            break;
        default:
            print("?");
    4f0e:	8c ee       	ldi	r24, 0xEC	; 236
    4f10:	99 e0       	ldi	r25, 0x09	; 9
    4f12:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
            return false;
    4f16:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    4f18:	8c 2f       	mov	r24, r28
    4f1a:	cf 91       	pop	r28
    4f1c:	08 95       	ret

00004f1e <command_extra>:
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    (void)code;
    return false;
}
    4f1e:	80 e0       	ldi	r24, 0x00	; 0
    4f20:	08 95       	ret

00004f22 <command_console_extra>:
bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    (void)code;
    return false;
}
    4f22:	80 e0       	ldi	r24, 0x00	; 0
    4f24:	08 95       	ret

00004f26 <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    4f26:	cf 93       	push	r28
    4f28:	c8 2f       	mov	r28, r24
    switch (command_state) {
    4f2a:	80 91 d1 01 	lds	r24, 0x01D1
    4f2e:	81 30       	cpi	r24, 0x01	; 1
    4f30:	71 f0       	breq	.+28     	; 0x4f4e <command_proc+0x28>
    4f32:	20 f0       	brcs	.+8      	; 0x4f3c <command_proc+0x16>
    4f34:	82 30       	cpi	r24, 0x02	; 2
    4f36:	09 f4       	brne	.+2      	; 0x4f3a <command_proc+0x14>
    4f38:	48 c0       	rjmp	.+144    	; 0x4fca <command_proc+0xa4>
    4f3a:	3f c1       	rjmp	.+638    	; 0x51ba <command_proc+0x294>
        case ONESHOT:
            if (!IS_COMMAND())
    4f3c:	a0 91 0d 01 	lds	r26, 0x010D
    4f40:	b0 91 0e 01 	lds	r27, 0x010E
    4f44:	8c 91       	ld	r24, X
    4f46:	82 32       	cpi	r24, 0x22	; 34
    4f48:	09 f0       	breq	.+2      	; 0x4f4c <command_proc+0x26>
    4f4a:	39 c1       	rjmp	.+626    	; 0x51be <command_proc+0x298>
    4f4c:	07 c0       	rjmp	.+14     	; 0x4f5c <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    4f4e:	a0 91 0d 01 	lds	r26, 0x010D
    4f52:	b0 91 0e 01 	lds	r27, 0x010E
    4f56:	8c 91       	ld	r24, X
    4f58:	82 32       	cpi	r24, 0x22	; 34
    4f5a:	49 f4       	brne	.+18     	; 0x4f6e <command_proc+0x48>
                return (command_extra(code) || command_common(code));
    4f5c:	8c 2f       	mov	r24, r28
    4f5e:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <command_extra>
    4f62:	81 11       	cpse	r24, r1
    4f64:	2f c0       	rjmp	.+94     	; 0x4fc4 <command_proc+0x9e>
    4f66:	8c 2f       	mov	r24, r28
    4f68:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <command_common>
    4f6c:	2c c0       	rjmp	.+88     	; 0x4fc6 <command_proc+0xa0>
            else
                return (command_console_extra(code) || command_console(code));
    4f6e:	8c 2f       	mov	r24, r28
    4f70:	0e 94 91 27 	call	0x4f22	; 0x4f22 <command_console_extra>
    4f74:	81 11       	cpse	r24, r1
    4f76:	26 c0       	rjmp	.+76     	; 0x4fc4 <command_proc+0x9e>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4f78:	c4 31       	cpi	r28, 0x14	; 20
    4f7a:	e1 f0       	breq	.+56     	; 0x4fb4 <command_proc+0x8e>
    4f7c:	70 f4       	brcc	.+28     	; 0x4f9a <command_proc+0x74>
    4f7e:	cb 30       	cpi	r28, 0x0B	; 11
    4f80:	81 f0       	breq	.+32     	; 0x4fa2 <command_proc+0x7c>
    4f82:	c0 31       	cpi	r28, 0x10	; 16
    4f84:	d1 f4       	brne	.+52     	; 0x4fba <command_proc+0x94>
        case KC_ESC:
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    4f86:	0e 94 c9 23 	call	0x4792	; 0x4792 <mousekey_console_help>
            print("M> ");
    4f8a:	80 ed       	ldi	r24, 0xD0	; 208
    4f8c:	97 e0       	ldi	r25, 0x07	; 7
    4f8e:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
            command_state = MOUSEKEY;
    4f92:	82 e0       	ldi	r24, 0x02	; 2
    4f94:	80 93 d1 01 	sts	0x01D1, r24
    4f98:	15 c0       	rjmp	.+42     	; 0x4fc4 <command_proc+0x9e>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4f9a:	c9 32       	cpi	r28, 0x29	; 41
    4f9c:	59 f0       	breq	.+22     	; 0x4fb4 <command_proc+0x8e>
    4f9e:	c8 33       	cpi	r28, 0x38	; 56
    4fa0:	61 f4       	brne	.+24     	; 0x4fba <command_proc+0x94>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4fa2:	8d ed       	ldi	r24, 0xDD	; 221
    4fa4:	97 e0       	ldi	r25, 0x07	; 7
    4fa6:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    4faa:	84 ed       	ldi	r24, 0xD4	; 212
    4fac:	97 e0       	ldi	r25, 0x07	; 7
    4fae:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    4fb2:	08 c0       	rjmp	.+16     	; 0x4fc4 <command_proc+0x9e>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    4fb4:	10 92 d1 01 	sts	0x01D1, r1
    4fb8:	04 c1       	rjmp	.+520    	; 0x51c2 <command_proc+0x29c>
            print("M> ");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    4fba:	8e ec       	ldi	r24, 0xCE	; 206
    4fbc:	97 e0       	ldi	r25, 0x07	; 7
    4fbe:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    4fc2:	ff c0       	rjmp	.+510    	; 0x51c2 <command_proc+0x29c>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    4fc4:	81 e0       	ldi	r24, 0x01	; 1
    4fc6:	81 70       	andi	r24, 0x01	; 1
    4fc8:	fe c0       	rjmp	.+508    	; 0x51c6 <command_proc+0x2a0>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    4fca:	c4 32       	cpi	r28, 0x24	; 36
    4fcc:	28 f5       	brcc	.+74     	; 0x5018 <command_proc+0xf2>
    4fce:	ce 31       	cpi	r28, 0x1E	; 30
    4fd0:	08 f0       	brcs	.+2      	; 0x4fd4 <command_proc+0xae>
    4fd2:	c1 c0       	rjmp	.+386    	; 0x5156 <command_proc+0x230>
    4fd4:	cb 30       	cpi	r28, 0x0B	; 11
    4fd6:	a1 f1       	breq	.+104    	; 0x5040 <command_proc+0x11a>
    4fd8:	d0 f4       	brcc	.+52     	; 0x500e <command_proc+0xe8>
    4fda:	c7 30       	cpi	r28, 0x07	; 7
    4fdc:	09 f0       	breq	.+2      	; 0x4fe0 <command_proc+0xba>
    4fde:	d3 c0       	rjmp	.+422    	; 0x5186 <command_proc+0x260>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    4fe0:	8e e1       	ldi	r24, 0x1E	; 30
    4fe2:	80 93 14 01 	sts	0x0114, r24
            mk_interval = MOUSEKEY_INTERVAL;
    4fe6:	82 e3       	ldi	r24, 0x32	; 50
    4fe8:	80 93 13 01 	sts	0x0113, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    4fec:	8a e0       	ldi	r24, 0x0A	; 10
    4fee:	80 93 12 01 	sts	0x0112, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    4ff2:	84 e1       	ldi	r24, 0x14	; 20
    4ff4:	80 93 11 01 	sts	0x0111, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    4ff8:	88 e0       	ldi	r24, 0x08	; 8
    4ffa:	80 93 10 01 	sts	0x0110, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    4ffe:	88 e2       	ldi	r24, 0x28	; 40
    5000:	80 93 0f 01 	sts	0x010F, r24
            print("set default\n");
    5004:	84 e7       	ldi	r24, 0x74	; 116
    5006:	96 e0       	ldi	r25, 0x06	; 6
    5008:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    500c:	bf c0       	rjmp	.+382    	; 0x518c <command_proc+0x266>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    500e:	c3 31       	cpi	r28, 0x13	; 19
    5010:	49 f1       	breq	.+82     	; 0x5064 <command_proc+0x13e>
    5012:	c4 31       	cpi	r28, 0x14	; 20
    5014:	c1 f0       	breq	.+48     	; 0x5046 <command_proc+0x120>
    5016:	b7 c0       	rjmp	.+366    	; 0x5186 <command_proc+0x260>
    5018:	cb 34       	cpi	r28, 0x4B	; 75
    501a:	09 f4       	brne	.+2      	; 0x501e <command_proc+0xf8>
    501c:	a9 c0       	rjmp	.+338    	; 0x5170 <command_proc+0x24a>
    501e:	28 f4       	brcc	.+10     	; 0x502a <command_proc+0x104>
    5020:	c9 32       	cpi	r28, 0x29	; 41
    5022:	89 f0       	breq	.+34     	; 0x5046 <command_proc+0x120>
    5024:	c8 33       	cpi	r28, 0x38	; 56
    5026:	61 f0       	breq	.+24     	; 0x5040 <command_proc+0x11a>
    5028:	ae c0       	rjmp	.+348    	; 0x5186 <command_proc+0x260>
    502a:	c1 35       	cpi	r28, 0x51	; 81
    502c:	09 f4       	brne	.+2      	; 0x5030 <command_proc+0x10a>
    502e:	9e c0       	rjmp	.+316    	; 0x516c <command_proc+0x246>
    5030:	c2 35       	cpi	r28, 0x52	; 82
    5032:	09 f4       	brne	.+2      	; 0x5036 <command_proc+0x110>
    5034:	99 c0       	rjmp	.+306    	; 0x5168 <command_proc+0x242>
    5036:	ce 34       	cpi	r28, 0x4E	; 78
    5038:	09 f0       	breq	.+2      	; 0x503c <command_proc+0x116>
    503a:	a5 c0       	rjmp	.+330    	; 0x5186 <command_proc+0x260>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    503c:	6a e0       	ldi	r22, 0x0A	; 10
    503e:	9e c0       	rjmp	.+316    	; 0x517c <command_proc+0x256>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    5040:	0e 94 c9 23 	call	0x4792	; 0x4792 <mousekey_console_help>
    5044:	a3 c0       	rjmp	.+326    	; 0x518c <command_proc+0x266>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    5046:	80 91 d0 01 	lds	r24, 0x01D0
    504a:	88 23       	and	r24, r24
    504c:	19 f0       	breq	.+6      	; 0x5054 <command_proc+0x12e>
                mousekey_param = 0;
    504e:	10 92 d0 01 	sts	0x01D0, r1
    5052:	9c c0       	rjmp	.+312    	; 0x518c <command_proc+0x266>
            } else {
                print("C> ");
    5054:	81 e8       	ldi	r24, 0x81	; 129
    5056:	96 e0       	ldi	r25, 0x06	; 6
    5058:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
                command_state = CONSOLE;
    505c:	81 e0       	ldi	r24, 0x01	; 1
    505e:	80 93 d1 01 	sts	0x01D1, r24
    5062:	b1 c0       	rjmp	.+354    	; 0x51c6 <command_proc+0x2a0>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    5064:	8b e5       	ldi	r24, 0x5B	; 91
    5066:	96 e0       	ldi	r25, 0x06	; 6
    5068:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    506c:	89 e4       	ldi	r24, 0x49	; 73
    506e:	96 e0       	ldi	r25, 0x06	; 6
    5070:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    5074:	80 91 14 01 	lds	r24, 0x0114
    5078:	1f 92       	push	r1
    507a:	8f 93       	push	r24
    507c:	86 e4       	ldi	r24, 0x46	; 70
    507e:	96 e0       	ldi	r25, 0x06	; 6
    5080:	9f 93       	push	r25
    5082:	8f 93       	push	r24
    5084:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    5088:	84 e4       	ldi	r24, 0x44	; 68
    508a:	96 e0       	ldi	r25, 0x06	; 6
    508c:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    5090:	82 e3       	ldi	r24, 0x32	; 50
    5092:	96 e0       	ldi	r25, 0x06	; 6
    5094:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    5098:	80 91 13 01 	lds	r24, 0x0113
    509c:	1f 92       	push	r1
    509e:	8f 93       	push	r24
    50a0:	8f e2       	ldi	r24, 0x2F	; 47
    50a2:	96 e0       	ldi	r25, 0x06	; 6
    50a4:	9f 93       	push	r25
    50a6:	8f 93       	push	r24
    50a8:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    50ac:	8d e2       	ldi	r24, 0x2D	; 45
    50ae:	96 e0       	ldi	r25, 0x06	; 6
    50b0:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    50b4:	8e e1       	ldi	r24, 0x1E	; 30
    50b6:	96 e0       	ldi	r25, 0x06	; 6
    50b8:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    50bc:	80 91 12 01 	lds	r24, 0x0112
    50c0:	1f 92       	push	r1
    50c2:	8f 93       	push	r24
    50c4:	8b e1       	ldi	r24, 0x1B	; 27
    50c6:	96 e0       	ldi	r25, 0x06	; 6
    50c8:	9f 93       	push	r25
    50ca:	8f 93       	push	r24
    50cc:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    50d0:	89 e1       	ldi	r24, 0x19	; 25
    50d2:	96 e0       	ldi	r25, 0x06	; 6
    50d4:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    50d8:	88 e0       	ldi	r24, 0x08	; 8
    50da:	96 e0       	ldi	r25, 0x06	; 6
    50dc:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    50e0:	80 91 11 01 	lds	r24, 0x0111
    50e4:	1f 92       	push	r1
    50e6:	8f 93       	push	r24
    50e8:	85 e0       	ldi	r24, 0x05	; 5
    50ea:	96 e0       	ldi	r25, 0x06	; 6
    50ec:	9f 93       	push	r25
    50ee:	8f 93       	push	r24
    50f0:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    50f4:	83 e0       	ldi	r24, 0x03	; 3
    50f6:	96 e0       	ldi	r25, 0x06	; 6
    50f8:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    50fc:	8e ee       	ldi	r24, 0xEE	; 238
    50fe:	95 e0       	ldi	r25, 0x05	; 5
    5100:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    5104:	80 91 10 01 	lds	r24, 0x0110
    5108:	1f 92       	push	r1
    510a:	8f 93       	push	r24
    510c:	8b ee       	ldi	r24, 0xEB	; 235
    510e:	95 e0       	ldi	r25, 0x05	; 5
    5110:	9f 93       	push	r25
    5112:	8f 93       	push	r24
    5114:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    5118:	89 ee       	ldi	r24, 0xE9	; 233
    511a:	95 e0       	ldi	r25, 0x05	; 5
    511c:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    5120:	82 ed       	ldi	r24, 0xD2	; 210
    5122:	95 e0       	ldi	r25, 0x05	; 5
    5124:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    5128:	80 91 0f 01 	lds	r24, 0x010F
    512c:	1f 92       	push	r1
    512e:	8f 93       	push	r24
    5130:	8f ec       	ldi	r24, 0xCF	; 207
    5132:	95 e0       	ldi	r25, 0x05	; 5
    5134:	9f 93       	push	r25
    5136:	8f 93       	push	r24
    5138:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    513c:	8d ec       	ldi	r24, 0xCD	; 205
    513e:	95 e0       	ldi	r25, 0x05	; 5
    5140:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
    5144:	8d b7       	in	r24, 0x3d	; 61
    5146:	9e b7       	in	r25, 0x3e	; 62
    5148:	48 96       	adiw	r24, 0x18	; 24
    514a:	0f b6       	in	r0, 0x3f	; 63
    514c:	f8 94       	cli
    514e:	9e bf       	out	0x3e, r25	; 62
    5150:	0f be       	out	0x3f, r0	; 63
    5152:	8d bf       	out	0x3d, r24	; 61
    5154:	1b c0       	rjmp	.+54     	; 0x518c <command_proc+0x266>
    5156:	ce 51       	subi	r28, 0x1E	; 30
    5158:	ec 2f       	mov	r30, r28
    515a:	f0 e0       	ldi	r31, 0x00	; 0
    515c:	e2 5d       	subi	r30, 0xD2	; 210
    515e:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    5160:	80 81       	ld	r24, Z
    5162:	80 93 d0 01 	sts	0x01D0, r24
    5166:	12 c0       	rjmp	.+36     	; 0x518c <command_proc+0x266>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    5168:	61 e0       	ldi	r22, 0x01	; 1
    516a:	03 c0       	rjmp	.+6      	; 0x5172 <command_proc+0x24c>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    516c:	61 e0       	ldi	r22, 0x01	; 1
    516e:	06 c0       	rjmp	.+12     	; 0x517c <command_proc+0x256>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    5170:	6a e0       	ldi	r22, 0x0A	; 10
    5172:	80 91 d0 01 	lds	r24, 0x01D0
    5176:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <mousekey_param_inc>
    517a:	08 c0       	rjmp	.+16     	; 0x518c <command_proc+0x266>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    517c:	80 91 d0 01 	lds	r24, 0x01D0
    5180:	0e 94 83 24 	call	0x4906	; 0x4906 <mousekey_param_dec>
    5184:	03 c0       	rjmp	.+6      	; 0x518c <command_proc+0x266>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default\n");
            break;
        default:
            print("?");
    5186:	82 e7       	ldi	r24, 0x72	; 114
    5188:	96 e0       	ldi	r25, 0x06	; 6
    518a:	13 c0       	rjmp	.+38     	; 0x51b2 <command_proc+0x28c>
            return false;
    }
    if (mousekey_param) {
    518c:	80 91 d0 01 	lds	r24, 0x01D0
    5190:	88 23       	and	r24, r24
    5192:	69 f0       	breq	.+26     	; 0x51ae <command_proc+0x288>
        xprintf("M%d> ", mousekey_param);
    5194:	1f 92       	push	r1
    5196:	8f 93       	push	r24
    5198:	8c e6       	ldi	r24, 0x6C	; 108
    519a:	96 e0       	ldi	r25, 0x06	; 6
    519c:	9f 93       	push	r25
    519e:	8f 93       	push	r24
    51a0:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__xprintf>
    51a4:	0f 90       	pop	r0
    51a6:	0f 90       	pop	r0
    51a8:	0f 90       	pop	r0
    51aa:	0f 90       	pop	r0
    51ac:	04 c0       	rjmp	.+8      	; 0x51b6 <command_proc+0x290>
    } else {
        print("M>" );
    51ae:	89 e6       	ldi	r24, 0x69	; 105
    51b0:	96 e0       	ldi	r25, 0x06	; 6
    51b2:	0e 94 65 06 	call	0xcca	; 0xcca <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    51b6:	81 e0       	ldi	r24, 0x01	; 1
    51b8:	06 c0       	rjmp	.+12     	; 0x51c6 <command_proc+0x2a0>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    51ba:	10 92 d1 01 	sts	0x01D1, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    51be:	80 e0       	ldi	r24, 0x00	; 0
    51c0:	02 c0       	rjmp	.+4      	; 0x51c6 <command_proc+0x2a0>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    51c2:	80 e0       	ldi	r24, 0x00	; 0
    51c4:	00 cf       	rjmp	.-512    	; 0x4fc6 <command_proc+0xa0>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    51c6:	cf 91       	pop	r28
    51c8:	08 95       	ret

000051ca <__fixsfsi>:
    51ca:	04 d0       	rcall	.+8      	; 0x51d4 <__fixunssfsi>
    51cc:	68 94       	set
    51ce:	b1 11       	cpse	r27, r1
    51d0:	8d c0       	rjmp	.+282    	; 0x52ec <__fp_szero>
    51d2:	08 95       	ret

000051d4 <__fixunssfsi>:
    51d4:	70 d0       	rcall	.+224    	; 0x52b6 <__fp_splitA>
    51d6:	88 f0       	brcs	.+34     	; 0x51fa <__fixunssfsi+0x26>
    51d8:	9f 57       	subi	r25, 0x7F	; 127
    51da:	90 f0       	brcs	.+36     	; 0x5200 <__fixunssfsi+0x2c>
    51dc:	b9 2f       	mov	r27, r25
    51de:	99 27       	eor	r25, r25
    51e0:	b7 51       	subi	r27, 0x17	; 23
    51e2:	a0 f0       	brcs	.+40     	; 0x520c <__fixunssfsi+0x38>
    51e4:	d1 f0       	breq	.+52     	; 0x521a <__fixunssfsi+0x46>
    51e6:	66 0f       	add	r22, r22
    51e8:	77 1f       	adc	r23, r23
    51ea:	88 1f       	adc	r24, r24
    51ec:	99 1f       	adc	r25, r25
    51ee:	1a f0       	brmi	.+6      	; 0x51f6 <__fixunssfsi+0x22>
    51f0:	ba 95       	dec	r27
    51f2:	c9 f7       	brne	.-14     	; 0x51e6 <__fixunssfsi+0x12>
    51f4:	12 c0       	rjmp	.+36     	; 0x521a <__fixunssfsi+0x46>
    51f6:	b1 30       	cpi	r27, 0x01	; 1
    51f8:	81 f0       	breq	.+32     	; 0x521a <__fixunssfsi+0x46>
    51fa:	77 d0       	rcall	.+238    	; 0x52ea <__fp_zero>
    51fc:	b1 e0       	ldi	r27, 0x01	; 1
    51fe:	08 95       	ret
    5200:	74 c0       	rjmp	.+232    	; 0x52ea <__fp_zero>
    5202:	67 2f       	mov	r22, r23
    5204:	78 2f       	mov	r23, r24
    5206:	88 27       	eor	r24, r24
    5208:	b8 5f       	subi	r27, 0xF8	; 248
    520a:	39 f0       	breq	.+14     	; 0x521a <__fixunssfsi+0x46>
    520c:	b9 3f       	cpi	r27, 0xF9	; 249
    520e:	cc f3       	brlt	.-14     	; 0x5202 <__fixunssfsi+0x2e>
    5210:	86 95       	lsr	r24
    5212:	77 95       	ror	r23
    5214:	67 95       	ror	r22
    5216:	b3 95       	inc	r27
    5218:	d9 f7       	brne	.-10     	; 0x5210 <__fixunssfsi+0x3c>
    521a:	3e f4       	brtc	.+14     	; 0x522a <__fixunssfsi+0x56>
    521c:	90 95       	com	r25
    521e:	80 95       	com	r24
    5220:	70 95       	com	r23
    5222:	61 95       	neg	r22
    5224:	7f 4f       	sbci	r23, 0xFF	; 255
    5226:	8f 4f       	sbci	r24, 0xFF	; 255
    5228:	9f 4f       	sbci	r25, 0xFF	; 255
    522a:	08 95       	ret

0000522c <__floatunsisf>:
    522c:	e8 94       	clt
    522e:	09 c0       	rjmp	.+18     	; 0x5242 <__floatsisf+0x12>

00005230 <__floatsisf>:
    5230:	97 fb       	bst	r25, 7
    5232:	3e f4       	brtc	.+14     	; 0x5242 <__floatsisf+0x12>
    5234:	90 95       	com	r25
    5236:	80 95       	com	r24
    5238:	70 95       	com	r23
    523a:	61 95       	neg	r22
    523c:	7f 4f       	sbci	r23, 0xFF	; 255
    523e:	8f 4f       	sbci	r24, 0xFF	; 255
    5240:	9f 4f       	sbci	r25, 0xFF	; 255
    5242:	99 23       	and	r25, r25
    5244:	a9 f0       	breq	.+42     	; 0x5270 <__floatsisf+0x40>
    5246:	f9 2f       	mov	r31, r25
    5248:	96 e9       	ldi	r25, 0x96	; 150
    524a:	bb 27       	eor	r27, r27
    524c:	93 95       	inc	r25
    524e:	f6 95       	lsr	r31
    5250:	87 95       	ror	r24
    5252:	77 95       	ror	r23
    5254:	67 95       	ror	r22
    5256:	b7 95       	ror	r27
    5258:	f1 11       	cpse	r31, r1
    525a:	f8 cf       	rjmp	.-16     	; 0x524c <__floatsisf+0x1c>
    525c:	fa f4       	brpl	.+62     	; 0x529c <__floatsisf+0x6c>
    525e:	bb 0f       	add	r27, r27
    5260:	11 f4       	brne	.+4      	; 0x5266 <__floatsisf+0x36>
    5262:	60 ff       	sbrs	r22, 0
    5264:	1b c0       	rjmp	.+54     	; 0x529c <__floatsisf+0x6c>
    5266:	6f 5f       	subi	r22, 0xFF	; 255
    5268:	7f 4f       	sbci	r23, 0xFF	; 255
    526a:	8f 4f       	sbci	r24, 0xFF	; 255
    526c:	9f 4f       	sbci	r25, 0xFF	; 255
    526e:	16 c0       	rjmp	.+44     	; 0x529c <__floatsisf+0x6c>
    5270:	88 23       	and	r24, r24
    5272:	11 f0       	breq	.+4      	; 0x5278 <__floatsisf+0x48>
    5274:	96 e9       	ldi	r25, 0x96	; 150
    5276:	11 c0       	rjmp	.+34     	; 0x529a <__floatsisf+0x6a>
    5278:	77 23       	and	r23, r23
    527a:	21 f0       	breq	.+8      	; 0x5284 <__floatsisf+0x54>
    527c:	9e e8       	ldi	r25, 0x8E	; 142
    527e:	87 2f       	mov	r24, r23
    5280:	76 2f       	mov	r23, r22
    5282:	05 c0       	rjmp	.+10     	; 0x528e <__floatsisf+0x5e>
    5284:	66 23       	and	r22, r22
    5286:	71 f0       	breq	.+28     	; 0x52a4 <__floatsisf+0x74>
    5288:	96 e8       	ldi	r25, 0x86	; 134
    528a:	86 2f       	mov	r24, r22
    528c:	70 e0       	ldi	r23, 0x00	; 0
    528e:	60 e0       	ldi	r22, 0x00	; 0
    5290:	2a f0       	brmi	.+10     	; 0x529c <__floatsisf+0x6c>
    5292:	9a 95       	dec	r25
    5294:	66 0f       	add	r22, r22
    5296:	77 1f       	adc	r23, r23
    5298:	88 1f       	adc	r24, r24
    529a:	da f7       	brpl	.-10     	; 0x5292 <__floatsisf+0x62>
    529c:	88 0f       	add	r24, r24
    529e:	96 95       	lsr	r25
    52a0:	87 95       	ror	r24
    52a2:	97 f9       	bld	r25, 7
    52a4:	08 95       	ret

000052a6 <__fp_split3>:
    52a6:	57 fd       	sbrc	r21, 7
    52a8:	90 58       	subi	r25, 0x80	; 128
    52aa:	44 0f       	add	r20, r20
    52ac:	55 1f       	adc	r21, r21
    52ae:	59 f0       	breq	.+22     	; 0x52c6 <__fp_splitA+0x10>
    52b0:	5f 3f       	cpi	r21, 0xFF	; 255
    52b2:	71 f0       	breq	.+28     	; 0x52d0 <__fp_splitA+0x1a>
    52b4:	47 95       	ror	r20

000052b6 <__fp_splitA>:
    52b6:	88 0f       	add	r24, r24
    52b8:	97 fb       	bst	r25, 7
    52ba:	99 1f       	adc	r25, r25
    52bc:	61 f0       	breq	.+24     	; 0x52d6 <__fp_splitA+0x20>
    52be:	9f 3f       	cpi	r25, 0xFF	; 255
    52c0:	79 f0       	breq	.+30     	; 0x52e0 <__fp_splitA+0x2a>
    52c2:	87 95       	ror	r24
    52c4:	08 95       	ret
    52c6:	12 16       	cp	r1, r18
    52c8:	13 06       	cpc	r1, r19
    52ca:	14 06       	cpc	r1, r20
    52cc:	55 1f       	adc	r21, r21
    52ce:	f2 cf       	rjmp	.-28     	; 0x52b4 <__fp_split3+0xe>
    52d0:	46 95       	lsr	r20
    52d2:	f1 df       	rcall	.-30     	; 0x52b6 <__fp_splitA>
    52d4:	08 c0       	rjmp	.+16     	; 0x52e6 <__fp_splitA+0x30>
    52d6:	16 16       	cp	r1, r22
    52d8:	17 06       	cpc	r1, r23
    52da:	18 06       	cpc	r1, r24
    52dc:	99 1f       	adc	r25, r25
    52de:	f1 cf       	rjmp	.-30     	; 0x52c2 <__fp_splitA+0xc>
    52e0:	86 95       	lsr	r24
    52e2:	71 05       	cpc	r23, r1
    52e4:	61 05       	cpc	r22, r1
    52e6:	08 94       	sec
    52e8:	08 95       	ret

000052ea <__fp_zero>:
    52ea:	e8 94       	clt

000052ec <__fp_szero>:
    52ec:	bb 27       	eor	r27, r27
    52ee:	66 27       	eor	r22, r22
    52f0:	77 27       	eor	r23, r23
    52f2:	cb 01       	movw	r24, r22
    52f4:	97 f9       	bld	r25, 7
    52f6:	08 95       	ret

000052f8 <__mulsf3>:
    52f8:	0b d0       	rcall	.+22     	; 0x5310 <__mulsf3x>
    52fa:	78 c0       	rjmp	.+240    	; 0x53ec <__fp_round>
    52fc:	69 d0       	rcall	.+210    	; 0x53d0 <__fp_pscA>
    52fe:	28 f0       	brcs	.+10     	; 0x530a <__mulsf3+0x12>
    5300:	6e d0       	rcall	.+220    	; 0x53de <__fp_pscB>
    5302:	18 f0       	brcs	.+6      	; 0x530a <__mulsf3+0x12>
    5304:	95 23       	and	r25, r21
    5306:	09 f0       	breq	.+2      	; 0x530a <__mulsf3+0x12>
    5308:	5a c0       	rjmp	.+180    	; 0x53be <__fp_inf>
    530a:	5f c0       	rjmp	.+190    	; 0x53ca <__fp_nan>
    530c:	11 24       	eor	r1, r1
    530e:	ee cf       	rjmp	.-36     	; 0x52ec <__fp_szero>

00005310 <__mulsf3x>:
    5310:	ca df       	rcall	.-108    	; 0x52a6 <__fp_split3>
    5312:	a0 f3       	brcs	.-24     	; 0x52fc <__mulsf3+0x4>

00005314 <__mulsf3_pse>:
    5314:	95 9f       	mul	r25, r21
    5316:	d1 f3       	breq	.-12     	; 0x530c <__mulsf3+0x14>
    5318:	95 0f       	add	r25, r21
    531a:	50 e0       	ldi	r21, 0x00	; 0
    531c:	55 1f       	adc	r21, r21
    531e:	62 9f       	mul	r22, r18
    5320:	f0 01       	movw	r30, r0
    5322:	72 9f       	mul	r23, r18
    5324:	bb 27       	eor	r27, r27
    5326:	f0 0d       	add	r31, r0
    5328:	b1 1d       	adc	r27, r1
    532a:	63 9f       	mul	r22, r19
    532c:	aa 27       	eor	r26, r26
    532e:	f0 0d       	add	r31, r0
    5330:	b1 1d       	adc	r27, r1
    5332:	aa 1f       	adc	r26, r26
    5334:	64 9f       	mul	r22, r20
    5336:	66 27       	eor	r22, r22
    5338:	b0 0d       	add	r27, r0
    533a:	a1 1d       	adc	r26, r1
    533c:	66 1f       	adc	r22, r22
    533e:	82 9f       	mul	r24, r18
    5340:	22 27       	eor	r18, r18
    5342:	b0 0d       	add	r27, r0
    5344:	a1 1d       	adc	r26, r1
    5346:	62 1f       	adc	r22, r18
    5348:	73 9f       	mul	r23, r19
    534a:	b0 0d       	add	r27, r0
    534c:	a1 1d       	adc	r26, r1
    534e:	62 1f       	adc	r22, r18
    5350:	83 9f       	mul	r24, r19
    5352:	a0 0d       	add	r26, r0
    5354:	61 1d       	adc	r22, r1
    5356:	22 1f       	adc	r18, r18
    5358:	74 9f       	mul	r23, r20
    535a:	33 27       	eor	r19, r19
    535c:	a0 0d       	add	r26, r0
    535e:	61 1d       	adc	r22, r1
    5360:	23 1f       	adc	r18, r19
    5362:	84 9f       	mul	r24, r20
    5364:	60 0d       	add	r22, r0
    5366:	21 1d       	adc	r18, r1
    5368:	82 2f       	mov	r24, r18
    536a:	76 2f       	mov	r23, r22
    536c:	6a 2f       	mov	r22, r26
    536e:	11 24       	eor	r1, r1
    5370:	9f 57       	subi	r25, 0x7F	; 127
    5372:	50 40       	sbci	r21, 0x00	; 0
    5374:	8a f0       	brmi	.+34     	; 0x5398 <__mulsf3_pse+0x84>
    5376:	e1 f0       	breq	.+56     	; 0x53b0 <__mulsf3_pse+0x9c>
    5378:	88 23       	and	r24, r24
    537a:	4a f0       	brmi	.+18     	; 0x538e <__mulsf3_pse+0x7a>
    537c:	ee 0f       	add	r30, r30
    537e:	ff 1f       	adc	r31, r31
    5380:	bb 1f       	adc	r27, r27
    5382:	66 1f       	adc	r22, r22
    5384:	77 1f       	adc	r23, r23
    5386:	88 1f       	adc	r24, r24
    5388:	91 50       	subi	r25, 0x01	; 1
    538a:	50 40       	sbci	r21, 0x00	; 0
    538c:	a9 f7       	brne	.-22     	; 0x5378 <__mulsf3_pse+0x64>
    538e:	9e 3f       	cpi	r25, 0xFE	; 254
    5390:	51 05       	cpc	r21, r1
    5392:	70 f0       	brcs	.+28     	; 0x53b0 <__mulsf3_pse+0x9c>
    5394:	14 c0       	rjmp	.+40     	; 0x53be <__fp_inf>
    5396:	aa cf       	rjmp	.-172    	; 0x52ec <__fp_szero>
    5398:	5f 3f       	cpi	r21, 0xFF	; 255
    539a:	ec f3       	brlt	.-6      	; 0x5396 <__mulsf3_pse+0x82>
    539c:	98 3e       	cpi	r25, 0xE8	; 232
    539e:	dc f3       	brlt	.-10     	; 0x5396 <__mulsf3_pse+0x82>
    53a0:	86 95       	lsr	r24
    53a2:	77 95       	ror	r23
    53a4:	67 95       	ror	r22
    53a6:	b7 95       	ror	r27
    53a8:	f7 95       	ror	r31
    53aa:	e7 95       	ror	r30
    53ac:	9f 5f       	subi	r25, 0xFF	; 255
    53ae:	c1 f7       	brne	.-16     	; 0x53a0 <__mulsf3_pse+0x8c>
    53b0:	fe 2b       	or	r31, r30
    53b2:	88 0f       	add	r24, r24
    53b4:	91 1d       	adc	r25, r1
    53b6:	96 95       	lsr	r25
    53b8:	87 95       	ror	r24
    53ba:	97 f9       	bld	r25, 7
    53bc:	08 95       	ret

000053be <__fp_inf>:
    53be:	97 f9       	bld	r25, 7
    53c0:	9f 67       	ori	r25, 0x7F	; 127
    53c2:	80 e8       	ldi	r24, 0x80	; 128
    53c4:	70 e0       	ldi	r23, 0x00	; 0
    53c6:	60 e0       	ldi	r22, 0x00	; 0
    53c8:	08 95       	ret

000053ca <__fp_nan>:
    53ca:	9f ef       	ldi	r25, 0xFF	; 255
    53cc:	80 ec       	ldi	r24, 0xC0	; 192
    53ce:	08 95       	ret

000053d0 <__fp_pscA>:
    53d0:	00 24       	eor	r0, r0
    53d2:	0a 94       	dec	r0
    53d4:	16 16       	cp	r1, r22
    53d6:	17 06       	cpc	r1, r23
    53d8:	18 06       	cpc	r1, r24
    53da:	09 06       	cpc	r0, r25
    53dc:	08 95       	ret

000053de <__fp_pscB>:
    53de:	00 24       	eor	r0, r0
    53e0:	0a 94       	dec	r0
    53e2:	12 16       	cp	r1, r18
    53e4:	13 06       	cpc	r1, r19
    53e6:	14 06       	cpc	r1, r20
    53e8:	05 06       	cpc	r0, r21
    53ea:	08 95       	ret

000053ec <__fp_round>:
    53ec:	09 2e       	mov	r0, r25
    53ee:	03 94       	inc	r0
    53f0:	00 0c       	add	r0, r0
    53f2:	11 f4       	brne	.+4      	; 0x53f8 <__fp_round+0xc>
    53f4:	88 23       	and	r24, r24
    53f6:	52 f0       	brmi	.+20     	; 0x540c <__fp_round+0x20>
    53f8:	bb 0f       	add	r27, r27
    53fa:	40 f4       	brcc	.+16     	; 0x540c <__fp_round+0x20>
    53fc:	bf 2b       	or	r27, r31
    53fe:	11 f4       	brne	.+4      	; 0x5404 <__fp_round+0x18>
    5400:	60 ff       	sbrs	r22, 0
    5402:	04 c0       	rjmp	.+8      	; 0x540c <__fp_round+0x20>
    5404:	6f 5f       	subi	r22, 0xFF	; 255
    5406:	7f 4f       	sbci	r23, 0xFF	; 255
    5408:	8f 4f       	sbci	r24, 0xFF	; 255
    540a:	9f 4f       	sbci	r25, 0xFF	; 255
    540c:	08 95       	ret

0000540e <__udivmodqi4>:
    540e:	99 1b       	sub	r25, r25
    5410:	79 e0       	ldi	r23, 0x09	; 9
    5412:	04 c0       	rjmp	.+8      	; 0x541c <__udivmodqi4_ep>

00005414 <__udivmodqi4_loop>:
    5414:	99 1f       	adc	r25, r25
    5416:	96 17       	cp	r25, r22
    5418:	08 f0       	brcs	.+2      	; 0x541c <__udivmodqi4_ep>
    541a:	96 1b       	sub	r25, r22

0000541c <__udivmodqi4_ep>:
    541c:	88 1f       	adc	r24, r24
    541e:	7a 95       	dec	r23
    5420:	c9 f7       	brne	.-14     	; 0x5414 <__udivmodqi4_loop>
    5422:	80 95       	com	r24
    5424:	08 95       	ret

00005426 <__divmodhi4>:
    5426:	97 fb       	bst	r25, 7
    5428:	07 2e       	mov	r0, r23
    542a:	16 f4       	brtc	.+4      	; 0x5430 <__divmodhi4+0xa>
    542c:	00 94       	com	r0
    542e:	07 d0       	rcall	.+14     	; 0x543e <__divmodhi4_neg1>
    5430:	77 fd       	sbrc	r23, 7
    5432:	09 d0       	rcall	.+18     	; 0x5446 <__divmodhi4_neg2>
    5434:	0e 94 2d 2a 	call	0x545a	; 0x545a <__udivmodhi4>
    5438:	07 fc       	sbrc	r0, 7
    543a:	05 d0       	rcall	.+10     	; 0x5446 <__divmodhi4_neg2>
    543c:	3e f4       	brtc	.+14     	; 0x544c <__divmodhi4_exit>

0000543e <__divmodhi4_neg1>:
    543e:	90 95       	com	r25
    5440:	81 95       	neg	r24
    5442:	9f 4f       	sbci	r25, 0xFF	; 255
    5444:	08 95       	ret

00005446 <__divmodhi4_neg2>:
    5446:	70 95       	com	r23
    5448:	61 95       	neg	r22
    544a:	7f 4f       	sbci	r23, 0xFF	; 255

0000544c <__divmodhi4_exit>:
    544c:	08 95       	ret

0000544e <__tablejump2__>:
    544e:	ee 0f       	add	r30, r30
    5450:	ff 1f       	adc	r31, r31

00005452 <__tablejump__>:
    5452:	05 90       	lpm	r0, Z+
    5454:	f4 91       	lpm	r31, Z
    5456:	e0 2d       	mov	r30, r0
    5458:	09 94       	ijmp

0000545a <__udivmodhi4>:
    545a:	aa 1b       	sub	r26, r26
    545c:	bb 1b       	sub	r27, r27
    545e:	51 e1       	ldi	r21, 0x11	; 17
    5460:	07 c0       	rjmp	.+14     	; 0x5470 <__udivmodhi4_ep>

00005462 <__udivmodhi4_loop>:
    5462:	aa 1f       	adc	r26, r26
    5464:	bb 1f       	adc	r27, r27
    5466:	a6 17       	cp	r26, r22
    5468:	b7 07       	cpc	r27, r23
    546a:	10 f0       	brcs	.+4      	; 0x5470 <__udivmodhi4_ep>
    546c:	a6 1b       	sub	r26, r22
    546e:	b7 0b       	sbc	r27, r23

00005470 <__udivmodhi4_ep>:
    5470:	88 1f       	adc	r24, r24
    5472:	99 1f       	adc	r25, r25
    5474:	5a 95       	dec	r21
    5476:	a9 f7       	brne	.-22     	; 0x5462 <__udivmodhi4_loop>
    5478:	80 95       	com	r24
    547a:	90 95       	com	r25
    547c:	bc 01       	movw	r22, r24
    547e:	cd 01       	movw	r24, r26
    5480:	08 95       	ret

00005482 <__eerd_byte_m32u4>:
    5482:	f9 99       	sbic	0x1f, 1	; 31
    5484:	fe cf       	rjmp	.-4      	; 0x5482 <__eerd_byte_m32u4>
    5486:	92 bd       	out	0x22, r25	; 34
    5488:	81 bd       	out	0x21, r24	; 33
    548a:	f8 9a       	sbi	0x1f, 0	; 31
    548c:	99 27       	eor	r25, r25
    548e:	80 b5       	in	r24, 0x20	; 32
    5490:	08 95       	ret

00005492 <__eerd_word_m32u4>:
    5492:	a8 e1       	ldi	r26, 0x18	; 24
    5494:	b0 e0       	ldi	r27, 0x00	; 0
    5496:	42 e0       	ldi	r20, 0x02	; 2
    5498:	50 e0       	ldi	r21, 0x00	; 0
    549a:	0c 94 64 2a 	jmp	0x54c8	; 0x54c8 <__eerd_blraw_m32u4>

0000549e <__eewr_byte_m32u4>:
    549e:	26 2f       	mov	r18, r22

000054a0 <__eewr_r18_m32u4>:
    54a0:	f9 99       	sbic	0x1f, 1	; 31
    54a2:	fe cf       	rjmp	.-4      	; 0x54a0 <__eewr_r18_m32u4>
    54a4:	1f ba       	out	0x1f, r1	; 31
    54a6:	92 bd       	out	0x22, r25	; 34
    54a8:	81 bd       	out	0x21, r24	; 33
    54aa:	20 bd       	out	0x20, r18	; 32
    54ac:	0f b6       	in	r0, 0x3f	; 63
    54ae:	f8 94       	cli
    54b0:	fa 9a       	sbi	0x1f, 2	; 31
    54b2:	f9 9a       	sbi	0x1f, 1	; 31
    54b4:	0f be       	out	0x3f, r0	; 63
    54b6:	01 96       	adiw	r24, 0x01	; 1
    54b8:	08 95       	ret

000054ba <__eewr_word_m32u4>:
    54ba:	0e 94 4f 2a 	call	0x549e	; 0x549e <__eewr_byte_m32u4>
    54be:	27 2f       	mov	r18, r23
    54c0:	0c 94 50 2a 	jmp	0x54a0	; 0x54a0 <__eewr_r18_m32u4>

000054c4 <__eerd_block_m32u4>:
    54c4:	dc 01       	movw	r26, r24
    54c6:	cb 01       	movw	r24, r22

000054c8 <__eerd_blraw_m32u4>:
    54c8:	fc 01       	movw	r30, r24
    54ca:	f9 99       	sbic	0x1f, 1	; 31
    54cc:	fe cf       	rjmp	.-4      	; 0x54ca <__eerd_blraw_m32u4+0x2>
    54ce:	06 c0       	rjmp	.+12     	; 0x54dc <__eerd_blraw_m32u4+0x14>
    54d0:	f2 bd       	out	0x22, r31	; 34
    54d2:	e1 bd       	out	0x21, r30	; 33
    54d4:	f8 9a       	sbi	0x1f, 0	; 31
    54d6:	31 96       	adiw	r30, 0x01	; 1
    54d8:	00 b4       	in	r0, 0x20	; 32
    54da:	0d 92       	st	X+, r0
    54dc:	41 50       	subi	r20, 0x01	; 1
    54de:	50 40       	sbci	r21, 0x00	; 0
    54e0:	b8 f7       	brcc	.-18     	; 0x54d0 <__eerd_blraw_m32u4+0x8>
    54e2:	08 95       	ret

000054e4 <_exit>:
    54e4:	f8 94       	cli

000054e6 <__stop_program>:
    54e6:	ff cf       	rjmp	.-2      	; 0x54e6 <__stop_program>
