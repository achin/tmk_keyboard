
Minorca_lufa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00005518  000055ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005518  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a8  00800138  00800138  000055e4  2**0
                  ALLOC
  3 .noinit       00000004  008001e0  008001e0  000055e4  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  000055e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000090  00000000  00000000  00005e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00005f2c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000b30  00000000  00000000  00005f40  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00010c65  00000000  00000000  00006a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000405f  00000000  00000000  000176d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00005b67  00000000  00000000  0001b734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001c3c  00000000  00000000  0002129c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000474f  00000000  00000000  00022ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008ce3  00000000  00000000  00027627  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000be8  00000000  00000000  0003030a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <__ctors_end>
       4:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
       8:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
       c:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      10:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      14:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      18:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      1c:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      20:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      24:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      28:	0c 94 37 0e 	jmp	0x1c6e	; 0x1c6e <__vector_10>
      2c:	0c 94 09 0f 	jmp	0x1e12	; 0x1e12 <__vector_11>
      30:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <__vector_12>
      34:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      3c:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      40:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      44:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      48:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      4c:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      50:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	0c 94 d6 1d 	jmp	0x3bac	; 0x3bac <__vector_21>
      58:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      5c:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      60:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      64:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      68:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>

	ParserData->TotalDeviceReports = 1;
      6c:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      70:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      74:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      78:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      7c:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      84:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      88:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      90:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      94:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
      98:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      9c:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      a0:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      a4:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      a8:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      ac:	6e 0f       	add	r22, r30
      ae:	90 0f       	add	r25, r16
      b0:	7b 10       	cpse	r7, r11
      b2:	90 0f       	add	r25, r16
      b4:	7b 10       	cpse	r7, r11
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      b6:	d2 0f       	add	r29, r18
      b8:	f5 0f       	add	r31, r21
      ba:	7b 10       	cpse	r7, r11
      bc:	4a 10       	cpse	r4, r10
      be:	5d 10       	cpse	r5, r13
      c0:	b5 13       	cpse	r27, r21
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      c2:	b5 13       	cpse	r27, r21
      c4:	e3 13       	cpse	r30, r19
      c6:	e3 13       	cpse	r30, r19
      c8:	3f 14       	cp	r3, r15
      ca:	7b 14       	cp	r7, r11
      cc:	6c 16       	cp	r6, r28
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      ce:	6c 16       	cp	r6, r28
      d0:	93 14       	cp	r9, r3
      d2:	6c 16       	cp	r6, r28
      d4:	8a 15       	cp	r24, r10
	{
		uint8_t  HIDReportItem  = *ReportData;
      d6:	8a 15       	cp	r24, r10
      d8:	46 16       	cp	r4, r22
      da:	6c 16       	cp	r6, r28
      dc:	6c 16       	cp	r6, r28
      de:	5a 16       	cp	r5, r26

000000e0 <__trampolines_end>:
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e0:	2c a1       	ldd	r18, Y+36	; 0x24
      e2:	2c a2       	std	Y+36, r2	; 0x24
      e4:	f1 a3       	std	Z+33, r31	; 0x21
      e6:	00 00       	nop
      e8:	00 00       	nop
      ea:	00 00       	nop
      ec:	00 00       	nop
      ee:	00 00       	nop
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
      f0:	00 00       	nop
      f2:	00 00       	nop
      f4:	35 02       	muls	r19, r21
		ReportSize--;
      f6:	1e 02       	muls	r17, r30
      f8:	1f 02       	muls	r17, r31
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
      fa:	20 02       	muls	r18, r16
      fc:	21 02       	muls	r18, r17
      fe:	22 02       	muls	r18, r18
     100:	23 02       	muls	r18, r19
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     102:	24 02       	muls	r18, r20
     104:	25 02       	muls	r18, r21
     106:	2f 02       	muls	r18, r31
     108:	30 02       	muls	r19, r16
     10a:	2d 02       	muls	r18, r29
     10c:	26 02       	muls	r18, r22
     10e:	27 02       	muls	r18, r23
     110:	2e 02       	muls	r18, r30
     112:	33 02       	muls	r19, r19
     114:	31 02       	muls	r19, r17

00000116 <keymaps>:
     116:	29 14 1a 08 15 17 1c 18 0c 12 13 2a e0 04 16 07     )..........*....
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     126:	09 0a 0b 0d 0e 0f 00 28 e1 00 1d 1b 06 19 05 11     .......(........
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     136:	10 36 37 38 c2 e2 00 e3 c0 00 c1 00 00 2b e6 c2     .678.........+..
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
				break;
     146:	35 1e 1f 20 21 22 23 24 25 26 27 2d 01 01 01 01     5.. !"#$%&'-....

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     156:	01 01 01 d6 d7 2e 00 33 01 00 01 01 01 01 01 01     .......3........
				ReportSize     -= 2;
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     166:	01 01 01 31 01 01 00 01 01 00 01 00 00 01 01 01     ...1............
				ReportSize     -= 1;
				ReportData     += 1;
     176:	ca cb cc cd ce cf d0 d1 d2 d3 d4 d5 01 01 01 01     ................
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     186:	01 01 01 2f 30 d8 00 d9 01 00 01 01 01 01 01 01     .../0...........
     196:	01 01 01 da 01 01 00 01 01 00 01 00 00 01 01 01     ................

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1a6:	01 3a 3b 3c 3d 3e 3f 40 41 42 43 01 01 01 4e 4a     .:;<=>?@ABC...NJ
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b6:	4d 4b 50 51 52 4f 00 01 01 00 01 01 01 01 01 01     MKPQRO..........
     1c6:	01 01 01 bf c0 01 00 01 01 00 01 00 00 01 01 01     ................

000001d6 <__c.1891>:
     1d6:	0a 00                                               ..

000001d8 <__c.1889>:
     1d8:	25 30 31 36 62 00                                   %016b.

000001de <__c.1887>:
     1de:	3a 20 00                                            : .

000001e1 <__c.1885>:
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e1:	25 30 32 58 00                                      %02X.

000001e6 <__c.1882>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1e6:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
     1f6:	42 43 44 45 46 0a 00                                BCDEF..

000001fd <__c.1860>:
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     1fd:	0a 00                                               ..

000001ff <__c.1858>:
				break;
     1ff:	25 30 32 58 00                                      %02X.

00000204 <__c.1856>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     204:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

0000020e <__c.4770>:
     20e:	5b 73 5d 00                                         [s].

00000212 <__c.4768>:
     212:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     222:	00                                                  .

00000223 <__c.4766>:
     223:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     233:	00                                                  .

00000234 <__c.4664>:
     234:	5b 57 5d 00                                         [W].

00000238 <__c.4660>:
     238:	5b 53 5d 00                                         [S].

0000023c <__c.4656>:
     23c:	5b 52 5d 00                                         [R].

00000240 <__c.4651>:
     240:	5b 44 5d 00                                         [D].

00000244 <__c.4646>:
     244:	5b 43 5d 00                                         [C].

00000248 <ProductString>:
     248:	10 03 4d 00 69 00 6e 00 6f 00 72 00 63 00 61 00     ..M.i.n.o.r.c.a.
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     258:	00 00                                               ..

0000025a <ManufacturerString>:
     25a:	22 03 50 00 61 00 6e 00 63 00 20 00 49 00 6e 00     ".P.a.n.c. .I.n.
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
     26a:	74 00 65 00 72 00 61 00 63 00 74 00 69 00 76 00     t.e.r.a.c.t.i.v.

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     27a:	65 00 00 00                                         e...

0000027e <LanguageString>:

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     27e:	04 03 09 04                                         ....

00000282 <ConfigurationDescriptor>:
     282:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     292:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
				break;

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2b2:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2c2:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d2:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.

				if (ParserData->UsingReportIDs)
     2e2:	01 00 01 22 20 00 07 05 84 03 20 00 01 07 05 04     ..." ..... .....
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2f2:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     302:	01 00 01 22 39 00 07 05 85 03 10 00 01              ..."9........

0000030f <DeviceDescriptor>:
     30f:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     31f:	00 01                                               ..

00000321 <NKROReport>:
     321:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     331:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     341:	91 02 95 01 75 03 91 01 05 07 19 00 29 77 15 00     ....u.......)w..
     351:	25 01 95 78 75 01 81 02 c0                          %..xu....

0000035a <ConsoleReport>:
     35a:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
					}
				}

				ParserData->UsingReportIDs = true;
     36a:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

0000037a <ExtrakeyReport>:

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     37a:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     39a:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3aa:	10 95 01 81 00 c0                                   ......

000003b0 <MouseReport>:
     3b0:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3c0:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     3d0:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3e0:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f0:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

000003fd <KeyboardReport>:
     3fd:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
				}

				CurrCollectionPath->Type       = ReportItemData;
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     40d:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......

				if (UsageListSize)
     41d:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42d:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

0000043c <__c.4396>:

					for (uint8_t i = 1; i < UsageListSize; i++)
     43c:	0a 00                                               ..

0000043e <__c.4391>:
     43e:	25 30 32 58 20 00                                   %02X .

00000444 <__c.4388>:
					  UsageList[i - 1] = UsageList[i];
     444:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:

					UsageListSize--;
     454:	20 00                                                .

00000456 <__c.4751>:
     456:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

00000461 <__c.4536>:
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     461:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     471:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

0000047f <__c.4531>:
     47f:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48f:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

0000049d <__c.4701>:
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49d:	64 6f 6e 65 2e 0a 00                                done...

000004a4 <__c.4695>:
				break;
     4a4:	62 6f 6f 74 6d 61 67 69 63 20 73 63 61 6e 3a 20     bootmagic scan: 
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4b4:	2e 2e 2e 20 00                                      ... .

000004b9 <__c.4468>:
     4b9:	29 0a 00                                            )..

000004bc <__c.4466>:
     4bc:	25 75 00                                            %u.

000004bf <__c.4464>:
     4bf:	2f 00                                               /.

000004c1 <__c.4462>:
     4c1:	25 75 00                                            %u.

000004c4 <__c.4460>:
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4c4:	5d 28 00                                            ](.

000004c7 <__c.4458>:
     4c7:	25 64 00                                            %d.

000004ca <__c.4456>:
     4ca:	20 00                                                .

000004cc <__c.4454>:
     4cc:	25 64 00                                            %d.

000004cf <__c.4452>:
     4cf:	20 00                                                .

000004d1 <__c.4450>:
     4d1:	25 64 00                                            %d.

000004d4 <__c.4448>:
     4d4:	20 00                                                .

000004d6 <__c.4446>:
     4d6:	25 64 00                                            %d.

000004d9 <__c.4444>:
     4d9:	7c 00                                               |.

000004db <__c.4442>:
     4db:	25 30 32 58 00                                      %02X.

000004e0 <__c.4440>:
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e0:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
					NewReportItem.CollectionPath = CurrCollectionPath;
     500:	20 5b 00                                             [.

00000503 <__c.5065>:
     503:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     513:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

0000051e <__c.5062>:

					if (UsageListSize)
     51e:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     52e:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000537 <__c.5059>:

						for (uint8_t i = 1; i < UsageListSize; i++)
     537:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
						  UsageList[i - 1] = UsageList[i];
     547:	20 25 64 0a 00                                       %d..

0000054c <__c.5056>:

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     54c:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     55c:	64 0a 00                                            d..

0000055f <__c.5053>:
     55f:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56f:	0a 00                                               ..

00000571 <__c.5049>:
     571:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000580 <__c.5042>:
					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     580:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     590:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

0000059b <__c.5039>:
     59b:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ab:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

000005b4 <__c.5036>:

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5b4:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     5c4:	20 25 64 0a 00                                       %d..

000005c9 <__c.5033>:
     5c9:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     5d9:	64 0a 00                                            d..

000005dc <__c.5030>:
     5dc:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5ec:	0a 00                                               ..

000005ee <__c.5026>:
     5ee:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

000005fd <__c.5019>:
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     5fd:	0a 00                                               ..

000005ff <__c.5017>:
     5ff:	25 75 00                                            %u.

00000602 <__c.5015>:
     602:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     612:	5f 6d 61 78 3a 20 00                                _max: .

00000619 <__c.5013>:
     619:	0a 00                                               ..

0000061b <__c.5011>:
     61b:	25 75 00                                            %u.

0000061e <__c.5009>:
     61e:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     62e:	65 64 3a 20 00                                      ed: .

00000633 <__c.5007>:
     633:	0a 00                                               ..

00000635 <__c.5005>:
     635:	25 75 00                                            %u.

00000638 <__c.5003>:
     638:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     648:	00                                                  .

00000649 <__c.5001>:
     649:	0a 00                                               ..

0000064b <__c.4999>:
     64b:	25 75 00                                            %u.

0000064e <__c.4997>:
     64e:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

0000065d <__c.4995>:
     65d:	0a 00                                               ..

0000065f <__c.4993>:
     65f:	25 75 00                                            %u.

00000662 <__c.4991>:
     662:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     672:	20 00                                                .

00000674 <__c.4989>:
     674:	0a 00                                               ..

00000676 <__c.4987>:
     676:	25 75 00                                            %u.

00000679 <__c.4985>:
     679:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
					  ParserData->TotalReportItems++;
     689:	20 00                                                .

0000068b <__c.4983>:

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     68b:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

00000699 <__c.5103>:
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     699:	4d 3e 00                                            M>.

0000069c <__c.5101>:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     69c:	4d 25 64 3e 20 00                                   M%d> .

000006a2 <__c.5099>:
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6a2:	3f 00                                               ?.

000006a4 <__c.5096>:
     6a4:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

000006b1 <__c.5082>:
		}
	}

	if (!(ParserData->TotalReportItems))
     6b1:	43 3e 20 00                                         C> .

000006b5 <__c.5072>:
	  return HID_PARSE_NoUnfilteredReportItems;
     6b5:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6c5:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d5:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     6e5:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     6f5:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

00000703 <__c.5070>:
     703:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     713:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     723:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     733:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     743:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     753:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     763:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     773:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     783:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     793:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     7a3:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     7b3:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     7c3:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     7d3:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     7e3:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     7f3:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

000007fe <__c.4975>:
     7fe:	3f 00                                               ?.

00000800 <__c.4972>:
     800:	4d 3e 20 00                                         M> .

00000804 <__c.4977>:
     804:	43 3e 20 00                                         C> .

00000808 <__c.5121>:
     808:	4c 25 64 0a 00                                      L%d..

0000080d <__c.4961>:
     80d:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     81d:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     82d:	73 65 6b 65 79 0a 00                                sekey..

00000834 <__c.4786>:
     834:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     844:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     854:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     864:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     874:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     884:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     894:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     8a4:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     8b4:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     8c4:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 6e 3a 09 4e     r.e:.eeprom.n:.N
     8d4:	4b 52 4f 0a 00                                      KRO..

000008d9 <__c.4881>:
     8d9:	0a 00                                               ..

000008db <__c.4879>:
     8db:	25 75 00                                            %u.

000008de <__c.4877>:
     8de:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

000008e6 <__c.4875>:
     8e6:	0a 00                                               ..

000008e8 <__c.4873>:
     8e8:	25 75 00                                            %u.

000008eb <__c.4871>:
     8eb:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     8fb:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

00000907 <__c.4869>:
     907:	0a 00                                               ..

00000909 <__c.4867>:
     909:	25 75 00                                            %u.

0000090c <__c.4865>:
     90c:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     91c:	20 00                                                .

0000091e <__c.4863>:
     91e:	0a 00                                               ..

00000920 <__c.4861>:
     920:	25 75 00                                            %u.

00000923 <__c.4859>:
     923:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

0000092d <__c.4857>:
     92d:	0a 00                                               ..

0000092f <__c.4855>:
     92f:	25 75 00                                            %u.

00000932 <__c.4853>:
     932:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     942:	20 00                                                .

00000944 <__c.4851>:
     944:	0a 00                                               ..

00000946 <__c.4849>:
     946:	25 75 00                                            %u.

00000949 <__c.4847>:
     949:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     959:	20 00                                                .

0000095b <__c.4845>:
     95b:	0a 00                                               ..

0000095d <__c.4843>:
     95d:	25 75 00                                            %u.

00000960 <__c.4841>:
     960:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     970:	74 72 6f 6c 3a 20 00                                trol: .

00000977 <__c.4839>:
     977:	0a 00                                               ..

00000979 <__c.4837>:
     979:	25 75 00                                            %u.

0000097c <__c.4835>:
     97c:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     98c:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

00000995 <__c.4833>:
     995:	0a 00                                               ..

00000997 <__c.4831>:
     997:	25 30 32 58 00                                      %02X.

0000099c <__c.4829>:
     99c:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     9ac:	77 3a 20 00                                         w: .

000009b0 <__c.4826>:
     9b0:	0a 00                                               ..

000009b2 <__c.4824>:
     9b2:	25 75 00                                            %u.

000009b5 <__c.4822>:
     9b5:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

000009be <__c.4820>:
     9be:	0a 00                                               ..

000009c0 <__c.4818>:
     9c0:	25 75 00                                            %u.

000009c3 <__c.4816>:
     9c3:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

000009cf <__c.4814>:
     9cf:	0a 00                                               ..

000009d1 <__c.4812>:
     9d1:	25 75 00                                            %u.

000009d4 <__c.4810>:
     9d4:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

000009de <__c.4808>:
     9de:	0a 00                                               ..

000009e0 <__c.4806>:
     9e0:	25 75 00                                            %u.

000009e3 <__c.4804>:
     9e3:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

000009ed <__c.4802>:
     9ed:	0a 00                                               ..

000009ef <__c.4800>:
     9ef:	25 30 32 58 00                                      %02X.

000009f4 <__c.4798>:
     9f4:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     a04:	3a 20 00                                            : .

00000a07 <__c.4795>:
     a07:	0a 00                                               ..

00000a09 <__c.4793>:
     a09:	25 75 00                                            %u.

00000a0c <__c.4791>:
     a0c:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000a1c <__c.4956>:
     a1c:	3f 00                                               ?.

00000a1e <__c.4947>:
     a1e:	4e 4b 52 4f 3a 20 6f 66 66 0a 00                    NKRO: off..

00000a29 <__c.4945>:
     a29:	4e 4b 52 4f 3a 20 6f 6e 0a 00                       NKRO: on..

00000a33 <__c.4942>:
     a33:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     a43:	25 30 34 6c 58 0a 00                                %04lX..

00000a4a <__c.4940>:
     a4a:	6b 65 79 62 6f 61 72 64 5f 6e 6b 72 6f 3a 20 25     keyboard_nkro: %
     a5a:	58 0a 00                                            X..

00000a5d <__c.4938>:
     a5d:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     a6d:	58 0a 00                                            X..

00000a70 <__c.4936>:
     a70:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     a80:	6c 3a 20 25 58 0a 00                                l: %X..

00000a87 <__c.4934>:
     a87:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     a97:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000aa1 <__c.4932>:
     aa1:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

00000aaf <__c.4929>:
     aaf:	47 43 43 3a 20 34 2e 38 2e 31 20 41 56 52 2d 4c     GCC: 4.8.1 AVR-L
     abf:	49 42 43 3a 20 31 2e 38 2e 30 73 76 6e 20 41 56     IBC: 1.8.0svn AV
     acf:	52 5f 41 52 43 48 3a 20 61 76 72 35 0a 00           R_ARCH: avr5..

00000add <__c.4927>:
     add:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     aed:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     afd:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     b0d:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 34     E COMMAND NKRO 4
     b1d:	30 39 36 0a 00                                      096..

00000b22 <__c.4925>:
     b22:	42 55 49 4c 44 3a 20 39 62 62 35 62 66 65 2d 64     BUILD: 9bb5bfe-d
     b32:	69 72 74 79 20 28 31 31 3a 31 32 3a 30 31 20 53     irty (11:12:01 S
     b42:	65 70 20 31 31 20 32 30 31 36 29 0a 00              ep 11 2016)..

00000b4f <__c.4923>:
     b4f:	56 49 44 3a 20 30 78 46 45 45 44 28 50 61 6e 63     VID: 0xFEED(Panc
     b5f:	20 49 6e 74 65 72 61 63 74 69 76 65 29 20 50 49      Interactive) PI
     b6f:	44 3a 20 30 78 36 30 36 30 28 4d 69 6e 6f 72 63     D: 0x6060(Minorc
     b7f:	61 29 20 56 45 52 3a 20 30 78 30 30 30 31 0a 00     a) VER: 0x0001..

00000b8f <__c.4921>:
     b8f:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     b9f:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     baf:	6f 72 20 4d 69 6e 6f 72 63 61 0a 00                 or Minorca..

00000bbb <__c.4919>:
     bbb:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000bca <__c.4916>:
     bca:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000bd7 <__c.4914>:
     bd7:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000be3 <__c.4911>:
     be3:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000bf3 <__c.4909>:
     bf3:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000c02 <__c.4906>:
     c02:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000c10 <__c.4904>:
     c10:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000c1d <__c.4901>:
     c1d:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000c29 <__c.4899>:
     c29:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000c36 <__c.4896>:
     c36:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     c46:	00                                                  .

00000c47 <__c.4893>:
     c47:	43 3e 20 00                                         C> .

00000c4b <__c.4887>:
     c4b:	65 65 63 6f 6e 66 69 67 3a 0a 00                    eeconfig:..

00000c56 <__ctors_end>:
     c56:	11 24       	eor	r1, r1
     c58:	1f be       	out	0x3f, r1	; 63
     c5a:	cf ef       	ldi	r28, 0xFF	; 255
     c5c:	da e0       	ldi	r29, 0x0A	; 10
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	cd bf       	out	0x3d, r28	; 61

00000c62 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     c62:	04 b6       	in	r0, 0x34	; 52
     c64:	03 fe       	sbrs	r0, 3
     c66:	24 c0       	rjmp	.+72     	; 0xcb0 <__do_copy_data>
     c68:	80 91 e0 01 	lds	r24, 0x01E0
     c6c:	90 91 e1 01 	lds	r25, 0x01E1
     c70:	a0 91 e2 01 	lds	r26, 0x01E2
     c74:	b0 91 e3 01 	lds	r27, 0x01E3
     c78:	87 30       	cpi	r24, 0x07	; 7
     c7a:	90 4b       	sbci	r25, 0xB0	; 176
     c7c:	a7 40       	sbci	r26, 0x07	; 7
     c7e:	b0 4b       	sbci	r27, 0xB0	; 176
     c80:	b9 f4       	brne	.+46     	; 0xcb0 <__do_copy_data>
        reset_key = 0;
     c82:	10 92 e0 01 	sts	0x01E0, r1
     c86:	10 92 e1 01 	sts	0x01E1, r1
     c8a:	10 92 e2 01 	sts	0x01E2, r1
     c8e:	10 92 e3 01 	sts	0x01E3, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     c92:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     c94:	84 b7       	in	r24, 0x34	; 52
     c96:	87 7f       	andi	r24, 0xF7	; 247
     c98:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     c9a:	88 e1       	ldi	r24, 0x18	; 24
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	f8 94       	cli
     ca0:	80 93 60 00 	sts	0x0060, r24
     ca4:	10 92 60 00 	sts	0x0060, r1
     ca8:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     caa:	e0 e0       	ldi	r30, 0x00	; 0
     cac:	f8 e3       	ldi	r31, 0x38	; 56
     cae:	09 95       	icall

00000cb0 <__do_copy_data>:
     cb0:	11 e0       	ldi	r17, 0x01	; 1
     cb2:	a0 e0       	ldi	r26, 0x00	; 0
     cb4:	b1 e0       	ldi	r27, 0x01	; 1
     cb6:	e8 e1       	ldi	r30, 0x18	; 24
     cb8:	f5 e5       	ldi	r31, 0x55	; 85
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <__do_copy_data+0x10>
     cbc:	05 90       	lpm	r0, Z+
     cbe:	0d 92       	st	X+, r0
     cc0:	a8 33       	cpi	r26, 0x38	; 56
     cc2:	b1 07       	cpc	r27, r17
     cc4:	d9 f7       	brne	.-10     	; 0xcbc <__do_copy_data+0xc>

00000cc6 <__do_clear_bss>:
     cc6:	21 e0       	ldi	r18, 0x01	; 1
     cc8:	a8 e3       	ldi	r26, 0x38	; 56
     cca:	b1 e0       	ldi	r27, 0x01	; 1
     ccc:	01 c0       	rjmp	.+2      	; 0xcd0 <.do_clear_bss_start>

00000cce <.do_clear_bss_loop>:
     cce:	1d 92       	st	X+, r1

00000cd0 <.do_clear_bss_start>:
     cd0:	a0 3e       	cpi	r26, 0xE0	; 224
     cd2:	b2 07       	cpc	r27, r18
     cd4:	e1 f7       	brne	.-8      	; 0xcce <.do_clear_bss_loop>
     cd6:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <main>
     cda:	0c 94 8a 2a 	jmp	0x5514	; 0x5514 <_exit>

00000cde <__bad_interrupt>:
     cde:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000ce2 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     ce2:	ff 93       	push	r31
	push	ZL
     ce4:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     ce6:	e0 91 38 01 	lds	r30, 0x0138
	lds	ZH, xfunc_out+1	;/
     cea:	f0 91 39 01 	lds	r31, 0x0139
	sbiw	ZL, 0		;Skip if null
     cee:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <xputc+0x12>
	icall
     cf2:	09 95       	icall
2:	pop	ZL
     cf4:	ef 91       	pop	r30
	pop	ZH
     cf6:	ff 91       	pop	r31
	ret
     cf8:	08 95       	ret

00000cfa <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     cfa:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     cfc:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     cfe:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     d00:	11 f0       	breq	.+4      	; 0xd06 <xputs+0xc>
	rcall	xputc
     d02:	ef df       	rcall	.-34     	; 0xce2 <xputc>
	rjmp	1b
     d04:	fb cf       	rjmp	.-10     	; 0xcfc <xputs+0x2>
2:	ret
     d06:	08 95       	ret

00000d08 <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     d08:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     d0a:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     d0c:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     d0e:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     d10:	0c c0       	rjmp	.+24     	; 0xd2a <xitoa+0x22>
	neg	r20		;
     d12:	41 95       	neg	r20
	sbrs	r25, 7		;
     d14:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     d16:	09 c0       	rjmp	.+18     	; 0xd2a <xitoa+0x22>
	ldi	r30, '-'	;
     d18:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     d1a:	60 95       	com	r22
	com	r23		;
     d1c:	70 95       	com	r23
	com	r24		;
     d1e:	80 95       	com	r24
	com	r25		;
     d20:	90 95       	com	r25
	adc	r22, r1		;
     d22:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     d24:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     d26:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     d28:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     d2a:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <xitoa+0x2a>
	neg	r18		;
     d2e:	21 95       	neg	r18
	ldi	r19, '0'	;/
     d30:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     d32:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     d34:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     d36:	66 0f       	add	r22, r22
	rol	r23		;
     d38:	77 1f       	adc	r23, r23
	rol	r24		;
     d3a:	88 1f       	adc	r24, r24
	rol	r25		;
     d3c:	99 1f       	adc	r25, r25
	rol	r26		;
     d3e:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     d40:	a4 17       	cp	r26, r20
	brcs	3f		;
     d42:	10 f0       	brcs	.+4      	; 0xd48 <xitoa+0x40>
	sub	r26, r20	;
     d44:	a4 1b       	sub	r26, r20
	inc	r22		;
     d46:	63 95       	inc	r22
3:	dec	r21		;
     d48:	5a 95       	dec	r21
	brne	2b		;/
     d4a:	a9 f7       	brne	.-22     	; 0xd36 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     d4c:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     d4e:	08 f0       	brcs	.+2      	; 0xd52 <xitoa+0x4a>
	subi	r26, -7		;
     d50:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     d52:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     d54:	af 93       	push	r26
	inc	r31		;/
     d56:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     d58:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     d5a:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     d5c:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     d5e:	91 05       	cpc	r25, r1
	brne	1b		;/
     d60:	41 f7       	brne	.-48     	; 0xd32 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     d62:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     d64:	11 f4       	brne	.+4      	; 0xd6a <xitoa+0x62>
	push	r30		;
     d66:	ef 93       	push	r30
	inc	r31		;/
     d68:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     d6a:	f2 17       	cp	r31, r18
	brcc	6f		;
     d6c:	18 f4       	brcc	.+6      	; 0xd74 <xitoa+0x6c>
	push	r19		;
     d6e:	3f 93       	push	r19
	inc	r31		;
     d70:	f3 95       	inc	r31
	rjmp	5b		;/
     d72:	fb cf       	rjmp	.-10     	; 0xd6a <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     d74:	8f 91       	pop	r24
	rcall	xputc		;
     d76:	b5 df       	rcall	.-150    	; 0xce2 <xputc>
	dec	r31		;
     d78:	fa 95       	dec	r31
	brne	6b		;/
     d7a:	e1 f7       	brne	.-8      	; 0xd74 <xitoa+0x6c>

	ret
     d7c:	08 95       	ret

00000d7e <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     d7e:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     d80:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     d82:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     d84:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     d86:	21 f0       	breq	.+8      	; 0xd90 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     d88:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     d8a:	19 f0       	breq	.+6      	; 0xd92 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     d8c:	aa df       	rcall	.-172    	; 0xce2 <xputc>
	rjmp	0b		;/
     d8e:	f9 cf       	rjmp	.-14     	; 0xd82 <xvprintf+0x4>
90:	ret
     d90:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     d92:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     d94:	e8 94       	clt
	_LPMI	r21		;Get flags
     d96:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     d98:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     d9a:	c1 f3       	breq	.-16     	; 0xd8c <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     d9c:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     d9e:	11 f4       	brne	.+4      	; 0xda4 <xvprintf+0x26>
	set			;/
     da0:	68 94       	set
22:	_LPMI	r21		;Get width
     da2:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     da4:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     da6:	48 f4       	brcc	.+18     	; 0xdba <xvprintf+0x3c>
	subi	r21, '0'	;
     da8:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     daa:	90 f3       	brcs	.-28     	; 0xd90 <xvprintf+0x12>
	lsl	r18		;
     dac:	22 0f       	add	r18, r18
	mov	r0, r18		;
     dae:	02 2e       	mov	r0, r18
	lsl	r18		;
     db0:	22 0f       	add	r18, r18
	lsl	r18		;
     db2:	22 0f       	add	r18, r18
	add	r18, r0		;
     db4:	20 0d       	add	r18, r0
	add	r18, r21	;
     db6:	25 0f       	add	r18, r21
	rjmp	22b		;/
     db8:	f4 cf       	rjmp	.-24     	; 0xda2 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     dba:	0e f4       	brtc	.+2      	; 0xdbe <xvprintf+0x40>
	neg	r18		;
     dbc:	21 95       	neg	r18
25:	ld	r24, Y+		;
     dbe:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     dc0:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     dc2:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     dc4:	19 f3       	breq	.-58     	; 0xd8c <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     dc6:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     dc8:	29 f1       	breq	.+74     	; 0xe14 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     dca:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     dcc:	59 f1       	breq	.+86     	; 0xe24 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     dce:	bc 01       	movw	r22, r24
	clr	r24		;
     dd0:	88 27       	eor	r24, r24
	clr	r25		;
     dd2:	99 27       	eor	r25, r25
	clt			;/
     dd4:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     dd6:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     dd8:	21 f4       	brne	.+8      	; 0xde2 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     dda:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     ddc:	99 91       	ld	r25, Y+
	set			;
     dde:	68 94       	set
	_LPMI	r21		;/
     de0:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     de2:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     de4:	39 f4       	brne	.+14     	; 0xdf4 <xvprintf+0x76>
	ldi	r20, -10	;
     de6:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     de8:	7e f0       	brts	.+30     	; 0xe08 <xvprintf+0x8a>
	sbrs	r23, 7		;
     dea:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     dec:	0d c0       	rjmp	.+26     	; 0xe08 <xvprintf+0x8a>
	ldi	r24, -1		;
     dee:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     df0:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     df2:	0a c0       	rjmp	.+20     	; 0xe08 <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     df4:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     df6:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     df8:	39 f0       	breq	.+14     	; 0xe08 <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     dfa:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     dfc:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     dfe:	21 f0       	breq	.+8      	; 0xe08 <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     e00:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     e02:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     e04:	09 f0       	breq	.+2      	; 0xe08 <xvprintf+0x8a>
	ret			;abort
     e06:	08 95       	ret
40:	push	ZH		;Output the value
     e08:	ff 93       	push	r31
	push	ZL		;
     e0a:	ef 93       	push	r30
	rcall	xitoa		;
     e0c:	7d df       	rcall	.-262    	; 0xd08 <xitoa>
42:	pop	ZL		;
     e0e:	ef 91       	pop	r30
	pop	ZH		;
     e10:	ff 91       	pop	r31
	rjmp	0b		;/
     e12:	b7 cf       	rjmp	.-146    	; 0xd82 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     e14:	ff 93       	push	r31
	push	ZL
     e16:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     e18:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     e1a:	81 91       	ld	r24, Z+
	cpi	r24, 0
     e1c:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     e1e:	b9 f3       	breq	.-18     	; 0xe0e <xvprintf+0x90>
	rcall	xputc
     e20:	60 df       	rcall	.-320    	; 0xce2 <xputc>
	rjmp	51b
     e22:	fb cf       	rjmp	.-10     	; 0xe1a <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     e24:	ff 93       	push	r31
	push	ZL
     e26:	ef 93       	push	r30
	rcall	xputs
     e28:	68 df       	rcall	.-304    	; 0xcfa <xputs>
	rjmp	42b
     e2a:	f1 cf       	rjmp	.-30     	; 0xe0e <xvprintf+0x90>

00000e2c <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     e2c:	df 93       	push	r29
	push	YL
     e2e:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     e30:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     e32:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     e34:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     e36:	a3 df       	rcall	.-186    	; 0xd7e <xvprintf>
	pop	YL
     e38:	cf 91       	pop	r28
	pop	YH
     e3a:	df 91       	pop	r29
	ret
     e3c:	08 95       	ret

00000e3e <keymap_key_to_keycode>:


/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
     e3e:	9c e0       	ldi	r25, 0x0C	; 12
     e40:	79 9f       	mul	r23, r25
     e42:	f0 01       	movw	r30, r0
     e44:	11 24       	eor	r1, r1
     e46:	90 e3       	ldi	r25, 0x30	; 48
     e48:	89 9f       	mul	r24, r25
     e4a:	e0 0d       	add	r30, r0
     e4c:	f1 1d       	adc	r31, r1
     e4e:	11 24       	eor	r1, r1
     e50:	e6 0f       	add	r30, r22
     e52:	f1 1d       	adc	r31, r1
     e54:	ea 5e       	subi	r30, 0xEA	; 234
     e56:	fe 4f       	sbci	r31, 0xFE	; 254
     e58:	84 91       	lpm	r24, Z
}
     e5a:	08 95       	ret

00000e5c <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
     e5c:	e8 2f       	mov	r30, r24
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	ee 0f       	add	r30, r30
     e62:	ff 1f       	adc	r31, r31
     e64:	e0 5a       	subi	r30, 0xA0	; 160
     e66:	f0 40       	sbci	r31, 0x00	; 0
}
     e68:	85 91       	lpm	r24, Z+
     e6a:	94 91       	lpm	r25, Z
     e6c:	08 95       	ret

00000e6e <unselect_rows>:
 * pin: F0  F1  F4  F5 
 */
static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRF  &= ~0b00110011;
     e6e:	80 b3       	in	r24, 0x10	; 16
     e70:	8c 7c       	andi	r24, 0xCC	; 204
     e72:	80 bb       	out	0x10, r24	; 16
    PORTF &= ~0b00110011;
     e74:	81 b3       	in	r24, 0x11	; 17
     e76:	8c 7c       	andi	r24, 0xCC	; 204
     e78:	81 bb       	out	0x11, r24	; 17
     e7a:	08 95       	ret

00000e7c <matrix_init>:
}

void matrix_init(void)
{
    // initialize row and col
    unselect_rows();
     e7c:	0e 94 37 07 	call	0xe6e	; 0xe6e <unselect_rows>
 * pin: F6  F7  B6  B5  B4  D7  C7  C6  D3  D2  D1  D0  
 */
static void  init_cols(void)
{
    // Input with pull-up(DDR:0, PORT:1)
    DDRF  &= ~(1<<6 | 1<<7);
     e80:	80 b3       	in	r24, 0x10	; 16
     e82:	8f 73       	andi	r24, 0x3F	; 63
     e84:	80 bb       	out	0x10, r24	; 16
    PORTF |=  (1<<6 | 1<<7);
     e86:	81 b3       	in	r24, 0x11	; 17
     e88:	80 6c       	ori	r24, 0xC0	; 192
     e8a:	81 bb       	out	0x11, r24	; 17
    DDRB  &= ~(1<<7 | 1<<6 | 1<< 5 | 1<<4);
     e8c:	84 b1       	in	r24, 0x04	; 4
     e8e:	8f 70       	andi	r24, 0x0F	; 15
     e90:	84 b9       	out	0x04, r24	; 4
    PORTB |=  (1<<6 | 1<<5 | 1<<4);
     e92:	85 b1       	in	r24, 0x05	; 5
     e94:	80 67       	ori	r24, 0x70	; 112
     e96:	85 b9       	out	0x05, r24	; 5
    DDRD  &= ~(1<<7 | 1<<3 | 1<<2| 1<<1 | 1<<0 );
     e98:	8a b1       	in	r24, 0x0a	; 10
     e9a:	80 77       	andi	r24, 0x70	; 112
     e9c:	8a b9       	out	0x0a, r24	; 10
    PORTD |=  (1<<7 | 1<<3 | 1<<2| 1<<1 | 1<<0 );
     e9e:	8b b1       	in	r24, 0x0b	; 11
     ea0:	8f 68       	ori	r24, 0x8F	; 143
     ea2:	8b b9       	out	0x0b, r24	; 11
    DDRC  &= ~(1<<7 | 1<<6);
     ea4:	87 b1       	in	r24, 0x07	; 7
     ea6:	8f 73       	andi	r24, 0x3F	; 63
     ea8:	87 b9       	out	0x07, r24	; 7
    PORTC |=  (1<<7 | 1<<6);
     eaa:	88 b1       	in	r24, 0x08	; 8
     eac:	80 6c       	ori	r24, 0xC0	; 192
     eae:	88 b9       	out	0x08, r24	; 8
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     eb0:	10 92 43 01 	sts	0x0143, r1
     eb4:	10 92 42 01 	sts	0x0142, r1
        matrix_debouncing[i] = 0;
     eb8:	10 92 3b 01 	sts	0x013B, r1
     ebc:	10 92 3a 01 	sts	0x013A, r1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     ec0:	10 92 45 01 	sts	0x0145, r1
     ec4:	10 92 44 01 	sts	0x0144, r1
        matrix_debouncing[i] = 0;
     ec8:	10 92 3d 01 	sts	0x013D, r1
     ecc:	10 92 3c 01 	sts	0x013C, r1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     ed0:	10 92 47 01 	sts	0x0147, r1
     ed4:	10 92 46 01 	sts	0x0146, r1
        matrix_debouncing[i] = 0;
     ed8:	10 92 3f 01 	sts	0x013F, r1
     edc:	10 92 3e 01 	sts	0x013E, r1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     ee0:	10 92 49 01 	sts	0x0149, r1
     ee4:	10 92 48 01 	sts	0x0148, r1
        matrix_debouncing[i] = 0;
     ee8:	10 92 41 01 	sts	0x0141, r1
     eec:	10 92 40 01 	sts	0x0140, r1
     ef0:	08 95       	ret

00000ef2 <matrix_scan>:
    }
}

uint8_t matrix_scan(void)
{
     ef2:	bf 92       	push	r11
     ef4:	cf 92       	push	r12
     ef6:	df 92       	push	r13
     ef8:	ef 92       	push	r14
     efa:	ff 92       	push	r15
     efc:	0f 93       	push	r16
     efe:	1f 93       	push	r17
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	ca e3       	ldi	r28, 0x3A	; 58
     f06:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     f08:	d1 2c       	mov	r13, r1
    PORTC |=  (1<<7 | 1<<6);
}

static matrix_row_t read_cols(void)
{
    return (PINF&(1<<6) ? 0 : (1<<0)) |
     f0a:	cc 24       	eor	r12, r12
     f0c:	c3 94       	inc	r12
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
            }
            debouncing = DEBOUNCE;
     f0e:	a5 e0       	ldi	r26, 0x05	; 5
     f10:	ba 2e       	mov	r11, r26
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
     f12:	bf ef       	ldi	r27, 0xFF	; 255
     f14:	eb 2e       	mov	r14, r27
     f16:	b1 e0       	ldi	r27, 0x01	; 1
     f18:	fb 2e       	mov	r15, r27
}

static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
    switch (row) {
     f1a:	82 e0       	ldi	r24, 0x02	; 2
     f1c:	d8 16       	cp	r13, r24
     f1e:	61 f0       	breq	.+24     	; 0xf38 <matrix_scan+0x46>
     f20:	93 e0       	ldi	r25, 0x03	; 3
     f22:	d9 16       	cp	r13, r25
     f24:	61 f0       	breq	.+24     	; 0xf3e <matrix_scan+0x4c>
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	d8 16       	cp	r13, r24
     f2a:	19 f0       	breq	.+6      	; 0xf32 <matrix_scan+0x40>
        case 0:
            DDRF  |= (1<<0);
     f2c:	80 9a       	sbi	0x10, 0	; 16
            PORTF &= ~(1<<0);
     f2e:	88 98       	cbi	0x11, 0	; 17
     f30:	08 c0       	rjmp	.+16     	; 0xf42 <matrix_scan+0x50>
            break;
        case 1:
            DDRF  |= (1<<1);
     f32:	81 9a       	sbi	0x10, 1	; 16
            PORTF &= ~(1<<1);
     f34:	89 98       	cbi	0x11, 1	; 17
     f36:	05 c0       	rjmp	.+10     	; 0xf42 <matrix_scan+0x50>
            break;
        case 2:
            DDRF  |= (1<<4);
     f38:	84 9a       	sbi	0x10, 4	; 16
            PORTF &= ~(1<<4);
     f3a:	8c 98       	cbi	0x11, 4	; 17
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <matrix_scan+0x50>
            break;
        case 3:
            DDRF  |= (1<<5);
     f3e:	85 9a       	sbi	0x10, 5	; 16
            PORTF &= ~(1<<5);
     f40:	8d 98       	cbi	0x11, 5	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f42:	90 ea       	ldi	r25, 0xA0	; 160
     f44:	9a 95       	dec	r25
     f46:	f1 f7       	brne	.-4      	; 0xf44 <matrix_scan+0x52>
    PORTC |=  (1<<7 | 1<<6);
}

static matrix_row_t read_cols(void)
{
    return (PINF&(1<<6) ? 0 : (1<<0)) |
     f48:	8f b1       	in	r24, 0x0f	; 15
     f4a:	82 95       	swap	r24
     f4c:	86 95       	lsr	r24
     f4e:	86 95       	lsr	r24
     f50:	83 70       	andi	r24, 0x03	; 3
     f52:	8c 25       	eor	r24, r12
     f54:	08 2f       	mov	r16, r24
     f56:	01 70       	andi	r16, 0x01	; 1
     f58:	10 e0       	ldi	r17, 0x00	; 0
           (PINF&(1<<7) ? 0 : (1<<1)) |
     f5a:	8f b1       	in	r24, 0x0f	; 15
     f5c:	99 27       	eor	r25, r25
     f5e:	87 fd       	sbrc	r24, 7
     f60:	90 95       	com	r25
     f62:	80 95       	com	r24
     f64:	90 95       	com	r25
     f66:	88 27       	eor	r24, r24
     f68:	99 0f       	add	r25, r25
     f6a:	88 1f       	adc	r24, r24
     f6c:	99 27       	eor	r25, r25
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
    PORTC |=  (1<<7 | 1<<6);
}

static matrix_row_t read_cols(void)
{
    return (PINF&(1<<6) ? 0 : (1<<0)) |
     f72:	80 2b       	or	r24, r16
     f74:	91 2b       	or	r25, r17
           (PINF&(1<<7) ? 0 : (1<<1)) |
           (PINB&(1<<6) ? 0 : (1<<2)) |
     f76:	1e 9b       	sbis	0x03, 6	; 3
     f78:	03 c0       	rjmp	.+6      	; 0xf80 <matrix_scan+0x8e>
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <matrix_scan+0x92>
     f80:	24 e0       	ldi	r18, 0x04	; 4
     f82:	30 e0       	ldi	r19, 0x00	; 0
}

static matrix_row_t read_cols(void)
{
    return (PINF&(1<<6) ? 0 : (1<<0)) |
           (PINF&(1<<7) ? 0 : (1<<1)) |
     f84:	82 2b       	or	r24, r18
     f86:	93 2b       	or	r25, r19
           (PINB&(1<<6) ? 0 : (1<<2)) |
           (PINB&(1<<5) ? 0 : (1<<3)) |
     f88:	1d 9b       	sbis	0x03, 5	; 3
     f8a:	03 c0       	rjmp	.+6      	; 0xf92 <matrix_scan+0xa0>
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <matrix_scan+0xa4>
     f92:	28 e0       	ldi	r18, 0x08	; 8
     f94:	30 e0       	ldi	r19, 0x00	; 0

static matrix_row_t read_cols(void)
{
    return (PINF&(1<<6) ? 0 : (1<<0)) |
           (PINF&(1<<7) ? 0 : (1<<1)) |
           (PINB&(1<<6) ? 0 : (1<<2)) |
     f96:	82 2b       	or	r24, r18
     f98:	93 2b       	or	r25, r19
           (PINB&(1<<5) ? 0 : (1<<3)) |
           (PINB&(1<<4) ? 0 : (1<<4)) |
     f9a:	1c 9b       	sbis	0x03, 4	; 3
     f9c:	03 c0       	rjmp	.+6      	; 0xfa4 <matrix_scan+0xb2>
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <matrix_scan+0xb6>
     fa4:	20 e1       	ldi	r18, 0x10	; 16
     fa6:	30 e0       	ldi	r19, 0x00	; 0
static matrix_row_t read_cols(void)
{
    return (PINF&(1<<6) ? 0 : (1<<0)) |
           (PINF&(1<<7) ? 0 : (1<<1)) |
           (PINB&(1<<6) ? 0 : (1<<2)) |
           (PINB&(1<<5) ? 0 : (1<<3)) |
     fa8:	82 2b       	or	r24, r18
     faa:	93 2b       	or	r25, r19
           (PINB&(1<<4) ? 0 : (1<<4)) |
           (PIND&(1<<7) ? 0 : (1<<5)) |
     fac:	29 b1       	in	r18, 0x09	; 9
     fae:	33 27       	eor	r19, r19
     fb0:	27 fd       	sbrc	r18, 7
     fb2:	30 95       	com	r19
     fb4:	20 95       	com	r18
     fb6:	30 95       	com	r19
     fb8:	22 27       	eor	r18, r18
     fba:	33 0f       	add	r19, r19
     fbc:	22 1f       	adc	r18, r18
     fbe:	33 27       	eor	r19, r19
     fc0:	55 e0       	ldi	r21, 0x05	; 5
     fc2:	22 0f       	add	r18, r18
     fc4:	33 1f       	adc	r19, r19
     fc6:	5a 95       	dec	r21
     fc8:	e1 f7       	brne	.-8      	; 0xfc2 <matrix_scan+0xd0>
{
    return (PINF&(1<<6) ? 0 : (1<<0)) |
           (PINF&(1<<7) ? 0 : (1<<1)) |
           (PINB&(1<<6) ? 0 : (1<<2)) |
           (PINB&(1<<5) ? 0 : (1<<3)) |
           (PINB&(1<<4) ? 0 : (1<<4)) |
     fca:	82 2b       	or	r24, r18
     fcc:	93 2b       	or	r25, r19
           (PIND&(1<<7) ? 0 : (1<<5)) |
           (PINC&(1<<7) ? 0 : (1<<6)) |
     fce:	26 b1       	in	r18, 0x06	; 6
     fd0:	33 27       	eor	r19, r19
     fd2:	27 fd       	sbrc	r18, 7
     fd4:	30 95       	com	r19
     fd6:	20 95       	com	r18
     fd8:	30 95       	com	r19
     fda:	22 27       	eor	r18, r18
     fdc:	33 0f       	add	r19, r19
     fde:	22 1f       	adc	r18, r18
     fe0:	33 27       	eor	r19, r19
     fe2:	76 e0       	ldi	r23, 0x06	; 6
     fe4:	22 0f       	add	r18, r18
     fe6:	33 1f       	adc	r19, r19
     fe8:	7a 95       	dec	r23
     fea:	e1 f7       	brne	.-8      	; 0xfe4 <matrix_scan+0xf2>
    return (PINF&(1<<6) ? 0 : (1<<0)) |
           (PINF&(1<<7) ? 0 : (1<<1)) |
           (PINB&(1<<6) ? 0 : (1<<2)) |
           (PINB&(1<<5) ? 0 : (1<<3)) |
           (PINB&(1<<4) ? 0 : (1<<4)) |
           (PIND&(1<<7) ? 0 : (1<<5)) |
     fec:	82 2b       	or	r24, r18
     fee:	93 2b       	or	r25, r19
           (PINC&(1<<7) ? 0 : (1<<6)) |
           (PINC&(1<<6) ? 0 : (1<<7)) |
     ff0:	36 9b       	sbis	0x06, 6	; 6
     ff2:	03 c0       	rjmp	.+6      	; 0xffa <matrix_scan+0x108>
     ff4:	60 e0       	ldi	r22, 0x00	; 0
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <matrix_scan+0x10c>
     ffa:	60 e8       	ldi	r22, 0x80	; 128
     ffc:	70 e0       	ldi	r23, 0x00	; 0
           (PINF&(1<<7) ? 0 : (1<<1)) |
           (PINB&(1<<6) ? 0 : (1<<2)) |
           (PINB&(1<<5) ? 0 : (1<<3)) |
           (PINB&(1<<4) ? 0 : (1<<4)) |
           (PIND&(1<<7) ? 0 : (1<<5)) |
           (PINC&(1<<7) ? 0 : (1<<6)) |
     ffe:	86 2b       	or	r24, r22
    1000:	97 2b       	or	r25, r23
           (PINC&(1<<6) ? 0 : (1<<7)) |
           (PIND&(1<<3) ? 0 : (1<<8)) |
    1002:	4b 9b       	sbis	0x09, 3	; 9
    1004:	03 c0       	rjmp	.+6      	; 0x100c <matrix_scan+0x11a>
    1006:	60 e0       	ldi	r22, 0x00	; 0
    1008:	70 e0       	ldi	r23, 0x00	; 0
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <matrix_scan+0x11e>
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	71 e0       	ldi	r23, 0x01	; 1
           (PINB&(1<<6) ? 0 : (1<<2)) |
           (PINB&(1<<5) ? 0 : (1<<3)) |
           (PINB&(1<<4) ? 0 : (1<<4)) |
           (PIND&(1<<7) ? 0 : (1<<5)) |
           (PINC&(1<<7) ? 0 : (1<<6)) |
           (PINC&(1<<6) ? 0 : (1<<7)) |
    1010:	86 2b       	or	r24, r22
    1012:	97 2b       	or	r25, r23
           (PIND&(1<<3) ? 0 : (1<<8)) |
           (PIND&(1<<2) ? 0 : (1<<9)) |
    1014:	4a 9b       	sbis	0x09, 2	; 9
    1016:	03 c0       	rjmp	.+6      	; 0x101e <matrix_scan+0x12c>
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <matrix_scan+0x130>
    101e:	40 e0       	ldi	r20, 0x00	; 0
    1020:	52 e0       	ldi	r21, 0x02	; 2
           (PINB&(1<<5) ? 0 : (1<<3)) |
           (PINB&(1<<4) ? 0 : (1<<4)) |
           (PIND&(1<<7) ? 0 : (1<<5)) |
           (PINC&(1<<7) ? 0 : (1<<6)) |
           (PINC&(1<<6) ? 0 : (1<<7)) |
           (PIND&(1<<3) ? 0 : (1<<8)) |
    1022:	84 2b       	or	r24, r20
    1024:	95 2b       	or	r25, r21
           (PIND&(1<<2) ? 0 : (1<<9)) |
           (PIND&(1<<1) ? 0 : (1<<10)) |
    1026:	49 9b       	sbis	0x09, 1	; 9
    1028:	03 c0       	rjmp	.+6      	; 0x1030 <matrix_scan+0x13e>
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <matrix_scan+0x142>
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	34 e0       	ldi	r19, 0x04	; 4
           (PINB&(1<<4) ? 0 : (1<<4)) |
           (PIND&(1<<7) ? 0 : (1<<5)) |
           (PINC&(1<<7) ? 0 : (1<<6)) |
           (PINC&(1<<6) ? 0 : (1<<7)) |
           (PIND&(1<<3) ? 0 : (1<<8)) |
           (PIND&(1<<2) ? 0 : (1<<9)) |
    1034:	82 2b       	or	r24, r18
    1036:	93 2b       	or	r25, r19
           (PIND&(1<<1) ? 0 : (1<<10)) |
           (PIND&(1<<0) ? 0 : (1<<11)) ;
    1038:	48 9b       	sbis	0x09, 0	; 9
    103a:	03 c0       	rjmp	.+6      	; 0x1042 <matrix_scan+0x150>
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <matrix_scan+0x154>
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	38 e0       	ldi	r19, 0x08	; 8
           (PIND&(1<<7) ? 0 : (1<<5)) |
           (PINC&(1<<7) ? 0 : (1<<6)) |
           (PINC&(1<<6) ? 0 : (1<<7)) |
           (PIND&(1<<3) ? 0 : (1<<8)) |
           (PIND&(1<<2) ? 0 : (1<<9)) |
           (PIND&(1<<1) ? 0 : (1<<10)) |
    1046:	82 2b       	or	r24, r18
    1048:	93 2b       	or	r25, r19
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
    104a:	28 81       	ld	r18, Y
    104c:	39 81       	ldd	r19, Y+1	; 0x01
    104e:	28 17       	cp	r18, r24
    1050:	39 07       	cpc	r19, r25
    1052:	41 f1       	breq	.+80     	; 0x10a4 <matrix_scan+0x1b2>
            matrix_debouncing[i] = cols;
    1054:	99 83       	std	Y+1, r25	; 0x01
    1056:	88 83       	st	Y, r24
            if (debouncing) {
    1058:	80 91 00 01 	lds	r24, 0x0100
    105c:	88 23       	and	r24, r24
    105e:	01 f1       	breq	.+64     	; 0x10a0 <matrix_scan+0x1ae>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    1060:	80 91 c1 01 	lds	r24, 0x01C1
    1064:	80 ff       	sbrs	r24, 0
    1066:	04 c0       	rjmp	.+8      	; 0x1070 <matrix_scan+0x17e>
    1068:	84 e0       	ldi	r24, 0x04	; 4
    106a:	92 e0       	ldi	r25, 0x02	; 2
    106c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    1070:	80 91 c1 01 	lds	r24, 0x01C1
    1074:	80 ff       	sbrs	r24, 0
    1076:	0c c0       	rjmp	.+24     	; 0x1090 <matrix_scan+0x19e>
    1078:	80 91 00 01 	lds	r24, 0x0100
    107c:	1f 92       	push	r1
    107e:	8f 93       	push	r24
    1080:	ff 92       	push	r15
    1082:	ef 92       	push	r14
    1084:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	80 91 c1 01 	lds	r24, 0x01C1
    1094:	80 ff       	sbrs	r24, 0
    1096:	04 c0       	rjmp	.+8      	; 0x10a0 <matrix_scan+0x1ae>
    1098:	8d ef       	ldi	r24, 0xFD	; 253
    109a:	91 e0       	ldi	r25, 0x01	; 1
    109c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
            }
            debouncing = DEBOUNCE;
    10a0:	b0 92 00 01 	sts	0x0100, r11
        }
        unselect_rows();
    10a4:	0e 94 37 07 	call	0xe6e	; 0xe6e <unselect_rows>
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    10a8:	d3 94       	inc	r13
    10aa:	22 96       	adiw	r28, 0x02	; 2
    10ac:	84 e0       	ldi	r24, 0x04	; 4
    10ae:	d8 12       	cpse	r13, r24
    10b0:	34 cf       	rjmp	.-408    	; 0xf1a <matrix_scan+0x28>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
    10b2:	80 91 00 01 	lds	r24, 0x0100
    10b6:	88 23       	and	r24, r24
    10b8:	61 f1       	breq	.+88     	; 0x1112 <matrix_scan+0x220>
        if (--debouncing) {
    10ba:	81 50       	subi	r24, 0x01	; 1
    10bc:	80 93 00 01 	sts	0x0100, r24
    10c0:	88 23       	and	r24, r24
    10c2:	39 f0       	breq	.+14     	; 0x10d2 <matrix_scan+0x1e0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10c4:	8f e9       	ldi	r24, 0x9F	; 159
    10c6:	9f e0       	ldi	r25, 0x0F	; 15
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	f1 f7       	brne	.-4      	; 0x10c8 <matrix_scan+0x1d6>
    10cc:	00 c0       	rjmp	.+0      	; 0x10ce <matrix_scan+0x1dc>
    10ce:	00 00       	nop
    10d0:	20 c0       	rjmp	.+64     	; 0x1112 <matrix_scan+0x220>
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
    10d2:	80 91 3a 01 	lds	r24, 0x013A
    10d6:	90 91 3b 01 	lds	r25, 0x013B
    10da:	90 93 43 01 	sts	0x0143, r25
    10de:	80 93 42 01 	sts	0x0142, r24
    10e2:	80 91 3c 01 	lds	r24, 0x013C
    10e6:	90 91 3d 01 	lds	r25, 0x013D
    10ea:	90 93 45 01 	sts	0x0145, r25
    10ee:	80 93 44 01 	sts	0x0144, r24
    10f2:	80 91 3e 01 	lds	r24, 0x013E
    10f6:	90 91 3f 01 	lds	r25, 0x013F
    10fa:	90 93 47 01 	sts	0x0147, r25
    10fe:	80 93 46 01 	sts	0x0146, r24
    1102:	80 91 40 01 	lds	r24, 0x0140
    1106:	90 91 41 01 	lds	r25, 0x0141
    110a:	90 93 49 01 	sts	0x0149, r25
    110e:	80 93 48 01 	sts	0x0148, r24
            }
        }
    }

    return 1;
}
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	ff 90       	pop	r15
    111e:	ef 90       	pop	r14
    1120:	df 90       	pop	r13
    1122:	cf 90       	pop	r12
    1124:	bf 90       	pop	r11
    1126:	08 95       	ret

00001128 <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    1128:	e8 2f       	mov	r30, r24
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	ee 0f       	add	r30, r30
    112e:	ff 1f       	adc	r31, r31
    1130:	ee 5b       	subi	r30, 0xBE	; 190
    1132:	fe 4f       	sbci	r31, 0xFE	; 254
}
    1134:	80 81       	ld	r24, Z
    1136:	91 81       	ldd	r25, Z+1	; 0x01
    1138:	08 95       	ret

0000113a <matrix_print>:

void matrix_print(void)
{
    113a:	cf 92       	push	r12
    113c:	df 92       	push	r13
    113e:	ef 92       	push	r14
    1140:	ff 92       	push	r15
    1142:	0f 93       	push	r16
    1144:	1f 93       	push	r17
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
    114a:	86 ee       	ldi	r24, 0xE6	; 230
    114c:	91 e0       	ldi	r25, 0x01	; 1
    114e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    1152:	22 e4       	ldi	r18, 0x42	; 66
    1154:	e2 2e       	mov	r14, r18
    1156:	21 e0       	ldi	r18, 0x01	; 1
    1158:	f2 2e       	mov	r15, r18
    115a:	c0 e0       	ldi	r28, 0x00	; 0
    115c:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    115e:	31 ee       	ldi	r19, 0xE1	; 225
    1160:	c3 2e       	mov	r12, r19
    1162:	31 e0       	ldi	r19, 0x01	; 1
    1164:	d3 2e       	mov	r13, r19
        pbin_reverse16(matrix_get_row(row));
    1166:	08 ed       	ldi	r16, 0xD8	; 216
    1168:	11 e0       	ldi	r17, 0x01	; 1

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	df 92       	push	r13
    1170:	cf 92       	push	r12
    1172:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    1176:	8e ed       	ldi	r24, 0xDE	; 222
    1178:	91 e0       	ldi	r25, 0x01	; 1
    117a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
        pbin_reverse16(matrix_get_row(row));
    117e:	f7 01       	movw	r30, r14
    1180:	81 91       	ld	r24, Z+
    1182:	91 91       	ld	r25, Z+
    1184:	7f 01       	movw	r14, r30
    1186:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <bitrev16>
    118a:	9f 93       	push	r25
    118c:	8f 93       	push	r24
    118e:	1f 93       	push	r17
    1190:	0f 93       	push	r16
    1192:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
        print("\n");
    1196:	86 ed       	ldi	r24, 0xD6	; 214
    1198:	91 e0       	ldi	r25, 0x01	; 1
    119a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    119e:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    11a0:	8d b7       	in	r24, 0x3d	; 61
    11a2:	9e b7       	in	r25, 0x3e	; 62
    11a4:	08 96       	adiw	r24, 0x08	; 8
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	f8 94       	cli
    11aa:	9e bf       	out	0x3e, r25	; 62
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	8d bf       	out	0x3d, r24	; 61
    11b0:	c4 30       	cpi	r28, 0x04	; 4
    11b2:	d1 05       	cpc	r29, r1
    11b4:	d1 f6       	brne	.-76     	; 0x116a <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	1f 91       	pop	r17
    11bc:	0f 91       	pop	r16
    11be:	ff 90       	pop	r15
    11c0:	ef 90       	pop	r14
    11c2:	df 90       	pop	r13
    11c4:	cf 90       	pop	r12
    11c6:	08 95       	ret

000011c8 <led_set>:
#include "led.h"


void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
    11c8:	81 ff       	sbrs	r24, 1
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <led_set+0x8>
        // output low
        DDRB |= (1<<2);
    11cc:	22 9a       	sbi	0x04, 2	; 4
    11ce:	01 c0       	rjmp	.+2      	; 0x11d2 <led_set+0xa>
        PORTB &= ~(1<<2);
    } else {
        // Hi-Z
        DDRB &= ~(1<<2);
    11d0:	22 98       	cbi	0x04, 2	; 4
        PORTB &= ~(1<<2);
    11d2:	2a 98       	cbi	0x05, 2	; 5
    11d4:	08 95       	ret

000011d6 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    11d6:	80 91 5d 01 	lds	r24, 0x015D
    11da:	08 95       	ret

000011dc <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    11dc:	9f b7       	in	r25, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	10 92 4c 01 	sts	0x014C, r1
    11e4:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    11e6:	90 91 d6 01 	lds	r25, 0x01D6
    11ea:	94 30       	cpi	r25, 0x04	; 4
    11ec:	09 f0       	breq	.+2      	; 0x11f0 <sendchar+0x14>
    11ee:	58 c0       	rjmp	.+176    	; 0x12a0 <sendchar+0xc4>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    11f0:	90 91 e9 00 	lds	r25, 0x00E9
    11f4:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    11f6:	20 91 ec 00 	lds	r18, 0x00EC
    11fa:	20 ff       	sbrs	r18, 0
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <sendchar+0x26>
    11fe:	20 e8       	ldi	r18, 0x80	; 128
    1200:	01 c0       	rjmp	.+2      	; 0x1204 <sendchar+0x28>
    1202:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1204:	29 2b       	or	r18, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1206:	94 e0       	ldi	r25, 0x04	; 4
    1208:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    120c:	90 91 eb 00 	lds	r25, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1210:	90 ff       	sbrs	r25, 0
    1212:	43 c0       	rjmp	.+134    	; 0x129a <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1214:	90 91 ee 00 	lds	r25, 0x00EE
    1218:	97 ff       	sbrs	r25, 7
    121a:	3f c0       	rjmp	.+126    	; 0x129a <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    121c:	90 91 4a 01 	lds	r25, 0x014A
    1220:	99 23       	and	r25, r25
    1222:	21 f0       	breq	.+8      	; 0x122c <sendchar+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1224:	90 91 e8 00 	lds	r25, 0x00E8
    1228:	95 ff       	sbrs	r25, 5
    122a:	37 c0       	rjmp	.+110    	; 0x129a <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    timeouted = false;
    122c:	10 92 4a 01 	sts	0x014A, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    1230:	96 e0       	ldi	r25, 0x06	; 6
    1232:	30 91 e8 00 	lds	r19, 0x00E8
    1236:	35 fd       	sbrc	r19, 5
    1238:	15 c0       	rjmp	.+42     	; 0x1264 <sendchar+0x88>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    123a:	30 91 d6 01 	lds	r19, 0x01D6
    123e:	34 30       	cpi	r19, 0x04	; 4
    1240:	61 f5       	brne	.+88     	; 0x129a <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1242:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    1246:	35 fd       	sbrc	r19, 5
    1248:	28 c0       	rjmp	.+80     	; 0x129a <sendchar+0xbe>
    124a:	91 50       	subi	r25, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    124c:	21 f4       	brne	.+8      	; 0x1256 <sendchar+0x7a>
            timeouted = true;
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	80 93 4a 01 	sts	0x014A, r24
            goto ERROR_EXIT;
    1254:	22 c0       	rjmp	.+68     	; 0x129a <sendchar+0xbe>
    1256:	ef e9       	ldi	r30, 0x9F	; 159
    1258:	ff e0       	ldi	r31, 0x0F	; 15
    125a:	31 97       	sbiw	r30, 0x01	; 1
    125c:	f1 f7       	brne	.-4      	; 0x125a <sendchar+0x7e>
    125e:	00 c0       	rjmp	.+0      	; 0x1260 <sendchar+0x84>
    1260:	00 00       	nop
    1262:	e7 cf       	rjmp	.-50     	; 0x1232 <sendchar+0x56>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1264:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1268:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    126c:	85 fd       	sbrc	r24, 5
    126e:	0a c0       	rjmp	.+20     	; 0x1284 <sendchar+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1270:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
    1274:	80 ff       	sbrs	r24, 0
    1276:	fc cf       	rjmp	.-8      	; 0x1270 <sendchar+0x94>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1278:	80 91 e8 00 	lds	r24, 0x00E8
    127c:	8e 77       	andi	r24, 0x7E	; 126
    127e:	80 93 e8 00 	sts	0x00E8, r24
    1282:	06 c0       	rjmp	.+12     	; 0x1290 <sendchar+0xb4>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
    1284:	8f b7       	in	r24, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	91 e0       	ldi	r25, 0x01	; 1
    128a:	90 93 4c 01 	sts	0x014C, r25
    128e:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1290:	2f 70       	andi	r18, 0x0F	; 15
    1292:	20 93 e9 00 	sts	0x00E9, r18
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	08 95       	ret
    129a:	2f 70       	andi	r18, 0x0F	; 15
    129c:	20 93 e9 00 	sts	0x00E9, r18
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    12a0:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    12a2:	08 95       	ret

000012a4 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <send_consumer+0x6>
    12aa:	1f 92       	push	r1
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    12b0:	20 91 d6 01 	lds	r18, 0x01D6
    12b4:	24 30       	cpi	r18, 0x04	; 4
    12b6:	19 f5       	brne	.+70     	; 0x12fe <send_consumer+0x5a>
        return;

    report_extra_t r = {
    12b8:	23 e0       	ldi	r18, 0x03	; 3
    12ba:	29 83       	std	Y+1, r18	; 0x01
    12bc:	9b 83       	std	Y+3, r25	; 0x03
    12be:	8a 83       	std	Y+2, r24	; 0x02
    12c0:	20 93 e9 00 	sts	0x00E9, r18
    12c4:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    12c6:	90 91 e8 00 	lds	r25, 0x00E8
    12ca:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    12cc:	95 fd       	sbrc	r25, 5
    12ce:	06 c0       	rjmp	.+12     	; 0x12dc <send_consumer+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12d0:	95 ed       	ldi	r25, 0xD5	; 213
    12d2:	9a 95       	dec	r25
    12d4:	f1 f7       	brne	.-4      	; 0x12d2 <send_consumer+0x2e>
    12d6:	00 00       	nop
    12d8:	81 11       	cpse	r24, r1
    12da:	f5 cf       	rjmp	.-22     	; 0x12c6 <send_consumer+0x22>
    12dc:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    12e0:	85 ff       	sbrs	r24, 5
    12e2:	0d c0       	rjmp	.+26     	; 0x12fe <send_consumer+0x5a>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    12e4:	40 e0       	ldi	r20, 0x00	; 0
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	63 e0       	ldi	r22, 0x03	; 3
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	ce 01       	movw	r24, r28
    12ee:	01 96       	adiw	r24, 0x01	; 1
    12f0:	0e 94 2a 0c 	call	0x1854	; 0x1854 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12f4:	80 91 e8 00 	lds	r24, 0x00E8
    12f8:	8e 77       	andi	r24, 0x7E	; 126
    12fa:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	08 95       	ret

0000130a <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    130a:	cf 93       	push	r28
    130c:	df 93       	push	r29
    130e:	00 d0       	rcall	.+0      	; 0x1310 <send_system+0x6>
    1310:	1f 92       	push	r1
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1316:	20 91 d6 01 	lds	r18, 0x01D6
    131a:	24 30       	cpi	r18, 0x04	; 4
    131c:	21 f5       	brne	.+72     	; 0x1366 <send_system+0x5c>
        return;

    report_extra_t r = {
    131e:	22 e0       	ldi	r18, 0x02	; 2
    1320:	29 83       	std	Y+1, r18	; 0x01
    1322:	9b 83       	std	Y+3, r25	; 0x03
    1324:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1326:	83 e0       	ldi	r24, 0x03	; 3
    1328:	80 93 e9 00 	sts	0x00E9, r24
    132c:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    132e:	90 91 e8 00 	lds	r25, 0x00E8
    1332:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1334:	95 fd       	sbrc	r25, 5
    1336:	06 c0       	rjmp	.+12     	; 0x1344 <send_system+0x3a>
    1338:	95 ed       	ldi	r25, 0xD5	; 213
    133a:	9a 95       	dec	r25
    133c:	f1 f7       	brne	.-4      	; 0x133a <send_system+0x30>
    133e:	00 00       	nop
    1340:	81 11       	cpse	r24, r1
    1342:	f5 cf       	rjmp	.-22     	; 0x132e <send_system+0x24>
    1344:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1348:	85 ff       	sbrs	r24, 5
    134a:	0d c0       	rjmp	.+26     	; 0x1366 <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    134c:	40 e0       	ldi	r20, 0x00	; 0
    134e:	50 e0       	ldi	r21, 0x00	; 0
    1350:	63 e0       	ldi	r22, 0x03	; 3
    1352:	70 e0       	ldi	r23, 0x00	; 0
    1354:	ce 01       	movw	r24, r28
    1356:	01 96       	adiw	r24, 0x01	; 1
    1358:	0e 94 2a 0c 	call	0x1854	; 0x1854 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    135c:	80 91 e8 00 	lds	r24, 0x00E8
    1360:	8e 77       	andi	r24, 0x7E	; 126
    1362:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	df 91       	pop	r29
    136e:	cf 91       	pop	r28
    1370:	08 95       	ret

00001372 <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1372:	20 91 d6 01 	lds	r18, 0x01D6
    1376:	24 30       	cpi	r18, 0x04	; 4
    1378:	f1 f4       	brne	.+60     	; 0x13b6 <send_mouse+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    137a:	22 e0       	ldi	r18, 0x02	; 2
    137c:	20 93 e9 00 	sts	0x00E9, r18
    1380:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1382:	30 91 e8 00 	lds	r19, 0x00E8
    1386:	21 50       	subi	r18, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1388:	35 fd       	sbrc	r19, 5
    138a:	06 c0       	rjmp	.+12     	; 0x1398 <send_mouse+0x26>
    138c:	35 ed       	ldi	r19, 0xD5	; 213
    138e:	3a 95       	dec	r19
    1390:	f1 f7       	brne	.-4      	; 0x138e <send_mouse+0x1c>
    1392:	00 00       	nop
    1394:	21 11       	cpse	r18, r1
    1396:	f5 cf       	rjmp	.-22     	; 0x1382 <send_mouse+0x10>
    1398:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    139c:	25 ff       	sbrs	r18, 5
    139e:	0b c0       	rjmp	.+22     	; 0x13b6 <send_mouse+0x44>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    13a0:	40 e0       	ldi	r20, 0x00	; 0
    13a2:	50 e0       	ldi	r21, 0x00	; 0
    13a4:	65 e0       	ldi	r22, 0x05	; 5
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	0e 94 2a 0c 	call	0x1854	; 0x1854 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13ac:	80 91 e8 00 	lds	r24, 0x00E8
    13b0:	8e 77       	andi	r24, 0x7E	; 126
    13b2:	80 93 e8 00 	sts	0x00E8, r24
    13b6:	08 95       	ret

000013b8 <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	ec 01       	movw	r28, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    13be:	80 91 d6 01 	lds	r24, 0x01D6
    13c2:	84 30       	cpi	r24, 0x04	; 4
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <send_keyboard+0x10>
    13c6:	47 c0       	rjmp	.+142    	; 0x1456 <send_keyboard+0x9e>
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    13c8:	80 91 0b 01 	lds	r24, 0x010B
    13cc:	88 23       	and	r24, r24
    13ce:	e1 f0       	breq	.+56     	; 0x1408 <send_keyboard+0x50>
    13d0:	80 91 0c 01 	lds	r24, 0x010C
    13d4:	88 23       	and	r24, r24
    13d6:	c1 f0       	breq	.+48     	; 0x1408 <send_keyboard+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13d8:	85 e0       	ldi	r24, 0x05	; 5
    13da:	80 93 e9 00 	sts	0x00E9, r24
    13de:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    13e0:	90 91 e8 00 	lds	r25, 0x00E8
    13e4:	81 50       	subi	r24, 0x01	; 1
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    13e6:	95 fd       	sbrc	r25, 5
    13e8:	06 c0       	rjmp	.+12     	; 0x13f6 <send_keyboard+0x3e>
    13ea:	95 e1       	ldi	r25, 0x15	; 21
    13ec:	9a 95       	dec	r25
    13ee:	f1 f7       	brne	.-4      	; 0x13ec <send_keyboard+0x34>
    13f0:	00 00       	nop
    13f2:	81 11       	cpse	r24, r1
    13f4:	f5 cf       	rjmp	.-22     	; 0x13e0 <send_keyboard+0x28>
    13f6:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    13fa:	85 ff       	sbrs	r24, 5
    13fc:	2c c0       	rjmp	.+88     	; 0x1456 <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    13fe:	40 e0       	ldi	r20, 0x00	; 0
    1400:	50 e0       	ldi	r21, 0x00	; 0
    1402:	60 e1       	ldi	r22, 0x10	; 16
    1404:	70 e0       	ldi	r23, 0x00	; 0
    1406:	17 c0       	rjmp	.+46     	; 0x1436 <send_keyboard+0x7e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	80 93 e9 00 	sts	0x00E9, r24
    140e:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1410:	90 91 e8 00 	lds	r25, 0x00E8
    1414:	81 50       	subi	r24, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1416:	95 fd       	sbrc	r25, 5
    1418:	06 c0       	rjmp	.+12     	; 0x1426 <send_keyboard+0x6e>
    141a:	95 ed       	ldi	r25, 0xD5	; 213
    141c:	9a 95       	dec	r25
    141e:	f1 f7       	brne	.-4      	; 0x141c <send_keyboard+0x64>
    1420:	00 00       	nop
    1422:	81 11       	cpse	r24, r1
    1424:	f5 cf       	rjmp	.-22     	; 0x1410 <send_keyboard+0x58>
    1426:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    142a:	85 ff       	sbrs	r24, 5
    142c:	14 c0       	rjmp	.+40     	; 0x1456 <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    142e:	40 e0       	ldi	r20, 0x00	; 0
    1430:	50 e0       	ldi	r21, 0x00	; 0
    1432:	68 e0       	ldi	r22, 0x08	; 8
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	ce 01       	movw	r24, r28
    1438:	0e 94 2a 0c 	call	0x1854	; 0x1854 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    143c:	80 91 e8 00 	lds	r24, 0x00E8
    1440:	8e 77       	andi	r24, 0x7E	; 126
    1442:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    1446:	80 e1       	ldi	r24, 0x10	; 16
    1448:	fe 01       	movw	r30, r28
    144a:	ad e4       	ldi	r26, 0x4D	; 77
    144c:	b1 e0       	ldi	r27, 0x01	; 1
    144e:	01 90       	ld	r0, Z+
    1450:	0d 92       	st	X+, r0
    1452:	8a 95       	dec	r24
    1454:	e1 f7       	brne	.-8      	; 0x144e <send_keyboard+0x96>
}
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	08 95       	ret

0000145c <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    145c:	84 e4       	ldi	r24, 0x44	; 68
    145e:	92 e0       	ldi	r25, 0x02	; 2
    1460:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    1464:	80 91 d5 01 	lds	r24, 0x01D5
    1468:	81 11       	cpse	r24, r1
    146a:	09 c0       	rjmp	.+18     	; 0x147e <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    146c:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <USB_Disable>
        USB_Init();
    1470:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    1474:	80 91 e2 00 	lds	r24, 0x00E2
    1478:	84 60       	ori	r24, 0x04	; 4
    147a:	80 93 e2 00 	sts	0x00E2, r24
    147e:	08 95       	ret

00001480 <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    1480:	80 e4       	ldi	r24, 0x40	; 64
    1482:	92 e0       	ldi	r25, 0x02	; 2
    1484:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    1488:	10 92 d5 01 	sts	0x01D5, r1
    148c:	08 95       	ret

0000148e <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    148e:	8c e3       	ldi	r24, 0x3C	; 60
    1490:	92 e0       	ldi	r25, 0x02	; 2
    1492:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <xputs>

00001496 <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    1496:	80 91 4b 01 	lds	r24, 0x014B
    149a:	8f 5f       	subi	r24, 0xFF	; 255
    149c:	80 93 4b 01 	sts	0x014B, r24
    14a0:	62 e3       	ldi	r22, 0x32	; 50
    14a2:	0e 94 1f 2a 	call	0x543e	; 0x543e <__udivmodqi4>
    14a6:	91 11       	cpse	r25, r1
    14a8:	35 c0       	rjmp	.+106    	; 0x1514 <EVENT_USB_Device_StartOfFrame+0x7e>
    count = 0;
    14aa:	10 92 4b 01 	sts	0x014B, r1

    if (!console_flush) return;
    14ae:	80 91 4c 01 	lds	r24, 0x014C
    14b2:	88 23       	and	r24, r24
    14b4:	79 f1       	breq	.+94     	; 0x1514 <EVENT_USB_Device_StartOfFrame+0x7e>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    14b6:	80 91 d6 01 	lds	r24, 0x01D6
    14ba:	84 30       	cpi	r24, 0x04	; 4
    14bc:	49 f5       	brne	.+82     	; 0x1510 <EVENT_USB_Device_StartOfFrame+0x7a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    14be:	80 91 e9 00 	lds	r24, 0x00E9
    14c2:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    14c4:	90 91 ec 00 	lds	r25, 0x00EC
    14c8:	90 ff       	sbrs	r25, 0
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <EVENT_USB_Device_StartOfFrame+0x3a>
    14cc:	90 e8       	ldi	r25, 0x80	; 128
    14ce:	01 c0       	rjmp	.+2      	; 0x14d2 <EVENT_USB_Device_StartOfFrame+0x3c>
    14d0:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    14d2:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14d4:	84 e0       	ldi	r24, 0x04	; 4
    14d6:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    14da:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    14de:	80 ff       	sbrs	r24, 0
    14e0:	14 c0       	rjmp	.+40     	; 0x150a <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    14e2:	80 91 ee 00 	lds	r24, 0x00EE
    14e6:	87 ff       	sbrs	r24, 7
    14e8:	10 c0       	rjmp	.+32     	; 0x150a <EVENT_USB_Device_StartOfFrame+0x74>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    14ea:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    14ee:	85 ff       	sbrs	r24, 5
    14f0:	03 c0       	rjmp	.+6      	; 0x14f8 <EVENT_USB_Device_StartOfFrame+0x62>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    14f2:	10 92 f1 00 	sts	0x00F1, r1
    14f6:	f9 cf       	rjmp	.-14     	; 0x14ea <EVENT_USB_Device_StartOfFrame+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    14f8:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    14fc:	80 ff       	sbrs	r24, 0
    14fe:	05 c0       	rjmp	.+10     	; 0x150a <EVENT_USB_Device_StartOfFrame+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1500:	80 91 e8 00 	lds	r24, 0x00E8
    1504:	8e 77       	andi	r24, 0x7E	; 126
    1506:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    150a:	9f 70       	andi	r25, 0x0F	; 15
    150c:	90 93 e9 00 	sts	0x00E9, r25
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    1510:	10 92 4c 01 	sts	0x014C, r1
    1514:	08 95       	ret

00001516 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1516:	42 e0       	ldi	r20, 0x02	; 2
    1518:	61 ec       	ldi	r22, 0xC1	; 193
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <Endpoint_ConfigureEndpoint_Prv>
    1520:	42 e0       	ldi	r20, 0x02	; 2
    1522:	61 ec       	ldi	r22, 0xC1	; 193
    1524:	82 e0       	ldi	r24, 0x02	; 2
    1526:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <Endpoint_ConfigureEndpoint_Prv>
    152a:	42 e0       	ldi	r20, 0x02	; 2
    152c:	61 ec       	ldi	r22, 0xC1	; 193
    152e:	83 e0       	ldi	r24, 0x03	; 3
    1530:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <Endpoint_ConfigureEndpoint_Prv>
    1534:	42 e2       	ldi	r20, 0x22	; 34
    1536:	61 ec       	ldi	r22, 0xC1	; 193
    1538:	84 e0       	ldi	r24, 0x04	; 4
    153a:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <Endpoint_ConfigureEndpoint_Prv>
    153e:	42 e1       	ldi	r20, 0x12	; 18
    1540:	61 ec       	ldi	r22, 0xC1	; 193
    1542:	85 e0       	ldi	r24, 0x05	; 5
    1544:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <Endpoint_ConfigureEndpoint_Prv>

00001548 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    1548:	80 91 d8 01 	lds	r24, 0x01D8
    154c:	83 30       	cpi	r24, 0x03	; 3
    154e:	09 f4       	brne	.+2      	; 0x1552 <EVENT_USB_Device_ControlRequest+0xa>
    1550:	55 c0       	rjmp	.+170    	; 0x15fc <EVENT_USB_Device_ControlRequest+0xb4>
    1552:	30 f4       	brcc	.+12     	; 0x1560 <EVENT_USB_Device_ControlRequest+0x18>
    1554:	81 30       	cpi	r24, 0x01	; 1
    1556:	71 f0       	breq	.+28     	; 0x1574 <EVENT_USB_Device_ControlRequest+0x2c>
    1558:	82 30       	cpi	r24, 0x02	; 2
    155a:	09 f4       	brne	.+2      	; 0x155e <EVENT_USB_Device_ControlRequest+0x16>
    155c:	8e c0       	rjmp	.+284    	; 0x167a <EVENT_USB_Device_ControlRequest+0x132>
    155e:	08 95       	ret
    1560:	8a 30       	cpi	r24, 0x0A	; 10
    1562:	09 f4       	brne	.+2      	; 0x1566 <EVENT_USB_Device_ControlRequest+0x1e>
    1564:	7a c0       	rjmp	.+244    	; 0x165a <EVENT_USB_Device_ControlRequest+0x112>
    1566:	8b 30       	cpi	r24, 0x0B	; 11
    1568:	09 f4       	brne	.+2      	; 0x156c <EVENT_USB_Device_ControlRequest+0x24>
    156a:	60 c0       	rjmp	.+192    	; 0x162c <EVENT_USB_Device_ControlRequest+0xe4>
    156c:	89 30       	cpi	r24, 0x09	; 9
    156e:	09 f0       	breq	.+2      	; 0x1572 <EVENT_USB_Device_ControlRequest+0x2a>
    1570:	9c c0       	rjmp	.+312    	; 0x16aa <EVENT_USB_Device_ControlRequest+0x162>
    1572:	20 c0       	rjmp	.+64     	; 0x15b4 <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1574:	80 91 d7 01 	lds	r24, 0x01D7
    1578:	81 3a       	cpi	r24, 0xA1	; 161
    157a:	09 f0       	breq	.+2      	; 0x157e <EVENT_USB_Device_ControlRequest+0x36>
    157c:	96 c0       	rjmp	.+300    	; 0x16aa <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    157e:	80 91 e8 00 	lds	r24, 0x00E8
    1582:	87 7f       	andi	r24, 0xF7	; 247
    1584:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1588:	80 91 db 01 	lds	r24, 0x01DB
    158c:	90 91 dc 01 	lds	r25, 0x01DC
    1590:	89 2b       	or	r24, r25
    1592:	21 f0       	breq	.+8      	; 0x159c <EVENT_USB_Device_ControlRequest+0x54>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    1594:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	03 c0       	rjmp	.+6      	; 0x15a2 <EVENT_USB_Device_ControlRequest+0x5a>
                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    159c:	60 e1       	ldi	r22, 0x10	; 16

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    159e:	8d e4       	ldi	r24, 0x4D	; 77
    15a0:	91 e0       	ldi	r25, 0x01	; 1
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    15a2:	70 e0       	ldi	r23, 0x00	; 0
    15a4:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    15a8:	80 91 e8 00 	lds	r24, 0x00E8
    15ac:	8b 77       	andi	r24, 0x7B	; 123
    15ae:	80 93 e8 00 	sts	0x00E8, r24
    15b2:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    15b4:	80 91 d7 01 	lds	r24, 0x01D7
    15b8:	81 32       	cpi	r24, 0x21	; 33
    15ba:	09 f0       	breq	.+2      	; 0x15be <EVENT_USB_Device_ControlRequest+0x76>
    15bc:	76 c0       	rjmp	.+236    	; 0x16aa <EVENT_USB_Device_ControlRequest+0x162>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    15be:	80 91 db 01 	lds	r24, 0x01DB
    15c2:	90 91 dc 01 	lds	r25, 0x01DC
    15c6:	00 97       	sbiw	r24, 0x00	; 0
    15c8:	19 f0       	breq	.+6      	; 0x15d0 <EVENT_USB_Device_ControlRequest+0x88>
    15ca:	04 97       	sbiw	r24, 0x04	; 4
    15cc:	09 f0       	breq	.+2      	; 0x15d0 <EVENT_USB_Device_ControlRequest+0x88>
    15ce:	6d c0       	rjmp	.+218    	; 0x16aa <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    15d0:	80 91 e8 00 	lds	r24, 0x00E8
    15d4:	87 7f       	andi	r24, 0xF7	; 247
    15d6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    15da:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    15de:	82 fd       	sbrc	r24, 2
    15e0:	05 c0       	rjmp	.+10     	; 0x15ec <EVENT_USB_Device_ControlRequest+0xa4>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    15e2:	80 91 d6 01 	lds	r24, 0x01D6
    15e6:	81 11       	cpse	r24, r1
    15e8:	f8 cf       	rjmp	.-16     	; 0x15da <EVENT_USB_Device_ControlRequest+0x92>
    15ea:	5f c0       	rjmp	.+190    	; 0x16aa <EVENT_USB_Device_ControlRequest+0x162>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    15ec:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    15f0:	80 93 5d 01 	sts	0x015D, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    15f4:	80 91 e8 00 	lds	r24, 0x00E8
    15f8:	8b 77       	andi	r24, 0x7B	; 123
    15fa:	53 c0       	rjmp	.+166    	; 0x16a2 <EVENT_USB_Device_ControlRequest+0x15a>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    15fc:	80 91 d7 01 	lds	r24, 0x01D7
    1600:	81 3a       	cpi	r24, 0xA1	; 161
    1602:	09 f0       	breq	.+2      	; 0x1606 <EVENT_USB_Device_ControlRequest+0xbe>
    1604:	52 c0       	rjmp	.+164    	; 0x16aa <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1606:	80 91 db 01 	lds	r24, 0x01DB
    160a:	90 91 dc 01 	lds	r25, 0x01DC
    160e:	89 2b       	or	r24, r25
    1610:	09 f0       	breq	.+2      	; 0x1614 <EVENT_USB_Device_ControlRequest+0xcc>
    1612:	4b c0       	rjmp	.+150    	; 0x16aa <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1614:	80 91 e8 00 	lds	r24, 0x00E8
    1618:	87 7f       	andi	r24, 0xF7	; 247
    161a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    161e:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    1622:	80 ff       	sbrs	r24, 0
    1624:	fc cf       	rjmp	.-8      	; 0x161e <EVENT_USB_Device_ControlRequest+0xd6>
                    Endpoint_Write_8(keyboard_protocol);
    1626:	80 91 0b 01 	lds	r24, 0x010B
    162a:	36 c0       	rjmp	.+108    	; 0x1698 <EVENT_USB_Device_ControlRequest+0x150>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    162c:	80 91 d7 01 	lds	r24, 0x01D7
    1630:	81 32       	cpi	r24, 0x21	; 33
    1632:	d9 f5       	brne	.+118    	; 0x16aa <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1634:	80 91 db 01 	lds	r24, 0x01DB
    1638:	90 91 dc 01 	lds	r25, 0x01DC
    163c:	89 2b       	or	r24, r25
    163e:	a9 f5       	brne	.+106    	; 0x16aa <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1640:	80 91 e8 00 	lds	r24, 0x00E8
    1644:	87 7f       	andi	r24, 0xF7	; 247
    1646:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    164a:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    164e:	80 91 d9 01 	lds	r24, 0x01D9
    1652:	80 93 0b 01 	sts	0x010B, r24
                    clear_keyboard();
    1656:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    165a:	80 91 d7 01 	lds	r24, 0x01D7
    165e:	81 32       	cpi	r24, 0x21	; 33
    1660:	21 f5       	brne	.+72     	; 0x16aa <EVENT_USB_Device_ControlRequest+0x162>
    1662:	80 91 e8 00 	lds	r24, 0x00E8
    1666:	87 7f       	andi	r24, 0xF7	; 247
    1668:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    166c:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    1670:	80 91 da 01 	lds	r24, 0x01DA
    1674:	80 93 5e 01 	sts	0x015E, r24
    1678:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    167a:	80 91 d7 01 	lds	r24, 0x01D7
    167e:	81 3a       	cpi	r24, 0xA1	; 161
    1680:	a1 f4       	brne	.+40     	; 0x16aa <EVENT_USB_Device_ControlRequest+0x162>
    1682:	80 91 e8 00 	lds	r24, 0x00E8
    1686:	87 7f       	andi	r24, 0xF7	; 247
    1688:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    168c:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    1690:	80 ff       	sbrs	r24, 0
    1692:	fc cf       	rjmp	.-8      	; 0x168c <EVENT_USB_Device_ControlRequest+0x144>
                Endpoint_Write_8(keyboard_idle);
    1694:	80 91 5e 01 	lds	r24, 0x015E
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1698:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    169c:	80 91 e8 00 	lds	r24, 0x00E8
    16a0:	8e 77       	andi	r24, 0x7E	; 126
    16a2:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    16a6:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <Endpoint_ClearStatusStage>
    16aa:	08 95       	ret

000016ac <hook_early_init>:
}


/* hooks */
__attribute__((weak))
void hook_early_init(void) {}
    16ac:	08 95       	ret

000016ae <hook_late_init>:

__attribute__((weak))
void hook_late_init(void) {}
    16ae:	08 95       	ret

000016b0 <hook_usb_suspend_entry>:

 __attribute__((weak))
void hook_usb_suspend_entry(void)
{
    16b0:	08 95       	ret

000016b2 <EVENT_USB_Device_Suspend>:
    print("[R]");
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    16b2:	88 e3       	ldi	r24, 0x38	; 56
    16b4:	92 e0       	ldi	r25, 0x02	; 2
    16b6:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    hook_usb_suspend_entry();
    16ba:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <hook_usb_suspend_entry>

000016be <hook_usb_suspend_loop>:
}

__attribute__((weak))
void hook_usb_suspend_loop(void)
{
    suspend_power_down();
    16be:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <suspend_power_down>
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    16c2:	80 91 d4 01 	lds	r24, 0x01D4
    16c6:	88 23       	and	r24, r24
    16c8:	29 f0       	breq	.+10     	; 0x16d4 <hook_usb_suspend_loop+0x16>
    16ca:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <suspend_wakeup_condition>
    16ce:	81 11       	cpse	r24, r1
            USB_Device_SendRemoteWakeup();
    16d0:	0c 94 14 0c 	jmp	0x1828	; 0x1828 <USB_Device_SendRemoteWakeup>
    16d4:	08 95       	ret

000016d6 <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    16d6:	84 b7       	in	r24, 0x34	; 52
    16d8:	87 7f       	andi	r24, 0xF7	; 247
    16da:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    16dc:	88 e1       	ldi	r24, 0x18	; 24
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	f8 94       	cli
    16e2:	80 93 60 00 	sts	0x0060, r24
    16e6:	10 92 60 00 	sts	0x0060, r1
    16ea:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	80 e8       	ldi	r24, 0x80	; 128
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	80 93 61 00 	sts	0x0061, r24
    16f8:	90 93 61 00 	sts	0x0061, r25
    16fc:	0f be       	out	0x3f, r0	; 63

int main(void)  __attribute__ ((weak));
int main(void)
{
    setup_mcu();
    hook_early_init();
    16fe:	0e 94 56 0b 	call	0x16ac	; 0x16ac <hook_early_init>
    keyboard_setup();
    1702:	0e 94 21 11 	call	0x2242	; 0x2242 <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    1706:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <USB_Disable>

    USB_Init();
    170a:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <USB_Init>
    170e:	80 91 e2 00 	lds	r24, 0x00E2
    1712:	84 60       	ori	r24, 0x04	; 4
    1714:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    1718:	8e ee       	ldi	r24, 0xEE	; 238
    171a:	98 e0       	ldi	r25, 0x08	; 8
    171c:	0e 94 de 1c 	call	0x39bc	; 0x39bc <print_set_sendchar>
{
    setup_mcu();
    hook_early_init();
    keyboard_setup();
    setup_usb();
    sei();
    1720:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    1722:	80 91 d6 01 	lds	r24, 0x01D6
    1726:	84 30       	cpi	r24, 0x04	; 4
    1728:	e1 f7       	brne	.-8      	; 0x1722 <main+0x4c>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    172a:	83 e2       	ldi	r24, 0x23	; 35
    172c:	92 e0       	ldi	r25, 0x02	; 2
    172e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>

    /* init modules */
    keyboard_init();
    1732:	0e 94 23 11 	call	0x2246	; 0x2246 <keyboard_init>
    host_set_driver(&lufa_driver);
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	91 e0       	ldi	r25, 0x01	; 1
    173a:	0e 94 93 10 	call	0x2126	; 0x2126 <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    173e:	82 e1       	ldi	r24, 0x12	; 18
    1740:	92 e0       	ldi	r25, 0x02	; 2
    1742:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    hook_late_init();
    1746:	0e 94 57 0b 	call	0x16ae	; 0x16ae <hook_late_init>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    174a:	80 91 d6 01 	lds	r24, 0x01D6
    174e:	85 30       	cpi	r24, 0x05	; 5
    1750:	39 f4       	brne	.+14     	; 0x1760 <main+0x8a>
            print("[s]");
    1752:	8e e0       	ldi	r24, 0x0E	; 14
    1754:	92 e0       	ldi	r25, 0x02	; 2
    1756:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
            hook_usb_suspend_loop();
    175a:	0e 94 5f 0b 	call	0x16be	; 0x16be <hook_usb_suspend_loop>
    175e:	f5 cf       	rjmp	.-22     	; 0x174a <main+0x74>
        }

        keyboard_task();
    1760:	0e 94 29 11 	call	0x2252	; 0x2252 <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    1764:	f2 cf       	rjmp	.-28     	; 0x174a <main+0x74>

00001766 <hook_usb_wakeup>:
}

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
    1766:	0c 94 61 1d 	jmp	0x3ac2	; 0x3ac2 <suspend_wakeup_init>

0000176a <EVENT_USB_Device_WakeUp>:
    hook_usb_suspend_entry();
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    176a:	84 e3       	ldi	r24, 0x34	; 52
    176c:	92 e0       	ldi	r25, 0x02	; 2
    176e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    hook_usb_wakeup();
    1772:	0c 94 b3 0b 	jmp	0x1766	; 0x1766 <hook_usb_wakeup>

00001776 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    1776:	29 2f       	mov	r18, r25
    1778:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    177a:	23 30       	cpi	r18, 0x03	; 3
    177c:	31 05       	cpc	r19, r1
    177e:	a9 f0       	breq	.+42     	; 0x17aa <CALLBACK_USB_GetDescriptor+0x34>
    1780:	6c f4       	brge	.+26     	; 0x179c <CALLBACK_USB_GetDescriptor+0x26>
    1782:	21 30       	cpi	r18, 0x01	; 1
    1784:	31 05       	cpc	r19, r1
    1786:	09 f4       	brne	.+2      	; 0x178a <CALLBACK_USB_GetDescriptor+0x14>
    1788:	42 c0       	rjmp	.+132    	; 0x180e <CALLBACK_USB_GetDescriptor+0x98>
    178a:	22 30       	cpi	r18, 0x02	; 2
    178c:	31 05       	cpc	r19, r1
    178e:	09 f0       	breq	.+2      	; 0x1792 <CALLBACK_USB_GetDescriptor+0x1c>
    1790:	43 c0       	rjmp	.+134    	; 0x1818 <CALLBACK_USB_GetDescriptor+0xa2>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    1792:	8d e8       	ldi	r24, 0x8D	; 141
    1794:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    1796:	22 e8       	ldi	r18, 0x82	; 130
    1798:	32 e0       	ldi	r19, 0x02	; 2
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    179a:	42 c0       	rjmp	.+132    	; 0x1820 <CALLBACK_USB_GetDescriptor+0xaa>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    179c:	21 32       	cpi	r18, 0x21	; 33
    179e:	31 05       	cpc	r19, r1
    17a0:	c9 f0       	breq	.+50     	; 0x17d4 <CALLBACK_USB_GetDescriptor+0x5e>
    17a2:	22 32       	cpi	r18, 0x22	; 34
    17a4:	31 05       	cpc	r19, r1
    17a6:	19 f1       	breq	.+70     	; 0x17ee <CALLBACK_USB_GetDescriptor+0x78>
    17a8:	37 c0       	rjmp	.+110    	; 0x1818 <CALLBACK_USB_GetDescriptor+0xa2>
    17aa:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    17ac:	81 30       	cpi	r24, 0x01	; 1
    17ae:	91 05       	cpc	r25, r1
    17b0:	41 f0       	breq	.+16     	; 0x17c2 <CALLBACK_USB_GetDescriptor+0x4c>
    17b2:	82 30       	cpi	r24, 0x02	; 2
    17b4:	91 05       	cpc	r25, r1
    17b6:	41 f0       	breq	.+16     	; 0x17c8 <CALLBACK_USB_GetDescriptor+0x52>
    17b8:	89 2b       	or	r24, r25
    17ba:	71 f5       	brne	.+92     	; 0x1818 <CALLBACK_USB_GetDescriptor+0xa2>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    17bc:	ee e7       	ldi	r30, 0x7E	; 126
    17be:	f2 e0       	ldi	r31, 0x02	; 2
    17c0:	05 c0       	rjmp	.+10     	; 0x17cc <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    17c2:	ea e5       	ldi	r30, 0x5A	; 90
    17c4:	f2 e0       	ldi	r31, 0x02	; 2
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    17c8:	e8 e4       	ldi	r30, 0x48	; 72
    17ca:	f2 e0       	ldi	r31, 0x02	; 2
    17cc:	84 91       	lpm	r24, Z
    17ce:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    17d0:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    17d2:	26 c0       	rjmp	.+76     	; 0x1820 <CALLBACK_USB_GetDescriptor+0xaa>
    17d4:	65 30       	cpi	r22, 0x05	; 5
    17d6:	00 f5       	brcc	.+64     	; 0x1818 <CALLBACK_USB_GetDescriptor+0xa2>
    17d8:	e6 2f       	mov	r30, r22
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	ee 0f       	add	r30, r30
    17de:	ff 1f       	adc	r31, r31
    17e0:	ec 5d       	subi	r30, 0xDC	; 220
    17e2:	fe 4f       	sbci	r31, 0xFE	; 254
    17e4:	20 81       	ld	r18, Z
    17e6:	31 81       	ldd	r19, Z+1	; 0x01
    17e8:	89 e0       	ldi	r24, 0x09	; 9
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	19 c0       	rjmp	.+50     	; 0x1820 <CALLBACK_USB_GetDescriptor+0xaa>
    17ee:	65 30       	cpi	r22, 0x05	; 5
    17f0:	98 f4       	brcc	.+38     	; 0x1818 <CALLBACK_USB_GetDescriptor+0xa2>
    17f2:	e6 2f       	mov	r30, r22
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	df 01       	movw	r26, r30
    17f8:	aa 0f       	add	r26, r26
    17fa:	bb 1f       	adc	r27, r27
    17fc:	a6 5e       	subi	r26, 0xE6	; 230
    17fe:	be 4f       	sbci	r27, 0xFE	; 254
    1800:	2d 91       	ld	r18, X+
    1802:	3c 91       	ld	r19, X
    1804:	eb 5e       	subi	r30, 0xEB	; 235
    1806:	fe 4f       	sbci	r31, 0xFE	; 254
    1808:	80 81       	ld	r24, Z
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	09 c0       	rjmp	.+18     	; 0x1820 <CALLBACK_USB_GetDescriptor+0xaa>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    180e:	82 e1       	ldi	r24, 0x12	; 18
    1810:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    1812:	2f e0       	ldi	r18, 0x0F	; 15
    1814:	33 e0       	ldi	r19, 0x03	; 3
    1816:	04 c0       	rjmp	.+8      	; 0x1820 <CALLBACK_USB_GetDescriptor+0xaa>
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    1820:	fa 01       	movw	r30, r20
    1822:	31 83       	std	Z+1, r19	; 0x01
    1824:	20 83       	st	Z, r18
    return Size;
}
    1826:	08 95       	ret

00001828 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1828:	80 e1       	ldi	r24, 0x10	; 16
    182a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    182c:	82 e1       	ldi	r24, 0x12	; 18
    182e:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1830:	09 b4       	in	r0, 0x29	; 41
    1832:	00 fe       	sbrs	r0, 0
    1834:	fd cf       	rjmp	.-6      	; 0x1830 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1836:	80 91 d8 00 	lds	r24, 0x00D8
    183a:	8f 7d       	andi	r24, 0xDF	; 223
    183c:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    1840:	80 91 e0 00 	lds	r24, 0x00E0
    1844:	82 60       	ori	r24, 0x02	; 2
    1846:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    184a:	80 91 e0 00 	lds	r24, 0x00E0
    184e:	81 fd       	sbrc	r24, 1
    1850:	fc cf       	rjmp	.-8      	; 0x184a <USB_Device_SendRemoteWakeup+0x22>
}
    1852:	08 95       	ret

00001854 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1854:	cf 92       	push	r12
    1856:	df 92       	push	r13
    1858:	ef 92       	push	r14
    185a:	ff 92       	push	r15
    185c:	0f 93       	push	r16
    185e:	1f 93       	push	r17
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	7c 01       	movw	r14, r24
    1866:	8b 01       	movw	r16, r22
    1868:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    186a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <Endpoint_WaitUntilReady>
    186e:	81 11       	cpse	r24, r1
    1870:	31 c0       	rjmp	.+98     	; 0x18d4 <Endpoint_Write_Stream_LE+0x80>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1872:	20 97       	sbiw	r28, 0x00	; 0
    1874:	31 f0       	breq	.+12     	; 0x1882 <Endpoint_Write_Stream_LE+0x2e>
	{
		Length -= *BytesProcessed;
    1876:	88 81       	ld	r24, Y
    1878:	99 81       	ldd	r25, Y+1	; 0x01
    187a:	08 1b       	sub	r16, r24
    187c:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    187e:	e8 0e       	add	r14, r24
    1880:	f9 1e       	adc	r15, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1882:	c1 2c       	mov	r12, r1
    1884:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1886:	01 15       	cp	r16, r1
    1888:	11 05       	cpc	r17, r1
    188a:	19 f1       	breq	.+70     	; 0x18d2 <Endpoint_Write_Stream_LE+0x7e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    188c:	80 91 e8 00 	lds	r24, 0x00E8
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1890:	85 fd       	sbrc	r24, 5
    1892:	14 c0       	rjmp	.+40     	; 0x18bc <Endpoint_Write_Stream_LE+0x68>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1894:	80 91 e8 00 	lds	r24, 0x00E8
    1898:	8e 77       	andi	r24, 0x7E	; 126
    189a:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    189e:	20 97       	sbiw	r28, 0x00	; 0
    18a0:	41 f0       	breq	.+16     	; 0x18b2 <Endpoint_Write_Stream_LE+0x5e>
			{
				*BytesProcessed += BytesInTransfer;
    18a2:	88 81       	ld	r24, Y
    18a4:	99 81       	ldd	r25, Y+1	; 0x01
    18a6:	8c 0d       	add	r24, r12
    18a8:	9d 1d       	adc	r25, r13
    18aa:	99 83       	std	Y+1, r25	; 0x01
    18ac:	88 83       	st	Y, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    18ae:	85 e0       	ldi	r24, 0x05	; 5
    18b0:	11 c0       	rjmp	.+34     	; 0x18d4 <Endpoint_Write_Stream_LE+0x80>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    18b2:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <Endpoint_WaitUntilReady>
    18b6:	88 23       	and	r24, r24
    18b8:	31 f3       	breq	.-52     	; 0x1886 <Endpoint_Write_Stream_LE+0x32>
    18ba:	0c c0       	rjmp	.+24     	; 0x18d4 <Endpoint_Write_Stream_LE+0x80>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    18bc:	f7 01       	movw	r30, r14
    18be:	81 91       	ld	r24, Z+
    18c0:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    18c2:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    18c6:	01 50       	subi	r16, 0x01	; 1
    18c8:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    18ca:	ff ef       	ldi	r31, 0xFF	; 255
    18cc:	cf 1a       	sub	r12, r31
    18ce:	df 0a       	sbc	r13, r31
    18d0:	da cf       	rjmp	.-76     	; 0x1886 <Endpoint_Write_Stream_LE+0x32>
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    18d2:	80 e0       	ldi	r24, 0x00	; 0
}
    18d4:	df 91       	pop	r29
    18d6:	cf 91       	pop	r28
    18d8:	1f 91       	pop	r17
    18da:	0f 91       	pop	r16
    18dc:	ff 90       	pop	r15
    18de:	ef 90       	pop	r14
    18e0:	df 90       	pop	r13
    18e2:	cf 90       	pop	r12
    18e4:	08 95       	ret

000018e6 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    18e6:	20 91 dd 01 	lds	r18, 0x01DD
    18ea:	30 91 de 01 	lds	r19, 0x01DE
    18ee:	26 17       	cp	r18, r22
    18f0:	37 07       	cpc	r19, r23
    18f2:	48 f0       	brcs	.+18     	; 0x1906 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    18f4:	61 15       	cp	r22, r1
    18f6:	71 05       	cpc	r23, r1
    18f8:	39 f4       	brne	.+14     	; 0x1908 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18fa:	20 91 e8 00 	lds	r18, 0x00E8
    18fe:	2e 77       	andi	r18, 0x7E	; 126
    1900:	20 93 e8 00 	sts	0x00E8, r18
    1904:	01 c0       	rjmp	.+2      	; 0x1908 <Endpoint_Write_Control_Stream_LE+0x22>
    1906:	b9 01       	movw	r22, r18
    1908:	fc 01       	movw	r30, r24
    190a:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    190c:	61 15       	cp	r22, r1
    190e:	71 05       	cpc	r23, r1
    1910:	b9 f1       	breq	.+110    	; 0x1980 <Endpoint_Write_Control_Stream_LE+0x9a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1912:	80 91 d6 01 	lds	r24, 0x01D6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1916:	88 23       	and	r24, r24
    1918:	09 f4       	brne	.+2      	; 0x191c <Endpoint_Write_Control_Stream_LE+0x36>
    191a:	40 c0       	rjmp	.+128    	; 0x199c <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    191c:	85 30       	cpi	r24, 0x05	; 5
    191e:	09 f4       	brne	.+2      	; 0x1922 <Endpoint_Write_Control_Stream_LE+0x3c>
    1920:	3f c0       	rjmp	.+126    	; 0x19a0 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1922:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1926:	83 fd       	sbrc	r24, 3
    1928:	3d c0       	rjmp	.+122    	; 0x19a4 <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    192a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    192e:	82 ff       	sbrs	r24, 2
    1930:	06 c0       	rjmp	.+12     	; 0x193e <Endpoint_Write_Control_Stream_LE+0x58>
    1932:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1936:	82 ff       	sbrs	r24, 2
    1938:	26 c0       	rjmp	.+76     	; 0x1986 <Endpoint_Write_Control_Stream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    193e:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    1942:	80 ff       	sbrs	r24, 0
    1944:	e3 cf       	rjmp	.-58     	; 0x190c <Endpoint_Write_Control_Stream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1946:	20 91 f3 00 	lds	r18, 0x00F3
    194a:	80 91 f2 00 	lds	r24, 0x00F2
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1952:	61 15       	cp	r22, r1
    1954:	71 05       	cpc	r23, r1
    1956:	51 f0       	breq	.+20     	; 0x196c <Endpoint_Write_Control_Stream_LE+0x86>
    1958:	88 30       	cpi	r24, 0x08	; 8
    195a:	91 05       	cpc	r25, r1
    195c:	38 f4       	brcc	.+14     	; 0x196c <Endpoint_Write_Control_Stream_LE+0x86>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    195e:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1960:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1964:	61 50       	subi	r22, 0x01	; 1
    1966:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1968:	01 96       	adiw	r24, 0x01	; 1
    196a:	f3 cf       	rjmp	.-26     	; 0x1952 <Endpoint_Write_Control_Stream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    196c:	21 e0       	ldi	r18, 0x01	; 1
    196e:	08 97       	sbiw	r24, 0x08	; 8
    1970:	09 f0       	breq	.+2      	; 0x1974 <Endpoint_Write_Control_Stream_LE+0x8e>
    1972:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1974:	80 91 e8 00 	lds	r24, 0x00E8
    1978:	8e 77       	andi	r24, 0x7E	; 126
    197a:	80 93 e8 00 	sts	0x00E8, r24
    197e:	c6 cf       	rjmp	.-116    	; 0x190c <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1980:	21 11       	cpse	r18, r1
    1982:	c7 cf       	rjmp	.-114    	; 0x1912 <Endpoint_Write_Control_Stream_LE+0x2c>
    1984:	d6 cf       	rjmp	.-84     	; 0x1932 <Endpoint_Write_Control_Stream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1986:	80 91 d6 01 	lds	r24, 0x01D6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    198a:	88 23       	and	r24, r24
    198c:	39 f0       	breq	.+14     	; 0x199c <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    198e:	85 30       	cpi	r24, 0x05	; 5
    1990:	39 f0       	breq	.+14     	; 0x19a0 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1992:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1996:	83 ff       	sbrs	r24, 3
    1998:	cc cf       	rjmp	.-104    	; 0x1932 <Endpoint_Write_Control_Stream_LE+0x4c>
    199a:	04 c0       	rjmp	.+8      	; 0x19a4 <Endpoint_Write_Control_Stream_LE+0xbe>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    199c:	82 e0       	ldi	r24, 0x02	; 2
    199e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    19a0:	83 e0       	ldi	r24, 0x03	; 3
    19a2:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    19a6:	08 95       	ret

000019a8 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    19a8:	20 91 dd 01 	lds	r18, 0x01DD
    19ac:	30 91 de 01 	lds	r19, 0x01DE
    19b0:	26 17       	cp	r18, r22
    19b2:	37 07       	cpc	r19, r23
    19b4:	48 f0       	brcs	.+18     	; 0x19c8 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    19b6:	61 15       	cp	r22, r1
    19b8:	71 05       	cpc	r23, r1
    19ba:	39 f4       	brne	.+14     	; 0x19ca <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19bc:	20 91 e8 00 	lds	r18, 0x00E8
    19c0:	2e 77       	andi	r18, 0x7E	; 126
    19c2:	20 93 e8 00 	sts	0x00E8, r18
    19c6:	01 c0       	rjmp	.+2      	; 0x19ca <Endpoint_Write_Control_PStream_LE+0x22>
    19c8:	b9 01       	movw	r22, r18
    19ca:	fc 01       	movw	r30, r24
    19cc:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    19ce:	61 15       	cp	r22, r1
    19d0:	71 05       	cpc	r23, r1
    19d2:	c1 f1       	breq	.+112    	; 0x1a44 <Endpoint_Write_Control_PStream_LE+0x9c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19d4:	80 91 d6 01 	lds	r24, 0x01D6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19d8:	88 23       	and	r24, r24
    19da:	09 f4       	brne	.+2      	; 0x19de <Endpoint_Write_Control_PStream_LE+0x36>
    19dc:	41 c0       	rjmp	.+130    	; 0x1a60 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    19de:	85 30       	cpi	r24, 0x05	; 5
    19e0:	09 f4       	brne	.+2      	; 0x19e4 <Endpoint_Write_Control_PStream_LE+0x3c>
    19e2:	40 c0       	rjmp	.+128    	; 0x1a64 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    19e4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    19e8:	83 fd       	sbrc	r24, 3
    19ea:	3e c0       	rjmp	.+124    	; 0x1a68 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19ec:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    19f0:	82 ff       	sbrs	r24, 2
    19f2:	06 c0       	rjmp	.+12     	; 0x1a00 <Endpoint_Write_Control_PStream_LE+0x58>
    19f4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    19f8:	82 ff       	sbrs	r24, 2
    19fa:	27 c0       	rjmp	.+78     	; 0x1a4a <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a00:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    1a04:	80 ff       	sbrs	r24, 0
    1a06:	e3 cf       	rjmp	.-58     	; 0x19ce <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1a08:	20 91 f3 00 	lds	r18, 0x00F3
    1a0c:	80 91 f2 00 	lds	r24, 0x00F2
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1a14:	61 15       	cp	r22, r1
    1a16:	71 05       	cpc	r23, r1
    1a18:	59 f0       	breq	.+22     	; 0x1a30 <Endpoint_Write_Control_PStream_LE+0x88>
    1a1a:	88 30       	cpi	r24, 0x08	; 8
    1a1c:	91 05       	cpc	r25, r1
    1a1e:	40 f4       	brcc	.+16     	; 0x1a30 <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1a20:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a22:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1a26:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1a28:	61 50       	subi	r22, 0x01	; 1
    1a2a:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1a2c:	01 96       	adiw	r24, 0x01	; 1
    1a2e:	f2 cf       	rjmp	.-28     	; 0x1a14 <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1a30:	21 e0       	ldi	r18, 0x01	; 1
    1a32:	08 97       	sbiw	r24, 0x08	; 8
    1a34:	09 f0       	breq	.+2      	; 0x1a38 <Endpoint_Write_Control_PStream_LE+0x90>
    1a36:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a38:	80 91 e8 00 	lds	r24, 0x00E8
    1a3c:	8e 77       	andi	r24, 0x7E	; 126
    1a3e:	80 93 e8 00 	sts	0x00E8, r24
    1a42:	c5 cf       	rjmp	.-118    	; 0x19ce <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1a44:	21 11       	cpse	r18, r1
    1a46:	c6 cf       	rjmp	.-116    	; 0x19d4 <Endpoint_Write_Control_PStream_LE+0x2c>
    1a48:	d5 cf       	rjmp	.-86     	; 0x19f4 <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a4a:	80 91 d6 01 	lds	r24, 0x01D6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a4e:	88 23       	and	r24, r24
    1a50:	39 f0       	breq	.+14     	; 0x1a60 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a52:	85 30       	cpi	r24, 0x05	; 5
    1a54:	39 f0       	breq	.+14     	; 0x1a64 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a56:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1a5a:	83 ff       	sbrs	r24, 3
    1a5c:	cb cf       	rjmp	.-106    	; 0x19f4 <Endpoint_Write_Control_PStream_LE+0x4c>
    1a5e:	04 c0       	rjmp	.+8      	; 0x1a68 <Endpoint_Write_Control_PStream_LE+0xc0>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1a60:	82 e0       	ldi	r24, 0x02	; 2
    1a62:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1a64:	83 e0       	ldi	r24, 0x03	; 3
    1a66:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1a68:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1a6a:	08 95       	ret

00001a6c <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1a6c:	98 2f       	mov	r25, r24
    1a6e:	97 30       	cpi	r25, 0x07	; 7
    1a70:	58 f5       	brcc	.+86     	; 0x1ac8 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a72:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1a76:	98 17       	cp	r25, r24
    1a78:	39 f0       	breq	.+14     	; 0x1a88 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1a7a:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1a7e:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1a82:	50 91 f0 00 	lds	r21, 0x00F0
    1a86:	03 c0       	rjmp	.+6      	; 0x1a8e <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    1a88:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    1a8a:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1a8c:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1a8e:	21 ff       	sbrs	r18, 1
    1a90:	19 c0       	rjmp	.+50     	; 0x1ac4 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1a92:	30 91 eb 00 	lds	r19, 0x00EB
    1a96:	3e 7f       	andi	r19, 0xFE	; 254
    1a98:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1a9c:	30 91 ed 00 	lds	r19, 0x00ED
    1aa0:	3d 7f       	andi	r19, 0xFD	; 253
    1aa2:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1aa6:	30 91 eb 00 	lds	r19, 0x00EB
    1aaa:	31 60       	ori	r19, 0x01	; 1
    1aac:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1ab0:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1ab4:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    1ab8:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1abc:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1ac0:	27 ff       	sbrs	r18, 7
    1ac2:	07 c0       	rjmp	.+14     	; 0x1ad2 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1ac4:	9f 5f       	subi	r25, 0xFF	; 255
    1ac6:	d3 cf       	rjmp	.-90     	; 0x1a6e <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ac8:	8f 70       	andi	r24, 0x0F	; 15
    1aca:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1ad4:	08 95       	ret

00001ad6 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1ad6:	80 91 d7 01 	lds	r24, 0x01D7
    1ada:	87 fd       	sbrc	r24, 7
    1adc:	05 c0       	rjmp	.+10     	; 0x1ae8 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ade:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1ae2:	80 ff       	sbrs	r24, 0
    1ae4:	0e c0       	rjmp	.+28     	; 0x1b02 <Endpoint_ClearStatusStage+0x2c>
    1ae6:	12 c0       	rjmp	.+36     	; 0x1b0c <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1ae8:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1aec:	82 fd       	sbrc	r24, 2
    1aee:	05 c0       	rjmp	.+10     	; 0x1afa <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1af0:	80 91 d6 01 	lds	r24, 0x01D6
    1af4:	81 11       	cpse	r24, r1
    1af6:	f8 cf       	rjmp	.-16     	; 0x1ae8 <Endpoint_ClearStatusStage+0x12>
    1af8:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1afa:	80 91 e8 00 	lds	r24, 0x00E8
    1afe:	8b 77       	andi	r24, 0x7B	; 123
    1b00:	08 c0       	rjmp	.+16     	; 0x1b12 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1b02:	80 91 d6 01 	lds	r24, 0x01D6
    1b06:	81 11       	cpse	r24, r1
    1b08:	ea cf       	rjmp	.-44     	; 0x1ade <Endpoint_ClearStatusStage+0x8>
    1b0a:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b0c:	80 91 e8 00 	lds	r24, 0x00E8
    1b10:	8e 77       	andi	r24, 0x7E	; 126
    1b12:	80 93 e8 00 	sts	0x00E8, r24
    1b16:	08 95       	ret

00001b18 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1b18:	80 91 e4 00 	lds	r24, 0x00E4
    1b1c:	90 91 e5 00 	lds	r25, 0x00E5
    1b20:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1b22:	20 91 ec 00 	lds	r18, 0x00EC
    1b26:	20 ff       	sbrs	r18, 0
    1b28:	21 c0       	rjmp	.+66     	; 0x1b6c <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b2a:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1b2e:	20 fd       	sbrc	r18, 0
    1b30:	21 c0       	rjmp	.+66     	; 0x1b74 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b32:	20 91 d6 01 	lds	r18, 0x01D6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b36:	22 23       	and	r18, r18
    1b38:	89 f0       	breq	.+34     	; 0x1b5c <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b3a:	25 30       	cpi	r18, 0x05	; 5
    1b3c:	89 f0       	breq	.+34     	; 0x1b60 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1b3e:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1b42:	25 fd       	sbrc	r18, 5
    1b44:	0f c0       	rjmp	.+30     	; 0x1b64 <Endpoint_WaitUntilReady+0x4c>
    1b46:	20 91 e4 00 	lds	r18, 0x00E4
    1b4a:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1b4e:	28 17       	cp	r18, r24
    1b50:	39 07       	cpc	r19, r25
    1b52:	39 f3       	breq	.-50     	; 0x1b22 <Endpoint_WaitUntilReady+0xa>
    1b54:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1b56:	41 f0       	breq	.+16     	; 0x1b68 <Endpoint_WaitUntilReady+0x50>
    1b58:	c9 01       	movw	r24, r18
    1b5a:	e3 cf       	rjmp	.-58     	; 0x1b22 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1b5c:	82 e0       	ldi	r24, 0x02	; 2
    1b5e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1b60:	83 e0       	ldi	r24, 0x03	; 3
    1b62:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    1b68:	84 e0       	ldi	r24, 0x04	; 4
    1b6a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b6c:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1b70:	22 ff       	sbrs	r18, 2
    1b72:	df cf       	rjmp	.-66     	; 0x1b32 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	08 95       	ret

00001b78 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1b78:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1b7c:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1b80:	e0 ee       	ldi	r30, 0xE0	; 224
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	81 60       	ori	r24, 0x01	; 1
    1b88:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1b8a:	e8 ed       	ldi	r30, 0xD8	; 216
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	8f 77       	andi	r24, 0x7F	; 127
    1b92:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1b94:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1b96:	a7 ed       	ldi	r26, 0xD7	; 215
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	8c 91       	ld	r24, X
    1b9c:	8e 7f       	andi	r24, 0xFE	; 254
    1b9e:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1ba0:	80 81       	ld	r24, Z
    1ba2:	8f 7e       	andi	r24, 0xEF	; 239
    1ba4:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1ba6:	10 92 d5 01 	sts	0x01D5, r1
    1baa:	08 95       	ret

00001bac <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    1bac:	0f 93       	push	r16
    1bae:	1f 93       	push	r17
    1bb0:	cf 93       	push	r28
    1bb2:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1bb4:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1bb8:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1bbc:	c8 ed       	ldi	r28, 0xD8	; 216
    1bbe:	d0 e0       	ldi	r29, 0x00	; 0
    1bc0:	88 81       	ld	r24, Y
    1bc2:	8f 77       	andi	r24, 0x7F	; 127
    1bc4:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1bc6:	88 81       	ld	r24, Y
    1bc8:	80 68       	ori	r24, 0x80	; 128
    1bca:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1bcc:	88 81       	ld	r24, Y
    1bce:	8f 7d       	andi	r24, 0xDF	; 223
    1bd0:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1bd2:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1bd4:	10 92 d6 01 	sts	0x01D6, r1
	USB_Device_ConfigurationNumber  = 0;
    1bd8:	10 92 d2 01 	sts	0x01D2, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1bdc:	10 92 d4 01 	sts	0x01D4, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1be0:	10 92 d3 01 	sts	0x01D3, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1be4:	00 ee       	ldi	r16, 0xE0	; 224
    1be6:	10 e0       	ldi	r17, 0x00	; 0
    1be8:	f8 01       	movw	r30, r16
    1bea:	80 81       	ld	r24, Z
    1bec:	8b 7f       	andi	r24, 0xFB	; 251
    1bee:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1bf0:	88 81       	ld	r24, Y
    1bf2:	81 60       	ori	r24, 0x01	; 1
    1bf4:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1bf6:	42 e0       	ldi	r20, 0x02	; 2
    1bf8:	60 e0       	ldi	r22, 0x00	; 0
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1c00:	e1 ee       	ldi	r30, 0xE1	; 225
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	8e 7f       	andi	r24, 0xFE	; 254
    1c08:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1c0a:	e2 ee       	ldi	r30, 0xE2	; 226
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	81 60       	ori	r24, 0x01	; 1
    1c12:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1c14:	80 81       	ld	r24, Z
    1c16:	88 60       	ori	r24, 0x08	; 8
    1c18:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1c1a:	f8 01       	movw	r30, r16
    1c1c:	80 81       	ld	r24, Z
    1c1e:	8e 7f       	andi	r24, 0xFE	; 254
    1c20:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1c22:	88 81       	ld	r24, Y
    1c24:	80 61       	ori	r24, 0x10	; 16
    1c26:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1c28:	df 91       	pop	r29
    1c2a:	cf 91       	pop	r28
    1c2c:	1f 91       	pop	r17
    1c2e:	0f 91       	pop	r16
    1c30:	08 95       	ret

00001c32 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1c32:	e8 ed       	ldi	r30, 0xD8	; 216
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	8f 7e       	andi	r24, 0xEF	; 239
    1c3a:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1c3c:	e7 ed       	ldi	r30, 0xD7	; 215
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	81 60       	ori	r24, 0x01	; 1
    1c44:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1c46:	84 e0       	ldi	r24, 0x04	; 4
    1c48:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	80 93 d5 01 	sts	0x01D5, r24

	USB_ResetInterface();
    1c50:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <USB_ResetInterface>

00001c54 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1c54:	e8 ed       	ldi	r30, 0xD8	; 216
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	8e 7f       	andi	r24, 0xFE	; 254
    1c5c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1c5e:	10 92 e2 00 	sts	0x00E2, r1
    1c62:	08 95       	ret

00001c64 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1c64:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1c68:	10 92 e1 00 	sts	0x00E1, r1
    1c6c:	08 95       	ret

00001c6e <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1c6e:	1f 92       	push	r1
    1c70:	0f 92       	push	r0
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	0f 92       	push	r0
    1c76:	11 24       	eor	r1, r1
    1c78:	2f 93       	push	r18
    1c7a:	3f 93       	push	r19
    1c7c:	4f 93       	push	r20
    1c7e:	5f 93       	push	r21
    1c80:	6f 93       	push	r22
    1c82:	7f 93       	push	r23
    1c84:	8f 93       	push	r24
    1c86:	9f 93       	push	r25
    1c88:	af 93       	push	r26
    1c8a:	bf 93       	push	r27
    1c8c:	ef 93       	push	r30
    1c8e:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1c90:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1c94:	82 ff       	sbrs	r24, 2
    1c96:	0b c0       	rjmp	.+22     	; 0x1cae <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1c98:	80 91 e2 00 	lds	r24, 0x00E2
    1c9c:	82 ff       	sbrs	r24, 2
    1c9e:	07 c0       	rjmp	.+14     	; 0x1cae <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1ca0:	80 91 e1 00 	lds	r24, 0x00E1
    1ca4:	8b 7f       	andi	r24, 0xFB	; 251
    1ca6:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1caa:	0e 94 4b 0a 	call	0x1496	; 0x1496 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1cae:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1cb2:	80 ff       	sbrs	r24, 0
    1cb4:	1f c0       	rjmp	.+62     	; 0x1cf4 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1cb6:	80 91 d8 00 	lds	r24, 0x00D8
    1cba:	80 ff       	sbrs	r24, 0
    1cbc:	1b c0       	rjmp	.+54     	; 0x1cf4 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1cbe:	80 91 da 00 	lds	r24, 0x00DA
    1cc2:	8e 7f       	andi	r24, 0xFE	; 254
    1cc4:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1cc8:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1ccc:	80 ff       	sbrs	r24, 0
    1cce:	0d c0       	rjmp	.+26     	; 0x1cea <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1cd0:	80 e1       	ldi	r24, 0x10	; 16
    1cd2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1cd4:	82 e1       	ldi	r24, 0x12	; 18
    1cd6:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1cd8:	09 b4       	in	r0, 0x29	; 41
    1cda:	00 fe       	sbrs	r0, 0
    1cdc:	fd cf       	rjmp	.-6      	; 0x1cd8 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	80 93 d6 01 	sts	0x01D6, r24
			EVENT_USB_Device_Connect();
    1ce4:	0e 94 2e 0a 	call	0x145c	; 0x145c <EVENT_USB_Device_Connect>
    1ce8:	05 c0       	rjmp	.+10     	; 0x1cf4 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1cea:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1cec:	10 92 d6 01 	sts	0x01D6, r1
			EVENT_USB_Device_Disconnect();
    1cf0:	0e 94 40 0a 	call	0x1480	; 0x1480 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1cf4:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1cf8:	80 ff       	sbrs	r24, 0
    1cfa:	19 c0       	rjmp	.+50     	; 0x1d2e <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1cfc:	80 91 e2 00 	lds	r24, 0x00E2
    1d00:	80 ff       	sbrs	r24, 0
    1d02:	15 c0       	rjmp	.+42     	; 0x1d2e <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1d04:	80 91 e2 00 	lds	r24, 0x00E2
    1d08:	8e 7f       	andi	r24, 0xFE	; 254
    1d0a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1d0e:	80 91 e2 00 	lds	r24, 0x00E2
    1d12:	80 61       	ori	r24, 0x10	; 16
    1d14:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1d18:	80 91 d8 00 	lds	r24, 0x00D8
    1d1c:	80 62       	ori	r24, 0x20	; 32
    1d1e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1d22:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1d24:	85 e0       	ldi	r24, 0x05	; 5
    1d26:	80 93 d6 01 	sts	0x01D6, r24
		EVENT_USB_Device_Suspend();
    1d2a:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1d2e:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1d32:	84 ff       	sbrs	r24, 4
    1d34:	30 c0       	rjmp	.+96     	; 0x1d96 <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1d36:	80 91 e2 00 	lds	r24, 0x00E2
    1d3a:	84 ff       	sbrs	r24, 4
    1d3c:	2c c0       	rjmp	.+88     	; 0x1d96 <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1d3e:	80 e1       	ldi	r24, 0x10	; 16
    1d40:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1d42:	82 e1       	ldi	r24, 0x12	; 18
    1d44:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1d46:	09 b4       	in	r0, 0x29	; 41
    1d48:	00 fe       	sbrs	r0, 0
    1d4a:	fd cf       	rjmp	.-6      	; 0x1d46 <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1d4c:	80 91 d8 00 	lds	r24, 0x00D8
    1d50:	8f 7d       	andi	r24, 0xDF	; 223
    1d52:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1d56:	80 91 e1 00 	lds	r24, 0x00E1
    1d5a:	8f 7e       	andi	r24, 0xEF	; 239
    1d5c:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1d60:	80 91 e2 00 	lds	r24, 0x00E2
    1d64:	8f 7e       	andi	r24, 0xEF	; 239
    1d66:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1d6a:	80 91 e2 00 	lds	r24, 0x00E2
    1d6e:	81 60       	ori	r24, 0x01	; 1
    1d70:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1d74:	80 91 d2 01 	lds	r24, 0x01D2
    1d78:	88 23       	and	r24, r24
    1d7a:	11 f0       	breq	.+4      	; 0x1d80 <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1d7c:	84 e0       	ldi	r24, 0x04	; 4
    1d7e:	07 c0       	rjmp	.+14     	; 0x1d8e <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1d80:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1d84:	87 ff       	sbrs	r24, 7
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <__vector_10+0x11e>
    1d88:	83 e0       	ldi	r24, 0x03	; 3
    1d8a:	01 c0       	rjmp	.+2      	; 0x1d8e <__vector_10+0x120>
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	80 93 d6 01 	sts	0x01D6, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1d92:	0e 94 b5 0b 	call	0x176a	; 0x176a <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1d96:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1d9a:	83 ff       	sbrs	r24, 3
    1d9c:	29 c0       	rjmp	.+82     	; 0x1df0 <__vector_10+0x182>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1d9e:	80 91 e2 00 	lds	r24, 0x00E2
    1da2:	83 ff       	sbrs	r24, 3
    1da4:	25 c0       	rjmp	.+74     	; 0x1df0 <__vector_10+0x182>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1da6:	80 91 e1 00 	lds	r24, 0x00E1
    1daa:	87 7f       	andi	r24, 0xF7	; 247
    1dac:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1db0:	82 e0       	ldi	r24, 0x02	; 2
    1db2:	80 93 d6 01 	sts	0x01D6, r24
		USB_Device_ConfigurationNumber = 0;
    1db6:	10 92 d2 01 	sts	0x01D2, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1dba:	80 91 e1 00 	lds	r24, 0x00E1
    1dbe:	8e 7f       	andi	r24, 0xFE	; 254
    1dc0:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1dc4:	80 91 e2 00 	lds	r24, 0x00E2
    1dc8:	8e 7f       	andi	r24, 0xFE	; 254
    1dca:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1dce:	80 91 e2 00 	lds	r24, 0x00E2
    1dd2:	80 61       	ori	r24, 0x10	; 16
    1dd4:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1dd8:	42 e0       	ldi	r20, 0x02	; 2
    1dda:	60 e0       	ldi	r22, 0x00	; 0
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1de2:	80 91 f0 00 	lds	r24, 0x00F0
    1de6:	88 60       	ori	r24, 0x08	; 8
    1de8:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1dec:	0e 94 47 0a 	call	0x148e	; 0x148e <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1df0:	ff 91       	pop	r31
    1df2:	ef 91       	pop	r30
    1df4:	bf 91       	pop	r27
    1df6:	af 91       	pop	r26
    1df8:	9f 91       	pop	r25
    1dfa:	8f 91       	pop	r24
    1dfc:	7f 91       	pop	r23
    1dfe:	6f 91       	pop	r22
    1e00:	5f 91       	pop	r21
    1e02:	4f 91       	pop	r20
    1e04:	3f 91       	pop	r19
    1e06:	2f 91       	pop	r18
    1e08:	0f 90       	pop	r0
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	0f 90       	pop	r0
    1e0e:	1f 90       	pop	r1
    1e10:	18 95       	reti

00001e12 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1e12:	1f 92       	push	r1
    1e14:	0f 92       	push	r0
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	0f 92       	push	r0
    1e1a:	11 24       	eor	r1, r1
    1e1c:	2f 93       	push	r18
    1e1e:	3f 93       	push	r19
    1e20:	4f 93       	push	r20
    1e22:	5f 93       	push	r21
    1e24:	6f 93       	push	r22
    1e26:	7f 93       	push	r23
    1e28:	8f 93       	push	r24
    1e2a:	9f 93       	push	r25
    1e2c:	af 93       	push	r26
    1e2e:	bf 93       	push	r27
    1e30:	cf 93       	push	r28
    1e32:	ef 93       	push	r30
    1e34:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1e36:	c0 91 e9 00 	lds	r28, 0x00E9
    1e3a:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1e3c:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e40:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1e44:	80 91 f0 00 	lds	r24, 0x00F0
    1e48:	87 7f       	andi	r24, 0xF7	; 247
    1e4a:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1e4e:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1e50:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <USB_Device_ProcessControlRequest>
    1e54:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1e58:	80 91 f0 00 	lds	r24, 0x00F0
    1e5c:	88 60       	ori	r24, 0x08	; 8
    1e5e:	80 93 f0 00 	sts	0x00F0, r24
    1e62:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1e66:	ff 91       	pop	r31
    1e68:	ef 91       	pop	r30
    1e6a:	cf 91       	pop	r28
    1e6c:	bf 91       	pop	r27
    1e6e:	af 91       	pop	r26
    1e70:	9f 91       	pop	r25
    1e72:	8f 91       	pop	r24
    1e74:	7f 91       	pop	r23
    1e76:	6f 91       	pop	r22
    1e78:	5f 91       	pop	r21
    1e7a:	4f 91       	pop	r20
    1e7c:	3f 91       	pop	r19
    1e7e:	2f 91       	pop	r18
    1e80:	0f 90       	pop	r0
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	0f 90       	pop	r0
    1e86:	1f 90       	pop	r1
    1e88:	18 95       	reti

00001e8a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1e8a:	1f 93       	push	r17
    1e8c:	cf 93       	push	r28
    1e8e:	df 93       	push	r29
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	aa 97       	sbiw	r28, 0x2a	; 42
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	de bf       	out	0x3e, r29	; 62
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	cd bf       	out	0x3d, r28	; 61
    1ea0:	e7 ed       	ldi	r30, 0xD7	; 215
    1ea2:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1ea4:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1ea8:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1eaa:	21 e0       	ldi	r18, 0x01	; 1
    1eac:	ef 3d       	cpi	r30, 0xDF	; 223
    1eae:	f2 07       	cpc	r31, r18
    1eb0:	c9 f7       	brne	.-14     	; 0x1ea4 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1eb2:	0e 94 a4 0a 	call	0x1548	; 0x1548 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1eb6:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1eba:	83 ff       	sbrs	r24, 3
    1ebc:	1c c1       	rjmp	.+568    	; 0x20f6 <USB_Device_ProcessControlRequest+0x26c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1ebe:	20 91 d7 01 	lds	r18, 0x01D7

		switch (USB_ControlRequest.bRequest)
    1ec2:	30 91 d8 01 	lds	r19, 0x01D8
    1ec6:	83 2f       	mov	r24, r19
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	8a 30       	cpi	r24, 0x0A	; 10
    1ecc:	91 05       	cpc	r25, r1
    1ece:	08 f0       	brcs	.+2      	; 0x1ed2 <USB_Device_ProcessControlRequest+0x48>
    1ed0:	12 c1       	rjmp	.+548    	; 0x20f6 <USB_Device_ProcessControlRequest+0x26c>
    1ed2:	fc 01       	movw	r30, r24
    1ed4:	ea 5a       	subi	r30, 0xAA	; 170
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	0c 94 3f 2a 	jmp	0x547e	; 0x547e <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1edc:	20 38       	cpi	r18, 0x80	; 128
    1ede:	81 f0       	breq	.+32     	; 0x1f00 <USB_Device_ProcessControlRequest+0x76>
    1ee0:	22 38       	cpi	r18, 0x82	; 130
    1ee2:	09 f0       	breq	.+2      	; 0x1ee6 <USB_Device_ProcessControlRequest+0x5c>
    1ee4:	08 c1       	rjmp	.+528    	; 0x20f6 <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ee6:	80 91 db 01 	lds	r24, 0x01DB
    1eea:	8f 70       	andi	r24, 0x0F	; 15
    1eec:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1ef0:	80 91 eb 00 	lds	r24, 0x00EB
    1ef4:	85 fb       	bst	r24, 5
    1ef6:	88 27       	eor	r24, r24
    1ef8:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1efa:	10 92 e9 00 	sts	0x00E9, r1
    1efe:	06 c0       	rjmp	.+12     	; 0x1f0c <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1f00:	80 91 d3 01 	lds	r24, 0x01D3
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1f04:	90 91 d4 01 	lds	r25, 0x01D4
    1f08:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1f0a:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f0c:	90 91 e8 00 	lds	r25, 0x00E8
    1f10:	97 7f       	andi	r25, 0xF7	; 247
    1f12:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1f16:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1f1a:	10 92 f1 00 	sts	0x00F1, r1
    1f1e:	c5 c0       	rjmp	.+394    	; 0x20aa <USB_Device_ProcessControlRequest+0x220>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1f20:	82 2f       	mov	r24, r18
    1f22:	8d 7f       	andi	r24, 0xFD	; 253
    1f24:	09 f0       	breq	.+2      	; 0x1f28 <USB_Device_ProcessControlRequest+0x9e>
    1f26:	e7 c0       	rjmp	.+462    	; 0x20f6 <USB_Device_ProcessControlRequest+0x26c>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1f28:	22 23       	and	r18, r18
    1f2a:	19 f0       	breq	.+6      	; 0x1f32 <USB_Device_ProcessControlRequest+0xa8>
    1f2c:	22 30       	cpi	r18, 0x02	; 2
    1f2e:	61 f0       	breq	.+24     	; 0x1f48 <USB_Device_ProcessControlRequest+0xbe>
    1f30:	e2 c0       	rjmp	.+452    	; 0x20f6 <USB_Device_ProcessControlRequest+0x26c>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1f32:	80 91 d9 01 	lds	r24, 0x01D9
    1f36:	81 30       	cpi	r24, 0x01	; 1
    1f38:	09 f0       	breq	.+2      	; 0x1f3c <USB_Device_ProcessControlRequest+0xb2>
    1f3a:	dd c0       	rjmp	.+442    	; 0x20f6 <USB_Device_ProcessControlRequest+0x26c>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1f3c:	33 30       	cpi	r19, 0x03	; 3
    1f3e:	09 f0       	breq	.+2      	; 0x1f42 <USB_Device_ProcessControlRequest+0xb8>
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	80 93 d4 01 	sts	0x01D4, r24
    1f46:	28 c0       	rjmp	.+80     	; 0x1f98 <USB_Device_ProcessControlRequest+0x10e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1f48:	80 91 d9 01 	lds	r24, 0x01D9
    1f4c:	81 11       	cpse	r24, r1
    1f4e:	24 c0       	rjmp	.+72     	; 0x1f98 <USB_Device_ProcessControlRequest+0x10e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1f50:	20 91 db 01 	lds	r18, 0x01DB
    1f54:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1f56:	09 f4       	brne	.+2      	; 0x1f5a <USB_Device_ProcessControlRequest+0xd0>
    1f58:	ce c0       	rjmp	.+412    	; 0x20f6 <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f5a:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1f5e:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1f62:	80 ff       	sbrs	r24, 0
    1f64:	19 c0       	rjmp	.+50     	; 0x1f98 <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1f66:	80 91 eb 00 	lds	r24, 0x00EB
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1f6a:	33 30       	cpi	r19, 0x03	; 3
    1f6c:	11 f4       	brne	.+4      	; 0x1f72 <USB_Device_ProcessControlRequest+0xe8>
    1f6e:	80 62       	ori	r24, 0x20	; 32
    1f70:	11 c0       	rjmp	.+34     	; 0x1f94 <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1f72:	80 61       	ori	r24, 0x10	; 16
    1f74:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	02 2e       	mov	r0, r18
    1f7e:	01 c0       	rjmp	.+2      	; 0x1f82 <USB_Device_ProcessControlRequest+0xf8>
    1f80:	88 0f       	add	r24, r24
    1f82:	0a 94       	dec	r0
    1f84:	ea f7       	brpl	.-6      	; 0x1f80 <USB_Device_ProcessControlRequest+0xf6>
    1f86:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1f8a:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1f8e:	80 91 eb 00 	lds	r24, 0x00EB
    1f92:	88 60       	ori	r24, 0x08	; 8
    1f94:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f98:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f9c:	80 91 e8 00 	lds	r24, 0x00E8
    1fa0:	87 7f       	andi	r24, 0xF7	; 247
    1fa2:	86 c0       	rjmp	.+268    	; 0x20b0 <USB_Device_ProcessControlRequest+0x226>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1fa4:	21 11       	cpse	r18, r1
    1fa6:	a7 c0       	rjmp	.+334    	; 0x20f6 <USB_Device_ProcessControlRequest+0x26c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1fa8:	10 91 d9 01 	lds	r17, 0x01D9
    1fac:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1fae:	80 91 e3 00 	lds	r24, 0x00E3
    1fb2:	80 78       	andi	r24, 0x80	; 128
    1fb4:	81 2b       	or	r24, r17
    1fb6:	80 93 e3 00 	sts	0x00E3, r24
    1fba:	80 91 e8 00 	lds	r24, 0x00E8
    1fbe:	87 7f       	andi	r24, 0xF7	; 247
    1fc0:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1fc4:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1fc8:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1fcc:	80 ff       	sbrs	r24, 0
    1fce:	fc cf       	rjmp	.-8      	; 0x1fc8 <USB_Device_ProcessControlRequest+0x13e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1fd0:	80 91 e3 00 	lds	r24, 0x00E3
    1fd4:	80 68       	ori	r24, 0x80	; 128
    1fd6:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1fda:	11 23       	and	r17, r17
    1fdc:	11 f0       	breq	.+4      	; 0x1fe2 <USB_Device_ProcessControlRequest+0x158>
    1fde:	83 e0       	ldi	r24, 0x03	; 3
    1fe0:	01 c0       	rjmp	.+2      	; 0x1fe4 <USB_Device_ProcessControlRequest+0x15a>
    1fe2:	82 e0       	ldi	r24, 0x02	; 2
    1fe4:	80 93 d6 01 	sts	0x01D6, r24
    1fe8:	86 c0       	rjmp	.+268    	; 0x20f6 <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1fea:	20 58       	subi	r18, 0x80	; 128
    1fec:	22 30       	cpi	r18, 0x02	; 2
    1fee:	08 f0       	brcs	.+2      	; 0x1ff2 <USB_Device_ProcessControlRequest+0x168>
    1ff0:	82 c0       	rjmp	.+260    	; 0x20f6 <USB_Device_ProcessControlRequest+0x26c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1ff2:	80 91 d9 01 	lds	r24, 0x01D9
    1ff6:	90 91 da 01 	lds	r25, 0x01DA
    1ffa:	8c 3d       	cpi	r24, 0xDC	; 220
    1ffc:	23 e0       	ldi	r18, 0x03	; 3
    1ffe:	92 07       	cpc	r25, r18
    2000:	79 f5       	brne	.+94     	; 0x2060 <USB_Device_ProcessControlRequest+0x1d6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    2002:	83 e0       	ldi	r24, 0x03	; 3
    2004:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    2006:	8a e2       	ldi	r24, 0x2A	; 42
    2008:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    200a:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    200c:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    200e:	de 01       	movw	r26, r28
    2010:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2012:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    2014:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    2016:	51 e2       	ldi	r21, 0x21	; 33
    2018:	e3 2f       	mov	r30, r19
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	50 93 57 00 	sts	0x0057, r21
    2020:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    2022:	20 ff       	sbrs	r18, 0
    2024:	03 c0       	rjmp	.+6      	; 0x202c <USB_Device_ProcessControlRequest+0x1a2>
					{
						SerialByte >>= 4;
    2026:	e2 95       	swap	r30
    2028:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    202a:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    202c:	ef 70       	andi	r30, 0x0F	; 15
    202e:	8e 2f       	mov	r24, r30
    2030:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    2032:	ea 30       	cpi	r30, 0x0A	; 10
    2034:	10 f0       	brcs	.+4      	; 0x203a <USB_Device_ProcessControlRequest+0x1b0>
    2036:	c7 96       	adiw	r24, 0x37	; 55
    2038:	01 c0       	rjmp	.+2      	; 0x203c <USB_Device_ProcessControlRequest+0x1b2>
    203a:	c0 96       	adiw	r24, 0x30	; 48
    203c:	8d 93       	st	X+, r24
    203e:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2040:	2f 5f       	subi	r18, 0xFF	; 255
    2042:	24 31       	cpi	r18, 0x14	; 20
    2044:	49 f7       	brne	.-46     	; 0x2018 <USB_Device_ProcessControlRequest+0x18e>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    2046:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2048:	80 91 e8 00 	lds	r24, 0x00E8
    204c:	87 7f       	andi	r24, 0xF7	; 247
    204e:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    2052:	6a e2       	ldi	r22, 0x2A	; 42
    2054:	70 e0       	ldi	r23, 0x00	; 0
    2056:	ce 01       	movw	r24, r28
    2058:	01 96       	adiw	r24, 0x01	; 1
    205a:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <Endpoint_Write_Control_Stream_LE>
    205e:	14 c0       	rjmp	.+40     	; 0x2088 <USB_Device_ProcessControlRequest+0x1fe>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    2060:	ae 01       	movw	r20, r28
    2062:	4f 5f       	subi	r20, 0xFF	; 255
    2064:	5f 4f       	sbci	r21, 0xFF	; 255
    2066:	60 91 db 01 	lds	r22, 0x01DB
    206a:	0e 94 bb 0b 	call	0x1776	; 0x1776 <CALLBACK_USB_GetDescriptor>
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	09 f4       	brne	.+2      	; 0x2074 <USB_Device_ProcessControlRequest+0x1ea>
    2072:	41 c0       	rjmp	.+130    	; 0x20f6 <USB_Device_ProcessControlRequest+0x26c>
    2074:	20 91 e8 00 	lds	r18, 0x00E8
    2078:	27 7f       	andi	r18, 0xF7	; 247
    207a:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    207e:	bc 01       	movw	r22, r24
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	9a 81       	ldd	r25, Y+2	; 0x02
    2084:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2088:	80 91 e8 00 	lds	r24, 0x00E8
    208c:	8b 77       	andi	r24, 0x7B	; 123
    208e:	80 93 e8 00 	sts	0x00E8, r24
    2092:	31 c0       	rjmp	.+98     	; 0x20f6 <USB_Device_ProcessControlRequest+0x26c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2094:	20 38       	cpi	r18, 0x80	; 128
    2096:	79 f5       	brne	.+94     	; 0x20f6 <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2098:	80 91 e8 00 	lds	r24, 0x00E8
    209c:	87 7f       	andi	r24, 0xF7	; 247
    209e:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    20a2:	80 91 d2 01 	lds	r24, 0x01D2
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    20a6:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    20aa:	80 91 e8 00 	lds	r24, 0x00E8
    20ae:	8e 77       	andi	r24, 0x7E	; 126
    20b0:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    20b4:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <Endpoint_ClearStatusStage>
    20b8:	1e c0       	rjmp	.+60     	; 0x20f6 <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    20ba:	21 11       	cpse	r18, r1
    20bc:	1c c0       	rjmp	.+56     	; 0x20f6 <USB_Device_ProcessControlRequest+0x26c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    20be:	90 91 d9 01 	lds	r25, 0x01D9
    20c2:	92 30       	cpi	r25, 0x02	; 2
    20c4:	c0 f4       	brcc	.+48     	; 0x20f6 <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20c6:	80 91 e8 00 	lds	r24, 0x00E8
    20ca:	87 7f       	andi	r24, 0xF7	; 247
    20cc:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    20d0:	90 93 d2 01 	sts	0x01D2, r25

	Endpoint_ClearStatusStage();
    20d4:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    20d8:	80 91 d2 01 	lds	r24, 0x01D2
    20dc:	81 11       	cpse	r24, r1
    20de:	04 c0       	rjmp	.+8      	; 0x20e8 <USB_Device_ProcessControlRequest+0x25e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    20e0:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    20e4:	87 ff       	sbrs	r24, 7
    20e6:	02 c0       	rjmp	.+4      	; 0x20ec <USB_Device_ProcessControlRequest+0x262>
    20e8:	84 e0       	ldi	r24, 0x04	; 4
    20ea:	01 c0       	rjmp	.+2      	; 0x20ee <USB_Device_ProcessControlRequest+0x264>
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	80 93 d6 01 	sts	0x01D6, r24

	EVENT_USB_Device_ConfigurationChanged();
    20f2:	0e 94 8b 0a 	call	0x1516	; 0x1516 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    20f6:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    20fa:	83 ff       	sbrs	r24, 3
    20fc:	0a c0       	rjmp	.+20     	; 0x2112 <USB_Device_ProcessControlRequest+0x288>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20fe:	80 91 e8 00 	lds	r24, 0x00E8
    2102:	87 7f       	andi	r24, 0xF7	; 247
    2104:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2108:	80 91 eb 00 	lds	r24, 0x00EB
    210c:	80 62       	ori	r24, 0x20	; 32
    210e:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    2112:	aa 96       	adiw	r28, 0x2a	; 42
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
    211e:	df 91       	pop	r29
    2120:	cf 91       	pop	r28
    2122:	1f 91       	pop	r17
    2124:	08 95       	ret

00002126 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    2126:	90 93 64 01 	sts	0x0164, r25
    212a:	80 93 63 01 	sts	0x0163, r24
    212e:	08 95       	ret

00002130 <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    2130:	e0 91 63 01 	lds	r30, 0x0163
    2134:	f0 91 64 01 	lds	r31, 0x0164
    2138:	30 97       	sbiw	r30, 0x00	; 0
    213a:	21 f0       	breq	.+8      	; 0x2144 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    213c:	01 90       	ld	r0, Z+
    213e:	f0 81       	ld	r31, Z
    2140:	e0 2d       	mov	r30, r0
    2142:	09 94       	ijmp
}
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	08 95       	ret

00002148 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    2148:	ff 92       	push	r15
    214a:	0f 93       	push	r16
    214c:	1f 93       	push	r17
    214e:	cf 93       	push	r28
    2150:	df 93       	push	r29
    2152:	8c 01       	movw	r16, r24
    if (!driver) return;
    2154:	e0 91 63 01 	lds	r30, 0x0163
    2158:	f0 91 64 01 	lds	r31, 0x0164
    215c:	30 97       	sbiw	r30, 0x00	; 0
    215e:	99 f1       	breq	.+102    	; 0x21c6 <host_keyboard_send+0x7e>
    (*driver->send_keyboard)(report);
    2160:	02 80       	ldd	r0, Z+2	; 0x02
    2162:	f3 81       	ldd	r31, Z+3	; 0x03
    2164:	e0 2d       	mov	r30, r0
    2166:	09 95       	icall

    if (debug_keyboard) {
    2168:	80 91 c1 01 	lds	r24, 0x01C1
    216c:	82 ff       	sbrs	r24, 2
    216e:	2b c0       	rjmp	.+86     	; 0x21c6 <host_keyboard_send+0x7e>
        dprint("keyboard_report: ");
    2170:	80 ff       	sbrs	r24, 0
    2172:	04 c0       	rjmp	.+8      	; 0x217c <host_keyboard_send+0x34>
    2174:	84 e4       	ldi	r24, 0x44	; 68
    2176:	94 e0       	ldi	r25, 0x04	; 4
    2178:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    217c:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    217e:	80 e1       	ldi	r24, 0x10	; 16
    2180:	f8 2e       	mov	r15, r24
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    2182:	0e e3       	ldi	r16, 0x3E	; 62
    2184:	14 e0       	ldi	r17, 0x04	; 4
    2186:	80 91 c1 01 	lds	r24, 0x01C1
    218a:	80 ff       	sbrs	r24, 0
    218c:	0b c0       	rjmp	.+22     	; 0x21a4 <host_keyboard_send+0x5c>
    218e:	88 81       	ld	r24, Y
    2190:	1f 92       	push	r1
    2192:	8f 93       	push	r24
    2194:	1f 93       	push	r17
    2196:	0f 93       	push	r16
    2198:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	fa 94       	dec	r15
    21a6:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    21a8:	f1 10       	cpse	r15, r1
    21aa:	ed cf       	rjmp	.-38     	; 0x2186 <host_keyboard_send+0x3e>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    21ac:	80 91 c1 01 	lds	r24, 0x01C1
    21b0:	80 ff       	sbrs	r24, 0
    21b2:	09 c0       	rjmp	.+18     	; 0x21c6 <host_keyboard_send+0x7e>
    21b4:	8c e3       	ldi	r24, 0x3C	; 60
    21b6:	94 e0       	ldi	r25, 0x04	; 4
    }
}
    21b8:	df 91       	pop	r29
    21ba:	cf 91       	pop	r28
    21bc:	1f 91       	pop	r17
    21be:	0f 91       	pop	r16
    21c0:	ff 90       	pop	r15
    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    21c2:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <xputs>
    }
}
    21c6:	df 91       	pop	r29
    21c8:	cf 91       	pop	r28
    21ca:	1f 91       	pop	r17
    21cc:	0f 91       	pop	r16
    21ce:	ff 90       	pop	r15
    21d0:	08 95       	ret

000021d2 <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    21d2:	e0 91 63 01 	lds	r30, 0x0163
    21d6:	f0 91 64 01 	lds	r31, 0x0164
    21da:	30 97       	sbiw	r30, 0x00	; 0
    21dc:	21 f0       	breq	.+8      	; 0x21e6 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    21de:	04 80       	ldd	r0, Z+4	; 0x04
    21e0:	f5 81       	ldd	r31, Z+5	; 0x05
    21e2:	e0 2d       	mov	r30, r0
    21e4:	09 94       	ijmp
    21e6:	08 95       	ret

000021e8 <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    21e8:	20 91 61 01 	lds	r18, 0x0161
    21ec:	30 91 62 01 	lds	r19, 0x0162
    21f0:	82 17       	cp	r24, r18
    21f2:	93 07       	cpc	r25, r19
    21f4:	71 f0       	breq	.+28     	; 0x2212 <host_system_send+0x2a>
    last_system_report = report;
    21f6:	90 93 62 01 	sts	0x0162, r25
    21fa:	80 93 61 01 	sts	0x0161, r24

    if (!driver) return;
    21fe:	e0 91 63 01 	lds	r30, 0x0163
    2202:	f0 91 64 01 	lds	r31, 0x0164
    2206:	30 97       	sbiw	r30, 0x00	; 0
    2208:	21 f0       	breq	.+8      	; 0x2212 <host_system_send+0x2a>
    (*driver->send_system)(report);
    220a:	06 80       	ldd	r0, Z+6	; 0x06
    220c:	f7 81       	ldd	r31, Z+7	; 0x07
    220e:	e0 2d       	mov	r30, r0
    2210:	09 94       	ijmp
    2212:	08 95       	ret

00002214 <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    2214:	20 91 5f 01 	lds	r18, 0x015F
    2218:	30 91 60 01 	lds	r19, 0x0160
    221c:	82 17       	cp	r24, r18
    221e:	93 07       	cpc	r25, r19
    2220:	71 f0       	breq	.+28     	; 0x223e <host_consumer_send+0x2a>
    last_consumer_report = report;
    2222:	90 93 60 01 	sts	0x0160, r25
    2226:	80 93 5f 01 	sts	0x015F, r24

    if (!driver) return;
    222a:	e0 91 63 01 	lds	r30, 0x0163
    222e:	f0 91 64 01 	lds	r31, 0x0164
    2232:	30 97       	sbiw	r30, 0x00	; 0
    2234:	21 f0       	breq	.+8      	; 0x223e <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    2236:	00 84       	ldd	r0, Z+8	; 0x08
    2238:	f1 85       	ldd	r31, Z+9	; 0x09
    223a:	e0 2d       	mov	r30, r0
    223c:	09 94       	ijmp
    223e:	08 95       	ret

00002240 <matrix_setup>:
    return false;
}
#endif


__attribute__ ((weak)) void matrix_setup(void) {}
    2240:	08 95       	ret

00002242 <keyboard_setup>:
void keyboard_setup(void)
{
    matrix_setup();
    2242:	0c 94 20 11 	jmp	0x2240	; 0x2240 <matrix_setup>

00002246 <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    2246:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <timer_init>
    matrix_init();
    224a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    224e:	0c 94 ad 1f 	jmp	0x3f5a	; 0x3f5a <bootmagic>

00002252 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    2252:	5f 92       	push	r5
    2254:	6f 92       	push	r6
    2256:	7f 92       	push	r7
    2258:	8f 92       	push	r8
    225a:	9f 92       	push	r9
    225c:	af 92       	push	r10
    225e:	bf 92       	push	r11
    2260:	cf 92       	push	r12
    2262:	df 92       	push	r13
    2264:	ef 92       	push	r14
    2266:	ff 92       	push	r15
    2268:	0f 93       	push	r16
    226a:	1f 93       	push	r17
    226c:	cf 93       	push	r28
    226e:	df 93       	push	r29
    2270:	00 d0       	rcall	.+0      	; 0x2272 <keyboard_task+0x20>
    2272:	00 d0       	rcall	.+0      	; 0x2274 <keyboard_task+0x22>
    2274:	1f 92       	push	r1
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    227a:	0e 94 79 07 	call	0xef2	; 0xef2 <matrix_scan>
    227e:	96 e6       	ldi	r25, 0x66	; 102
    2280:	c9 2e       	mov	r12, r25
    2282:	91 e0       	ldi	r25, 0x01	; 1
    2284:	d9 2e       	mov	r13, r25
    2286:	00 e0       	ldi	r16, 0x00	; 0
    2288:	10 e0       	ldi	r17, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    228a:	aa 24       	eor	r10, r10
    228c:	a3 94       	inc	r10
    228e:	b1 2c       	mov	r11, r1
    2290:	50 2e       	mov	r5, r16
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    2292:	80 2f       	mov	r24, r16
    2294:	0e 94 94 08 	call	0x1128	; 0x1128 <matrix_get_row>
    2298:	3c 01       	movw	r6, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    229a:	f6 01       	movw	r30, r12
    229c:	e1 90       	ld	r14, Z+
    229e:	f1 90       	ld	r15, Z+
    22a0:	6f 01       	movw	r12, r30
    22a2:	e8 26       	eor	r14, r24
    22a4:	f9 26       	eor	r15, r25
        if (matrix_change) {
    22a6:	e1 14       	cp	r14, r1
    22a8:	f1 04       	cpc	r15, r1
    22aa:	b1 f4       	brne	.+44     	; 0x22d8 <keyboard_task+0x86>
    22ac:	0f 5f       	subi	r16, 0xFF	; 255
    22ae:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    22b0:	04 30       	cpi	r16, 0x04	; 4
    22b2:	11 05       	cpc	r17, r1
    22b4:	69 f7       	brne	.-38     	; 0x2290 <keyboard_task+0x3e>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    22b6:	8f ef       	ldi	r24, 0xFF	; 255
    22b8:	89 83       	std	Y+1, r24	; 0x01
    22ba:	8a 83       	std	Y+2, r24	; 0x02
    22bc:	1b 82       	std	Y+3, r1	; 0x03
    22be:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <timer_read>
    22c2:	81 60       	ori	r24, 0x01	; 1
    22c4:	78 2f       	mov	r23, r24
    22c6:	9d 83       	std	Y+5, r25	; 0x05
    22c8:	8c 83       	std	Y+4, r24	; 0x04
    22ca:	49 81       	ldd	r20, Y+1	; 0x01
    22cc:	5a 81       	ldd	r21, Y+2	; 0x02
    22ce:	6b 81       	ldd	r22, Y+3	; 0x03
    22d0:	8d 81       	ldd	r24, Y+5	; 0x05
    22d2:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <action_exec>
    22d6:	41 c0       	rjmp	.+130    	; 0x235a <keyboard_task+0x108>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    22d8:	80 91 c1 01 	lds	r24, 0x01C1
    22dc:	81 fd       	sbrc	r24, 1
    22de:	0e 94 9d 08 	call	0x113a	; 0x113a <matrix_print>
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    22e6:	45 01       	movw	r8, r10
    22e8:	02 2e       	mov	r0, r18
    22ea:	02 c0       	rjmp	.+4      	; 0x22f0 <keyboard_task+0x9e>
    22ec:	88 0c       	add	r8, r8
    22ee:	99 1c       	adc	r9, r9
    22f0:	0a 94       	dec	r0
    22f2:	e2 f7       	brpl	.-8      	; 0x22ec <keyboard_task+0x9a>
    22f4:	c4 01       	movw	r24, r8
    22f6:	8e 21       	and	r24, r14
    22f8:	9f 21       	and	r25, r15
    22fa:	89 2b       	or	r24, r25
    22fc:	41 f1       	breq	.+80     	; 0x234e <keyboard_task+0xfc>
                    keyevent_t e = (keyevent_t){
    22fe:	29 83       	std	Y+1, r18	; 0x01
    2300:	5a 82       	std	Y+2, r5	; 0x02
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    2302:	68 20       	and	r6, r8
    2304:	79 20       	and	r7, r9
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	67 28       	or	r6, r7
    230a:	09 f4       	brne	.+2      	; 0x230e <keyboard_task+0xbc>
    230c:	80 e0       	ldi	r24, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    230e:	8b 83       	std	Y+3, r24	; 0x03
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    2310:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <timer_read>
    2314:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    2316:	78 2f       	mov	r23, r24
    2318:	9d 83       	std	Y+5, r25	; 0x05
    231a:	8c 83       	std	Y+4, r24	; 0x04
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    };
                    action_exec(e);
    231c:	49 81       	ldd	r20, Y+1	; 0x01
    231e:	5a 81       	ldd	r21, Y+2	; 0x02
    2320:	6b 81       	ldd	r22, Y+3	; 0x03
    2322:	8d 81       	ldd	r24, Y+5	; 0x05
    2324:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <action_exec>
                    hook_matrix_change(e);
    2328:	49 81       	ldd	r20, Y+1	; 0x01
    232a:	5a 81       	ldd	r21, Y+2	; 0x02
    232c:	6b 81       	ldd	r22, Y+3	; 0x03
    232e:	7c 81       	ldd	r23, Y+4	; 0x04
    2330:	8d 81       	ldd	r24, Y+5	; 0x05
    2332:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    2336:	f8 01       	movw	r30, r16
    2338:	ee 0f       	add	r30, r30
    233a:	ff 1f       	adc	r31, r31
    233c:	ea 59       	subi	r30, 0x9A	; 154
    233e:	fe 4f       	sbci	r31, 0xFE	; 254
    2340:	80 81       	ld	r24, Z
    2342:	91 81       	ldd	r25, Z+1	; 0x01
    2344:	88 25       	eor	r24, r8
    2346:	99 25       	eor	r25, r9
    2348:	91 83       	std	Z+1, r25	; 0x01
    234a:	80 83       	st	Z, r24
    234c:	06 c0       	rjmp	.+12     	; 0x235a <keyboard_task+0x108>
    234e:	2f 5f       	subi	r18, 0xFF	; 255
    2350:	3f 4f       	sbci	r19, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    2352:	2c 30       	cpi	r18, 0x0C	; 12
    2354:	31 05       	cpc	r19, r1
    2356:	39 f6       	brne	.-114    	; 0x22e6 <keyboard_task+0x94>
    2358:	a9 cf       	rjmp	.-174    	; 0x22ac <keyboard_task+0x5a>
    // call with pseudo tick event when no real key event.
    action_exec(TICK);

MATRIX_LOOP_END:

    hook_keyboard_loop();
    235a:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    235e:	0e 94 34 23 	call	0x4668	; 0x4668 <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    2362:	10 91 65 01 	lds	r17, 0x0165
    2366:	0e 94 98 10 	call	0x2130	; 0x2130 <host_keyboard_leds>
    236a:	18 17       	cp	r17, r24
    236c:	71 f1       	breq	.+92     	; 0x23ca <keyboard_task+0x178>
        led_status = host_keyboard_leds();
    236e:	0e 94 98 10 	call	0x2130	; 0x2130 <host_keyboard_leds>
    2372:	80 93 65 01 	sts	0x0165, r24
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    2376:	90 91 c1 01 	lds	r25, 0x01C1
    237a:	92 ff       	sbrs	r25, 2
    237c:	0e c0       	rjmp	.+28     	; 0x239a <keyboard_task+0x148>
    237e:	90 ff       	sbrs	r25, 0
    2380:	0c c0       	rjmp	.+24     	; 0x239a <keyboard_task+0x148>
    2382:	1f 92       	push	r1
    2384:	8f 93       	push	r24
    2386:	86 e5       	ldi	r24, 0x56	; 86
    2388:	94 e0       	ldi	r25, 0x04	; 4
    238a:	9f 93       	push	r25
    238c:	8f 93       	push	r24
    238e:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    239a:	80 91 65 01 	lds	r24, 0x0165
    }
}
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	0f 90       	pop	r0
    23a8:	df 91       	pop	r29
    23aa:	cf 91       	pop	r28
    23ac:	1f 91       	pop	r17
    23ae:	0f 91       	pop	r16
    23b0:	ff 90       	pop	r15
    23b2:	ef 90       	pop	r14
    23b4:	df 90       	pop	r13
    23b6:	cf 90       	pop	r12
    23b8:	bf 90       	pop	r11
    23ba:	af 90       	pop	r10
    23bc:	9f 90       	pop	r9
    23be:	8f 90       	pop	r8
    23c0:	7f 90       	pop	r7
    23c2:	6f 90       	pop	r6
    23c4:	5f 90       	pop	r5

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
        hook_keyboard_leds_change(led_status);
    23c6:	0c 94 21 1d 	jmp	0x3a42	; 0x3a42 <hook_keyboard_leds_change>
    }
}
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	0f 90       	pop	r0
    23d4:	df 91       	pop	r29
    23d6:	cf 91       	pop	r28
    23d8:	1f 91       	pop	r17
    23da:	0f 91       	pop	r16
    23dc:	ff 90       	pop	r15
    23de:	ef 90       	pop	r14
    23e0:	df 90       	pop	r13
    23e2:	cf 90       	pop	r12
    23e4:	bf 90       	pop	r11
    23e6:	af 90       	pop	r10
    23e8:	9f 90       	pop	r9
    23ea:	8f 90       	pop	r8
    23ec:	7f 90       	pop	r7
    23ee:	6f 90       	pop	r6
    23f0:	5f 90       	pop	r5
    23f2:	08 95       	ret

000023f4 <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    23f4:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <led_set>

000023f8 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    23f8:	cf 93       	push	r28
    23fa:	df 93       	push	r29
    23fc:	cd b7       	in	r28, 0x3d	; 61
    23fe:	de b7       	in	r29, 0x3e	; 62
    2400:	2b 97       	sbiw	r28, 0x0b	; 11
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	f8 94       	cli
    2406:	de bf       	out	0x3e, r29	; 62
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	cd bf       	out	0x3d, r28	; 61
    240c:	4f 83       	std	Y+7, r20	; 0x07
    240e:	58 87       	std	Y+8, r21	; 0x08
    2410:	69 87       	std	Y+9, r22	; 0x09
    2412:	7a 87       	std	Y+10, r23	; 0x0a
    2414:	8b 87       	std	Y+11, r24	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2416:	8a 85       	ldd	r24, Y+10	; 0x0a
    2418:	9b 85       	ldd	r25, Y+11	; 0x0b
    241a:	89 2b       	or	r24, r25
    241c:	31 f0       	breq	.+12     	; 0x242a <action_exec+0x32>
    241e:	5f 3f       	cpi	r21, 0xFF	; 255
    2420:	11 f0       	breq	.+4      	; 0x2426 <action_exec+0x2e>
    2422:	80 e0       	ldi	r24, 0x00	; 0
    2424:	03 c0       	rjmp	.+6      	; 0x242c <action_exec+0x34>
    2426:	4f 3f       	cpi	r20, 0xFF	; 255
    2428:	e1 f7       	brne	.-8      	; 0x2422 <action_exec+0x2a>
    242a:	81 e0       	ldi	r24, 0x01	; 1
    if (!IS_NOEVENT(event)) {
    242c:	81 11       	cpse	r24, r1
    242e:	07 c0       	rjmp	.+14     	; 0x243e <action_exec+0x46>
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    2430:	4f 81       	ldd	r20, Y+7	; 0x07
    2432:	58 85       	ldd	r21, Y+8	; 0x08
    2434:	69 85       	ldd	r22, Y+9	; 0x09
    2436:	7a 85       	ldd	r23, Y+10	; 0x0a
    2438:	8b 85       	ldd	r24, Y+11	; 0x0b
    243a:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <hook_matrix_change>
    }

    keyrecord_t record = { .event = event };
    243e:	de 01       	movw	r26, r28
    2440:	11 96       	adiw	r26, 0x01	; 1
    2442:	86 e0       	ldi	r24, 0x06	; 6
    2444:	fd 01       	movw	r30, r26
    2446:	11 92       	st	Z+, r1
    2448:	8a 95       	dec	r24
    244a:	e9 f7       	brne	.-6      	; 0x2446 <action_exec+0x4e>
    244c:	85 e0       	ldi	r24, 0x05	; 5
    244e:	fe 01       	movw	r30, r28
    2450:	37 96       	adiw	r30, 0x07	; 7
    2452:	01 90       	ld	r0, Z+
    2454:	0d 92       	st	X+, r0
    2456:	8a 95       	dec	r24
    2458:	e1 f7       	brne	.-8      	; 0x2452 <action_exec+0x5a>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    245a:	49 81       	ldd	r20, Y+1	; 0x01
    245c:	5a 81       	ldd	r21, Y+2	; 0x02
    245e:	6b 81       	ldd	r22, Y+3	; 0x03
    2460:	7c 81       	ldd	r23, Y+4	; 0x04
    2462:	8d 81       	ldd	r24, Y+5	; 0x05
    2464:	9e 81       	ldd	r25, Y+6	; 0x06
    2466:	0e 94 59 19 	call	0x32b2	; 0x32b2 <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    246a:	2b 96       	adiw	r28, 0x0b	; 11
    246c:	0f b6       	in	r0, 0x3f	; 63
    246e:	f8 94       	cli
    2470:	de bf       	out	0x3e, r29	; 62
    2472:	0f be       	out	0x3f, r0	; 63
    2474:	cd bf       	out	0x3d, r28	; 61
    2476:	df 91       	pop	r29
    2478:	cf 91       	pop	r28
    247a:	08 95       	ret

0000247c <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    247c:	cf 93       	push	r28
    247e:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    2480:	88 23       	and	r24, r24
    2482:	09 f4       	brne	.+2      	; 0x2486 <register_code+0xa>
    2484:	cc c0       	rjmp	.+408    	; 0x261e <register_code+0x1a2>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2486:	82 38       	cpi	r24, 0x82	; 130
    2488:	59 f4       	brne	.+22     	; 0x24a0 <register_code+0x24>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    248a:	0e 94 98 10 	call	0x2130	; 0x2130 <host_keyboard_leds>
    248e:	81 fd       	sbrc	r24, 1
    2490:	c6 c0       	rjmp	.+396    	; 0x261e <register_code+0x1a2>
#endif
        add_key(KC_CAPSLOCK);
    2492:	89 e3       	ldi	r24, 0x39	; 57
    2494:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <add_key>
        send_keyboard_report();
    2498:	0e 94 b8 1c 	call	0x3970	; 0x3970 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    249c:	89 e3       	ldi	r24, 0x39	; 57
    249e:	0c c0       	rjmp	.+24     	; 0x24b8 <register_code+0x3c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    24a0:	83 38       	cpi	r24, 0x83	; 131
    24a2:	79 f4       	brne	.+30     	; 0x24c2 <register_code+0x46>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    24a4:	0e 94 98 10 	call	0x2130	; 0x2130 <host_keyboard_leds>
    24a8:	80 fd       	sbrc	r24, 0
    24aa:	b9 c0       	rjmp	.+370    	; 0x261e <register_code+0x1a2>
#endif
        add_key(KC_NUMLOCK);
    24ac:	83 e5       	ldi	r24, 0x53	; 83
    24ae:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <add_key>
        send_keyboard_report();
    24b2:	0e 94 b8 1c 	call	0x3970	; 0x3970 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    24b6:	83 e5       	ldi	r24, 0x53	; 83
    24b8:	0e 94 27 1c 	call	0x384e	; 0x384e <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    24bc:	cf 91       	pop	r28
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        del_key(KC_NUMLOCK);
        send_keyboard_report();
    24be:	0c 94 b8 1c 	jmp	0x3970	; 0x3970 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    24c2:	84 38       	cpi	r24, 0x84	; 132
    24c4:	59 f4       	brne	.+22     	; 0x24dc <register_code+0x60>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    24c6:	0e 94 98 10 	call	0x2130	; 0x2130 <host_keyboard_leds>
    24ca:	82 fd       	sbrc	r24, 2
    24cc:	a8 c0       	rjmp	.+336    	; 0x261e <register_code+0x1a2>
#endif
        add_key(KC_SCROLLLOCK);
    24ce:	87 e4       	ldi	r24, 0x47	; 71
    24d0:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <add_key>
        send_keyboard_report();
    24d4:	0e 94 b8 1c 	call	0x3970	; 0x3970 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    24d8:	87 e4       	ldi	r24, 0x47	; 71
    24da:	ee cf       	rjmp	.-36     	; 0x24b8 <register_code+0x3c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    24dc:	8c ef       	ldi	r24, 0xFC	; 252
    24de:	8c 0f       	add	r24, r28
    24e0:	81 3a       	cpi	r24, 0xA1	; 161
    24e2:	48 f4       	brcc	.+18     	; 0x24f6 <register_code+0x7a>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    24e4:	8c 2f       	mov	r24, r28
    24e6:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <command_proc>
    24ea:	81 11       	cpse	r24, r1
    24ec:	98 c0       	rjmp	.+304    	; 0x261e <register_code+0x1a2>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    24ee:	8c 2f       	mov	r24, r28
    24f0:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <add_key>
    24f4:	e3 cf       	rjmp	.-58     	; 0x24bc <register_code+0x40>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    24f6:	80 e2       	ldi	r24, 0x20	; 32
    24f8:	8c 0f       	add	r24, r28
    24fa:	88 30       	cpi	r24, 0x08	; 8
    24fc:	48 f4       	brcc	.+18     	; 0x2510 <register_code+0x94>
        add_mods(MOD_BIT(code));
    24fe:	c7 70       	andi	r28, 0x07	; 7
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	01 c0       	rjmp	.+2      	; 0x2506 <register_code+0x8a>
    2504:	88 0f       	add	r24, r24
    2506:	ca 95       	dec	r28
    2508:	ea f7       	brpl	.-6      	; 0x2504 <register_code+0x88>
    250a:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <add_mods>
    250e:	d6 cf       	rjmp	.-84     	; 0x24bc <register_code+0x40>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2510:	8b e5       	ldi	r24, 0x5B	; 91
    2512:	8c 0f       	add	r24, r28
    2514:	83 30       	cpi	r24, 0x03	; 3
    2516:	78 f4       	brcc	.+30     	; 0x2536 <register_code+0xba>
        host_system_send(KEYCODE2SYSTEM(code));
    2518:	c5 3a       	cpi	r28, 0xA5	; 165
    251a:	29 f0       	breq	.+10     	; 0x2526 <register_code+0xaa>
    251c:	c6 3a       	cpi	r28, 0xA6	; 166
    251e:	31 f4       	brne	.+12     	; 0x252c <register_code+0xb0>
    2520:	82 e8       	ldi	r24, 0x82	; 130
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	05 c0       	rjmp	.+10     	; 0x2530 <register_code+0xb4>
    2526:	81 e8       	ldi	r24, 0x81	; 129
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	02 c0       	rjmp	.+4      	; 0x2530 <register_code+0xb4>
    252c:	83 e8       	ldi	r24, 0x83	; 131
    252e:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2530:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    2532:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2536:	88 e5       	ldi	r24, 0x58	; 88
    2538:	8c 0f       	add	r24, r28
    253a:	85 31       	cpi	r24, 0x15	; 21
    253c:	08 f0       	brcs	.+2      	; 0x2540 <register_code+0xc4>
    253e:	6f c0       	rjmp	.+222    	; 0x261e <register_code+0x1a2>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2540:	c8 3a       	cpi	r28, 0xA8	; 168
    2542:	61 f1       	breq	.+88     	; 0x259c <register_code+0x120>
    2544:	c9 3a       	cpi	r28, 0xA9	; 169
    2546:	69 f1       	breq	.+90     	; 0x25a2 <register_code+0x126>
    2548:	ca 3a       	cpi	r28, 0xAA	; 170
    254a:	71 f1       	breq	.+92     	; 0x25a8 <register_code+0x12c>
    254c:	cb 3a       	cpi	r28, 0xAB	; 171
    254e:	79 f1       	breq	.+94     	; 0x25ae <register_code+0x132>
    2550:	cc 3a       	cpi	r28, 0xAC	; 172
    2552:	81 f1       	breq	.+96     	; 0x25b4 <register_code+0x138>
    2554:	cd 3a       	cpi	r28, 0xAD	; 173
    2556:	89 f1       	breq	.+98     	; 0x25ba <register_code+0x13e>
    2558:	ce 3a       	cpi	r28, 0xAE	; 174
    255a:	91 f1       	breq	.+100    	; 0x25c0 <register_code+0x144>
    255c:	cf 3a       	cpi	r28, 0xAF	; 175
    255e:	99 f1       	breq	.+102    	; 0x25c6 <register_code+0x14a>
    2560:	c1 3b       	cpi	r28, 0xB1	; 177
    2562:	a1 f1       	breq	.+104    	; 0x25cc <register_code+0x150>
    2564:	c0 3b       	cpi	r28, 0xB0	; 176
    2566:	a9 f1       	breq	.+106    	; 0x25d2 <register_code+0x156>
    2568:	c2 3b       	cpi	r28, 0xB2	; 178
    256a:	b1 f1       	breq	.+108    	; 0x25d8 <register_code+0x15c>
    256c:	c3 3b       	cpi	r28, 0xB3	; 179
    256e:	b9 f1       	breq	.+110    	; 0x25de <register_code+0x162>
    2570:	c4 3b       	cpi	r28, 0xB4	; 180
    2572:	c1 f1       	breq	.+112    	; 0x25e4 <register_code+0x168>
    2574:	c5 3b       	cpi	r28, 0xB5	; 181
    2576:	c9 f1       	breq	.+114    	; 0x25ea <register_code+0x16e>
    2578:	c6 3b       	cpi	r28, 0xB6	; 182
    257a:	d1 f1       	breq	.+116    	; 0x25f0 <register_code+0x174>
    257c:	c7 3b       	cpi	r28, 0xB7	; 183
    257e:	d9 f1       	breq	.+118    	; 0x25f6 <register_code+0x17a>
    2580:	c8 3b       	cpi	r28, 0xB8	; 184
    2582:	e1 f1       	breq	.+120    	; 0x25fc <register_code+0x180>
    2584:	c9 3b       	cpi	r28, 0xB9	; 185
    2586:	e9 f1       	breq	.+122    	; 0x2602 <register_code+0x186>
    2588:	ca 3b       	cpi	r28, 0xBA	; 186
    258a:	f1 f1       	breq	.+124    	; 0x2608 <register_code+0x18c>
    258c:	cb 3b       	cpi	r28, 0xBB	; 187
    258e:	f9 f1       	breq	.+126    	; 0x260e <register_code+0x192>
    2590:	cc 3b       	cpi	r28, 0xBC	; 188
    2592:	09 f0       	breq	.+2      	; 0x2596 <register_code+0x11a>
    2594:	3f c0       	rjmp	.+126    	; 0x2614 <register_code+0x198>
    2596:	8a e2       	ldi	r24, 0x2A	; 42
    2598:	92 e0       	ldi	r25, 0x02	; 2
    259a:	3e c0       	rjmp	.+124    	; 0x2618 <register_code+0x19c>
    259c:	82 ee       	ldi	r24, 0xE2	; 226
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	3b c0       	rjmp	.+118    	; 0x2618 <register_code+0x19c>
    25a2:	89 ee       	ldi	r24, 0xE9	; 233
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	38 c0       	rjmp	.+112    	; 0x2618 <register_code+0x19c>
    25a8:	8a ee       	ldi	r24, 0xEA	; 234
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	35 c0       	rjmp	.+106    	; 0x2618 <register_code+0x19c>
    25ae:	85 eb       	ldi	r24, 0xB5	; 181
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	32 c0       	rjmp	.+100    	; 0x2618 <register_code+0x19c>
    25b4:	86 eb       	ldi	r24, 0xB6	; 182
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	2f c0       	rjmp	.+94     	; 0x2618 <register_code+0x19c>
    25ba:	83 eb       	ldi	r24, 0xB3	; 179
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	2c c0       	rjmp	.+88     	; 0x2618 <register_code+0x19c>
    25c0:	84 eb       	ldi	r24, 0xB4	; 180
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	29 c0       	rjmp	.+82     	; 0x2618 <register_code+0x19c>
    25c6:	87 eb       	ldi	r24, 0xB7	; 183
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	26 c0       	rjmp	.+76     	; 0x2618 <register_code+0x19c>
    25cc:	8c ec       	ldi	r24, 0xCC	; 204
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	23 c0       	rjmp	.+70     	; 0x2618 <register_code+0x19c>
    25d2:	8d ec       	ldi	r24, 0xCD	; 205
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	20 c0       	rjmp	.+64     	; 0x2618 <register_code+0x19c>
    25d8:	83 e8       	ldi	r24, 0x83	; 131
    25da:	91 e0       	ldi	r25, 0x01	; 1
    25dc:	1d c0       	rjmp	.+58     	; 0x2618 <register_code+0x19c>
    25de:	8a e8       	ldi	r24, 0x8A	; 138
    25e0:	91 e0       	ldi	r25, 0x01	; 1
    25e2:	1a c0       	rjmp	.+52     	; 0x2618 <register_code+0x19c>
    25e4:	82 e9       	ldi	r24, 0x92	; 146
    25e6:	91 e0       	ldi	r25, 0x01	; 1
    25e8:	17 c0       	rjmp	.+46     	; 0x2618 <register_code+0x19c>
    25ea:	84 e9       	ldi	r24, 0x94	; 148
    25ec:	91 e0       	ldi	r25, 0x01	; 1
    25ee:	14 c0       	rjmp	.+40     	; 0x2618 <register_code+0x19c>
    25f0:	81 e2       	ldi	r24, 0x21	; 33
    25f2:	92 e0       	ldi	r25, 0x02	; 2
    25f4:	11 c0       	rjmp	.+34     	; 0x2618 <register_code+0x19c>
    25f6:	83 e2       	ldi	r24, 0x23	; 35
    25f8:	92 e0       	ldi	r25, 0x02	; 2
    25fa:	0e c0       	rjmp	.+28     	; 0x2618 <register_code+0x19c>
    25fc:	84 e2       	ldi	r24, 0x24	; 36
    25fe:	92 e0       	ldi	r25, 0x02	; 2
    2600:	0b c0       	rjmp	.+22     	; 0x2618 <register_code+0x19c>
    2602:	85 e2       	ldi	r24, 0x25	; 37
    2604:	92 e0       	ldi	r25, 0x02	; 2
    2606:	08 c0       	rjmp	.+16     	; 0x2618 <register_code+0x19c>
    2608:	86 e2       	ldi	r24, 0x26	; 38
    260a:	92 e0       	ldi	r25, 0x02	; 2
    260c:	05 c0       	rjmp	.+10     	; 0x2618 <register_code+0x19c>
    260e:	87 e2       	ldi	r24, 0x27	; 39
    2610:	92 e0       	ldi	r25, 0x02	; 2
    2612:	02 c0       	rjmp	.+4      	; 0x2618 <register_code+0x19c>
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    2618:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    261a:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <host_consumer_send>
    }
}
    261e:	cf 91       	pop	r28
    2620:	08 95       	ret

00002622 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    2622:	88 23       	and	r24, r24
    2624:	09 f4       	brne	.+2      	; 0x2628 <unregister_code+0x6>
    2626:	4b c0       	rjmp	.+150    	; 0x26be <unregister_code+0x9c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2628:	82 38       	cpi	r24, 0x82	; 130
    262a:	59 f4       	brne	.+22     	; 0x2642 <unregister_code+0x20>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    262c:	0e 94 98 10 	call	0x2130	; 0x2130 <host_keyboard_leds>
    2630:	81 ff       	sbrs	r24, 1
    2632:	45 c0       	rjmp	.+138    	; 0x26be <unregister_code+0x9c>
#endif
        add_key(KC_CAPSLOCK);
    2634:	89 e3       	ldi	r24, 0x39	; 57
    2636:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <add_key>
        send_keyboard_report();
    263a:	0e 94 b8 1c 	call	0x3970	; 0x3970 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    263e:	89 e3       	ldi	r24, 0x39	; 57
    2640:	0c c0       	rjmp	.+24     	; 0x265a <unregister_code+0x38>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    2642:	83 38       	cpi	r24, 0x83	; 131
    2644:	71 f4       	brne	.+28     	; 0x2662 <unregister_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    2646:	0e 94 98 10 	call	0x2130	; 0x2130 <host_keyboard_leds>
    264a:	80 ff       	sbrs	r24, 0
    264c:	38 c0       	rjmp	.+112    	; 0x26be <unregister_code+0x9c>
#endif
        add_key(KC_NUMLOCK);
    264e:	83 e5       	ldi	r24, 0x53	; 83
    2650:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <add_key>
        send_keyboard_report();
    2654:	0e 94 b8 1c 	call	0x3970	; 0x3970 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    2658:	83 e5       	ldi	r24, 0x53	; 83
    265a:	0e 94 27 1c 	call	0x384e	; 0x384e <del_key>
        send_keyboard_report();
    265e:	0c 94 b8 1c 	jmp	0x3970	; 0x3970 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2662:	84 38       	cpi	r24, 0x84	; 132
    2664:	59 f4       	brne	.+22     	; 0x267c <unregister_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    2666:	0e 94 98 10 	call	0x2130	; 0x2130 <host_keyboard_leds>
    266a:	82 ff       	sbrs	r24, 2
    266c:	28 c0       	rjmp	.+80     	; 0x26be <unregister_code+0x9c>
#endif
        add_key(KC_SCROLLLOCK);
    266e:	87 e4       	ldi	r24, 0x47	; 71
    2670:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <add_key>
        send_keyboard_report();
    2674:	0e 94 b8 1c 	call	0x3970	; 0x3970 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    2678:	87 e4       	ldi	r24, 0x47	; 71
    267a:	ef cf       	rjmp	.-34     	; 0x265a <unregister_code+0x38>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    267c:	9c ef       	ldi	r25, 0xFC	; 252
    267e:	98 0f       	add	r25, r24
    2680:	91 3a       	cpi	r25, 0xA1	; 161
    2682:	58 f3       	brcs	.-42     	; 0x265a <unregister_code+0x38>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    2684:	90 e2       	ldi	r25, 0x20	; 32
    2686:	98 0f       	add	r25, r24
    2688:	98 30       	cpi	r25, 0x08	; 8
    268a:	50 f4       	brcc	.+20     	; 0x26a0 <unregister_code+0x7e>
        del_mods(MOD_BIT(code));
    268c:	87 70       	andi	r24, 0x07	; 7
    268e:	91 e0       	ldi	r25, 0x01	; 1
    2690:	01 c0       	rjmp	.+2      	; 0x2694 <unregister_code+0x72>
    2692:	99 0f       	add	r25, r25
    2694:	8a 95       	dec	r24
    2696:	ea f7       	brpl	.-6      	; 0x2692 <unregister_code+0x70>
    2698:	89 2f       	mov	r24, r25
    269a:	0e 94 82 1c 	call	0x3904	; 0x3904 <del_mods>
    269e:	df cf       	rjmp	.-66     	; 0x265e <unregister_code+0x3c>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    26a0:	9b e5       	ldi	r25, 0x5B	; 91
    26a2:	98 0f       	add	r25, r24
    26a4:	93 30       	cpi	r25, 0x03	; 3
    26a6:	20 f4       	brcc	.+8      	; 0x26b0 <unregister_code+0x8e>
        host_system_send(0);
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    26b0:	88 5a       	subi	r24, 0xA8	; 168
    26b2:	85 31       	cpi	r24, 0x15	; 21
    26b4:	20 f4       	brcc	.+8      	; 0x26be <unregister_code+0x9c>
        host_consumer_send(0);
    26b6:	80 e0       	ldi	r24, 0x00	; 0
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <host_consumer_send>
    26be:	08 95       	ret

000026c0 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    26c0:	88 23       	and	r24, r24
    26c2:	21 f0       	breq	.+8      	; 0x26cc <register_mods+0xc>
        add_mods(mods);
    26c4:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <add_mods>
        send_keyboard_report();
    26c8:	0c 94 b8 1c 	jmp	0x3970	; 0x3970 <send_keyboard_report>
    26cc:	08 95       	ret

000026ce <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    26ce:	88 23       	and	r24, r24
    26d0:	21 f0       	breq	.+8      	; 0x26da <unregister_mods+0xc>
        del_mods(mods);
    26d2:	0e 94 82 1c 	call	0x3904	; 0x3904 <del_mods>
        send_keyboard_report();
    26d6:	0c 94 b8 1c 	jmp	0x3970	; 0x3970 <send_keyboard_report>
    26da:	08 95       	ret

000026dc <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    26dc:	cf 92       	push	r12
    26de:	df 92       	push	r13
    26e0:	ef 92       	push	r14
    26e2:	ff 92       	push	r15
    26e4:	0f 93       	push	r16
    26e6:	1f 93       	push	r17
    26e8:	cf 93       	push	r28
    26ea:	df 93       	push	r29
    26ec:	cd b7       	in	r28, 0x3d	; 61
    26ee:	de b7       	in	r29, 0x3e	; 62
    26f0:	28 97       	sbiw	r28, 0x08	; 8
    26f2:	0f b6       	in	r0, 0x3f	; 63
    26f4:	f8 94       	cli
    26f6:	de bf       	out	0x3e, r29	; 62
    26f8:	0f be       	out	0x3f, r0	; 63
    26fa:	cd bf       	out	0x3d, r28	; 61
    26fc:	8c 01       	movw	r16, r24
    keyevent_t event = record->event;
    26fe:	85 e0       	ldi	r24, 0x05	; 5
    2700:	f8 01       	movw	r30, r16
    2702:	de 01       	movw	r26, r28
    2704:	11 96       	adiw	r26, 0x01	; 1
    2706:	01 90       	ld	r0, Z+
    2708:	0d 92       	st	X+, r0
    270a:	8a 95       	dec	r24
    270c:	e1 f7       	brne	.-8      	; 0x2706 <process_action+0x2a>
    270e:	f8 01       	movw	r30, r16
    2710:	40 81       	ld	r20, Z
    2712:	31 81       	ldd	r19, Z+1	; 0x01
    2714:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    2716:	25 81       	ldd	r18, Z+5	; 0x05
    2718:	22 95       	swap	r18
    271a:	2f 70       	andi	r18, 0x0F	; 15
    271c:	83 81       	ldd	r24, Z+3	; 0x03
    271e:	94 81       	ldd	r25, Z+4	; 0x04
    2720:	89 2b       	or	r24, r25
    2722:	31 f0       	breq	.+12     	; 0x2730 <process_action+0x54>
    2724:	3f 3f       	cpi	r19, 0xFF	; 255
    2726:	31 f4       	brne	.+12     	; 0x2734 <process_action+0x58>
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	4f 3f       	cpi	r20, 0xFF	; 255
    272c:	19 f4       	brne	.+6      	; 0x2734 <process_action+0x58>
    272e:	03 c0       	rjmp	.+6      	; 0x2736 <process_action+0x5a>
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	01 c0       	rjmp	.+2      	; 0x2736 <process_action+0x5a>
    2734:	80 e0       	ldi	r24, 0x00	; 0
#endif

    if (IS_NOEVENT(event)) { return; }
    2736:	80 fd       	sbrc	r24, 0
    2738:	cf c2       	rjmp	.+1438   	; 0x2cd8 <process_action+0x5fc>

    action_t action = layer_switch_get_action(event.key);
    273a:	49 83       	std	Y+1, r20	; 0x01
    273c:	3a 83       	std	Y+2, r19	; 0x02
    273e:	89 81       	ldd	r24, Y+1	; 0x01
    2740:	9a 81       	ldd	r25, Y+2	; 0x02
    2742:	2f 83       	std	Y+7, r18	; 0x07
    2744:	0e 94 94 1b 	call	0x3728	; 0x3728 <layer_switch_get_action>
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    2748:	9e 83       	std	Y+6, r25	; 0x06
    274a:	88 87       	std	Y+8, r24	; 0x08
    274c:	0e 94 93 1b 	call	0x3726	; 0x3726 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2750:	0e 94 bb 1a 	call	0x3576	; 0x3576 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    2754:	4e 81       	ldd	r20, Y+6	; 0x06
    2756:	e4 2f       	mov	r30, r20
    2758:	e2 95       	swap	r30
    275a:	ef 70       	andi	r30, 0x0F	; 15
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	e0 5a       	subi	r30, 0xA0	; 160
    2760:	ff 4f       	sbci	r31, 0xFF	; 255
    2762:	2f 81       	ldd	r18, Y+7	; 0x07
    2764:	68 85       	ldd	r22, Y+8	; 0x08
    2766:	0c 94 3f 2a 	jmp	0x547e	; 0x547e <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    276a:	84 2f       	mov	r24, r20
    276c:	80 7f       	andi	r24, 0xF0	; 240
    276e:	14 2f       	mov	r17, r20
    2770:	1f 70       	andi	r17, 0x0F	; 15
    2772:	88 23       	and	r24, r24
    2774:	11 f0       	breq	.+4      	; 0x277a <process_action+0x9e>
    2776:	12 95       	swap	r17
    2778:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    277a:	ff 20       	and	r15, r15
    277c:	59 f0       	breq	.+22     	; 0x2794 <process_action+0xb8>
                    if (mods) {
    277e:	11 23       	and	r17, r17
    2780:	09 f4       	brne	.+2      	; 0x2784 <process_action+0xa8>
    2782:	5f c2       	rjmp	.+1214   	; 0x2c42 <process_action+0x566>
                        add_weak_mods(mods);
    2784:	81 2f       	mov	r24, r17
    2786:	68 87       	std	Y+8, r22	; 0x08
    2788:	0e 94 8f 1c 	call	0x391e	; 0x391e <add_weak_mods>
                        send_keyboard_report();
    278c:	0e 94 b8 1c 	call	0x3970	; 0x3970 <send_keyboard_report>
    2790:	68 85       	ldd	r22, Y+8	; 0x08
    2792:	57 c2       	rjmp	.+1198   	; 0x2c42 <process_action+0x566>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    2794:	86 2f       	mov	r24, r22
    2796:	0e 94 11 13 	call	0x2622	; 0x2622 <unregister_code>
                    if (mods) {
    279a:	11 23       	and	r17, r17
    279c:	09 f4       	brne	.+2      	; 0x27a0 <process_action+0xc4>
    279e:	9c c2       	rjmp	.+1336   	; 0x2cd8 <process_action+0x5fc>
                        del_weak_mods(mods);
    27a0:	81 2f       	mov	r24, r17
    27a2:	0e 94 95 1c 	call	0x392a	; 0x392a <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    27a6:	28 96       	adiw	r28, 0x08	; 8
    27a8:	0f b6       	in	r0, 0x3f	; 63
    27aa:	f8 94       	cli
    27ac:	de bf       	out	0x3e, r29	; 62
    27ae:	0f be       	out	0x3f, r0	; 63
    27b0:	cd bf       	out	0x3d, r28	; 61
    27b2:	df 91       	pop	r29
    27b4:	cf 91       	pop	r28
    27b6:	1f 91       	pop	r17
    27b8:	0f 91       	pop	r16
    27ba:	ff 90       	pop	r15
    27bc:	ef 90       	pop	r14
    27be:	df 90       	pop	r13
    27c0:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    27c2:	0c 94 b8 1c 	jmp	0x3970	; 0x3970 <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    27c6:	84 2f       	mov	r24, r20
    27c8:	80 7f       	andi	r24, 0xF0	; 240
    27ca:	94 2f       	mov	r25, r20
    27cc:	9f 70       	andi	r25, 0x0F	; 15
    27ce:	e9 2e       	mov	r14, r25
    27d0:	80 32       	cpi	r24, 0x20	; 32
    27d2:	19 f0       	breq	.+6      	; 0x27da <process_action+0xfe>
    27d4:	e2 94       	swap	r14
    27d6:	80 ef       	ldi	r24, 0xF0	; 240
    27d8:	e8 22       	and	r14, r24
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    27da:	66 23       	and	r22, r22
    27dc:	19 f0       	breq	.+6      	; 0x27e4 <process_action+0x108>
    27de:	61 30       	cpi	r22, 0x01	; 1
    27e0:	01 f1       	breq	.+64     	; 0x2822 <process_action+0x146>
    27e2:	29 c0       	rjmp	.+82     	; 0x2836 <process_action+0x15a>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    27e4:	ff 20       	and	r15, r15
    27e6:	a9 f0       	breq	.+42     	; 0x2812 <process_action+0x136>
                            if (tap_count == 0) {
                                register_mods(mods);
    27e8:	8e 2d       	mov	r24, r14
                switch (action.layer_tap.code) {
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
                            if (tap_count == 0) {
    27ea:	22 23       	and	r18, r18
    27ec:	49 f1       	breq	.+82     	; 0x2840 <process_action+0x164>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    27ee:	21 30       	cpi	r18, 0x01	; 1
    27f0:	39 f5       	brne	.+78     	; 0x2840 <process_action+0x164>
            break;
#endif
        default:
            break;
    }
}
    27f2:	28 96       	adiw	r28, 0x08	; 8
    27f4:	0f b6       	in	r0, 0x3f	; 63
    27f6:	f8 94       	cli
    27f8:	de bf       	out	0x3e, r29	; 62
    27fa:	0f be       	out	0x3f, r0	; 63
    27fc:	cd bf       	out	0x3d, r28	; 61
    27fe:	df 91       	pop	r29
    2800:	cf 91       	pop	r28
    2802:	1f 91       	pop	r17
    2804:	0f 91       	pop	r16
    2806:	ff 90       	pop	r15
    2808:	ef 90       	pop	r14
    280a:	df 90       	pop	r13
    280c:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    280e:	0c 94 9f 1c 	jmp	0x393e	; 0x393e <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    2812:	22 23       	and	r18, r18
    2814:	19 f0       	breq	.+6      	; 0x281c <process_action+0x140>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    2816:	21 30       	cpi	r18, 0x01	; 1
    2818:	09 f4       	brne	.+2      	; 0x281c <process_action+0x140>
    281a:	5e c2       	rjmp	.+1212   	; 0x2cd8 <process_action+0x5fc>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    281c:	0e 94 a2 1c 	call	0x3944	; 0x3944 <clear_oneshot_mods>
    2820:	2c c0       	rjmp	.+88     	; 0x287a <process_action+0x19e>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    2822:	ff 20       	and	r15, r15
    2824:	e9 f0       	breq	.+58     	; 0x2860 <process_action+0x184>
                            if (tap_count <= TAPPING_TOGGLE) {
    2826:	26 30       	cpi	r18, 0x06	; 6
    2828:	08 f0       	brcs	.+2      	; 0x282c <process_action+0x150>
    282a:	56 c2       	rjmp	.+1196   	; 0x2cd8 <process_action+0x5fc>
                                if (mods & get_mods()) {
    282c:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <get_mods>
    2830:	8e 21       	and	r24, r14
    2832:	29 f0       	breq	.+10     	; 0x283e <process_action+0x162>
    2834:	22 c0       	rjmp	.+68     	; 0x287a <process_action+0x19e>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    2836:	ff 20       	and	r15, r15
    2838:	f1 f0       	breq	.+60     	; 0x2876 <process_action+0x19a>
                            if (tap_count > 0) {
    283a:	21 11       	cpse	r18, r1
    283c:	15 c0       	rjmp	.+42     	; 0x2868 <process_action+0x18c>
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    283e:	8e 2d       	mov	r24, r14
            break;
#endif
        default:
            break;
    }
}
    2840:	28 96       	adiw	r28, 0x08	; 8
    2842:	0f b6       	in	r0, 0x3f	; 63
    2844:	f8 94       	cli
    2846:	de bf       	out	0x3e, r29	; 62
    2848:	0f be       	out	0x3f, r0	; 63
    284a:	cd bf       	out	0x3d, r28	; 61
    284c:	df 91       	pop	r29
    284e:	cf 91       	pop	r28
    2850:	1f 91       	pop	r17
    2852:	0f 91       	pop	r16
    2854:	ff 90       	pop	r15
    2856:	ef 90       	pop	r14
    2858:	df 90       	pop	r13
    285a:	cf 90       	pop	r12
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    285c:	0c 94 60 13 	jmp	0x26c0	; 0x26c0 <register_mods>
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    2860:	25 30       	cpi	r18, 0x05	; 5
    2862:	08 f0       	brcs	.+2      	; 0x2866 <process_action+0x18a>
    2864:	39 c2       	rjmp	.+1138   	; 0x2cd8 <process_action+0x5fc>
    2866:	09 c0       	rjmp	.+18     	; 0x287a <process_action+0x19e>
                        }
                        break;
                    default:
                        if (event.pressed) {
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
    2868:	f8 01       	movw	r30, r16
    286a:	85 81       	ldd	r24, Z+5	; 0x05
    286c:	80 ff       	sbrs	r24, 0
    286e:	e9 c1       	rjmp	.+978    	; 0x2c42 <process_action+0x566>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    2870:	8f 70       	andi	r24, 0x0F	; 15
    2872:	85 83       	std	Z+5, r24	; 0x05
    2874:	e4 cf       	rjmp	.-56     	; 0x283e <process_action+0x162>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    2876:	21 11       	cpse	r18, r1
    2878:	f8 c1       	rjmp	.+1008   	; 0x2c6a <process_action+0x58e>
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    287a:	8e 2d       	mov	r24, r14
    287c:	66 c1       	rjmp	.+716    	; 0x2b4a <process_action+0x46e>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    287e:	24 2f       	mov	r18, r20
    2880:	26 95       	lsr	r18
    2882:	26 95       	lsr	r18
    2884:	23 70       	andi	r18, 0x03	; 3
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	21 15       	cp	r18, r1
    288a:	31 05       	cpc	r19, r1
    288c:	21 f0       	breq	.+8      	; 0x2896 <process_action+0x1ba>
    288e:	21 30       	cpi	r18, 0x01	; 1
    2890:	31 05       	cpc	r19, r1
    2892:	c9 f0       	breq	.+50     	; 0x28c6 <process_action+0x1ea>
    2894:	21 c2       	rjmp	.+1090   	; 0x2cd8 <process_action+0x5fc>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    2896:	ff 20       	and	r15, r15
    2898:	21 f0       	breq	.+8      	; 0x28a2 <process_action+0x1c6>
                        host_system_send(action.usage.code);
    289a:	86 2f       	mov	r24, r22
    289c:	94 2f       	mov	r25, r20
    289e:	93 70       	andi	r25, 0x03	; 3
    28a0:	02 c0       	rjmp	.+4      	; 0x28a6 <process_action+0x1ca>
                    } else {
                        host_system_send(0);
    28a2:	80 e0       	ldi	r24, 0x00	; 0
    28a4:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    28a6:	28 96       	adiw	r28, 0x08	; 8
    28a8:	0f b6       	in	r0, 0x3f	; 63
    28aa:	f8 94       	cli
    28ac:	de bf       	out	0x3e, r29	; 62
    28ae:	0f be       	out	0x3f, r0	; 63
    28b0:	cd bf       	out	0x3d, r28	; 61
    28b2:	df 91       	pop	r29
    28b4:	cf 91       	pop	r28
    28b6:	1f 91       	pop	r17
    28b8:	0f 91       	pop	r16
    28ba:	ff 90       	pop	r15
    28bc:	ef 90       	pop	r14
    28be:	df 90       	pop	r13
    28c0:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    28c2:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    28c6:	ff 20       	and	r15, r15
    28c8:	21 f0       	breq	.+8      	; 0x28d2 <process_action+0x1f6>
                        host_consumer_send(action.usage.code);
    28ca:	86 2f       	mov	r24, r22
    28cc:	94 2f       	mov	r25, r20
    28ce:	93 70       	andi	r25, 0x03	; 3
    28d0:	02 c0       	rjmp	.+4      	; 0x28d6 <process_action+0x1fa>
                    } else {
                        host_consumer_send(0);
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    28d6:	28 96       	adiw	r28, 0x08	; 8
    28d8:	0f b6       	in	r0, 0x3f	; 63
    28da:	f8 94       	cli
    28dc:	de bf       	out	0x3e, r29	; 62
    28de:	0f be       	out	0x3f, r0	; 63
    28e0:	cd bf       	out	0x3d, r28	; 61
    28e2:	df 91       	pop	r29
    28e4:	cf 91       	pop	r28
    28e6:	1f 91       	pop	r17
    28e8:	0f 91       	pop	r16
    28ea:	ff 90       	pop	r15
    28ec:	ef 90       	pop	r14
    28ee:	df 90       	pop	r13
    28f0:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    28f2:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    28f6:	86 2f       	mov	r24, r22
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    28f8:	ff 20       	and	r15, r15
    28fa:	19 f0       	breq	.+6      	; 0x2902 <process_action+0x226>
                mousekey_on(action.key.code);
    28fc:	0e 94 ba 21 	call	0x4374	; 0x4374 <mousekey_on>
    2900:	02 c0       	rjmp	.+4      	; 0x2906 <process_action+0x22a>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    2902:	0e 94 22 22 	call	0x4444	; 0x4444 <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    2906:	28 96       	adiw	r28, 0x08	; 8
    2908:	0f b6       	in	r0, 0x3f	; 63
    290a:	f8 94       	cli
    290c:	de bf       	out	0x3e, r29	; 62
    290e:	0f be       	out	0x3f, r0	; 63
    2910:	cd bf       	out	0x3d, r28	; 61
    2912:	df 91       	pop	r29
    2914:	cf 91       	pop	r28
    2916:	1f 91       	pop	r17
    2918:	0f 91       	pop	r16
    291a:	ff 90       	pop	r15
    291c:	ef 90       	pop	r14
    291e:	df 90       	pop	r13
    2920:	cf 90       	pop	r12
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    2922:	0c 94 a7 22 	jmp	0x454e	; 0x454e <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    2926:	84 2f       	mov	r24, r20
    2928:	83 70       	andi	r24, 0x03	; 3
    292a:	09 f0       	breq	.+2      	; 0x292e <process_action+0x252>
    292c:	76 c0       	rjmp	.+236    	; 0x2a1a <process_action+0x33e>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    292e:	f1 10       	cpse	r15, r1
    2930:	d3 c1       	rjmp	.+934    	; 0x2cd8 <process_action+0x5fc>
                    uint8_t shift = action.layer_bitop.part*4;
    2932:	26 2f       	mov	r18, r22
    2934:	22 95       	swap	r18
    2936:	26 95       	lsr	r18
    2938:	27 70       	andi	r18, 0x07	; 7
    293a:	22 0f       	add	r18, r18
    293c:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    293e:	86 2f       	mov	r24, r22
    2940:	8f 70       	andi	r24, 0x0F	; 15
    2942:	c8 2e       	mov	r12, r24
    2944:	d1 2c       	mov	r13, r1
    2946:	e1 2c       	mov	r14, r1
    2948:	f1 2c       	mov	r15, r1
    294a:	02 2e       	mov	r0, r18
    294c:	04 c0       	rjmp	.+8      	; 0x2956 <process_action+0x27a>
    294e:	cc 0c       	add	r12, r12
    2950:	dd 1c       	adc	r13, r13
    2952:	ee 1c       	adc	r14, r14
    2954:	ff 1c       	adc	r15, r15
    2956:	0a 94       	dec	r0
    2958:	d2 f7       	brpl	.-12     	; 0x294e <process_action+0x272>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    295a:	64 ff       	sbrs	r22, 4
    295c:	10 c0       	rjmp	.+32     	; 0x297e <process_action+0x2a2>
    295e:	6f e0       	ldi	r22, 0x0F	; 15
    2960:	70 e0       	ldi	r23, 0x00	; 0
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	04 c0       	rjmp	.+8      	; 0x2970 <process_action+0x294>
    2968:	66 0f       	add	r22, r22
    296a:	77 1f       	adc	r23, r23
    296c:	88 1f       	adc	r24, r24
    296e:	99 1f       	adc	r25, r25
    2970:	2a 95       	dec	r18
    2972:	d2 f7       	brpl	.-12     	; 0x2968 <process_action+0x28c>
    2974:	60 95       	com	r22
    2976:	70 95       	com	r23
    2978:	80 95       	com	r24
    297a:	90 95       	com	r25
    297c:	03 c0       	rjmp	.+6      	; 0x2984 <process_action+0x2a8>
    297e:	60 e0       	ldi	r22, 0x00	; 0
    2980:	70 e0       	ldi	r23, 0x00	; 0
    2982:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2984:	24 2f       	mov	r18, r20
    2986:	26 95       	lsr	r18
    2988:	26 95       	lsr	r18
    298a:	23 70       	andi	r18, 0x03	; 3
    298c:	42 2f       	mov	r20, r18
    298e:	50 e0       	ldi	r21, 0x00	; 0
    2990:	42 30       	cpi	r20, 0x02	; 2
    2992:	51 05       	cpc	r21, r1
    2994:	d1 f0       	breq	.+52     	; 0x29ca <process_action+0x2ee>
    2996:	43 30       	cpi	r20, 0x03	; 3
    2998:	51 05       	cpc	r21, r1
    299a:	59 f1       	breq	.+86     	; 0x29f2 <process_action+0x316>
    299c:	6c 29       	or	r22, r12
    299e:	7d 29       	or	r23, r13
    29a0:	8e 29       	or	r24, r14
    29a2:	9f 29       	or	r25, r15
    29a4:	41 30       	cpi	r20, 0x01	; 1
    29a6:	51 05       	cpc	r21, r1
    29a8:	41 f1       	breq	.+80     	; 0x29fa <process_action+0x31e>
            break;
#endif
        default:
            break;
    }
}
    29aa:	28 96       	adiw	r28, 0x08	; 8
    29ac:	0f b6       	in	r0, 0x3f	; 63
    29ae:	f8 94       	cli
    29b0:	de bf       	out	0x3e, r29	; 62
    29b2:	0f be       	out	0x3f, r0	; 63
    29b4:	cd bf       	out	0x3d, r28	; 61
    29b6:	df 91       	pop	r29
    29b8:	cf 91       	pop	r28
    29ba:	1f 91       	pop	r17
    29bc:	0f 91       	pop	r16
    29be:	ff 90       	pop	r15
    29c0:	ef 90       	pop	r14
    29c2:	df 90       	pop	r13
    29c4:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    29c6:	0c 94 d0 1a 	jmp	0x35a0	; 0x35a0 <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    29ca:	6c 29       	or	r22, r12
    29cc:	7d 29       	or	r23, r13
    29ce:	8e 29       	or	r24, r14
    29d0:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    29d2:	28 96       	adiw	r28, 0x08	; 8
    29d4:	0f b6       	in	r0, 0x3f	; 63
    29d6:	f8 94       	cli
    29d8:	de bf       	out	0x3e, r29	; 62
    29da:	0f be       	out	0x3f, r0	; 63
    29dc:	cd bf       	out	0x3d, r28	; 61
    29de:	df 91       	pop	r29
    29e0:	cf 91       	pop	r28
    29e2:	1f 91       	pop	r17
    29e4:	0f 91       	pop	r16
    29e6:	ff 90       	pop	r15
    29e8:	ef 90       	pop	r14
    29ea:	df 90       	pop	r13
    29ec:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    29ee:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    29f2:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <default_layer_and>
    29f6:	c7 01       	movw	r24, r14
    29f8:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    29fa:	28 96       	adiw	r28, 0x08	; 8
    29fc:	0f b6       	in	r0, 0x3f	; 63
    29fe:	f8 94       	cli
    2a00:	de bf       	out	0x3e, r29	; 62
    2a02:	0f be       	out	0x3f, r0	; 63
    2a04:	cd bf       	out	0x3d, r28	; 61
    2a06:	df 91       	pop	r29
    2a08:	cf 91       	pop	r28
    2a0a:	1f 91       	pop	r17
    2a0c:	0f 91       	pop	r16
    2a0e:	ff 90       	pop	r15
    2a10:	ef 90       	pop	r14
    2a12:	df 90       	pop	r13
    2a14:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2a16:	0c 94 be 1a 	jmp	0x357c	; 0x357c <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2a1a:	ff 20       	and	r15, r15
    2a1c:	19 f0       	breq	.+6      	; 0x2a24 <process_action+0x348>
    2a1e:	84 2f       	mov	r24, r20
    2a20:	81 70       	andi	r24, 0x01	; 1
    2a22:	01 c0       	rjmp	.+2      	; 0x2a26 <process_action+0x34a>
    2a24:	86 95       	lsr	r24
    2a26:	88 23       	and	r24, r24
    2a28:	09 f4       	brne	.+2      	; 0x2a2c <process_action+0x350>
    2a2a:	56 c1       	rjmp	.+684    	; 0x2cd8 <process_action+0x5fc>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    2a2c:	26 2f       	mov	r18, r22
    2a2e:	22 95       	swap	r18
    2a30:	26 95       	lsr	r18
    2a32:	27 70       	andi	r18, 0x07	; 7
    2a34:	22 0f       	add	r18, r18
    2a36:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2a38:	86 2f       	mov	r24, r22
    2a3a:	8f 70       	andi	r24, 0x0F	; 15
    2a3c:	c8 2e       	mov	r12, r24
    2a3e:	d1 2c       	mov	r13, r1
    2a40:	e1 2c       	mov	r14, r1
    2a42:	f1 2c       	mov	r15, r1
    2a44:	02 2e       	mov	r0, r18
    2a46:	04 c0       	rjmp	.+8      	; 0x2a50 <process_action+0x374>
    2a48:	cc 0c       	add	r12, r12
    2a4a:	dd 1c       	adc	r13, r13
    2a4c:	ee 1c       	adc	r14, r14
    2a4e:	ff 1c       	adc	r15, r15
    2a50:	0a 94       	dec	r0
    2a52:	d2 f7       	brpl	.-12     	; 0x2a48 <process_action+0x36c>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2a54:	64 ff       	sbrs	r22, 4
    2a56:	10 c0       	rjmp	.+32     	; 0x2a78 <process_action+0x39c>
    2a58:	6f e0       	ldi	r22, 0x0F	; 15
    2a5a:	70 e0       	ldi	r23, 0x00	; 0
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	04 c0       	rjmp	.+8      	; 0x2a6a <process_action+0x38e>
    2a62:	66 0f       	add	r22, r22
    2a64:	77 1f       	adc	r23, r23
    2a66:	88 1f       	adc	r24, r24
    2a68:	99 1f       	adc	r25, r25
    2a6a:	2a 95       	dec	r18
    2a6c:	d2 f7       	brpl	.-12     	; 0x2a62 <process_action+0x386>
    2a6e:	60 95       	com	r22
    2a70:	70 95       	com	r23
    2a72:	80 95       	com	r24
    2a74:	90 95       	com	r25
    2a76:	03 c0       	rjmp	.+6      	; 0x2a7e <process_action+0x3a2>
    2a78:	60 e0       	ldi	r22, 0x00	; 0
    2a7a:	70 e0       	ldi	r23, 0x00	; 0
    2a7c:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2a7e:	24 2f       	mov	r18, r20
    2a80:	26 95       	lsr	r18
    2a82:	26 95       	lsr	r18
    2a84:	23 70       	andi	r18, 0x03	; 3
    2a86:	42 2f       	mov	r20, r18
    2a88:	50 e0       	ldi	r21, 0x00	; 0
    2a8a:	42 30       	cpi	r20, 0x02	; 2
    2a8c:	51 05       	cpc	r21, r1
    2a8e:	d1 f0       	breq	.+52     	; 0x2ac4 <process_action+0x3e8>
    2a90:	43 30       	cpi	r20, 0x03	; 3
    2a92:	51 05       	cpc	r21, r1
    2a94:	59 f1       	breq	.+86     	; 0x2aec <process_action+0x410>
    2a96:	6c 29       	or	r22, r12
    2a98:	7d 29       	or	r23, r13
    2a9a:	8e 29       	or	r24, r14
    2a9c:	9f 29       	or	r25, r15
    2a9e:	41 30       	cpi	r20, 0x01	; 1
    2aa0:	51 05       	cpc	r21, r1
    2aa2:	41 f1       	breq	.+80     	; 0x2af4 <process_action+0x418>
            break;
#endif
        default:
            break;
    }
}
    2aa4:	28 96       	adiw	r28, 0x08	; 8
    2aa6:	0f b6       	in	r0, 0x3f	; 63
    2aa8:	f8 94       	cli
    2aaa:	de bf       	out	0x3e, r29	; 62
    2aac:	0f be       	out	0x3f, r0	; 63
    2aae:	cd bf       	out	0x3d, r28	; 61
    2ab0:	df 91       	pop	r29
    2ab2:	cf 91       	pop	r28
    2ab4:	1f 91       	pop	r17
    2ab6:	0f 91       	pop	r16
    2ab8:	ff 90       	pop	r15
    2aba:	ef 90       	pop	r14
    2abc:	df 90       	pop	r13
    2abe:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2ac0:	0c 94 6f 1b 	jmp	0x36de	; 0x36de <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2ac4:	6c 29       	or	r22, r12
    2ac6:	7d 29       	or	r23, r13
    2ac8:	8e 29       	or	r24, r14
    2aca:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2acc:	28 96       	adiw	r28, 0x08	; 8
    2ace:	0f b6       	in	r0, 0x3f	; 63
    2ad0:	f8 94       	cli
    2ad2:	de bf       	out	0x3e, r29	; 62
    2ad4:	0f be       	out	0x3f, r0	; 63
    2ad6:	cd bf       	out	0x3d, r28	; 61
    2ad8:	df 91       	pop	r29
    2ada:	cf 91       	pop	r28
    2adc:	1f 91       	pop	r17
    2ade:	0f 91       	pop	r16
    2ae0:	ff 90       	pop	r15
    2ae2:	ef 90       	pop	r14
    2ae4:	df 90       	pop	r13
    2ae6:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2ae8:	0c 94 81 1b 	jmp	0x3702	; 0x3702 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2aec:	0e 94 6f 1b 	call	0x36de	; 0x36de <layer_and>
    2af0:	c7 01       	movw	r24, r14
    2af2:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2af4:	28 96       	adiw	r28, 0x08	; 8
    2af6:	0f b6       	in	r0, 0x3f	; 63
    2af8:	f8 94       	cli
    2afa:	de bf       	out	0x3e, r29	; 62
    2afc:	0f be       	out	0x3f, r0	; 63
    2afe:	cd bf       	out	0x3d, r28	; 61
    2b00:	df 91       	pop	r29
    2b02:	cf 91       	pop	r28
    2b04:	1f 91       	pop	r17
    2b06:	0f 91       	pop	r16
    2b08:	ff 90       	pop	r15
    2b0a:	ef 90       	pop	r14
    2b0c:	df 90       	pop	r13
    2b0e:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2b10:	0c 94 5d 1b 	jmp	0x36ba	; 0x36ba <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2b14:	60 3f       	cpi	r22, 0xF0	; 240
    2b16:	49 f1       	breq	.+82     	; 0x2b6a <process_action+0x48e>
    2b18:	18 f4       	brcc	.+6      	; 0x2b20 <process_action+0x444>
    2b1a:	60 3e       	cpi	r22, 0xE0	; 224
    2b1c:	48 f4       	brcc	.+18     	; 0x2b30 <process_action+0x454>
    2b1e:	8c c0       	rjmp	.+280    	; 0x2c38 <process_action+0x55c>
    2b20:	62 3f       	cpi	r22, 0xF2	; 242
    2b22:	09 f4       	brne	.+2      	; 0x2b26 <process_action+0x44a>
    2b24:	51 c0       	rjmp	.+162    	; 0x2bc8 <process_action+0x4ec>
    2b26:	e0 f1       	brcs	.+120    	; 0x2ba0 <process_action+0x4c4>
    2b28:	63 3f       	cpi	r22, 0xF3	; 243
    2b2a:	09 f4       	brne	.+2      	; 0x2b2e <process_action+0x452>
    2b2c:	61 c0       	rjmp	.+194    	; 0x2bf0 <process_action+0x514>
    2b2e:	84 c0       	rjmp	.+264    	; 0x2c38 <process_action+0x55c>
    2b30:	16 2f       	mov	r17, r22
    2b32:	1f 70       	andi	r17, 0x0F	; 15
    2b34:	84 2f       	mov	r24, r20
    2b36:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    2b38:	ff 20       	and	r15, r15
    2b3a:	21 f0       	breq	.+8      	; 0x2b44 <process_action+0x468>
                        layer_on(action.layer_tap.val);
    2b3c:	0e 94 08 1b 	call	0x3610	; 0x3610 <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    2b40:	81 2f       	mov	r24, r17
    2b42:	7e ce       	rjmp	.-772    	; 0x2840 <process_action+0x164>
                    } else {
                        layer_off(action.layer_tap.val);
    2b44:	0e 94 23 1b 	call	0x3646	; 0x3646 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    2b48:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2b4a:	28 96       	adiw	r28, 0x08	; 8
    2b4c:	0f b6       	in	r0, 0x3f	; 63
    2b4e:	f8 94       	cli
    2b50:	de bf       	out	0x3e, r29	; 62
    2b52:	0f be       	out	0x3f, r0	; 63
    2b54:	cd bf       	out	0x3d, r28	; 61
    2b56:	df 91       	pop	r29
    2b58:	cf 91       	pop	r28
    2b5a:	1f 91       	pop	r17
    2b5c:	0f 91       	pop	r16
    2b5e:	ff 90       	pop	r15
    2b60:	ef 90       	pop	r14
    2b62:	df 90       	pop	r13
    2b64:	cf 90       	pop	r12
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    2b66:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2b6a:	ff 20       	and	r15, r15
    2b6c:	a9 f0       	breq	.+42     	; 0x2b98 <process_action+0x4bc>
                        if (tap_count < TAPPING_TOGGLE) {
    2b6e:	25 30       	cpi	r18, 0x05	; 5
    2b70:	08 f0       	brcs	.+2      	; 0x2b74 <process_action+0x498>
    2b72:	b2 c0       	rjmp	.+356    	; 0x2cd8 <process_action+0x5fc>
                            layer_invert(action.layer_tap.val);
    2b74:	84 2f       	mov	r24, r20
    2b76:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2b78:	28 96       	adiw	r28, 0x08	; 8
    2b7a:	0f b6       	in	r0, 0x3f	; 63
    2b7c:	f8 94       	cli
    2b7e:	de bf       	out	0x3e, r29	; 62
    2b80:	0f be       	out	0x3f, r0	; 63
    2b82:	cd bf       	out	0x3d, r28	; 61
    2b84:	df 91       	pop	r29
    2b86:	cf 91       	pop	r28
    2b88:	1f 91       	pop	r17
    2b8a:	0f 91       	pop	r16
    2b8c:	ff 90       	pop	r15
    2b8e:	ef 90       	pop	r14
    2b90:	df 90       	pop	r13
    2b92:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    2b94:	0c 94 42 1b 	jmp	0x3684	; 0x3684 <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2b98:	26 30       	cpi	r18, 0x06	; 6
    2b9a:	08 f0       	brcs	.+2      	; 0x2b9e <process_action+0x4c2>
    2b9c:	9d c0       	rjmp	.+314    	; 0x2cd8 <process_action+0x5fc>
    2b9e:	ea cf       	rjmp	.-44     	; 0x2b74 <process_action+0x498>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2ba0:	ff 20       	and	r15, r15
    2ba2:	a1 f0       	breq	.+40     	; 0x2bcc <process_action+0x4f0>
    2ba4:	84 2f       	mov	r24, r20
    2ba6:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2ba8:	28 96       	adiw	r28, 0x08	; 8
    2baa:	0f b6       	in	r0, 0x3f	; 63
    2bac:	f8 94       	cli
    2bae:	de bf       	out	0x3e, r29	; 62
    2bb0:	0f be       	out	0x3f, r0	; 63
    2bb2:	cd bf       	out	0x3d, r28	; 61
    2bb4:	df 91       	pop	r29
    2bb6:	cf 91       	pop	r28
    2bb8:	1f 91       	pop	r17
    2bba:	0f 91       	pop	r16
    2bbc:	ff 90       	pop	r15
    2bbe:	ef 90       	pop	r14
    2bc0:	df 90       	pop	r13
    2bc2:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2bc4:	0c 94 08 1b 	jmp	0x3610	; 0x3610 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2bc8:	ff 20       	and	r15, r15
    2bca:	61 f3       	breq	.-40     	; 0x2ba4 <process_action+0x4c8>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2bcc:	84 2f       	mov	r24, r20
    2bce:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2bd0:	28 96       	adiw	r28, 0x08	; 8
    2bd2:	0f b6       	in	r0, 0x3f	; 63
    2bd4:	f8 94       	cli
    2bd6:	de bf       	out	0x3e, r29	; 62
    2bd8:	0f be       	out	0x3f, r0	; 63
    2bda:	cd bf       	out	0x3d, r28	; 61
    2bdc:	df 91       	pop	r29
    2bde:	cf 91       	pop	r28
    2be0:	1f 91       	pop	r17
    2be2:	0f 91       	pop	r16
    2be4:	ff 90       	pop	r15
    2be6:	ef 90       	pop	r14
    2be8:	df 90       	pop	r13
    2bea:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2bec:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2bf0:	ff 20       	and	r15, r15
    2bf2:	91 f0       	breq	.+36     	; 0x2c18 <process_action+0x53c>
    2bf4:	84 2f       	mov	r24, r20
    2bf6:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2bf8:	28 96       	adiw	r28, 0x08	; 8
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	f8 94       	cli
    2bfe:	de bf       	out	0x3e, r29	; 62
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	cd bf       	out	0x3d, r28	; 61
    2c04:	df 91       	pop	r29
    2c06:	cf 91       	pop	r28
    2c08:	1f 91       	pop	r17
    2c0a:	0f 91       	pop	r16
    2c0c:	ff 90       	pop	r15
    2c0e:	ef 90       	pop	r14
    2c10:	df 90       	pop	r13
    2c12:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2c14:	0c 94 f9 1a 	jmp	0x35f2	; 0x35f2 <layer_move>
            break;
#endif
        default:
            break;
    }
}
    2c18:	28 96       	adiw	r28, 0x08	; 8
    2c1a:	0f b6       	in	r0, 0x3f	; 63
    2c1c:	f8 94       	cli
    2c1e:	de bf       	out	0x3e, r29	; 62
    2c20:	0f be       	out	0x3f, r0	; 63
    2c22:	cd bf       	out	0x3d, r28	; 61
    2c24:	df 91       	pop	r29
    2c26:	cf 91       	pop	r28
    2c28:	1f 91       	pop	r17
    2c2a:	0f 91       	pop	r16
    2c2c:	ff 90       	pop	r15
    2c2e:	ef 90       	pop	r14
    2c30:	df 90       	pop	r13
    2c32:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    2c34:	0c 94 f4 1a 	jmp	0x35e8	; 0x35e8 <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2c38:	ff 20       	and	r15, r15
    2c3a:	a1 f0       	breq	.+40     	; 0x2c64 <process_action+0x588>
                        if (tap_count > 0) {
    2c3c:	22 23       	and	r18, r18
    2c3e:	09 f4       	brne	.+2      	; 0x2c42 <process_action+0x566>
    2c40:	b1 cf       	rjmp	.-158    	; 0x2ba4 <process_action+0x4c8>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2c42:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2c44:	28 96       	adiw	r28, 0x08	; 8
    2c46:	0f b6       	in	r0, 0x3f	; 63
    2c48:	f8 94       	cli
    2c4a:	de bf       	out	0x3e, r29	; 62
    2c4c:	0f be       	out	0x3f, r0	; 63
    2c4e:	cd bf       	out	0x3d, r28	; 61
    2c50:	df 91       	pop	r29
    2c52:	cf 91       	pop	r28
    2c54:	1f 91       	pop	r17
    2c56:	0f 91       	pop	r16
    2c58:	ff 90       	pop	r15
    2c5a:	ef 90       	pop	r14
    2c5c:	df 90       	pop	r13
    2c5e:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2c60:	0c 94 3e 12 	jmp	0x247c	; 0x247c <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    2c64:	22 23       	and	r18, r18
    2c66:	09 f4       	brne	.+2      	; 0x2c6a <process_action+0x58e>
    2c68:	b1 cf       	rjmp	.-158    	; 0x2bcc <process_action+0x4f0>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2c6a:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2c6c:	28 96       	adiw	r28, 0x08	; 8
    2c6e:	0f b6       	in	r0, 0x3f	; 63
    2c70:	f8 94       	cli
    2c72:	de bf       	out	0x3e, r29	; 62
    2c74:	0f be       	out	0x3f, r0	; 63
    2c76:	cd bf       	out	0x3d, r28	; 61
    2c78:	df 91       	pop	r29
    2c7a:	cf 91       	pop	r28
    2c7c:	1f 91       	pop	r17
    2c7e:	0f 91       	pop	r16
    2c80:	ff 90       	pop	r15
    2c82:	ef 90       	pop	r14
    2c84:	df 90       	pop	r13
    2c86:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2c88:	0c 94 11 13 	jmp	0x2622	; 0x2622 <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2c8c:	4f 70       	andi	r20, 0x0F	; 15
    2c8e:	c8 01       	movw	r24, r16
    2c90:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    2c94:	28 96       	adiw	r28, 0x08	; 8
    2c96:	0f b6       	in	r0, 0x3f	; 63
    2c98:	f8 94       	cli
    2c9a:	de bf       	out	0x3e, r29	; 62
    2c9c:	0f be       	out	0x3f, r0	; 63
    2c9e:	cd bf       	out	0x3d, r28	; 61
    2ca0:	df 91       	pop	r29
    2ca2:	cf 91       	pop	r28
    2ca4:	1f 91       	pop	r17
    2ca6:	0f 91       	pop	r16
    2ca8:	ff 90       	pop	r15
    2caa:	ef 90       	pop	r14
    2cac:	df 90       	pop	r13
    2cae:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2cb0:	0c 94 06 1a 	jmp	0x340c	; 0x340c <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2cb4:	4f 70       	andi	r20, 0x0F	; 15
    2cb6:	c8 01       	movw	r24, r16
            break;
#endif
        default:
            break;
    }
}
    2cb8:	28 96       	adiw	r28, 0x08	; 8
    2cba:	0f b6       	in	r0, 0x3f	; 63
    2cbc:	f8 94       	cli
    2cbe:	de bf       	out	0x3e, r29	; 62
    2cc0:	0f be       	out	0x3f, r0	; 63
    2cc2:	cd bf       	out	0x3d, r28	; 61
    2cc4:	df 91       	pop	r29
    2cc6:	cf 91       	pop	r28
    2cc8:	1f 91       	pop	r17
    2cca:	0f 91       	pop	r16
    2ccc:	ff 90       	pop	r15
    2cce:	ef 90       	pop	r14
    2cd0:	df 90       	pop	r13
    2cd2:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2cd4:	0c 94 52 1f 	jmp	0x3ea4	; 0x3ea4 <action_function>
            break;
#endif
        default:
            break;
    }
}
    2cd8:	28 96       	adiw	r28, 0x08	; 8
    2cda:	0f b6       	in	r0, 0x3f	; 63
    2cdc:	f8 94       	cli
    2cde:	de bf       	out	0x3e, r29	; 62
    2ce0:	0f be       	out	0x3f, r0	; 63
    2ce2:	cd bf       	out	0x3d, r28	; 61
    2ce4:	df 91       	pop	r29
    2ce6:	cf 91       	pop	r28
    2ce8:	1f 91       	pop	r17
    2cea:	0f 91       	pop	r16
    2cec:	ff 90       	pop	r15
    2cee:	ef 90       	pop	r14
    2cf0:	df 90       	pop	r13
    2cf2:	cf 90       	pop	r12
    2cf4:	08 95       	ret

00002cf6 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2cf6:	0e 94 9c 1c 	call	0x3938	; 0x3938 <clear_weak_mods>
    clear_keys();
    2cfa:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <clear_keys>
    send_keyboard_report();
    2cfe:	0e 94 b8 1c 	call	0x3970	; 0x3970 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2d02:	0e 94 d5 23 	call	0x47aa	; 0x47aa <mousekey_clear>
    mousekey_send();
    2d06:	0e 94 a7 22 	call	0x454e	; 0x454e <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <host_system_send>
    host_consumer_send(0);
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <host_consumer_send>

00002d1a <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    2d1a:	0e 94 8c 1c 	call	0x3918	; 0x3918 <clear_mods>
    clear_keyboard_but_mods();
    2d1e:	0c 94 7b 16 	jmp	0x2cf6	; 0x2cf6 <clear_keyboard_but_mods>

00002d22 <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    2d22:	0e 94 94 1b 	call	0x3728	; 0x3728 <layer_switch_get_action>

    switch (action.kind.id) {
    2d26:	29 2f       	mov	r18, r25
    2d28:	22 95       	swap	r18
    2d2a:	2f 70       	andi	r18, 0x0F	; 15
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	2c 30       	cpi	r18, 0x0C	; 12
    2d30:	31 05       	cpc	r19, r1
    2d32:	4c f4       	brge	.+18     	; 0x2d46 <is_tap_key+0x24>
    2d34:	2a 30       	cpi	r18, 0x0A	; 10
    2d36:	31 05       	cpc	r19, r1
    2d38:	6c f4       	brge	.+26     	; 0x2d54 <is_tap_key+0x32>
    2d3a:	22 50       	subi	r18, 0x02	; 2
    2d3c:	31 09       	sbc	r19, r1
    2d3e:	22 30       	cpi	r18, 0x02	; 2
    2d40:	31 05       	cpc	r19, r1
    2d42:	90 f4       	brcc	.+36     	; 0x2d68 <is_tap_key+0x46>
    2d44:	07 c0       	rjmp	.+14     	; 0x2d54 <is_tap_key+0x32>
    2d46:	2c 30       	cpi	r18, 0x0C	; 12
    2d48:	31 05       	cpc	r19, r1
    2d4a:	51 f0       	breq	.+20     	; 0x2d60 <is_tap_key+0x3e>
    2d4c:	2f 30       	cpi	r18, 0x0F	; 15
    2d4e:	31 05       	cpc	r19, r1
    2d50:	39 f0       	breq	.+14     	; 0x2d60 <is_tap_key+0x3e>
    2d52:	0a c0       	rjmp	.+20     	; 0x2d68 <is_tap_key+0x46>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2d54:	80 3e       	cpi	r24, 0xE0	; 224
    2d56:	10 f0       	brcs	.+4      	; 0x2d5c <is_tap_key+0x3a>
    2d58:	80 3f       	cpi	r24, 0xF0	; 240
    2d5a:	31 f4       	brne	.+12     	; 0x2d68 <is_tap_key+0x46>
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	08 95       	ret
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2d60:	93 fb       	bst	r25, 3
    2d62:	88 27       	eor	r24, r24
    2d64:	80 f9       	bld	r24, 0
    2d66:	08 95       	ret
            switch (action.layer_tap.code) {
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
            }
            return false;
    2d68:	80 e0       	ldi	r24, 0x00	; 0
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    2d6a:	08 95       	ret

00002d6c <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2d6c:	cf 93       	push	r28
    2d6e:	df 93       	push	r29
    2d70:	00 d0       	rcall	.+0      	; 0x2d72 <debug_event+0x6>
    2d72:	00 d0       	rcall	.+0      	; 0x2d74 <debug_event+0x8>
    2d74:	1f 92       	push	r1
    2d76:	cd b7       	in	r28, 0x3d	; 61
    2d78:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2d7a:	0f 90       	pop	r0
    2d7c:	0f 90       	pop	r0
    2d7e:	0f 90       	pop	r0
    2d80:	0f 90       	pop	r0
    2d82:	0f 90       	pop	r0
    2d84:	df 91       	pop	r29
    2d86:	cf 91       	pop	r28
    2d88:	08 95       	ret

00002d8a <debug_record>:

void debug_record(keyrecord_t record)
{
    2d8a:	cf 93       	push	r28
    2d8c:	df 93       	push	r29
    2d8e:	00 d0       	rcall	.+0      	; 0x2d90 <debug_record+0x6>
    2d90:	00 d0       	rcall	.+0      	; 0x2d92 <debug_record+0x8>
    2d92:	00 d0       	rcall	.+0      	; 0x2d94 <debug_record+0xa>
    2d94:	cd b7       	in	r28, 0x3d	; 61
    2d96:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2d98:	26 96       	adiw	r28, 0x06	; 6
    2d9a:	0f b6       	in	r0, 0x3f	; 63
    2d9c:	f8 94       	cli
    2d9e:	de bf       	out	0x3e, r29	; 62
    2da0:	0f be       	out	0x3f, r0	; 63
    2da2:	cd bf       	out	0x3d, r28	; 61
    2da4:	df 91       	pop	r29
    2da6:	cf 91       	pop	r28
    2da8:	08 95       	ret

00002daa <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2daa:	1f 93       	push	r17
    2dac:	cf 93       	push	r28
    2dae:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2db0:	c0 91 6e 01 	lds	r28, 0x016E
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2db4:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2db6:	80 91 6f 01 	lds	r24, 0x016F
    2dba:	c8 17       	cp	r28, r24
    2dbc:	99 f0       	breq	.+38     	; 0x2de4 <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2dbe:	d0 e0       	ldi	r29, 0x00	; 0
    2dc0:	1c 9f       	mul	r17, r28
    2dc2:	f0 01       	movw	r30, r0
    2dc4:	1d 9f       	mul	r17, r29
    2dc6:	f0 0d       	add	r31, r0
    2dc8:	11 24       	eor	r1, r1
    2dca:	e0 59       	subi	r30, 0x90	; 144
    2dcc:	fe 4f       	sbci	r31, 0xFE	; 254
    2dce:	40 81       	ld	r20, Z
    2dd0:	51 81       	ldd	r21, Z+1	; 0x01
    2dd2:	62 81       	ldd	r22, Z+2	; 0x02
    2dd4:	73 81       	ldd	r23, Z+3	; 0x03
    2dd6:	84 81       	ldd	r24, Z+4	; 0x04
    2dd8:	95 81       	ldd	r25, Z+5	; 0x05
    2dda:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2dde:	21 96       	adiw	r28, 0x01	; 1
    2de0:	c7 70       	andi	r28, 0x07	; 7
    2de2:	e9 cf       	rjmp	.-46     	; 0x2db6 <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2de4:	df 91       	pop	r29
    2de6:	cf 91       	pop	r28
    2de8:	1f 91       	pop	r17
    2dea:	08 95       	ret

00002dec <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2dec:	40 91 a0 01 	lds	r20, 0x01A0
    2df0:	50 91 a1 01 	lds	r21, 0x01A1
    2df4:	60 91 a2 01 	lds	r22, 0x01A2
    2df8:	70 91 a3 01 	lds	r23, 0x01A3
    2dfc:	80 91 a4 01 	lds	r24, 0x01A4
    2e00:	90 91 a5 01 	lds	r25, 0x01A5
    2e04:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <debug_record>

00002e08 <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    2e08:	cf 93       	push	r28
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2e0a:	80 91 a5 01 	lds	r24, 0x01A5
    2e0e:	82 95       	swap	r24
    2e10:	8f 70       	andi	r24, 0x0F	; 15
    2e12:	09 f0       	breq	.+2      	; 0x2e16 <waiting_buffer_scan_tap+0xe>
    2e14:	5f c0       	rjmp	.+190    	; 0x2ed4 <waiting_buffer_scan_tap+0xcc>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2e16:	80 91 a2 01 	lds	r24, 0x01A2
    2e1a:	88 23       	and	r24, r24
    2e1c:	09 f4       	brne	.+2      	; 0x2e20 <waiting_buffer_scan_tap+0x18>
    2e1e:	5a c0       	rjmp	.+180    	; 0x2ed4 <waiting_buffer_scan_tap+0xcc>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e20:	20 91 6e 01 	lds	r18, 0x016E
    2e24:	a0 91 6f 01 	lds	r26, 0x016F
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2e28:	60 91 a0 01 	lds	r22, 0x01A0
    2e2c:	70 91 a1 01 	lds	r23, 0x01A1
    2e30:	80 91 a3 01 	lds	r24, 0x01A3
    2e34:	90 91 a4 01 	lds	r25, 0x01A4
    2e38:	31 e0       	ldi	r19, 0x01	; 1
    2e3a:	6f 3f       	cpi	r22, 0xFF	; 255
    2e3c:	09 f0       	breq	.+2      	; 0x2e40 <waiting_buffer_scan_tap+0x38>
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	b3 2f       	mov	r27, r19
    2e42:	c6 e0       	ldi	r28, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e44:	2a 17       	cp	r18, r26
    2e46:	09 f4       	brne	.+2      	; 0x2e4a <waiting_buffer_scan_tap+0x42>
    2e48:	45 c0       	rjmp	.+138    	; 0x2ed4 <waiting_buffer_scan_tap+0xcc>
    2e4a:	00 97       	sbiw	r24, 0x00	; 0
    2e4c:	21 f0       	breq	.+8      	; 0x2e56 <waiting_buffer_scan_tap+0x4e>
    2e4e:	7f 3f       	cpi	r23, 0xFF	; 255
    2e50:	21 f4       	brne	.+8      	; 0x2e5a <waiting_buffer_scan_tap+0x52>
    2e52:	4b 2f       	mov	r20, r27
    2e54:	03 c0       	rjmp	.+6      	; 0x2e5c <waiting_buffer_scan_tap+0x54>
    2e56:	41 e0       	ldi	r20, 0x01	; 1
    2e58:	01 c0       	rjmp	.+2      	; 0x2e5c <waiting_buffer_scan_tap+0x54>
    2e5a:	40 e0       	ldi	r20, 0x00	; 0
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2e5e:	40 fd       	sbrc	r20, 0
    2e60:	35 c0       	rjmp	.+106    	; 0x2ecc <waiting_buffer_scan_tap+0xc4>
    2e62:	c2 9f       	mul	r28, r18
    2e64:	f0 01       	movw	r30, r0
    2e66:	c3 9f       	mul	r28, r19
    2e68:	f0 0d       	add	r31, r0
    2e6a:	11 24       	eor	r1, r1
    2e6c:	e0 59       	subi	r30, 0x90	; 144
    2e6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e70:	41 81       	ldd	r20, Z+1	; 0x01
    2e72:	74 13       	cpse	r23, r20
    2e74:	2b c0       	rjmp	.+86     	; 0x2ecc <waiting_buffer_scan_tap+0xc4>
    2e76:	40 81       	ld	r20, Z
    2e78:	64 13       	cpse	r22, r20
    2e7a:	28 c0       	rjmp	.+80     	; 0x2ecc <waiting_buffer_scan_tap+0xc4>
    2e7c:	42 81       	ldd	r20, Z+2	; 0x02
    2e7e:	41 11       	cpse	r20, r1
    2e80:	25 c0       	rjmp	.+74     	; 0x2ecc <waiting_buffer_scan_tap+0xc4>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2e82:	43 81       	ldd	r20, Z+3	; 0x03
    2e84:	54 81       	ldd	r21, Z+4	; 0x04
    2e86:	48 17       	cp	r20, r24
    2e88:	59 07       	cpc	r21, r25
    2e8a:	10 f4       	brcc	.+4      	; 0x2e90 <waiting_buffer_scan_tap+0x88>
    2e8c:	41 50       	subi	r20, 0x01	; 1
    2e8e:	51 09       	sbc	r21, r1
    2e90:	48 1b       	sub	r20, r24
    2e92:	59 0b       	sbc	r21, r25
    2e94:	48 3c       	cpi	r20, 0xC8	; 200
    2e96:	51 05       	cpc	r21, r1
    2e98:	c8 f4       	brcc	.+50     	; 0x2ecc <waiting_buffer_scan_tap+0xc4>
            tapping_key.tap.count = 1;
    2e9a:	80 91 a5 01 	lds	r24, 0x01A5
    2e9e:	8f 70       	andi	r24, 0x0F	; 15
    2ea0:	80 61       	ori	r24, 0x10	; 16
    2ea2:	80 93 a5 01 	sts	0x01A5, r24
            waiting_buffer[i].tap.count = 1;
    2ea6:	86 e0       	ldi	r24, 0x06	; 6
    2ea8:	82 9f       	mul	r24, r18
    2eaa:	f0 01       	movw	r30, r0
    2eac:	83 9f       	mul	r24, r19
    2eae:	f0 0d       	add	r31, r0
    2eb0:	11 24       	eor	r1, r1
    2eb2:	eb 58       	subi	r30, 0x8B	; 139
    2eb4:	fe 4f       	sbci	r31, 0xFE	; 254
    2eb6:	80 81       	ld	r24, Z
    2eb8:	8f 70       	andi	r24, 0x0F	; 15
    2eba:	80 61       	ori	r24, 0x10	; 16
    2ebc:	80 83       	st	Z, r24
            process_action(&tapping_key);
    2ebe:	80 ea       	ldi	r24, 0xA0	; 160
    2ec0:	91 e0       	ldi	r25, 0x01	; 1
    2ec2:	0e 94 6e 13 	call	0x26dc	; 0x26dc <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    2ec6:	cf 91       	pop	r28
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    2ec8:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2ecc:	2f 5f       	subi	r18, 0xFF	; 255
    2ece:	3f 4f       	sbci	r19, 0xFF	; 255
    2ed0:	27 70       	andi	r18, 0x07	; 7
    2ed2:	b8 cf       	rjmp	.-144    	; 0x2e44 <waiting_buffer_scan_tap+0x3c>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    2ed4:	cf 91       	pop	r28
    2ed6:	08 95       	ret

00002ed8 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    2ed8:	cf 92       	push	r12
    2eda:	df 92       	push	r13
    2edc:	ef 92       	push	r14
    2ede:	ff 92       	push	r15
    2ee0:	0f 93       	push	r16
    2ee2:	1f 93       	push	r17
    2ee4:	cf 93       	push	r28
    2ee6:	df 93       	push	r29
    2ee8:	cd b7       	in	r28, 0x3d	; 61
    2eea:	de b7       	in	r29, 0x3e	; 62
    2eec:	62 97       	sbiw	r28, 0x12	; 18
    2eee:	0f b6       	in	r0, 0x3f	; 63
    2ef0:	f8 94       	cli
    2ef2:	de bf       	out	0x3e, r29	; 62
    2ef4:	0f be       	out	0x3f, r0	; 63
    2ef6:	cd bf       	out	0x3d, r28	; 61
    2ef8:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    2efa:	85 e0       	ldi	r24, 0x05	; 5
    2efc:	f8 01       	movw	r30, r16
    2efe:	de 01       	movw	r26, r28
    2f00:	1d 96       	adiw	r26, 0x0d	; 13
    2f02:	01 90       	ld	r0, Z+
    2f04:	0d 92       	st	X+, r0
    2f06:	8a 95       	dec	r24
    2f08:	e1 f7       	brne	.-8      	; 0x2f02 <process_tapping+0x2a>
    2f0a:	d8 01       	movw	r26, r16
    2f0c:	4c 91       	ld	r20, X
    2f0e:	11 96       	adiw	r26, 0x01	; 1
    2f10:	5c 91       	ld	r21, X
    2f12:	11 97       	sbiw	r26, 0x01	; 1
    2f14:	12 96       	adiw	r26, 0x02	; 2
    2f16:	6c 91       	ld	r22, X
    2f18:	12 97       	sbiw	r26, 0x02	; 2
    2f1a:	13 96       	adiw	r26, 0x03	; 3
    2f1c:	ed 90       	ld	r14, X+
    2f1e:	fc 90       	ld	r15, X
    2f20:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    2f22:	70 91 a0 01 	lds	r23, 0x01A0
    2f26:	e0 91 a1 01 	lds	r30, 0x01A1
    2f2a:	20 91 a3 01 	lds	r18, 0x01A3
    2f2e:	30 91 a4 01 	lds	r19, 0x01A4
    2f32:	21 15       	cp	r18, r1
    2f34:	31 05       	cpc	r19, r1
    2f36:	31 f0       	breq	.+12     	; 0x2f44 <process_tapping+0x6c>
    2f38:	ef 3f       	cpi	r30, 0xFF	; 255
    2f3a:	31 f4       	brne	.+12     	; 0x2f48 <process_tapping+0x70>
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	7f 3f       	cpi	r23, 0xFF	; 255
    2f40:	19 f4       	brne	.+6      	; 0x2f48 <process_tapping+0x70>
    2f42:	03 c0       	rjmp	.+6      	; 0x2f4a <process_tapping+0x72>
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	01 c0       	rjmp	.+2      	; 0x2f4a <process_tapping+0x72>
    2f48:	80 e0       	ldi	r24, 0x00	; 0
    2f4a:	b8 2f       	mov	r27, r24
    2f4c:	b1 70       	andi	r27, 0x01	; 1
    2f4e:	cb 2e       	mov	r12, r27
    2f50:	80 fd       	sbrc	r24, 0
    2f52:	6c c1       	rjmp	.+728    	; 0x322c <process_tapping+0x354>
    2f54:	d0 90 a2 01 	lds	r13, 0x01A2
    2f58:	dd 20       	and	r13, r13
    2f5a:	09 f4       	brne	.+2      	; 0x2f5e <process_tapping+0x86>
    2f5c:	f5 c0       	rjmp	.+490    	; 0x3148 <process_tapping+0x270>
    2f5e:	f0 91 a5 01 	lds	r31, 0x01A5
        if (WITHIN_TAPPING_TERM(event)) {
    2f62:	e2 16       	cp	r14, r18
    2f64:	f3 06       	cpc	r15, r19
    2f66:	38 f0       	brcs	.+14     	; 0x2f76 <process_tapping+0x9e>
    2f68:	c7 01       	movw	r24, r14
    2f6a:	82 1b       	sub	r24, r18
    2f6c:	93 0b       	sbc	r25, r19
    2f6e:	88 3c       	cpi	r24, 0xC8	; 200
    2f70:	91 05       	cpc	r25, r1
    2f72:	48 f0       	brcs	.+18     	; 0x2f86 <process_tapping+0xae>
    2f74:	9b c0       	rjmp	.+310    	; 0x30ac <process_tapping+0x1d4>
    2f76:	20 95       	com	r18
    2f78:	30 95       	com	r19
    2f7a:	2e 0d       	add	r18, r14
    2f7c:	3f 1d       	adc	r19, r15
    2f7e:	28 3c       	cpi	r18, 0xC8	; 200
    2f80:	31 05       	cpc	r19, r1
    2f82:	08 f0       	brcs	.+2      	; 0x2f86 <process_tapping+0xae>
    2f84:	93 c0       	rjmp	.+294    	; 0x30ac <process_tapping+0x1d4>
            if (tapping_key.tap.count == 0) {
    2f86:	8f 2f       	mov	r24, r31
    2f88:	80 7f       	andi	r24, 0xF0	; 240
    2f8a:	09 f0       	breq	.+2      	; 0x2f8e <process_tapping+0xb6>
    2f8c:	52 c0       	rjmp	.+164    	; 0x3032 <process_tapping+0x15a>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2f8e:	e5 13       	cpse	r30, r21
    2f90:	14 c0       	rjmp	.+40     	; 0x2fba <process_tapping+0xe2>
    2f92:	74 13       	cpse	r23, r20
    2f94:	12 c0       	rjmp	.+36     	; 0x2fba <process_tapping+0xe2>
    2f96:	d6 2e       	mov	r13, r22
    2f98:	61 11       	cpse	r22, r1
    2f9a:	0f c0       	rjmp	.+30     	; 0x2fba <process_tapping+0xe2>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    2f9c:	ff 70       	andi	r31, 0x0F	; 15
    2f9e:	f0 61       	ori	r31, 0x10	; 16
    2fa0:	f0 93 a5 01 	sts	0x01A5, r31
                    debug_tapping_key();
    2fa4:	0e 94 f6 16 	call	0x2dec	; 0x2dec <debug_tapping_key>
                    process_action(&tapping_key);
    2fa8:	80 ea       	ldi	r24, 0xA0	; 160
    2faa:	91 e0       	ldi	r25, 0x01	; 1
    2fac:	0e 94 6e 13 	call	0x26dc	; 0x26dc <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    2fb0:	80 91 a5 01 	lds	r24, 0x01A5
    2fb4:	f8 01       	movw	r30, r16
    2fb6:	85 83       	std	Z+5, r24	; 0x05
                    // enqueue
                    return false;
    2fb8:	6c c1       	rjmp	.+728    	; 0x3292 <process_tapping+0x3ba>
    2fba:	ef 28       	or	r14, r15
    2fbc:	31 f0       	breq	.+12     	; 0x2fca <process_tapping+0xf2>
    2fbe:	5f 3f       	cpi	r21, 0xFF	; 255
    2fc0:	31 f4       	brne	.+12     	; 0x2fce <process_tapping+0xf6>
    2fc2:	81 e0       	ldi	r24, 0x01	; 1
    2fc4:	4f 3f       	cpi	r20, 0xFF	; 255
    2fc6:	19 f4       	brne	.+6      	; 0x2fce <process_tapping+0xf6>
    2fc8:	03 c0       	rjmp	.+6      	; 0x2fd0 <process_tapping+0xf8>
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	01 c0       	rjmp	.+2      	; 0x2fd0 <process_tapping+0xf8>
    2fce:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    2fd0:	80 fd       	sbrc	r24, 0
    2fd2:	03 c0       	rjmp	.+6      	; 0x2fda <process_tapping+0x102>
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	86 27       	eor	r24, r22
    2fd8:	01 c0       	rjmp	.+2      	; 0x2fdc <process_tapping+0x104>
    2fda:	80 e0       	ldi	r24, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    2fdc:	f8 2f       	mov	r31, r24
    2fde:	f1 70       	andi	r31, 0x01	; 1
    2fe0:	ff 2e       	mov	r15, r31
    2fe2:	80 ff       	sbrs	r24, 0
    2fe4:	1c c0       	rjmp	.+56     	; 0x301e <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2fe6:	80 91 6e 01 	lds	r24, 0x016E
    2fea:	20 91 6f 01 	lds	r18, 0x016F
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2fee:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2ff0:	82 17       	cp	r24, r18
    2ff2:	09 f4       	brne	.+2      	; 0x2ff6 <process_tapping+0x11e>
    2ff4:	28 c1       	rjmp	.+592    	; 0x3246 <process_tapping+0x36e>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	38 9f       	mul	r19, r24
    2ffa:	f0 01       	movw	r30, r0
    2ffc:	39 9f       	mul	r19, r25
    2ffe:	f0 0d       	add	r31, r0
    3000:	11 24       	eor	r1, r1
    3002:	e0 59       	subi	r30, 0x90	; 144
    3004:	fe 4f       	sbci	r31, 0xFE	; 254
    3006:	71 81       	ldd	r23, Z+1	; 0x01
    3008:	57 13       	cpse	r21, r23
    300a:	06 c0       	rjmp	.+12     	; 0x3018 <process_tapping+0x140>
    300c:	70 81       	ld	r23, Z
    300e:	47 13       	cpse	r20, r23
    3010:	03 c0       	rjmp	.+6      	; 0x3018 <process_tapping+0x140>
    3012:	72 81       	ldd	r23, Z+2	; 0x02
    3014:	67 13       	cpse	r22, r23
    3016:	03 c0       	rjmp	.+6      	; 0x301e <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3018:	01 96       	adiw	r24, 0x01	; 1
    301a:	87 70       	andi	r24, 0x07	; 7
    301c:	e9 cf       	rjmp	.-46     	; 0x2ff0 <process_tapping+0x118>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    301e:	d6 2e       	mov	r13, r22
    3020:	66 23       	and	r22, r22
    3022:	09 f4       	brne	.+2      	; 0x3026 <process_tapping+0x14e>
    3024:	36 c1       	rjmp	.+620    	; 0x3292 <process_tapping+0x3ba>
                        tapping_key.tap.interrupted = true;
    3026:	80 91 a5 01 	lds	r24, 0x01A5
    302a:	81 60       	ori	r24, 0x01	; 1
    302c:	80 93 a5 01 	sts	0x01A5, r24
    3030:	53 c0       	rjmp	.+166    	; 0x30d8 <process_tapping+0x200>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3032:	e5 13       	cpse	r30, r21
    3034:	08 c0       	rjmp	.+16     	; 0x3046 <process_tapping+0x16e>
    3036:	74 13       	cpse	r23, r20
    3038:	06 c0       	rjmp	.+12     	; 0x3046 <process_tapping+0x16e>
    303a:	61 11       	cpse	r22, r1
    303c:	04 c0       	rjmp	.+8      	; 0x3046 <process_tapping+0x16e>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    303e:	d8 01       	movw	r26, r16
    3040:	15 96       	adiw	r26, 0x05	; 5
    3042:	fc 93       	st	X, r31
    3044:	ae c0       	rjmp	.+348    	; 0x31a2 <process_tapping+0x2ca>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    3046:	4d 87       	std	Y+13, r20	; 0x0d
    3048:	5e 87       	std	Y+14, r21	; 0x0e
    304a:	8d 85       	ldd	r24, Y+13	; 0x0d
    304c:	9e 85       	ldd	r25, Y+14	; 0x0e
    304e:	6a 8b       	std	Y+18, r22	; 0x12
    3050:	0e 94 91 16 	call	0x2d22	; 0x2d22 <is_tap_key>
    3054:	6a 89       	ldd	r22, Y+18	; 0x12
    3056:	88 23       	and	r24, r24
    3058:	29 f1       	breq	.+74     	; 0x30a4 <process_tapping+0x1cc>
    305a:	d6 2e       	mov	r13, r22
    305c:	66 23       	and	r22, r22
    305e:	11 f1       	breq	.+68     	; 0x30a4 <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    3060:	20 91 a5 01 	lds	r18, 0x01A5
    3064:	82 2f       	mov	r24, r18
    3066:	82 95       	swap	r24
    3068:	8f 70       	andi	r24, 0x0F	; 15
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	02 97       	sbiw	r24, 0x02	; 2
    306e:	0c f4       	brge	.+2      	; 0x3072 <process_tapping+0x19a>
    3070:	60 c0       	rjmp	.+192    	; 0x3132 <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    3072:	80 91 a0 01 	lds	r24, 0x01A0
    3076:	90 91 a1 01 	lds	r25, 0x01A1
    307a:	98 87       	std	Y+8, r25	; 0x08
    307c:	8f 83       	std	Y+7, r24	; 0x07
    307e:	19 86       	std	Y+9, r1	; 0x09
    3080:	fb 86       	std	Y+11, r15	; 0x0b
    3082:	ea 86       	std	Y+10, r14	; 0x0a
    3084:	2c 87       	std	Y+12, r18	; 0x0c
    3086:	ce 01       	movw	r24, r28
    3088:	07 96       	adiw	r24, 0x07	; 7
    308a:	51 c0       	rjmp	.+162    	; 0x312e <process_tapping+0x256>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    308c:	e5 17       	cp	r30, r21
    308e:	31 f1       	breq	.+76     	; 0x30dc <process_tapping+0x204>
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = (keyrecord_t){};
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    3090:	4d 87       	std	Y+13, r20	; 0x0d
    3092:	5e 87       	std	Y+14, r21	; 0x0e
    3094:	8d 85       	ldd	r24, Y+13	; 0x0d
    3096:	9e 85       	ldd	r25, Y+14	; 0x0e
    3098:	6a 8b       	std	Y+18, r22	; 0x12
    309a:	0e 94 91 16 	call	0x2d22	; 0x2d22 <is_tap_key>
    309e:	6a 89       	ldd	r22, Y+18	; 0x12
    30a0:	81 11       	cpse	r24, r1
    30a2:	2e c0       	rjmp	.+92     	; 0x3100 <process_tapping+0x228>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    30a4:	c8 01       	movw	r24, r16
    30a6:	0e 94 6e 13 	call	0x26dc	; 0x26dc <process_action>
    30aa:	a4 c0       	rjmp	.+328    	; 0x31f4 <process_tapping+0x31c>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    30ac:	8f 2f       	mov	r24, r31
    30ae:	80 7f       	andi	r24, 0xF0	; 240
    30b0:	69 f7       	brne	.-38     	; 0x308c <process_tapping+0x1b4>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    30b2:	7e 2d       	mov	r23, r14
    30b4:	f9 8a       	std	Y+17, r15	; 0x11
    30b6:	e8 8a       	std	Y+16, r14	; 0x10
    30b8:	89 89       	ldd	r24, Y+17	; 0x11
    30ba:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <debug_event>
                process_action(&tapping_key);
    30be:	80 ea       	ldi	r24, 0xA0	; 160
    30c0:	91 e0       	ldi	r25, 0x01	; 1
    30c2:	0e 94 6e 13 	call	0x26dc	; 0x26dc <process_action>
                tapping_key = (keyrecord_t){};
    30c6:	e0 ea       	ldi	r30, 0xA0	; 160
    30c8:	f1 e0       	ldi	r31, 0x01	; 1
    30ca:	86 e0       	ldi	r24, 0x06	; 6
    30cc:	df 01       	movw	r26, r30
    30ce:	1d 92       	st	X+, r1
    30d0:	8a 95       	dec	r24
    30d2:	e9 f7       	brne	.-6      	; 0x30ce <process_tapping+0x1f6>
                debug_tapping_key();
    30d4:	0e 94 f6 16 	call	0x2dec	; 0x2dec <debug_tapping_key>
                return false;
    30d8:	d1 2c       	mov	r13, r1
    30da:	db c0       	rjmp	.+438    	; 0x3292 <process_tapping+0x3ba>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    30dc:	74 13       	cpse	r23, r20
    30de:	d8 cf       	rjmp	.-80     	; 0x3090 <process_tapping+0x1b8>
    30e0:	61 11       	cpse	r22, r1
    30e2:	d6 cf       	rjmp	.-84     	; 0x3090 <process_tapping+0x1b8>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    30e4:	d8 01       	movw	r26, r16
    30e6:	15 96       	adiw	r26, 0x05	; 5
    30e8:	fc 93       	st	X, r31
                    process_action(keyp);
    30ea:	c8 01       	movw	r24, r16
    30ec:	0e 94 6e 13 	call	0x26dc	; 0x26dc <process_action>
                    tapping_key = (keyrecord_t){};
    30f0:	e0 ea       	ldi	r30, 0xA0	; 160
    30f2:	f1 e0       	ldi	r31, 0x01	; 1
    30f4:	86 e0       	ldi	r24, 0x06	; 6
    30f6:	df 01       	movw	r26, r30
    30f8:	1d 92       	st	X+, r1
    30fa:	8a 95       	dec	r24
    30fc:	e9 f7       	brne	.-6      	; 0x30f8 <process_tapping+0x220>
                    return true;
    30fe:	c9 c0       	rjmp	.+402    	; 0x3292 <process_tapping+0x3ba>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    3100:	d6 2e       	mov	r13, r22
    3102:	66 23       	and	r22, r22
    3104:	79 f2       	breq	.-98     	; 0x30a4 <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    3106:	20 91 a5 01 	lds	r18, 0x01A5
    310a:	82 2f       	mov	r24, r18
    310c:	82 95       	swap	r24
    310e:	8f 70       	andi	r24, 0x0F	; 15
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	02 97       	sbiw	r24, 0x02	; 2
    3114:	74 f0       	brlt	.+28     	; 0x3132 <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    3116:	80 91 a0 01 	lds	r24, 0x01A0
    311a:	90 91 a1 01 	lds	r25, 0x01A1
    311e:	9a 83       	std	Y+2, r25	; 0x02
    3120:	89 83       	std	Y+1, r24	; 0x01
    3122:	1b 82       	std	Y+3, r1	; 0x03
    3124:	fd 82       	std	Y+5, r15	; 0x05
    3126:	ec 82       	std	Y+4, r14	; 0x04
    3128:	2e 83       	std	Y+6, r18	; 0x06
    312a:	ce 01       	movw	r24, r28
    312c:	01 96       	adiw	r24, 0x01	; 1
    312e:	0e 94 6e 13 	call	0x26dc	; 0x26dc <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    3132:	86 e0       	ldi	r24, 0x06	; 6
    3134:	f8 01       	movw	r30, r16
    3136:	a0 ea       	ldi	r26, 0xA0	; 160
    3138:	b1 e0       	ldi	r27, 0x01	; 1
    313a:	01 90       	ld	r0, Z+
    313c:	0d 92       	st	X+, r0
    313e:	8a 95       	dec	r24
    3140:	e1 f7       	brne	.-8      	; 0x313a <process_tapping+0x262>
                    waiting_buffer_scan_tap();
    3142:	0e 94 04 17 	call	0x2e08	; 0x2e08 <waiting_buffer_scan_tap>
    3146:	6f c0       	rjmp	.+222    	; 0x3226 <process_tapping+0x34e>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    3148:	e2 16       	cp	r14, r18
    314a:	f3 06       	cpc	r15, r19
    314c:	28 f0       	brcs	.+10     	; 0x3158 <process_tapping+0x280>
    314e:	c7 01       	movw	r24, r14
    3150:	82 1b       	sub	r24, r18
    3152:	93 0b       	sbc	r25, r19
    3154:	9c 01       	movw	r18, r24
    3156:	04 c0       	rjmp	.+8      	; 0x3160 <process_tapping+0x288>
    3158:	20 95       	com	r18
    315a:	30 95       	com	r19
    315c:	2e 0d       	add	r18, r14
    315e:	3f 1d       	adc	r19, r15
    3160:	28 3c       	cpi	r18, 0xC8	; 200
    3162:	31 05       	cpc	r19, r1
    3164:	08 f0       	brcs	.+2      	; 0x3168 <process_tapping+0x290>
    3166:	52 c0       	rjmp	.+164    	; 0x320c <process_tapping+0x334>
            if (event.pressed) {
    3168:	d6 2e       	mov	r13, r22
    316a:	66 23       	and	r22, r22
    316c:	09 f4       	brne	.+2      	; 0x3170 <process_tapping+0x298>
    316e:	9a cf       	rjmp	.-204    	; 0x30a4 <process_tapping+0x1cc>
                if (IS_TAPPING_KEY(event.key)) {
    3170:	e5 13       	cpse	r30, r21
    3172:	2c c0       	rjmp	.+88     	; 0x31cc <process_tapping+0x2f4>
    3174:	74 13       	cpse	r23, r20
    3176:	2a c0       	rjmp	.+84     	; 0x31cc <process_tapping+0x2f4>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    3178:	80 91 a5 01 	lds	r24, 0x01A5
    317c:	80 fd       	sbrc	r24, 0
    317e:	1d c0       	rjmp	.+58     	; 0x31ba <process_tapping+0x2e2>
    3180:	98 2f       	mov	r25, r24
    3182:	92 95       	swap	r25
    3184:	9f 70       	andi	r25, 0x0F	; 15
    3186:	c9 f0       	breq	.+50     	; 0x31ba <process_tapping+0x2e2>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    3188:	d8 01       	movw	r26, r16
    318a:	15 96       	adiw	r26, 0x05	; 5
    318c:	8c 93       	st	X, r24
    318e:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    3190:	9f 30       	cpi	r25, 0x0F	; 15
    3192:	39 f0       	breq	.+14     	; 0x31a2 <process_tapping+0x2ca>
    3194:	9f 5f       	subi	r25, 0xFF	; 255
    3196:	92 95       	swap	r25
    3198:	90 7f       	andi	r25, 0xF0	; 240
    319a:	8f 70       	andi	r24, 0x0F	; 15
    319c:	89 2b       	or	r24, r25
    319e:	15 96       	adiw	r26, 0x05	; 5
    31a0:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    31a2:	c8 01       	movw	r24, r16
    31a4:	0e 94 6e 13 	call	0x26dc	; 0x26dc <process_action>
                        tapping_key = *keyp;
    31a8:	86 e0       	ldi	r24, 0x06	; 6
    31aa:	f8 01       	movw	r30, r16
    31ac:	a0 ea       	ldi	r26, 0xA0	; 160
    31ae:	b1 e0       	ldi	r27, 0x01	; 1
    31b0:	01 90       	ld	r0, Z+
    31b2:	0d 92       	st	X+, r0
    31b4:	8a 95       	dec	r24
    31b6:	e1 f7       	brne	.-8      	; 0x31b0 <process_tapping+0x2d8>
    31b8:	36 c0       	rjmp	.+108    	; 0x3226 <process_tapping+0x34e>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    31ba:	86 e0       	ldi	r24, 0x06	; 6
    31bc:	f8 01       	movw	r30, r16
    31be:	a0 ea       	ldi	r26, 0xA0	; 160
    31c0:	b1 e0       	ldi	r27, 0x01	; 1
    31c2:	01 90       	ld	r0, Z+
    31c4:	0d 92       	st	X+, r0
    31c6:	8a 95       	dec	r24
    31c8:	e1 f7       	brne	.-8      	; 0x31c2 <process_tapping+0x2ea>
                        return true;
    31ca:	63 c0       	rjmp	.+198    	; 0x3292 <process_tapping+0x3ba>
                    }
                } else if (is_tap_key(event.key)) {
    31cc:	4d 87       	std	Y+13, r20	; 0x0d
    31ce:	5e 87       	std	Y+14, r21	; 0x0e
    31d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    31d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    31d4:	0e 94 91 16 	call	0x2d22	; 0x2d22 <is_tap_key>
    31d8:	88 23       	and	r24, r24
    31da:	79 f0       	breq	.+30     	; 0x31fa <process_tapping+0x322>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    31dc:	86 e0       	ldi	r24, 0x06	; 6
    31de:	f8 01       	movw	r30, r16
    31e0:	a0 ea       	ldi	r26, 0xA0	; 160
    31e2:	b1 e0       	ldi	r27, 0x01	; 1
    31e4:	01 90       	ld	r0, Z+
    31e6:	0d 92       	st	X+, r0
    31e8:	8a 95       	dec	r24
    31ea:	e1 f7       	brne	.-8      	; 0x31e4 <process_tapping+0x30c>
                    waiting_buffer_scan_tap();
    31ec:	0e 94 04 17 	call	0x2e08	; 0x2e08 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    31f0:	0e 94 f6 16 	call	0x2dec	; 0x2dec <debug_tapping_key>
                    return true;
    31f4:	dd 24       	eor	r13, r13
    31f6:	d3 94       	inc	r13
    31f8:	4c c0       	rjmp	.+152    	; 0x3292 <process_tapping+0x3ba>
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    31fa:	80 91 a5 01 	lds	r24, 0x01A5
    31fe:	81 60       	ori	r24, 0x01	; 1
    3200:	80 93 a5 01 	sts	0x01A5, r24
                    process_action(keyp);
    3204:	c8 01       	movw	r24, r16
    3206:	0e 94 6e 13 	call	0x26dc	; 0x26dc <process_action>
                    return true;
    320a:	43 c0       	rjmp	.+134    	; 0x3292 <process_tapping+0x3ba>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    320c:	7e 2d       	mov	r23, r14
    320e:	f9 8a       	std	Y+17, r15	; 0x11
    3210:	e8 8a       	std	Y+16, r14	; 0x10
    3212:	89 89       	ldd	r24, Y+17	; 0x11
    3214:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <debug_event>
            tapping_key = (keyrecord_t){};
    3218:	e0 ea       	ldi	r30, 0xA0	; 160
    321a:	f1 e0       	ldi	r31, 0x01	; 1
    321c:	86 e0       	ldi	r24, 0x06	; 6
    321e:	df 01       	movw	r26, r30
    3220:	1d 92       	st	X+, r1
    3222:	8a 95       	dec	r24
    3224:	e9 f7       	brne	.-6      	; 0x3220 <process_tapping+0x348>
            debug_tapping_key();
    3226:	0e 94 f6 16 	call	0x2dec	; 0x2dec <debug_tapping_key>
            return false;
    322a:	33 c0       	rjmp	.+102    	; 0x3292 <process_tapping+0x3ba>
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    322c:	66 23       	and	r22, r22
    322e:	09 f4       	brne	.+2      	; 0x3232 <process_tapping+0x35a>
    3230:	39 cf       	rjmp	.-398    	; 0x30a4 <process_tapping+0x1cc>
    3232:	4d 87       	std	Y+13, r20	; 0x0d
    3234:	5e 87       	std	Y+14, r21	; 0x0e
    3236:	8d 85       	ldd	r24, Y+13	; 0x0d
    3238:	9e 85       	ldd	r25, Y+14	; 0x0e
    323a:	0e 94 91 16 	call	0x2d22	; 0x2d22 <is_tap_key>
    323e:	88 23       	and	r24, r24
    3240:	09 f4       	brne	.+2      	; 0x3244 <process_tapping+0x36c>
    3242:	30 cf       	rjmp	.-416    	; 0x30a4 <process_tapping+0x1cc>
    3244:	cb cf       	rjmp	.-106    	; 0x31dc <process_tapping+0x304>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    3246:	4d 87       	std	Y+13, r20	; 0x0d
    3248:	5e 87       	std	Y+14, r21	; 0x0e
    324a:	8d 85       	ldd	r24, Y+13	; 0x0d
    324c:	9e 85       	ldd	r25, Y+14	; 0x0e
    324e:	0e 94 94 1b 	call	0x3728	; 0x3728 <layer_switch_get_action>
                    switch (action.kind.id) {
    3252:	29 2f       	mov	r18, r25
    3254:	22 95       	swap	r18
    3256:	2f 70       	andi	r18, 0x0F	; 15
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	22 30       	cpi	r18, 0x02	; 2
    325c:	31 05       	cpc	r19, r1
    325e:	2c f4       	brge	.+10     	; 0x326a <process_tapping+0x392>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    3260:	9f 70       	andi	r25, 0x0F	; 15
    3262:	41 f0       	breq	.+16     	; 0x3274 <process_tapping+0x39c>
    3264:	81 11       	cpse	r24, r1
    3266:	06 c0       	rjmp	.+12     	; 0x3274 <process_tapping+0x39c>
    3268:	0c c0       	rjmp	.+24     	; 0x3282 <process_tapping+0x3aa>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    326a:	24 30       	cpi	r18, 0x04	; 4
    326c:	31 05       	cpc	r19, r1
    326e:	2c f4       	brge	.+10     	; 0x327a <process_tapping+0x3a2>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3270:	9f 70       	andi	r25, 0x0F	; 15
    3272:	49 f4       	brne	.+18     	; 0x3286 <process_tapping+0x3ae>
                            if (IS_MOD(action.key.code)) return false;
    3274:	80 5e       	subi	r24, 0xE0	; 224
    3276:	88 30       	cpi	r24, 0x08	; 8
    3278:	20 f0       	brcs	.+8      	; 0x3282 <process_tapping+0x3aa>
                            break;
                    }
                    // Release of key should be process immediately.
                    debug("Tapping: release event of a key pressed before tapping\n");
                    process_action(keyp);
    327a:	c8 01       	movw	r24, r16
    327c:	0e 94 6e 13 	call	0x26dc	; 0x26dc <process_action>
                    return true;
    3280:	cf 2c       	mov	r12, r15
    3282:	dc 2c       	mov	r13, r12
    3284:	06 c0       	rjmp	.+12     	; 0x3292 <process_tapping+0x3ba>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3286:	d8 01       	movw	r26, r16
    3288:	15 96       	adiw	r26, 0x05	; 5
    328a:	9c 91       	ld	r25, X
    328c:	90 7f       	andi	r25, 0xF0	; 240
    328e:	91 f7       	brne	.-28     	; 0x3274 <process_tapping+0x39c>
    3290:	f8 cf       	rjmp	.-16     	; 0x3282 <process_tapping+0x3aa>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    3292:	8d 2d       	mov	r24, r13
    3294:	62 96       	adiw	r28, 0x12	; 18
    3296:	0f b6       	in	r0, 0x3f	; 63
    3298:	f8 94       	cli
    329a:	de bf       	out	0x3e, r29	; 62
    329c:	0f be       	out	0x3f, r0	; 63
    329e:	cd bf       	out	0x3d, r28	; 61
    32a0:	df 91       	pop	r29
    32a2:	cf 91       	pop	r28
    32a4:	1f 91       	pop	r17
    32a6:	0f 91       	pop	r16
    32a8:	ff 90       	pop	r15
    32aa:	ef 90       	pop	r14
    32ac:	df 90       	pop	r13
    32ae:	cf 90       	pop	r12
    32b0:	08 95       	ret

000032b2 <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    32b2:	1f 93       	push	r17
    32b4:	cf 93       	push	r28
    32b6:	df 93       	push	r29
    32b8:	cd b7       	in	r28, 0x3d	; 61
    32ba:	de b7       	in	r29, 0x3e	; 62
    32bc:	2c 97       	sbiw	r28, 0x0c	; 12
    32be:	0f b6       	in	r0, 0x3f	; 63
    32c0:	f8 94       	cli
    32c2:	de bf       	out	0x3e, r29	; 62
    32c4:	0f be       	out	0x3f, r0	; 63
    32c6:	cd bf       	out	0x3d, r28	; 61
    32c8:	4f 83       	std	Y+7, r20	; 0x07
    32ca:	58 87       	std	Y+8, r21	; 0x08
    32cc:	69 87       	std	Y+9, r22	; 0x09
    32ce:	7a 87       	std	Y+10, r23	; 0x0a
    32d0:	8b 87       	std	Y+11, r24	; 0x0b
    32d2:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    32d4:	ce 01       	movw	r24, r28
    32d6:	07 96       	adiw	r24, 0x07	; 7
    32d8:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <process_tapping>
    32dc:	88 23       	and	r24, r24
    32de:	c1 f0       	breq	.+48     	; 0x3310 <action_tapping_process+0x5e>
        if (!IS_NOEVENT(record.event)) {
    32e0:	2f 81       	ldd	r18, Y+7	; 0x07
    32e2:	38 85       	ldd	r19, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    32e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    32e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    32e8:	89 2b       	or	r24, r25
    32ea:	31 f0       	breq	.+12     	; 0x32f8 <action_tapping_process+0x46>
    32ec:	3f 3f       	cpi	r19, 0xFF	; 255
    32ee:	11 f0       	breq	.+4      	; 0x32f4 <action_tapping_process+0x42>
    32f0:	80 e0       	ldi	r24, 0x00	; 0
    32f2:	03 c0       	rjmp	.+6      	; 0x32fa <action_tapping_process+0x48>
    32f4:	2f 3f       	cpi	r18, 0xFF	; 255
    32f6:	e1 f7       	brne	.-8      	; 0x32f0 <action_tapping_process+0x3e>
    32f8:	81 e0       	ldi	r24, 0x01	; 1
    32fa:	81 11       	cpse	r24, r1
    32fc:	47 c0       	rjmp	.+142    	; 0x338c <action_tapping_process+0xda>
            debug("processed: "); debug_record(record); debug("\n");
    32fe:	4f 81       	ldd	r20, Y+7	; 0x07
    3300:	58 85       	ldd	r21, Y+8	; 0x08
    3302:	69 85       	ldd	r22, Y+9	; 0x09
    3304:	7a 85       	ldd	r23, Y+10	; 0x0a
    3306:	8b 85       	ldd	r24, Y+11	; 0x0b
    3308:	9c 85       	ldd	r25, Y+12	; 0x0c
    330a:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <debug_record>
    330e:	3e c0       	rjmp	.+124    	; 0x338c <action_tapping_process+0xda>
    3310:	86 e0       	ldi	r24, 0x06	; 6
    3312:	fe 01       	movw	r30, r28
    3314:	37 96       	adiw	r30, 0x07	; 7
    3316:	de 01       	movw	r26, r28
    3318:	11 96       	adiw	r26, 0x01	; 1
    331a:	01 90       	ld	r0, Z+
    331c:	0d 92       	st	X+, r0
    331e:	8a 95       	dec	r24
    3320:	e1 f7       	brne	.-8      	; 0x331a <action_tapping_process+0x68>
    3322:	ff 81       	ldd	r31, Y+7	; 0x07
    3324:	e8 85       	ldd	r30, Y+8	; 0x08
    3326:	4a 85       	ldd	r20, Y+10	; 0x0a
    3328:	5b 85       	ldd	r21, Y+11	; 0x0b
    332a:	41 15       	cp	r20, r1
    332c:	51 05       	cpc	r21, r1
    332e:	31 f0       	breq	.+12     	; 0x333c <action_tapping_process+0x8a>
    3330:	ef 3f       	cpi	r30, 0xFF	; 255
    3332:	31 f4       	brne	.+12     	; 0x3340 <action_tapping_process+0x8e>
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	ff 3f       	cpi	r31, 0xFF	; 255
    3338:	19 f4       	brne	.+6      	; 0x3340 <action_tapping_process+0x8e>
    333a:	03 c0       	rjmp	.+6      	; 0x3342 <action_tapping_process+0x90>
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	01 c0       	rjmp	.+2      	; 0x3342 <action_tapping_process+0x90>
    3340:	80 e0       	ldi	r24, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    3342:	80 fd       	sbrc	r24, 0
    3344:	23 c0       	rjmp	.+70     	; 0x338c <action_tapping_process+0xda>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    3346:	20 91 6f 01 	lds	r18, 0x016F
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	c9 01       	movw	r24, r18
    334e:	01 96       	adiw	r24, 0x01	; 1
    3350:	87 70       	andi	r24, 0x07	; 7
    3352:	99 27       	eor	r25, r25
    3354:	60 91 6e 01 	lds	r22, 0x016E
    3358:	70 e0       	ldi	r23, 0x00	; 0
    335a:	86 17       	cp	r24, r22
    335c:	97 07       	cpc	r25, r23
    335e:	f1 f1       	breq	.+124    	; 0x33dc <action_tapping_process+0x12a>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    3360:	f9 83       	std	Y+1, r31	; 0x01
    3362:	ea 83       	std	Y+2, r30	; 0x02
    3364:	5d 83       	std	Y+5, r21	; 0x05
    3366:	4c 83       	std	Y+4, r20	; 0x04
    3368:	96 e0       	ldi	r25, 0x06	; 6
    336a:	92 9f       	mul	r25, r18
    336c:	d0 01       	movw	r26, r0
    336e:	93 9f       	mul	r25, r19
    3370:	b0 0d       	add	r27, r0
    3372:	11 24       	eor	r1, r1
    3374:	a0 59       	subi	r26, 0x90	; 144
    3376:	be 4f       	sbci	r27, 0xFE	; 254
    3378:	fe 01       	movw	r30, r28
    337a:	31 96       	adiw	r30, 0x01	; 1
    337c:	01 90       	ld	r0, Z+
    337e:	0d 92       	st	X+, r0
    3380:	9a 95       	dec	r25
    3382:	e1 f7       	brne	.-8      	; 0x337c <action_tapping_process+0xca>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    3384:	80 93 6f 01 	sts	0x016F, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    3388:	0e 94 d5 16 	call	0x2daa	; 0x2daa <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    338c:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    338e:	80 91 6e 01 	lds	r24, 0x016E
    3392:	90 91 6f 01 	lds	r25, 0x016F
    3396:	89 17       	cp	r24, r25
    3398:	79 f1       	breq	.+94     	; 0x33f8 <action_tapping_process+0x146>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    339a:	18 9f       	mul	r17, r24
    339c:	c0 01       	movw	r24, r0
    339e:	11 24       	eor	r1, r1
    33a0:	80 59       	subi	r24, 0x90	; 144
    33a2:	9e 4f       	sbci	r25, 0xFE	; 254
    33a4:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <process_tapping>
    33a8:	88 23       	and	r24, r24
    33aa:	31 f1       	breq	.+76     	; 0x33f8 <action_tapping_process+0x146>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    33ac:	e0 91 6e 01 	lds	r30, 0x016E
    33b0:	1e 9f       	mul	r17, r30
    33b2:	f0 01       	movw	r30, r0
    33b4:	11 24       	eor	r1, r1
    33b6:	e0 59       	subi	r30, 0x90	; 144
    33b8:	fe 4f       	sbci	r31, 0xFE	; 254
    33ba:	40 81       	ld	r20, Z
    33bc:	51 81       	ldd	r21, Z+1	; 0x01
    33be:	62 81       	ldd	r22, Z+2	; 0x02
    33c0:	73 81       	ldd	r23, Z+3	; 0x03
    33c2:	84 81       	ldd	r24, Z+4	; 0x04
    33c4:	95 81       	ldd	r25, Z+5	; 0x05
    33c6:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    33ca:	80 91 6e 01 	lds	r24, 0x016E
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	01 96       	adiw	r24, 0x01	; 1
    33d2:	87 70       	andi	r24, 0x07	; 7
    33d4:	99 27       	eor	r25, r25
    33d6:	80 93 6e 01 	sts	0x016E, r24
    33da:	d9 cf       	rjmp	.-78     	; 0x338e <action_tapping_process+0xdc>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    33dc:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    33e0:	10 92 6f 01 	sts	0x016F, r1
    waiting_buffer_tail = 0;
    33e4:	10 92 6e 01 	sts	0x016E, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    33e8:	e0 ea       	ldi	r30, 0xA0	; 160
    33ea:	f1 e0       	ldi	r31, 0x01	; 1
    33ec:	86 e0       	ldi	r24, 0x06	; 6
    33ee:	df 01       	movw	r26, r30
    33f0:	1d 92       	st	X+, r1
    33f2:	8a 95       	dec	r24
    33f4:	e9 f7       	brne	.-6      	; 0x33f0 <action_tapping_process+0x13e>
    33f6:	ca cf       	rjmp	.-108    	; 0x338c <action_tapping_process+0xda>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    33f8:	2c 96       	adiw	r28, 0x0c	; 12
    33fa:	0f b6       	in	r0, 0x3f	; 63
    33fc:	f8 94       	cli
    33fe:	de bf       	out	0x3e, r29	; 62
    3400:	0f be       	out	0x3f, r0	; 63
    3402:	cd bf       	out	0x3d, r28	; 61
    3404:	df 91       	pop	r29
    3406:	cf 91       	pop	r28
    3408:	1f 91       	pop	r17
    340a:	08 95       	ret

0000340c <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    340c:	df 92       	push	r13
    340e:	ef 92       	push	r14
    3410:	ff 92       	push	r15
    3412:	0f 93       	push	r16
    3414:	1f 93       	push	r17
    3416:	cf 93       	push	r28
    3418:	df 93       	push	r29
    341a:	fc 01       	movw	r30, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    341c:	00 97       	sbiw	r24, 0x00	; 0
    341e:	09 f4       	brne	.+2      	; 0x3422 <action_macro_play+0x16>
    3420:	8a c0       	rjmp	.+276    	; 0x3536 <action_macro_play+0x12a>
    3422:	e1 2c       	mov	r14, r1
    3424:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    3426:	dd 24       	eor	r13, r13
    3428:	d3 94       	inc	r13

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    342a:	ef 01       	movw	r28, r30
    342c:	21 96       	adiw	r28, 0x01	; 1
    342e:	84 91       	lpm	r24, Z
    3430:	85 37       	cpi	r24, 0x75	; 117
    3432:	09 f4       	brne	.+2      	; 0x3436 <action_macro_play+0x2a>
    3434:	61 c0       	rjmp	.+194    	; 0x34f8 <action_macro_play+0xec>
    3436:	58 f4       	brcc	.+22     	; 0x344e <action_macro_play+0x42>
    3438:	84 37       	cpi	r24, 0x74	; 116
    343a:	08 f0       	brcs	.+2      	; 0x343e <action_macro_play+0x32>
    343c:	4e c0       	rjmp	.+156    	; 0x34da <action_macro_play+0xce>
    343e:	84 30       	cpi	r24, 0x04	; 4
    3440:	08 f0       	brcs	.+2      	; 0x3444 <action_macro_play+0x38>
    3442:	6a c0       	rjmp	.+212    	; 0x3518 <action_macro_play+0x10c>
    3444:	81 30       	cpi	r24, 0x01	; 1
    3446:	d1 f0       	breq	.+52     	; 0x347c <action_macro_play+0x70>
    3448:	82 30       	cpi	r24, 0x02	; 2
    344a:	71 f1       	breq	.+92     	; 0x34a8 <action_macro_play+0x9c>
    344c:	74 c0       	rjmp	.+232    	; 0x3536 <action_macro_play+0x12a>
    344e:	88 37       	cpi	r24, 0x78	; 120
    3450:	09 f4       	brne	.+2      	; 0x3454 <action_macro_play+0x48>
    3452:	5d c0       	rjmp	.+186    	; 0x350e <action_macro_play+0x102>
    3454:	50 f4       	brcc	.+20     	; 0x346a <action_macro_play+0x5e>
    3456:	86 37       	cpi	r24, 0x76	; 118
    3458:	09 f4       	brne	.+2      	; 0x345c <action_macro_play+0x50>
    345a:	55 c0       	rjmp	.+170    	; 0x3506 <action_macro_play+0xfa>
    345c:	87 37       	cpi	r24, 0x77	; 119
    345e:	09 f0       	breq	.+2      	; 0x3462 <action_macro_play+0x56>
    3460:	6a c0       	rjmp	.+212    	; 0x3536 <action_macro_play+0x12a>
                break;
            case MOD_STORE:
                mod_storage = get_mods();
                break;
            case MOD_RESTORE:
                set_mods(mod_storage);
    3462:	8e 2d       	mov	r24, r14
    3464:	0e 94 89 1c 	call	0x3912	; 0x3912 <set_mods>
    3468:	54 c0       	rjmp	.+168    	; 0x3512 <action_macro_play+0x106>

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    346a:	9c e7       	ldi	r25, 0x7C	; 124
    346c:	98 0f       	add	r25, r24
    346e:	90 37       	cpi	r25, 0x70	; 112
    3470:	08 f0       	brcs	.+2      	; 0x3474 <action_macro_play+0x68>
    3472:	61 c0       	rjmp	.+194    	; 0x3536 <action_macro_play+0x12a>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    3474:	8f 77       	andi	r24, 0x7F	; 127
    3476:	0e 94 11 13 	call	0x2622	; 0x2622 <unregister_code>
                break;
    347a:	50 c0       	rjmp	.+160    	; 0x351c <action_macro_play+0x110>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    347c:	8f 01       	movw	r16, r30
    347e:	0e 5f       	subi	r16, 0xFE	; 254
    3480:	1f 4f       	sbci	r17, 0xFF	; 255
    3482:	fe 01       	movw	r30, r28
    3484:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3486:	90 e2       	ldi	r25, 0x20	; 32
    3488:	98 0f       	add	r25, r24
    348a:	98 30       	cpi	r25, 0x08	; 8
    348c:	50 f4       	brcc	.+20     	; 0x34a2 <action_macro_play+0x96>
                    add_weak_mods(MOD_BIT(macro));
    348e:	87 70       	andi	r24, 0x07	; 7
    3490:	fd 2d       	mov	r31, r13
    3492:	01 c0       	rjmp	.+2      	; 0x3496 <action_macro_play+0x8a>
    3494:	ff 0f       	add	r31, r31
    3496:	8a 95       	dec	r24
    3498:	ea f7       	brpl	.-6      	; 0x3494 <action_macro_play+0x88>
    349a:	8f 2f       	mov	r24, r31
    349c:	0e 94 8f 1c 	call	0x391e	; 0x391e <add_weak_mods>
    34a0:	15 c0       	rjmp	.+42     	; 0x34cc <action_macro_play+0xc0>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    34a2:	0e 94 3e 12 	call	0x247c	; 0x247c <register_code>
    34a6:	14 c0       	rjmp	.+40     	; 0x34d0 <action_macro_play+0xc4>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    34a8:	8f 01       	movw	r16, r30
    34aa:	0e 5f       	subi	r16, 0xFE	; 254
    34ac:	1f 4f       	sbci	r17, 0xFF	; 255
    34ae:	fe 01       	movw	r30, r28
    34b0:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    34b2:	90 e2       	ldi	r25, 0x20	; 32
    34b4:	98 0f       	add	r25, r24
    34b6:	98 30       	cpi	r25, 0x08	; 8
    34b8:	68 f4       	brcc	.+26     	; 0x34d4 <action_macro_play+0xc8>
                    del_weak_mods(MOD_BIT(macro));
    34ba:	87 70       	andi	r24, 0x07	; 7
    34bc:	fd 2d       	mov	r31, r13
    34be:	01 c0       	rjmp	.+2      	; 0x34c2 <action_macro_play+0xb6>
    34c0:	ff 0f       	add	r31, r31
    34c2:	8a 95       	dec	r24
    34c4:	ea f7       	brpl	.-6      	; 0x34c0 <action_macro_play+0xb4>
    34c6:	8f 2f       	mov	r24, r31
    34c8:	0e 94 95 1c 	call	0x392a	; 0x392a <del_weak_mods>
                    send_keyboard_report();
    34cc:	0e 94 b8 1c 	call	0x3970	; 0x3970 <send_keyboard_report>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    34d0:	e8 01       	movw	r28, r16
    34d2:	24 c0       	rjmp	.+72     	; 0x351c <action_macro_play+0x110>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                    send_keyboard_report();
                } else {
                    unregister_code(macro);
    34d4:	0e 94 11 13 	call	0x2622	; 0x2622 <unregister_code>
    34d8:	fb cf       	rjmp	.-10     	; 0x34d0 <action_macro_play+0xc4>
                }
                break;
            case WAIT:
                MACRO_READ();
    34da:	9f 01       	movw	r18, r30
    34dc:	2e 5f       	subi	r18, 0xFE	; 254
    34de:	3f 4f       	sbci	r19, 0xFF	; 255
    34e0:	fe 01       	movw	r30, r28
    34e2:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    34e4:	cc 23       	and	r28, r28
    34e6:	69 f0       	breq	.+26     	; 0x3502 <action_macro_play+0xf6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    34e8:	8f e9       	ldi	r24, 0x9F	; 159
    34ea:	9f e0       	ldi	r25, 0x0F	; 15
    34ec:	01 97       	sbiw	r24, 0x01	; 1
    34ee:	f1 f7       	brne	.-4      	; 0x34ec <action_macro_play+0xe0>
    34f0:	00 c0       	rjmp	.+0      	; 0x34f2 <action_macro_play+0xe6>
    34f2:	00 00       	nop
    34f4:	c1 50       	subi	r28, 0x01	; 1
    34f6:	f6 cf       	rjmp	.-20     	; 0x34e4 <action_macro_play+0xd8>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    34f8:	9f 01       	movw	r18, r30
    34fa:	2e 5f       	subi	r18, 0xFE	; 254
    34fc:	3f 4f       	sbci	r19, 0xFF	; 255
    34fe:	fe 01       	movw	r30, r28
    3500:	f4 90       	lpm	r15, Z
    3502:	e9 01       	movw	r28, r18
                dprintf("INTERVAL(%u)\n", interval);
                break;
    3504:	0b c0       	rjmp	.+22     	; 0x351c <action_macro_play+0x110>
            case MOD_STORE:
                mod_storage = get_mods();
    3506:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <get_mods>
    350a:	e8 2e       	mov	r14, r24
                break;
    350c:	07 c0       	rjmp	.+14     	; 0x351c <action_macro_play+0x110>
            case MOD_RESTORE:
                set_mods(mod_storage);
                send_keyboard_report();
                break;
            case MOD_CLEAR:
                clear_mods();
    350e:	0e 94 8c 1c 	call	0x3918	; 0x3918 <clear_mods>
                send_keyboard_report();
    3512:	0e 94 b8 1c 	call	0x3970	; 0x3970 <send_keyboard_report>
                break;
    3516:	02 c0       	rjmp	.+4      	; 0x351c <action_macro_play+0x110>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    3518:	0e 94 3e 12 	call	0x247c	; 0x247c <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    351c:	9f 2d       	mov	r25, r15
    351e:	99 23       	and	r25, r25
    3520:	41 f0       	breq	.+16     	; 0x3532 <action_macro_play+0x126>
    3522:	ef e9       	ldi	r30, 0x9F	; 159
    3524:	ff e0       	ldi	r31, 0x0F	; 15
    3526:	31 97       	sbiw	r30, 0x01	; 1
    3528:	f1 f7       	brne	.-4      	; 0x3526 <action_macro_play+0x11a>
    352a:	00 c0       	rjmp	.+0      	; 0x352c <action_macro_play+0x120>
    352c:	00 00       	nop
    352e:	91 50       	subi	r25, 0x01	; 1
    3530:	f6 cf       	rjmp	.-20     	; 0x351e <action_macro_play+0x112>
    3532:	fe 01       	movw	r30, r28
    3534:	7a cf       	rjmp	.-268    	; 0x342a <action_macro_play+0x1e>
    }
}
    3536:	df 91       	pop	r29
    3538:	cf 91       	pop	r28
    353a:	1f 91       	pop	r17
    353c:	0f 91       	pop	r16
    353e:	ff 90       	pop	r15
    3540:	ef 90       	pop	r14
    3542:	df 90       	pop	r13
    3544:	08 95       	ret

00003546 <default_layer_state_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3546:	60 93 aa 01 	sts	0x01AA, r22
    354a:	70 93 ab 01 	sts	0x01AB, r23
    354e:	80 93 ac 01 	sts	0x01AC, r24
    3552:	90 93 ad 01 	sts	0x01AD, r25
    hook_default_layer_change(default_layer_state);
    3556:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <hook_default_layer_change>
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    355a:	0c 94 7b 16 	jmp	0x2cf6	; 0x2cf6 <clear_keyboard_but_mods>

0000355e <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    355e:	60 93 a6 01 	sts	0x01A6, r22
    3562:	70 93 a7 01 	sts	0x01A7, r23
    3566:	80 93 a8 01 	sts	0x01A8, r24
    356a:	90 93 a9 01 	sts	0x01A9, r25
    hook_layer_change(layer_state);
    356e:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <hook_layer_change>
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3572:	0c 94 7b 16 	jmp	0x2cf6	; 0x2cf6 <clear_keyboard_but_mods>

00003576 <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    3576:	08 95       	ret

00003578 <default_layer_set>:
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}

void default_layer_set(uint32_t state)
{
    default_layer_state_set(state);
    3578:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <default_layer_state_set>

0000357c <default_layer_or>:
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    357c:	0f 93       	push	r16
    357e:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    3580:	00 91 aa 01 	lds	r16, 0x01AA
    3584:	10 91 ab 01 	lds	r17, 0x01AB
    3588:	20 91 ac 01 	lds	r18, 0x01AC
    358c:	30 91 ad 01 	lds	r19, 0x01AD
    3590:	60 2b       	or	r22, r16
    3592:	71 2b       	or	r23, r17
    3594:	82 2b       	or	r24, r18
    3596:	93 2b       	or	r25, r19
}
    3598:	1f 91       	pop	r17
    359a:	0f 91       	pop	r16
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
    359c:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <default_layer_state_set>

000035a0 <default_layer_and>:
}
void default_layer_and(uint32_t state)
{
    35a0:	0f 93       	push	r16
    35a2:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    35a4:	00 91 aa 01 	lds	r16, 0x01AA
    35a8:	10 91 ab 01 	lds	r17, 0x01AB
    35ac:	20 91 ac 01 	lds	r18, 0x01AC
    35b0:	30 91 ad 01 	lds	r19, 0x01AD
    35b4:	60 23       	and	r22, r16
    35b6:	71 23       	and	r23, r17
    35b8:	82 23       	and	r24, r18
    35ba:	93 23       	and	r25, r19
}
    35bc:	1f 91       	pop	r17
    35be:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
    35c0:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <default_layer_state_set>

000035c4 <default_layer_xor>:
}
void default_layer_xor(uint32_t state)
{
    35c4:	0f 93       	push	r16
    35c6:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    35c8:	00 91 aa 01 	lds	r16, 0x01AA
    35cc:	10 91 ab 01 	lds	r17, 0x01AB
    35d0:	20 91 ac 01 	lds	r18, 0x01AC
    35d4:	30 91 ad 01 	lds	r19, 0x01AD
    35d8:	60 27       	eor	r22, r16
    35da:	71 27       	eor	r23, r17
    35dc:	82 27       	eor	r24, r18
    35de:	93 27       	eor	r25, r19
}
    35e0:	1f 91       	pop	r17
    35e2:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
    35e4:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <default_layer_state_set>

000035e8 <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    35e8:	60 e0       	ldi	r22, 0x00	; 0
    35ea:	70 e0       	ldi	r23, 0x00	; 0
    35ec:	cb 01       	movw	r24, r22
    35ee:	0c 94 af 1a 	jmp	0x355e	; 0x355e <layer_state_set>

000035f2 <layer_move>:
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    35f2:	41 e0       	ldi	r20, 0x01	; 1
    35f4:	50 e0       	ldi	r21, 0x00	; 0
    35f6:	60 e0       	ldi	r22, 0x00	; 0
    35f8:	70 e0       	ldi	r23, 0x00	; 0
    35fa:	04 c0       	rjmp	.+8      	; 0x3604 <layer_move+0x12>
    35fc:	44 0f       	add	r20, r20
    35fe:	55 1f       	adc	r21, r21
    3600:	66 1f       	adc	r22, r22
    3602:	77 1f       	adc	r23, r23
    3604:	8a 95       	dec	r24
    3606:	d2 f7       	brpl	.-12     	; 0x35fc <layer_move+0xa>
    3608:	cb 01       	movw	r24, r22
    360a:	ba 01       	movw	r22, r20
    360c:	0c 94 af 1a 	jmp	0x355e	; 0x355e <layer_state_set>

00003610 <layer_on>:
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    3610:	41 e0       	ldi	r20, 0x01	; 1
    3612:	50 e0       	ldi	r21, 0x00	; 0
    3614:	60 e0       	ldi	r22, 0x00	; 0
    3616:	70 e0       	ldi	r23, 0x00	; 0
    3618:	04 c0       	rjmp	.+8      	; 0x3622 <layer_on+0x12>
    361a:	44 0f       	add	r20, r20
    361c:	55 1f       	adc	r21, r21
    361e:	66 1f       	adc	r22, r22
    3620:	77 1f       	adc	r23, r23
    3622:	8a 95       	dec	r24
    3624:	d2 f7       	brpl	.-12     	; 0x361a <layer_on+0xa>
    3626:	80 91 a6 01 	lds	r24, 0x01A6
    362a:	90 91 a7 01 	lds	r25, 0x01A7
    362e:	a0 91 a8 01 	lds	r26, 0x01A8
    3632:	b0 91 a9 01 	lds	r27, 0x01A9
    3636:	48 2b       	or	r20, r24
    3638:	59 2b       	or	r21, r25
    363a:	6a 2b       	or	r22, r26
    363c:	7b 2b       	or	r23, r27
    363e:	cb 01       	movw	r24, r22
    3640:	ba 01       	movw	r22, r20
    3642:	0c 94 af 1a 	jmp	0x355e	; 0x355e <layer_state_set>

00003646 <layer_off>:
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    3646:	41 e0       	ldi	r20, 0x01	; 1
    3648:	50 e0       	ldi	r21, 0x00	; 0
    364a:	60 e0       	ldi	r22, 0x00	; 0
    364c:	70 e0       	ldi	r23, 0x00	; 0
    364e:	04 c0       	rjmp	.+8      	; 0x3658 <layer_off+0x12>
    3650:	44 0f       	add	r20, r20
    3652:	55 1f       	adc	r21, r21
    3654:	66 1f       	adc	r22, r22
    3656:	77 1f       	adc	r23, r23
    3658:	8a 95       	dec	r24
    365a:	d2 f7       	brpl	.-12     	; 0x3650 <layer_off+0xa>
    365c:	40 95       	com	r20
    365e:	50 95       	com	r21
    3660:	60 95       	com	r22
    3662:	70 95       	com	r23
    3664:	80 91 a6 01 	lds	r24, 0x01A6
    3668:	90 91 a7 01 	lds	r25, 0x01A7
    366c:	a0 91 a8 01 	lds	r26, 0x01A8
    3670:	b0 91 a9 01 	lds	r27, 0x01A9
    3674:	48 23       	and	r20, r24
    3676:	59 23       	and	r21, r25
    3678:	6a 23       	and	r22, r26
    367a:	7b 23       	and	r23, r27
    367c:	cb 01       	movw	r24, r22
    367e:	ba 01       	movw	r22, r20
    3680:	0c 94 af 1a 	jmp	0x355e	; 0x355e <layer_state_set>

00003684 <layer_invert>:
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    3684:	41 e0       	ldi	r20, 0x01	; 1
    3686:	50 e0       	ldi	r21, 0x00	; 0
    3688:	60 e0       	ldi	r22, 0x00	; 0
    368a:	70 e0       	ldi	r23, 0x00	; 0
    368c:	04 c0       	rjmp	.+8      	; 0x3696 <layer_invert+0x12>
    368e:	44 0f       	add	r20, r20
    3690:	55 1f       	adc	r21, r21
    3692:	66 1f       	adc	r22, r22
    3694:	77 1f       	adc	r23, r23
    3696:	8a 95       	dec	r24
    3698:	d2 f7       	brpl	.-12     	; 0x368e <layer_invert+0xa>
    369a:	80 91 a6 01 	lds	r24, 0x01A6
    369e:	90 91 a7 01 	lds	r25, 0x01A7
    36a2:	a0 91 a8 01 	lds	r26, 0x01A8
    36a6:	b0 91 a9 01 	lds	r27, 0x01A9
    36aa:	48 27       	eor	r20, r24
    36ac:	59 27       	eor	r21, r25
    36ae:	6a 27       	eor	r22, r26
    36b0:	7b 27       	eor	r23, r27
    36b2:	cb 01       	movw	r24, r22
    36b4:	ba 01       	movw	r22, r20
    36b6:	0c 94 af 1a 	jmp	0x355e	; 0x355e <layer_state_set>

000036ba <layer_or>:
}

void layer_or(uint32_t state)
{
    36ba:	0f 93       	push	r16
    36bc:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    36be:	00 91 a6 01 	lds	r16, 0x01A6
    36c2:	10 91 a7 01 	lds	r17, 0x01A7
    36c6:	20 91 a8 01 	lds	r18, 0x01A8
    36ca:	30 91 a9 01 	lds	r19, 0x01A9
    36ce:	60 2b       	or	r22, r16
    36d0:	71 2b       	or	r23, r17
    36d2:	82 2b       	or	r24, r18
    36d4:	93 2b       	or	r25, r19
}
    36d6:	1f 91       	pop	r17
    36d8:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
    36da:	0c 94 af 1a 	jmp	0x355e	; 0x355e <layer_state_set>

000036de <layer_and>:
}
void layer_and(uint32_t state)
{
    36de:	0f 93       	push	r16
    36e0:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    36e2:	00 91 a6 01 	lds	r16, 0x01A6
    36e6:	10 91 a7 01 	lds	r17, 0x01A7
    36ea:	20 91 a8 01 	lds	r18, 0x01A8
    36ee:	30 91 a9 01 	lds	r19, 0x01A9
    36f2:	60 23       	and	r22, r16
    36f4:	71 23       	and	r23, r17
    36f6:	82 23       	and	r24, r18
    36f8:	93 23       	and	r25, r19
}
    36fa:	1f 91       	pop	r17
    36fc:	0f 91       	pop	r16
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
    36fe:	0c 94 af 1a 	jmp	0x355e	; 0x355e <layer_state_set>

00003702 <layer_xor>:
}
void layer_xor(uint32_t state)
{
    3702:	0f 93       	push	r16
    3704:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    3706:	00 91 a6 01 	lds	r16, 0x01A6
    370a:	10 91 a7 01 	lds	r17, 0x01A7
    370e:	20 91 a8 01 	lds	r18, 0x01A8
    3712:	30 91 a9 01 	lds	r19, 0x01A9
    3716:	60 27       	eor	r22, r16
    3718:	71 27       	eor	r23, r17
    371a:	82 27       	eor	r24, r18
    371c:	93 27       	eor	r25, r19
}
    371e:	1f 91       	pop	r17
    3720:	0f 91       	pop	r16
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
    3722:	0c 94 af 1a 	jmp	0x355e	; 0x355e <layer_state_set>

00003726 <layer_debug>:
}

void layer_debug(void)
{
    3726:	08 95       	ret

00003728 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    3728:	cf 92       	push	r12
    372a:	df 92       	push	r13
    372c:	ef 92       	push	r14
    372e:	ff 92       	push	r15
    3730:	0f 93       	push	r16
    3732:	1f 93       	push	r17
    3734:	cf 93       	push	r28
    3736:	df 93       	push	r29
    3738:	ec 01       	movw	r28, r24
    action_t action = { .code = ACTION_TRANSPARENT };

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    373a:	c0 90 aa 01 	lds	r12, 0x01AA
    373e:	d0 90 ab 01 	lds	r13, 0x01AB
    3742:	e0 90 ac 01 	lds	r14, 0x01AC
    3746:	f0 90 ad 01 	lds	r15, 0x01AD
    374a:	80 91 a6 01 	lds	r24, 0x01A6
    374e:	90 91 a7 01 	lds	r25, 0x01A7
    3752:	a0 91 a8 01 	lds	r26, 0x01A8
    3756:	b0 91 a9 01 	lds	r27, 0x01A9
    375a:	c8 2a       	or	r12, r24
    375c:	d9 2a       	or	r13, r25
    375e:	ea 2a       	or	r14, r26
    3760:	fb 2a       	or	r15, r27
    3762:	0f e1       	ldi	r16, 0x1F	; 31
    3764:	10 e0       	ldi	r17, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    3766:	b7 01       	movw	r22, r14
    3768:	a6 01       	movw	r20, r12
    376a:	00 2e       	mov	r0, r16
    376c:	04 c0       	rjmp	.+8      	; 0x3776 <layer_switch_get_action+0x4e>
    376e:	76 95       	lsr	r23
    3770:	67 95       	ror	r22
    3772:	57 95       	ror	r21
    3774:	47 95       	ror	r20
    3776:	0a 94       	dec	r0
    3778:	d2 f7       	brpl	.-12     	; 0x376e <layer_switch_get_action+0x46>
    377a:	40 ff       	sbrs	r20, 0
    377c:	07 c0       	rjmp	.+14     	; 0x378c <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    377e:	be 01       	movw	r22, r28
    3780:	80 2f       	mov	r24, r16
    3782:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    3786:	81 30       	cpi	r24, 0x01	; 1
    3788:	91 05       	cpc	r25, r1
    378a:	39 f4       	brne	.+14     	; 0x379a <layer_switch_get_action+0x72>
    378c:	01 50       	subi	r16, 0x01	; 1
    378e:	11 09       	sbc	r17, r1
    3790:	50 f7       	brcc	.-44     	; 0x3766 <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    3792:	be 01       	movw	r22, r28
    3794:	80 e0       	ldi	r24, 0x00	; 0
    3796:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    379a:	df 91       	pop	r29
    379c:	cf 91       	pop	r28
    379e:	1f 91       	pop	r17
    37a0:	0f 91       	pop	r16
    37a2:	ff 90       	pop	r15
    37a4:	ef 90       	pop	r14
    37a6:	df 90       	pop	r13
    37a8:	cf 90       	pop	r12
    37aa:	08 95       	ret

000037ac <add_key>:

/* key */
void add_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    37ac:	90 91 0b 01 	lds	r25, 0x010B
    37b0:	99 23       	and	r25, r25
    37b2:	61 f1       	breq	.+88     	; 0x380c <add_key+0x60>
    37b4:	90 91 0c 01 	lds	r25, 0x010C
    37b8:	99 23       	and	r25, r25
    37ba:	41 f1       	breq	.+80     	; 0x380c <add_key+0x60>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    37bc:	98 2f       	mov	r25, r24
    37be:	96 95       	lsr	r25
    37c0:	96 95       	lsr	r25
    37c2:	96 95       	lsr	r25
    37c4:	9f 30       	cpi	r25, 0x0F	; 15
    37c6:	88 f4       	brcc	.+34     	; 0x37ea <add_key+0x3e>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    37c8:	e0 91 0d 01 	lds	r30, 0x010D
    37cc:	f0 91 0e 01 	lds	r31, 0x010E
    37d0:	e9 0f       	add	r30, r25
    37d2:	f1 1d       	adc	r31, r1
    37d4:	87 70       	andi	r24, 0x07	; 7
    37d6:	21 e0       	ldi	r18, 0x01	; 1
    37d8:	30 e0       	ldi	r19, 0x00	; 0
    37da:	01 c0       	rjmp	.+2      	; 0x37de <add_key+0x32>
    37dc:	22 0f       	add	r18, r18
    37de:	8a 95       	dec	r24
    37e0:	ea f7       	brpl	.-6      	; 0x37dc <add_key+0x30>
    37e2:	81 81       	ldd	r24, Z+1	; 0x01
    37e4:	82 2b       	or	r24, r18
    37e6:	81 83       	std	Z+1, r24	; 0x01
    37e8:	08 95       	ret
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    37ea:	90 91 c1 01 	lds	r25, 0x01C1
    37ee:	90 ff       	sbrs	r25, 0
    37f0:	2d c0       	rjmp	.+90     	; 0x384c <add_key+0xa0>
    37f2:	1f 92       	push	r1
    37f4:	8f 93       	push	r24
    37f6:	8f e7       	ldi	r24, 0x7F	; 127
    37f8:	94 e0       	ldi	r25, 0x04	; 4
    37fa:	9f 93       	push	r25
    37fc:	8f 93       	push	r24
    37fe:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    3802:	0f 90       	pop	r0
    3804:	0f 90       	pop	r0
    3806:	0f 90       	pop	r0
    3808:	0f 90       	pop	r0
    380a:	08 95       	ret
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    380c:	40 91 0d 01 	lds	r20, 0x010D
    3810:	50 91 0e 01 	lds	r21, 0x010E
    3814:	20 e0       	ldi	r18, 0x00	; 0
    3816:	30 e0       	ldi	r19, 0x00	; 0
    3818:	9f ef       	ldi	r25, 0xFF	; 255
    381a:	fa 01       	movw	r30, r20
    381c:	e2 0f       	add	r30, r18
    381e:	f3 1f       	adc	r31, r19
    3820:	62 81       	ldd	r22, Z+2	; 0x02
    3822:	68 17       	cp	r22, r24
    3824:	99 f0       	breq	.+38     	; 0x384c <add_key+0xa0>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    3826:	9f 3f       	cpi	r25, 0xFF	; 255
    3828:	19 f4       	brne	.+6      	; 0x3830 <add_key+0x84>
    382a:	61 11       	cpse	r22, r1
    382c:	01 c0       	rjmp	.+2      	; 0x3830 <add_key+0x84>
    382e:	92 2f       	mov	r25, r18
    3830:	2f 5f       	subi	r18, 0xFF	; 255
    3832:	3f 4f       	sbci	r19, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    3834:	2e 30       	cpi	r18, 0x0E	; 14
    3836:	31 05       	cpc	r19, r1
    3838:	81 f7       	brne	.-32     	; 0x381a <add_key+0x6e>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    383a:	9f 3f       	cpi	r25, 0xFF	; 255
    383c:	39 f0       	breq	.+14     	; 0x384c <add_key+0xa0>
            keyboard_report->keys[empty] = code;
    383e:	fa 01       	movw	r30, r20
    3840:	e9 0f       	add	r30, r25
    3842:	f1 1d       	adc	r31, r1
    3844:	97 fd       	sbrc	r25, 7
    3846:	fa 95       	dec	r31
    3848:	82 83       	std	Z+2, r24	; 0x02
    384a:	08 95       	ret
    384c:	08 95       	ret

0000384e <del_key>:
}

void del_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    384e:	90 91 0b 01 	lds	r25, 0x010B
    3852:	99 23       	and	r25, r25
    3854:	69 f1       	breq	.+90     	; 0x38b0 <del_key+0x62>
    3856:	90 91 0c 01 	lds	r25, 0x010C
    385a:	99 23       	and	r25, r25
    385c:	49 f1       	breq	.+82     	; 0x38b0 <del_key+0x62>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    385e:	98 2f       	mov	r25, r24
    3860:	96 95       	lsr	r25
    3862:	96 95       	lsr	r25
    3864:	96 95       	lsr	r25
    3866:	9f 30       	cpi	r25, 0x0F	; 15
    3868:	90 f4       	brcc	.+36     	; 0x388e <del_key+0x40>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    386a:	e0 91 0d 01 	lds	r30, 0x010D
    386e:	f0 91 0e 01 	lds	r31, 0x010E
    3872:	e9 0f       	add	r30, r25
    3874:	f1 1d       	adc	r31, r1
    3876:	87 70       	andi	r24, 0x07	; 7
    3878:	21 e0       	ldi	r18, 0x01	; 1
    387a:	30 e0       	ldi	r19, 0x00	; 0
    387c:	01 c0       	rjmp	.+2      	; 0x3880 <del_key+0x32>
    387e:	22 0f       	add	r18, r18
    3880:	8a 95       	dec	r24
    3882:	ea f7       	brpl	.-6      	; 0x387e <del_key+0x30>
    3884:	20 95       	com	r18
    3886:	81 81       	ldd	r24, Z+1	; 0x01
    3888:	28 23       	and	r18, r24
    388a:	21 83       	std	Z+1, r18	; 0x01
    388c:	08 95       	ret
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    388e:	90 91 c1 01 	lds	r25, 0x01C1
    3892:	90 ff       	sbrs	r25, 0
    3894:	1f c0       	rjmp	.+62     	; 0x38d4 <del_key+0x86>
    3896:	1f 92       	push	r1
    3898:	8f 93       	push	r24
    389a:	81 e6       	ldi	r24, 0x61	; 97
    389c:	94 e0       	ldi	r25, 0x04	; 4
    389e:	9f 93       	push	r25
    38a0:	8f 93       	push	r24
    38a2:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    38a6:	0f 90       	pop	r0
    38a8:	0f 90       	pop	r0
    38aa:	0f 90       	pop	r0
    38ac:	0f 90       	pop	r0
    38ae:	08 95       	ret
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    38b0:	40 91 0d 01 	lds	r20, 0x010D
    38b4:	50 91 0e 01 	lds	r21, 0x010E
    38b8:	20 e0       	ldi	r18, 0x00	; 0
    38ba:	30 e0       	ldi	r19, 0x00	; 0
    38bc:	fa 01       	movw	r30, r20
    38be:	e2 0f       	add	r30, r18
    38c0:	f3 1f       	adc	r31, r19
    38c2:	92 81       	ldd	r25, Z+2	; 0x02
    38c4:	98 13       	cpse	r25, r24
    38c6:	01 c0       	rjmp	.+2      	; 0x38ca <del_key+0x7c>
            keyboard_report->keys[i] = 0;
    38c8:	12 82       	std	Z+2, r1	; 0x02
    38ca:	2f 5f       	subi	r18, 0xFF	; 255
    38cc:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    38ce:	2e 30       	cpi	r18, 0x0E	; 14
    38d0:	31 05       	cpc	r19, r1
    38d2:	a1 f7       	brne	.-24     	; 0x38bc <del_key+0x6e>
    38d4:	08 95       	ret

000038d6 <clear_keys>:
#endif
    del_key_byte(key);
}

void clear_keys(void)
{
    38d6:	81 e0       	ldi	r24, 0x01	; 1
    38d8:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    38da:	e0 91 0d 01 	lds	r30, 0x010D
    38de:	f0 91 0e 01 	lds	r31, 0x010E
    38e2:	e8 0f       	add	r30, r24
    38e4:	f9 1f       	adc	r31, r25
    38e6:	10 82       	st	Z, r1
    38e8:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    38ea:	80 31       	cpi	r24, 0x10	; 16
    38ec:	91 05       	cpc	r25, r1
    38ee:	a9 f7       	brne	.-22     	; 0x38da <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    38f0:	08 95       	ret

000038f2 <get_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
    38f2:	80 91 c0 01 	lds	r24, 0x01C0
    38f6:	08 95       	ret

000038f8 <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    38f8:	90 91 c0 01 	lds	r25, 0x01C0
    38fc:	98 2b       	or	r25, r24
    38fe:	90 93 c0 01 	sts	0x01C0, r25
    3902:	08 95       	ret

00003904 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    3904:	80 95       	com	r24
    3906:	90 91 c0 01 	lds	r25, 0x01C0
    390a:	98 23       	and	r25, r24
    390c:	90 93 c0 01 	sts	0x01C0, r25
    3910:	08 95       	ret

00003912 <set_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
    3912:	80 93 c0 01 	sts	0x01C0, r24
    3916:	08 95       	ret

00003918 <clear_mods>:
void clear_mods(void) { real_mods = 0; }
    3918:	10 92 c0 01 	sts	0x01C0, r1
    391c:	08 95       	ret

0000391e <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    391e:	90 91 bf 01 	lds	r25, 0x01BF
    3922:	98 2b       	or	r25, r24
    3924:	90 93 bf 01 	sts	0x01BF, r25
    3928:	08 95       	ret

0000392a <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    392a:	80 95       	com	r24
    392c:	90 91 bf 01 	lds	r25, 0x01BF
    3930:	98 23       	and	r25, r24
    3932:	90 93 bf 01 	sts	0x01BF, r25
    3936:	08 95       	ret

00003938 <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    3938:	10 92 bf 01 	sts	0x01BF, r1
    393c:	08 95       	ret

0000393e <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    393e:	80 93 ae 01 	sts	0x01AE, r24
    3942:	08 95       	ret

00003944 <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3944:	10 92 ae 01 	sts	0x01AE, r1
    3948:	08 95       	ret

0000394a <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    394a:	40 91 0d 01 	lds	r20, 0x010D
    394e:	50 91 0e 01 	lds	r21, 0x010E
    3952:	20 e0       	ldi	r18, 0x00	; 0
    3954:	30 e0       	ldi	r19, 0x00	; 0
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    3956:	80 e0       	ldi	r24, 0x00	; 0
    3958:	fa 01       	movw	r30, r20
    395a:	e2 0f       	add	r30, r18
    395c:	f3 1f       	adc	r31, r19
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    395e:	91 81       	ldd	r25, Z+1	; 0x01
    3960:	91 11       	cpse	r25, r1
            cnt++;
    3962:	8f 5f       	subi	r24, 0xFF	; 255
    3964:	2f 5f       	subi	r18, 0xFF	; 255
    3966:	3f 4f       	sbci	r19, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3968:	2f 30       	cpi	r18, 0x0F	; 15
    396a:	31 05       	cpc	r19, r1
    396c:	a9 f7       	brne	.-22     	; 0x3958 <has_anykey+0xe>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    396e:	08 95       	ret

00003970 <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    3970:	e0 91 0d 01 	lds	r30, 0x010D
    3974:	f0 91 0e 01 	lds	r31, 0x010E
    3978:	80 91 c0 01 	lds	r24, 0x01C0
    397c:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    397e:	e0 91 0d 01 	lds	r30, 0x010D
    3982:	f0 91 0e 01 	lds	r31, 0x010E
    3986:	80 81       	ld	r24, Z
    3988:	90 91 bf 01 	lds	r25, 0x01BF
    398c:	89 2b       	or	r24, r25
    398e:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    3990:	90 91 ae 01 	lds	r25, 0x01AE
    3994:	99 23       	and	r25, r25
    3996:	61 f0       	breq	.+24     	; 0x39b0 <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3998:	e0 91 0d 01 	lds	r30, 0x010D
    399c:	f0 91 0e 01 	lds	r31, 0x010E
    39a0:	80 81       	ld	r24, Z
    39a2:	89 2b       	or	r24, r25
    39a4:	80 83       	st	Z, r24
        if (has_anykey()) {
    39a6:	0e 94 a5 1c 	call	0x394a	; 0x394a <has_anykey>
    39aa:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    39ac:	10 92 ae 01 	sts	0x01AE, r1
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    39b0:	80 91 0d 01 	lds	r24, 0x010D
    39b4:	90 91 0e 01 	lds	r25, 0x010E
    39b8:	0c 94 a4 10 	jmp	0x2148	; 0x2148 <host_keyboard_send>

000039bc <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    39bc:	90 93 39 01 	sts	0x0139, r25
    39c0:	80 93 38 01 	sts	0x0138, r24
    39c4:	08 95       	ret

000039c6 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    39c6:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    39c8:	98 2f       	mov	r25, r24
    39ca:	9c 7c       	andi	r25, 0xCC	; 204
    39cc:	96 95       	lsr	r25
    39ce:	96 95       	lsr	r25
    39d0:	83 73       	andi	r24, 0x33	; 51
    39d2:	44 e0       	ldi	r20, 0x04	; 4
    39d4:	84 9f       	mul	r24, r20
    39d6:	90 01       	movw	r18, r0
    39d8:	11 24       	eor	r1, r1
    39da:	92 2b       	or	r25, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    39dc:	89 2f       	mov	r24, r25
    39de:	8a 7a       	andi	r24, 0xAA	; 170
    39e0:	86 95       	lsr	r24
    39e2:	95 75       	andi	r25, 0x55	; 85
    39e4:	99 0f       	add	r25, r25
    return bits;
}
    39e6:	89 2b       	or	r24, r25
    39e8:	08 95       	ret

000039ea <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    39ea:	1f 93       	push	r17
    39ec:	cf 93       	push	r28
    39ee:	df 93       	push	r29
    39f0:	1f 92       	push	r1
    39f2:	cd b7       	in	r28, 0x3d	; 61
    39f4:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    39f6:	99 83       	std	Y+1, r25	; 0x01
    39f8:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <bitrev>
    39fc:	18 2f       	mov	r17, r24
    39fe:	99 81       	ldd	r25, Y+1	; 0x01
    3a00:	89 2f       	mov	r24, r25
    3a02:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <bitrev>
    3a06:	21 2f       	mov	r18, r17
    3a08:	30 e0       	ldi	r19, 0x00	; 0
    3a0a:	32 2f       	mov	r19, r18
    3a0c:	22 27       	eor	r18, r18
    return bits;
}
    3a0e:	a9 01       	movw	r20, r18
    3a10:	48 2b       	or	r20, r24
    3a12:	ca 01       	movw	r24, r20
    3a14:	0f 90       	pop	r0
    3a16:	df 91       	pop	r29
    3a18:	cf 91       	pop	r28
    3a1a:	1f 91       	pop	r17
    3a1c:	08 95       	ret

00003a1e <hook_keyboard_loop>:
/* -------------------------------------------------
 * Definitions of default hooks
 * ------------------------------------------------- */

__attribute__((weak))
void hook_keyboard_loop(void) {}
    3a1e:	08 95       	ret

00003a20 <hook_matrix_change>:

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    3a20:	cf 93       	push	r28
    3a22:	df 93       	push	r29
    3a24:	00 d0       	rcall	.+0      	; 0x3a26 <hook_matrix_change+0x6>
    3a26:	00 d0       	rcall	.+0      	; 0x3a28 <hook_matrix_change+0x8>
    3a28:	1f 92       	push	r1
    3a2a:	cd b7       	in	r28, 0x3d	; 61
    3a2c:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    3a2e:	0f 90       	pop	r0
    3a30:	0f 90       	pop	r0
    3a32:	0f 90       	pop	r0
    3a34:	0f 90       	pop	r0
    3a36:	0f 90       	pop	r0
    3a38:	df 91       	pop	r29
    3a3a:	cf 91       	pop	r28
    3a3c:	08 95       	ret

00003a3e <hook_default_layer_change>:

__attribute__((weak))
void hook_default_layer_change(uint32_t default_layer_state) {
    3a3e:	08 95       	ret

00003a40 <hook_layer_change>:
    (void)default_layer_state;
}

__attribute__((weak))
void hook_layer_change(uint32_t layer_state) {
    3a40:	08 95       	ret

00003a42 <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    3a42:	0c 94 fa 11 	jmp	0x23f4	; 0x23f4 <keyboard_set_leds>

00003a46 <hook_bootmagic>:
}

__attribute__((weak))
void hook_bootmagic(void) {}
    3a46:	08 95       	ret

00003a48 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3a48:	80 91 d6 01 	lds	r24, 0x01D6
    3a4c:	84 30       	cpi	r24, 0x04	; 4
    3a4e:	09 f1       	breq	.+66     	; 0x3a92 <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    3a50:	10 92 c2 01 	sts	0x01C2, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3a54:	20 e4       	ldi	r18, 0x40	; 64
    3a56:	88 e1       	ldi	r24, 0x18	; 24
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	0f b6       	in	r0, 0x3f	; 63
    3a5c:	f8 94       	cli
    3a5e:	a8 95       	wdr
    3a60:	80 93 60 00 	sts	0x0060, r24
    3a64:	0f be       	out	0x3f, r0	; 63
    3a66:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3a6a:	83 b7       	in	r24, 0x33	; 51
    3a6c:	81 7f       	andi	r24, 0xF1	; 241
    3a6e:	84 60       	ori	r24, 0x04	; 4
    3a70:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3a72:	83 b7       	in	r24, 0x33	; 51
    3a74:	81 60       	ori	r24, 0x01	; 1
    3a76:	83 bf       	out	0x33, r24	; 51
    sei();
    3a78:	78 94       	sei
    sleep_cpu();
    3a7a:	88 95       	sleep
    sleep_disable();
    3a7c:	83 b7       	in	r24, 0x33	; 51
    3a7e:	8e 7f       	andi	r24, 0xFE	; 254
    3a80:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    3a82:	88 e1       	ldi	r24, 0x18	; 24
    3a84:	0f b6       	in	r0, 0x3f	; 63
    3a86:	f8 94       	cli
    3a88:	80 93 60 00 	sts	0x0060, r24
    3a8c:	10 92 60 00 	sts	0x0060, r1
    3a90:	0f be       	out	0x3f, r0	; 63
    3a92:	08 95       	ret

00003a94 <matrix_power_up>:
void suspend_power_down(void)
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
    3a94:	08 95       	ret

00003a96 <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    3a96:	08 95       	ret

00003a98 <suspend_wakeup_condition>:
bool suspend_wakeup_condition(void)
{
    3a98:	cf 93       	push	r28
    matrix_power_up();
    3a9a:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <matrix_power_up>
    matrix_scan();
    3a9e:	0e 94 79 07 	call	0xef2	; 0xef2 <matrix_scan>
    matrix_power_down();
    3aa2:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3aa6:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3aa8:	8c 2f       	mov	r24, r28
    3aaa:	0e 94 94 08 	call	0x1128	; 0x1128 <matrix_get_row>
    3aae:	89 2b       	or	r24, r25
    3ab0:	29 f4       	brne	.+10     	; 0x3abc <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3ab2:	cf 5f       	subi	r28, 0xFF	; 255
    3ab4:	c4 30       	cpi	r28, 0x04	; 4
    3ab6:	c1 f7       	brne	.-16     	; 0x3aa8 <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    3ab8:	80 e0       	ldi	r24, 0x00	; 0
    3aba:	01 c0       	rjmp	.+2      	; 0x3abe <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    3abc:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    3abe:	cf 91       	pop	r28
    3ac0:	08 95       	ret

00003ac2 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    3ac2:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <clear_keyboard>

00003ac6 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3ac6:	1f 92       	push	r1
    3ac8:	0f 92       	push	r0
    3aca:	0f b6       	in	r0, 0x3f	; 63
    3acc:	0f 92       	push	r0
    3ace:	11 24       	eor	r1, r1
    3ad0:	8f 93       	push	r24
    3ad2:	9f 93       	push	r25
    3ad4:	af 93       	push	r26
    3ad6:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3ad8:	80 91 c2 01 	lds	r24, 0x01C2
    3adc:	81 11       	cpse	r24, r1
    3ade:	13 c0       	rjmp	.+38     	; 0x3b06 <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3ae0:	80 91 c3 01 	lds	r24, 0x01C3
    3ae4:	90 91 c4 01 	lds	r25, 0x01C4
    3ae8:	a0 91 c5 01 	lds	r26, 0x01C5
    3aec:	b0 91 c6 01 	lds	r27, 0x01C6
    3af0:	41 96       	adiw	r24, 0x11	; 17
    3af2:	a1 1d       	adc	r26, r1
    3af4:	b1 1d       	adc	r27, r1
    3af6:	80 93 c3 01 	sts	0x01C3, r24
    3afa:	90 93 c4 01 	sts	0x01C4, r25
    3afe:	a0 93 c5 01 	sts	0x01C5, r26
    3b02:	b0 93 c6 01 	sts	0x01C6, r27
            break;
        default:
            ;
    }
}
    3b06:	bf 91       	pop	r27
    3b08:	af 91       	pop	r26
    3b0a:	9f 91       	pop	r25
    3b0c:	8f 91       	pop	r24
    3b0e:	0f 90       	pop	r0
    3b10:	0f be       	out	0x3f, r0	; 63
    3b12:	0f 90       	pop	r0
    3b14:	1f 90       	pop	r1
    3b16:	18 95       	reti

00003b18 <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    3b18:	82 e0       	ldi	r24, 0x02	; 2
    3b1a:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3b1c:	93 e0       	ldi	r25, 0x03	; 3
    3b1e:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    3b20:	9a ef       	ldi	r25, 0xFA	; 250
    3b22:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    3b24:	80 93 6e 00 	sts	0x006E, r24
    3b28:	08 95       	ret

00003b2a <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3b2a:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3b2c:	f8 94       	cli
    t = timer_count;
    3b2e:	80 91 c3 01 	lds	r24, 0x01C3
    3b32:	90 91 c4 01 	lds	r25, 0x01C4
    3b36:	a0 91 c5 01 	lds	r26, 0x01C5
    3b3a:	b0 91 c6 01 	lds	r27, 0x01C6
    SREG = sreg;
    3b3e:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    3b40:	08 95       	ret

00003b42 <timer_read32>:
inline
uint32_t timer_read32(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3b42:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3b44:	f8 94       	cli
    t = timer_count;
    3b46:	60 91 c3 01 	lds	r22, 0x01C3
    3b4a:	70 91 c4 01 	lds	r23, 0x01C4
    3b4e:	80 91 c5 01 	lds	r24, 0x01C5
    3b52:	90 91 c6 01 	lds	r25, 0x01C6
    SREG = sreg;
    3b56:	2f bf       	out	0x3f, r18	; 63

    return t;
}
    3b58:	08 95       	ret

00003b5a <timer_elapsed>:

inline
uint16_t timer_elapsed(uint16_t last)
{
    3b5a:	cf 92       	push	r12
    3b5c:	df 92       	push	r13
    3b5e:	ef 92       	push	r14
    3b60:	ff 92       	push	r15
    3b62:	0f 93       	push	r16
    3b64:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    3b66:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3b68:	f8 94       	cli
    t = timer_count;
    3b6a:	40 91 c3 01 	lds	r20, 0x01C3
    3b6e:	50 91 c4 01 	lds	r21, 0x01C4
    3b72:	60 91 c5 01 	lds	r22, 0x01C5
    3b76:	70 91 c6 01 	lds	r23, 0x01C6
    SREG = sreg;
    3b7a:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    3b7c:	6a 01       	movw	r12, r20
    3b7e:	7b 01       	movw	r14, r22
    3b80:	ee 24       	eor	r14, r14
    3b82:	ff 24       	eor	r15, r15
    3b84:	8c 01       	movw	r16, r24
    3b86:	20 e0       	ldi	r18, 0x00	; 0
    3b88:	30 e0       	ldi	r19, 0x00	; 0
    3b8a:	c0 16       	cp	r12, r16
    3b8c:	d1 06       	cpc	r13, r17
    3b8e:	e2 06       	cpc	r14, r18
    3b90:	f3 06       	cpc	r15, r19
    3b92:	10 f4       	brcc	.+4      	; 0x3b98 <timer_elapsed+0x3e>
    3b94:	41 50       	subi	r20, 0x01	; 1
    3b96:	51 09       	sbc	r21, r1
    3b98:	48 1b       	sub	r20, r24
    3b9a:	59 0b       	sbc	r21, r25
}
    3b9c:	ca 01       	movw	r24, r20
    3b9e:	1f 91       	pop	r17
    3ba0:	0f 91       	pop	r16
    3ba2:	ff 90       	pop	r15
    3ba4:	ef 90       	pop	r14
    3ba6:	df 90       	pop	r13
    3ba8:	cf 90       	pop	r12
    3baa:	08 95       	ret

00003bac <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3bac:	1f 92       	push	r1
    3bae:	0f 92       	push	r0
    3bb0:	0f b6       	in	r0, 0x3f	; 63
    3bb2:	0f 92       	push	r0
    3bb4:	11 24       	eor	r1, r1
    3bb6:	8f 93       	push	r24
    3bb8:	9f 93       	push	r25
    3bba:	af 93       	push	r26
    3bbc:	bf 93       	push	r27
    timer_count++;
    3bbe:	80 91 c3 01 	lds	r24, 0x01C3
    3bc2:	90 91 c4 01 	lds	r25, 0x01C4
    3bc6:	a0 91 c5 01 	lds	r26, 0x01C5
    3bca:	b0 91 c6 01 	lds	r27, 0x01C6
    3bce:	01 96       	adiw	r24, 0x01	; 1
    3bd0:	a1 1d       	adc	r26, r1
    3bd2:	b1 1d       	adc	r27, r1
    3bd4:	80 93 c3 01 	sts	0x01C3, r24
    3bd8:	90 93 c4 01 	sts	0x01C4, r25
    3bdc:	a0 93 c5 01 	sts	0x01C5, r26
    3be0:	b0 93 c6 01 	sts	0x01C6, r27
}
    3be4:	bf 91       	pop	r27
    3be6:	af 91       	pop	r26
    3be8:	9f 91       	pop	r25
    3bea:	8f 91       	pop	r24
    3bec:	0f 90       	pop	r0
    3bee:	0f be       	out	0x3f, r0	; 63
    3bf0:	0f 90       	pop	r0
    3bf2:	1f 90       	pop	r1
    3bf4:	18 95       	reti

00003bf6 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    3bf6:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <USB_Disable>
    cli();
    3bfa:	f8 94       	cli
    3bfc:	2f ef       	ldi	r18, 0xFF	; 255
    3bfe:	87 ea       	ldi	r24, 0xA7	; 167
    3c00:	91 e6       	ldi	r25, 0x61	; 97
    3c02:	21 50       	subi	r18, 0x01	; 1
    3c04:	80 40       	sbci	r24, 0x00	; 0
    3c06:	90 40       	sbci	r25, 0x00	; 0
    3c08:	e1 f7       	brne	.-8      	; 0x3c02 <bootloader_jump+0xc>
    3c0a:	00 c0       	rjmp	.+0      	; 0x3c0c <bootloader_jump+0x16>
    3c0c:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    3c0e:	87 e0       	ldi	r24, 0x07	; 7
    3c10:	90 eb       	ldi	r25, 0xB0	; 176
    3c12:	dc 01       	movw	r26, r24
    3c14:	80 93 e0 01 	sts	0x01E0, r24
    3c18:	90 93 e1 01 	sts	0x01E1, r25
    3c1c:	a0 93 e2 01 	sts	0x01E2, r26
    3c20:	b0 93 e3 01 	sts	0x01E3, r27
    wdt_enable(WDTO_250MS);
    3c24:	2c e0       	ldi	r18, 0x0C	; 12
    3c26:	88 e1       	ldi	r24, 0x18	; 24
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	0f b6       	in	r0, 0x3f	; 63
    3c2c:	f8 94       	cli
    3c2e:	a8 95       	wdr
    3c30:	80 93 60 00 	sts	0x0060, r24
    3c34:	0f be       	out	0x3f, r0	; 63
    3c36:	20 93 60 00 	sts	0x0060, r18
    3c3a:	ff cf       	rjmp	.-2      	; 0x3c3a <bootloader_jump+0x44>

00003c3c <keycode_to_action>:

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    switch (keycode) {
    3c3c:	8d 3b       	cpi	r24, 0xBD	; 189
    3c3e:	60 f4       	brcc	.+24     	; 0x3c58 <keycode_to_action+0x1c>
    3c40:	88 3a       	cpi	r24, 0xA8	; 168
    3c42:	80 f5       	brcc	.+96     	; 0x3ca4 <keycode_to_action+0x68>
    3c44:	85 3a       	cpi	r24, 0xA5	; 165
    3c46:	28 f5       	brcc	.+74     	; 0x3c92 <keycode_to_action+0x56>
    3c48:	84 30       	cpi	r24, 0x04	; 4
    3c4a:	08 f5       	brcc	.+66     	; 0x3c8e <keycode_to_action+0x52>
    3c4c:	81 30       	cpi	r24, 0x01	; 1
    3c4e:	09 f0       	breq	.+2      	; 0x3c52 <keycode_to_action+0x16>
    3c50:	6b c0       	rjmp	.+214    	; 0x3d28 <keycode_to_action+0xec>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    3c52:	81 e0       	ldi	r24, 0x01	; 1
    3c54:	90 e0       	ldi	r25, 0x00	; 0
    3c56:	08 95       	ret

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    switch (keycode) {
    3c58:	88 3e       	cpi	r24, 0xE8	; 232
    3c5a:	98 f4       	brcc	.+38     	; 0x3c82 <keycode_to_action+0x46>
    3c5c:	80 3e       	cpi	r24, 0xE0	; 224
    3c5e:	b8 f4       	brcc	.+46     	; 0x3c8e <keycode_to_action+0x52>
    3c60:	8f 3b       	cpi	r24, 0xBF	; 191
    3c62:	09 f0       	breq	.+2      	; 0x3c66 <keycode_to_action+0x2a>
    3c64:	61 c0       	rjmp	.+194    	; 0x3d28 <keycode_to_action+0xec>
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    3c66:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <clear_keyboard>
    3c6a:	2f ef       	ldi	r18, 0xFF	; 255
    3c6c:	80 e7       	ldi	r24, 0x70	; 112
    3c6e:	92 e0       	ldi	r25, 0x02	; 2
    3c70:	21 50       	subi	r18, 0x01	; 1
    3c72:	80 40       	sbci	r24, 0x00	; 0
    3c74:	90 40       	sbci	r25, 0x00	; 0
    3c76:	e1 f7       	brne	.-8      	; 0x3c70 <keycode_to_action+0x34>
    3c78:	00 c0       	rjmp	.+0      	; 0x3c7a <keycode_to_action+0x3e>
    3c7a:	00 00       	nop
            wait_ms(50);
            bootloader_jump(); // not return
    3c7c:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <bootloader_jump>
    3c80:	53 c0       	rjmp	.+166    	; 0x3d28 <keycode_to_action+0xec>

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    switch (keycode) {
    3c82:	80 3f       	cpi	r24, 0xF0	; 240
    3c84:	08 f4       	brcc	.+2      	; 0x3c88 <keycode_to_action+0x4c>
    3c86:	50 c0       	rjmp	.+160    	; 0x3d28 <keycode_to_action+0xec>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    3c88:	90 e0       	ldi	r25, 0x00	; 0
    3c8a:	90 65       	ori	r25, 0x50	; 80
            break;
    3c8c:	08 95       	ret
{
    action_t action = {};
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
            break;
    3c90:	08 95       	ret
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3c92:	85 3a       	cpi	r24, 0xA5	; 165
    3c94:	09 f4       	brne	.+2      	; 0x3c98 <keycode_to_action+0x5c>
    3c96:	4b c0       	rjmp	.+150    	; 0x3d2e <keycode_to_action+0xf2>
    3c98:	86 3a       	cpi	r24, 0xA6	; 166
    3c9a:	09 f0       	breq	.+2      	; 0x3c9e <keycode_to_action+0x62>
    3c9c:	4b c0       	rjmp	.+150    	; 0x3d34 <keycode_to_action+0xf8>
    3c9e:	82 e8       	ldi	r24, 0x82	; 130
    3ca0:	90 e4       	ldi	r25, 0x40	; 64
    3ca2:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3ca4:	88 3a       	cpi	r24, 0xA8	; 168
    3ca6:	09 f4       	brne	.+2      	; 0x3caa <keycode_to_action+0x6e>
    3ca8:	48 c0       	rjmp	.+144    	; 0x3d3a <keycode_to_action+0xfe>
    3caa:	89 3a       	cpi	r24, 0xA9	; 169
    3cac:	09 f4       	brne	.+2      	; 0x3cb0 <keycode_to_action+0x74>
    3cae:	48 c0       	rjmp	.+144    	; 0x3d40 <keycode_to_action+0x104>
    3cb0:	8a 3a       	cpi	r24, 0xAA	; 170
    3cb2:	09 f4       	brne	.+2      	; 0x3cb6 <keycode_to_action+0x7a>
    3cb4:	48 c0       	rjmp	.+144    	; 0x3d46 <keycode_to_action+0x10a>
    3cb6:	8b 3a       	cpi	r24, 0xAB	; 171
    3cb8:	09 f4       	brne	.+2      	; 0x3cbc <keycode_to_action+0x80>
    3cba:	48 c0       	rjmp	.+144    	; 0x3d4c <keycode_to_action+0x110>
    3cbc:	8c 3a       	cpi	r24, 0xAC	; 172
    3cbe:	09 f4       	brne	.+2      	; 0x3cc2 <keycode_to_action+0x86>
    3cc0:	48 c0       	rjmp	.+144    	; 0x3d52 <keycode_to_action+0x116>
    3cc2:	8d 3a       	cpi	r24, 0xAD	; 173
    3cc4:	09 f4       	brne	.+2      	; 0x3cc8 <keycode_to_action+0x8c>
    3cc6:	48 c0       	rjmp	.+144    	; 0x3d58 <keycode_to_action+0x11c>
    3cc8:	8e 3a       	cpi	r24, 0xAE	; 174
    3cca:	09 f4       	brne	.+2      	; 0x3cce <keycode_to_action+0x92>
    3ccc:	48 c0       	rjmp	.+144    	; 0x3d5e <keycode_to_action+0x122>
    3cce:	8f 3a       	cpi	r24, 0xAF	; 175
    3cd0:	09 f4       	brne	.+2      	; 0x3cd4 <keycode_to_action+0x98>
    3cd2:	48 c0       	rjmp	.+144    	; 0x3d64 <keycode_to_action+0x128>
    3cd4:	81 3b       	cpi	r24, 0xB1	; 177
    3cd6:	09 f4       	brne	.+2      	; 0x3cda <keycode_to_action+0x9e>
    3cd8:	48 c0       	rjmp	.+144    	; 0x3d6a <keycode_to_action+0x12e>
    3cda:	80 3b       	cpi	r24, 0xB0	; 176
    3cdc:	09 f4       	brne	.+2      	; 0x3ce0 <keycode_to_action+0xa4>
    3cde:	48 c0       	rjmp	.+144    	; 0x3d70 <keycode_to_action+0x134>
    3ce0:	82 3b       	cpi	r24, 0xB2	; 178
    3ce2:	09 f4       	brne	.+2      	; 0x3ce6 <keycode_to_action+0xaa>
    3ce4:	48 c0       	rjmp	.+144    	; 0x3d76 <keycode_to_action+0x13a>
    3ce6:	83 3b       	cpi	r24, 0xB3	; 179
    3ce8:	09 f4       	brne	.+2      	; 0x3cec <keycode_to_action+0xb0>
    3cea:	48 c0       	rjmp	.+144    	; 0x3d7c <keycode_to_action+0x140>
    3cec:	84 3b       	cpi	r24, 0xB4	; 180
    3cee:	09 f4       	brne	.+2      	; 0x3cf2 <keycode_to_action+0xb6>
    3cf0:	48 c0       	rjmp	.+144    	; 0x3d82 <keycode_to_action+0x146>
    3cf2:	85 3b       	cpi	r24, 0xB5	; 181
    3cf4:	09 f4       	brne	.+2      	; 0x3cf8 <keycode_to_action+0xbc>
    3cf6:	48 c0       	rjmp	.+144    	; 0x3d88 <keycode_to_action+0x14c>
    3cf8:	86 3b       	cpi	r24, 0xB6	; 182
    3cfa:	09 f4       	brne	.+2      	; 0x3cfe <keycode_to_action+0xc2>
    3cfc:	48 c0       	rjmp	.+144    	; 0x3d8e <keycode_to_action+0x152>
    3cfe:	87 3b       	cpi	r24, 0xB7	; 183
    3d00:	09 f4       	brne	.+2      	; 0x3d04 <keycode_to_action+0xc8>
    3d02:	48 c0       	rjmp	.+144    	; 0x3d94 <keycode_to_action+0x158>
    3d04:	88 3b       	cpi	r24, 0xB8	; 184
    3d06:	09 f4       	brne	.+2      	; 0x3d0a <keycode_to_action+0xce>
    3d08:	48 c0       	rjmp	.+144    	; 0x3d9a <keycode_to_action+0x15e>
    3d0a:	89 3b       	cpi	r24, 0xB9	; 185
    3d0c:	09 f4       	brne	.+2      	; 0x3d10 <keycode_to_action+0xd4>
    3d0e:	48 c0       	rjmp	.+144    	; 0x3da0 <keycode_to_action+0x164>
    3d10:	8a 3b       	cpi	r24, 0xBA	; 186
    3d12:	09 f4       	brne	.+2      	; 0x3d16 <keycode_to_action+0xda>
    3d14:	48 c0       	rjmp	.+144    	; 0x3da6 <keycode_to_action+0x16a>
    3d16:	8b 3b       	cpi	r24, 0xBB	; 187
    3d18:	09 f4       	brne	.+2      	; 0x3d1c <keycode_to_action+0xe0>
    3d1a:	48 c0       	rjmp	.+144    	; 0x3dac <keycode_to_action+0x170>
    3d1c:	8c 3b       	cpi	r24, 0xBC	; 188
    3d1e:	09 f0       	breq	.+2      	; 0x3d22 <keycode_to_action+0xe6>
    3d20:	48 c0       	rjmp	.+144    	; 0x3db2 <keycode_to_action+0x176>
    3d22:	8a e2       	ldi	r24, 0x2A	; 42
    3d24:	96 e4       	ldi	r25, 0x46	; 70
    3d26:	08 95       	ret
            clear_keyboard();
            wait_ms(50);
            bootloader_jump(); // not return
            break;
        default:
            action.code = ACTION_NO;
    3d28:	80 e0       	ldi	r24, 0x00	; 0
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	08 95       	ret
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3d2e:	81 e8       	ldi	r24, 0x81	; 129
    3d30:	90 e4       	ldi	r25, 0x40	; 64
    3d32:	08 95       	ret
    3d34:	83 e8       	ldi	r24, 0x83	; 131
    3d36:	90 e4       	ldi	r25, 0x40	; 64
    3d38:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3d3a:	82 ee       	ldi	r24, 0xE2	; 226
    3d3c:	94 e4       	ldi	r25, 0x44	; 68
    3d3e:	08 95       	ret
    3d40:	89 ee       	ldi	r24, 0xE9	; 233
    3d42:	94 e4       	ldi	r25, 0x44	; 68
    3d44:	08 95       	ret
    3d46:	8a ee       	ldi	r24, 0xEA	; 234
    3d48:	94 e4       	ldi	r25, 0x44	; 68
    3d4a:	08 95       	ret
    3d4c:	85 eb       	ldi	r24, 0xB5	; 181
    3d4e:	94 e4       	ldi	r25, 0x44	; 68
    3d50:	08 95       	ret
    3d52:	86 eb       	ldi	r24, 0xB6	; 182
    3d54:	94 e4       	ldi	r25, 0x44	; 68
    3d56:	08 95       	ret
    3d58:	83 eb       	ldi	r24, 0xB3	; 179
    3d5a:	94 e4       	ldi	r25, 0x44	; 68
    3d5c:	08 95       	ret
    3d5e:	84 eb       	ldi	r24, 0xB4	; 180
    3d60:	94 e4       	ldi	r25, 0x44	; 68
    3d62:	08 95       	ret
    3d64:	87 eb       	ldi	r24, 0xB7	; 183
    3d66:	94 e4       	ldi	r25, 0x44	; 68
    3d68:	08 95       	ret
    3d6a:	8c ec       	ldi	r24, 0xCC	; 204
    3d6c:	94 e4       	ldi	r25, 0x44	; 68
    3d6e:	08 95       	ret
    3d70:	8d ec       	ldi	r24, 0xCD	; 205
    3d72:	94 e4       	ldi	r25, 0x44	; 68
    3d74:	08 95       	ret
    3d76:	83 e8       	ldi	r24, 0x83	; 131
    3d78:	95 e4       	ldi	r25, 0x45	; 69
    3d7a:	08 95       	ret
    3d7c:	8a e8       	ldi	r24, 0x8A	; 138
    3d7e:	95 e4       	ldi	r25, 0x45	; 69
    3d80:	08 95       	ret
    3d82:	82 e9       	ldi	r24, 0x92	; 146
    3d84:	95 e4       	ldi	r25, 0x45	; 69
    3d86:	08 95       	ret
    3d88:	84 e9       	ldi	r24, 0x94	; 148
    3d8a:	95 e4       	ldi	r25, 0x45	; 69
    3d8c:	08 95       	ret
    3d8e:	81 e2       	ldi	r24, 0x21	; 33
    3d90:	96 e4       	ldi	r25, 0x46	; 70
    3d92:	08 95       	ret
    3d94:	83 e2       	ldi	r24, 0x23	; 35
    3d96:	96 e4       	ldi	r25, 0x46	; 70
    3d98:	08 95       	ret
    3d9a:	84 e2       	ldi	r24, 0x24	; 36
    3d9c:	96 e4       	ldi	r25, 0x46	; 70
    3d9e:	08 95       	ret
    3da0:	85 e2       	ldi	r24, 0x25	; 37
    3da2:	96 e4       	ldi	r25, 0x46	; 70
    3da4:	08 95       	ret
    3da6:	86 e2       	ldi	r24, 0x26	; 38
    3da8:	96 e4       	ldi	r25, 0x46	; 70
    3daa:	08 95       	ret
    3dac:	87 e2       	ldi	r24, 0x27	; 39
    3dae:	96 e4       	ldi	r25, 0x46	; 70
    3db0:	08 95       	ret
    3db2:	80 e0       	ldi	r24, 0x00	; 0
    3db4:	94 e4       	ldi	r25, 0x44	; 68
        default:
            action.code = ACTION_NO;
            break;
    }
    return action;
}
    3db6:	08 95       	ret

00003db8 <action_for_key>:


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3db8:	0e 94 1f 07 	call	0xe3e	; 0xe3e <keymap_key_to_keycode>
    switch (keycode) {
    3dbc:	80 3e       	cpi	r24, 0xE0	; 224
    3dbe:	a8 f4       	brcc	.+42     	; 0x3dea <action_for_key+0x32>
    3dc0:	80 3c       	cpi	r24, 0xC0	; 192
    3dc2:	00 f5       	brcc	.+64     	; 0x3e04 <action_for_key+0x4c>
    3dc4:	81 33       	cpi	r24, 0x31	; 49
    3dc6:	09 f4       	brne	.+2      	; 0x3dca <action_for_key+0x12>
    3dc8:	5c c0       	rjmp	.+184    	; 0x3e82 <action_for_key+0xca>
    3dca:	38 f4       	brcc	.+14     	; 0x3dda <action_for_key+0x22>
    3dcc:	89 32       	cpi	r24, 0x29	; 41
    3dce:	09 f4       	brne	.+2      	; 0x3dd2 <action_for_key+0x1a>
    3dd0:	52 c0       	rjmp	.+164    	; 0x3e76 <action_for_key+0xbe>
    3dd2:	8a 32       	cpi	r24, 0x2A	; 42
    3dd4:	09 f4       	brne	.+2      	; 0x3dd8 <action_for_key+0x20>
    3dd6:	5b c0       	rjmp	.+182    	; 0x3e8e <action_for_key+0xd6>
    3dd8:	5f c0       	rjmp	.+190    	; 0x3e98 <action_for_key+0xe0>
    3dda:	89 33       	cpi	r24, 0x39	; 57
    3ddc:	b1 f0       	breq	.+44     	; 0x3e0a <action_for_key+0x52>
    3dde:	82 38       	cpi	r24, 0x82	; 130
    3de0:	a1 f0       	breq	.+40     	; 0x3e0a <action_for_key+0x52>
    3de2:	85 33       	cpi	r24, 0x35	; 53
    3de4:	09 f4       	brne	.+2      	; 0x3de8 <action_for_key+0x30>
    3de6:	41 c0       	rjmp	.+130    	; 0x3e6a <action_for_key+0xb2>
    3de8:	57 c0       	rjmp	.+174    	; 0x3e98 <action_for_key+0xe0>
    3dea:	83 3e       	cpi	r24, 0xE3	; 227
    3dec:	41 f1       	breq	.+80     	; 0x3e3e <action_for_key+0x86>
    3dee:	28 f4       	brcc	.+10     	; 0x3dfa <action_for_key+0x42>
    3df0:	80 3e       	cpi	r24, 0xE0	; 224
    3df2:	99 f0       	breq	.+38     	; 0x3e1a <action_for_key+0x62>
    3df4:	82 3e       	cpi	r24, 0xE2	; 226
    3df6:	b9 f0       	breq	.+46     	; 0x3e26 <action_for_key+0x6e>
    3df8:	4f c0       	rjmp	.+158    	; 0x3e98 <action_for_key+0xe0>
    3dfa:	86 3e       	cpi	r24, 0xE6	; 230
    3dfc:	31 f1       	breq	.+76     	; 0x3e4a <action_for_key+0x92>
    3dfe:	87 3e       	cpi	r24, 0xE7	; 231
    3e00:	71 f1       	breq	.+92     	; 0x3e5e <action_for_key+0xa6>
    3e02:	4a c0       	rjmp	.+148    	; 0x3e98 <action_for_key+0xe0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    3e04:	0e 94 2e 07 	call	0xe5c	; 0xe5c <keymap_fn_to_action>
    3e08:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3e0a:	90 91 df 01 	lds	r25, 0x01DF
    3e0e:	90 fd       	sbrc	r25, 0
    3e10:	02 c0       	rjmp	.+4      	; 0x3e16 <action_for_key+0x5e>
    3e12:	91 ff       	sbrs	r25, 1
    3e14:	41 c0       	rjmp	.+130    	; 0x3e98 <action_for_key+0xe0>
                return keycode_to_action(KC_LCTL);
    3e16:	80 ee       	ldi	r24, 0xE0	; 224
    3e18:	3f c0       	rjmp	.+126    	; 0x3e98 <action_for_key+0xe0>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    3e1a:	80 91 df 01 	lds	r24, 0x01DF
    3e1e:	80 ff       	sbrs	r24, 0
    3e20:	fa cf       	rjmp	.-12     	; 0x3e16 <action_for_key+0x5e>
                return keycode_to_action(KC_CAPSLOCK);
    3e22:	89 e3       	ldi	r24, 0x39	; 57
    3e24:	39 c0       	rjmp	.+114    	; 0x3e98 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    3e26:	80 91 df 01 	lds	r24, 0x01DF
    3e2a:	82 ff       	sbrs	r24, 2
    3e2c:	0c c0       	rjmp	.+24     	; 0x3e46 <action_for_key+0x8e>
                if (keymap_config.no_gui) {
    3e2e:	80 91 df 01 	lds	r24, 0x01DF
    3e32:	84 ff       	sbrs	r24, 4
    3e34:	02 c0       	rjmp	.+4      	; 0x3e3a <action_for_key+0x82>
                    return keycode_to_action(ACTION_NO);
    3e36:	80 e0       	ldi	r24, 0x00	; 0
    3e38:	2f c0       	rjmp	.+94     	; 0x3e98 <action_for_key+0xe0>
                }
                return keycode_to_action(KC_LGUI);
    3e3a:	83 ee       	ldi	r24, 0xE3	; 227
    3e3c:	2d c0       	rjmp	.+90     	; 0x3e98 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    3e3e:	80 91 df 01 	lds	r24, 0x01DF
    3e42:	82 ff       	sbrs	r24, 2
    3e44:	f4 cf       	rjmp	.-24     	; 0x3e2e <action_for_key+0x76>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    3e46:	82 ee       	ldi	r24, 0xE2	; 226
    3e48:	27 c0       	rjmp	.+78     	; 0x3e98 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    3e4a:	80 91 df 01 	lds	r24, 0x01DF
    3e4e:	83 ff       	sbrs	r24, 3
    3e50:	0a c0       	rjmp	.+20     	; 0x3e66 <action_for_key+0xae>
                if (keymap_config.no_gui) {
    3e52:	80 91 df 01 	lds	r24, 0x01DF
    3e56:	84 fd       	sbrc	r24, 4
    3e58:	ee cf       	rjmp	.-36     	; 0x3e36 <action_for_key+0x7e>
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
    3e5a:	87 ee       	ldi	r24, 0xE7	; 231
    3e5c:	1d c0       	rjmp	.+58     	; 0x3e98 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    3e5e:	80 91 df 01 	lds	r24, 0x01DF
    3e62:	83 ff       	sbrs	r24, 3
    3e64:	f6 cf       	rjmp	.-20     	; 0x3e52 <action_for_key+0x9a>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    3e66:	86 ee       	ldi	r24, 0xE6	; 230
    3e68:	17 c0       	rjmp	.+46     	; 0x3e98 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    3e6a:	80 91 df 01 	lds	r24, 0x01DF
    3e6e:	85 ff       	sbrs	r24, 5
    3e70:	06 c0       	rjmp	.+12     	; 0x3e7e <action_for_key+0xc6>
                return keycode_to_action(KC_ESC);
    3e72:	89 e2       	ldi	r24, 0x29	; 41
    3e74:	11 c0       	rjmp	.+34     	; 0x3e98 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    3e76:	80 91 df 01 	lds	r24, 0x01DF
    3e7a:	85 ff       	sbrs	r24, 5
    3e7c:	fa cf       	rjmp	.-12     	; 0x3e72 <action_for_key+0xba>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    3e7e:	85 e3       	ldi	r24, 0x35	; 53
    3e80:	0b c0       	rjmp	.+22     	; 0x3e98 <action_for_key+0xe0>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    3e82:	80 91 df 01 	lds	r24, 0x01DF
    3e86:	86 ff       	sbrs	r24, 6
    3e88:	06 c0       	rjmp	.+12     	; 0x3e96 <action_for_key+0xde>
                return keycode_to_action(KC_BSPACE);
    3e8a:	8a e2       	ldi	r24, 0x2A	; 42
    3e8c:	05 c0       	rjmp	.+10     	; 0x3e98 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    3e8e:	80 91 df 01 	lds	r24, 0x01DF
    3e92:	86 ff       	sbrs	r24, 6
    3e94:	fa cf       	rjmp	.-12     	; 0x3e8a <action_for_key+0xd2>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    3e96:	81 e3       	ldi	r24, 0x31	; 49
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    3e98:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <keycode_to_action>
    }
}
    3e9c:	08 95       	ret

00003e9e <action_get_macro>:
{
    (void)record;
    (void)id;
    (void)opt;
    return MACRO_NONE;
}
    3e9e:	80 e0       	ldi	r24, 0x00	; 0
    3ea0:	90 e0       	ldi	r25, 0x00	; 0
    3ea2:	08 95       	ret

00003ea4 <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    3ea4:	08 95       	ret

00003ea6 <scan_key>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_key(uint16_t code)
{
    3ea6:	bf 92       	push	r11
    3ea8:	cf 92       	push	r12
    3eaa:	df 92       	push	r13
    3eac:	ef 92       	push	r14
    3eae:	ff 92       	push	r15
    3eb0:	0f 93       	push	r16
    3eb2:	1f 93       	push	r17
    3eb4:	cf 93       	push	r28
    3eb6:	df 93       	push	r29
    3eb8:	8c 01       	movw	r16, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3eba:	b1 2c       	mov	r11, r1
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3ebc:	ee 24       	eor	r14, r14
    3ebe:	e3 94       	inc	r14
    3ec0:	f1 2c       	mov	r15, r1
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
    3ec2:	8b 2d       	mov	r24, r11
    3ec4:	0e 94 94 08 	call	0x1128	; 0x1128 <matrix_get_row>
    3ec8:	6c 01       	movw	r12, r24
    3eca:	c0 e0       	ldi	r28, 0x00	; 0
    3ecc:	d0 e0       	ldi	r29, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3ece:	97 01       	movw	r18, r14
    3ed0:	0c 2e       	mov	r0, r28
    3ed2:	02 c0       	rjmp	.+4      	; 0x3ed8 <scan_key+0x32>
    3ed4:	22 0f       	add	r18, r18
    3ed6:	33 1f       	adc	r19, r19
    3ed8:	0a 94       	dec	r0
    3eda:	e2 f7       	brpl	.-8      	; 0x3ed4 <scan_key+0x2e>
    3edc:	2c 21       	and	r18, r12
    3ede:	3d 21       	and	r19, r13
    3ee0:	23 2b       	or	r18, r19
    3ee2:	b1 f0       	breq	.+44     	; 0x3f10 <scan_key+0x6a>
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
    3ee4:	6c 2f       	mov	r22, r28
    3ee6:	7b 2d       	mov	r23, r11
    3ee8:	80 e0       	ldi	r24, 0x00	; 0
    3eea:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <action_for_key>
    3eee:	9c 01       	movw	r18, r24
                if (action.code == code ||
    3ef0:	80 17       	cp	r24, r16
    3ef2:	91 07       	cpc	r25, r17
    3ef4:	59 f0       	breq	.+22     	; 0x3f0c <scan_key+0x66>
    3ef6:	83 2f       	mov	r24, r19
    3ef8:	80 7e       	andi	r24, 0xE0	; 224
    3efa:	93 2f       	mov	r25, r19
    3efc:	90 7c       	andi	r25, 0xC0	; 192
    3efe:	11 f0       	breq	.+4      	; 0x3f04 <scan_key+0x5e>
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
    3f00:	80 3a       	cpi	r24, 0xA0	; 160
    3f02:	31 f4       	brne	.+12     	; 0x3f10 <scan_key+0x6a>
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
                     action.key.code == code)) {
    3f04:	30 e0       	ldi	r19, 0x00	; 0
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
    3f06:	20 17       	cp	r18, r16
    3f08:	31 07       	cpc	r19, r17
    3f0a:	11 f4       	brne	.+4      	; 0x3f10 <scan_key+0x6a>
                     action.key.code == code)) {
                    return true;
    3f0c:	81 e0       	ldi	r24, 0x01	; 1
    3f0e:	09 c0       	rjmp	.+18     	; 0x3f22 <scan_key+0x7c>
    3f10:	21 96       	adiw	r28, 0x01	; 1

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    3f12:	cc 30       	cpi	r28, 0x0C	; 12
    3f14:	d1 05       	cpc	r29, r1
    3f16:	d9 f6       	brne	.-74     	; 0x3ece <scan_key+0x28>
    }
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3f18:	b3 94       	inc	r11
    3f1a:	84 e0       	ldi	r24, 0x04	; 4
    3f1c:	b8 12       	cpse	r11, r24
    3f1e:	d1 cf       	rjmp	.-94     	; 0x3ec2 <scan_key+0x1c>
                    return true;
                }
            }
        }
    }
    return false;
    3f20:	80 e0       	ldi	r24, 0x00	; 0
}
    3f22:	df 91       	pop	r29
    3f24:	cf 91       	pop	r28
    3f26:	1f 91       	pop	r17
    3f28:	0f 91       	pop	r16
    3f2a:	ff 90       	pop	r15
    3f2c:	ef 90       	pop	r14
    3f2e:	df 90       	pop	r13
    3f30:	cf 90       	pop	r12
    3f32:	bf 90       	pop	r11
    3f34:	08 95       	ret

00003f36 <bootmagic_scan_key>:

bool bootmagic_scan_key(uint16_t code)
{
    3f36:	cf 93       	push	r28
    3f38:	df 93       	push	r29
    3f3a:	ec 01       	movw	r28, r24
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    3f3c:	8c e2       	ldi	r24, 0x2C	; 44
    3f3e:	90 e0       	ldi	r25, 0x00	; 0
    3f40:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <scan_key>
    3f44:	88 23       	and	r24, r24
    3f46:	29 f0       	breq	.+10     	; 0x3f52 <bootmagic_scan_key+0x1c>

    return scan_key(code);
    3f48:	ce 01       	movw	r24, r28
}
    3f4a:	df 91       	pop	r29
    3f4c:	cf 91       	pop	r28

bool bootmagic_scan_key(uint16_t code)
{
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;

    return scan_key(code);
    3f4e:	0c 94 53 1f 	jmp	0x3ea6	; 0x3ea6 <scan_key>
}
    3f52:	80 e0       	ldi	r24, 0x00	; 0
    3f54:	df 91       	pop	r29
    3f56:	cf 91       	pop	r28
    3f58:	08 95       	ret

00003f5a <bootmagic>:
#include "hook.h"

keymap_config_t keymap_config;

void bootmagic(void)
{
    3f5a:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    3f5c:	0e 94 13 21 	call	0x4226	; 0x4226 <eeconfig_is_enabled>
    3f60:	81 11       	cpse	r24, r1
    3f62:	02 c0       	rjmp	.+4      	; 0x3f68 <bootmagic+0xe>
        eeconfig_init();
    3f64:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("bootmagic scan: ... ");
    3f68:	84 ea       	ldi	r24, 0xA4	; 164
    3f6a:	94 e0       	ldi	r25, 0x04	; 4
    3f6c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); wait_ms(10); }
    3f70:	c5 e6       	ldi	r28, 0x65	; 101
    3f72:	c1 50       	subi	r28, 0x01	; 1
    3f74:	49 f0       	breq	.+18     	; 0x3f88 <bootmagic+0x2e>
    3f76:	0e 94 79 07 	call	0xef2	; 0xef2 <matrix_scan>
    3f7a:	8f e3       	ldi	r24, 0x3F	; 63
    3f7c:	9c e9       	ldi	r25, 0x9C	; 156
    3f7e:	01 97       	sbiw	r24, 0x01	; 1
    3f80:	f1 f7       	brne	.-4      	; 0x3f7e <bootmagic+0x24>
    3f82:	00 c0       	rjmp	.+0      	; 0x3f84 <bootmagic+0x2a>
    3f84:	00 00       	nop
    3f86:	f5 cf       	rjmp	.-22     	; 0x3f72 <bootmagic+0x18>
    print("done.\n");
    3f88:	8d e9       	ldi	r24, 0x9D	; 157
    3f8a:	94 e0       	ldi	r25, 0x04	; 4
    3f8c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
    3f90:	89 e2       	ldi	r24, 0x29	; 41
    3f92:	90 e0       	ldi	r25, 0x00	; 0
    3f94:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <bootmagic_scan_key>
    3f98:	81 11       	cpse	r24, r1
    3f9a:	29 c1       	rjmp	.+594    	; 0x41ee <bootmagic+0x294>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    3f9c:	8a e2       	ldi	r24, 0x2A	; 42
    3f9e:	90 e0       	ldi	r25, 0x00	; 0
    3fa0:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <bootmagic_scan_key>
    3fa4:	81 11       	cpse	r24, r1
        eeconfig_init();
    3fa6:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
    3faa:	85 e0       	ldi	r24, 0x05	; 5
    3fac:	90 e0       	ldi	r25, 0x00	; 0
    3fae:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <bootmagic_scan_key>
    3fb2:	81 11       	cpse	r24, r1
        bootloader_jump();
    3fb4:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <bootloader_jump>
    }

    /* user-defined checks */
    hook_bootmagic();
    3fb8:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <hook_bootmagic>

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    3fbc:	0e 94 1e 21 	call	0x423c	; 0x423c <eeconfig_read_debug>
    3fc0:	80 93 c1 01 	sts	0x01C1, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    3fc4:	87 e0       	ldi	r24, 0x07	; 7
    3fc6:	90 e0       	ldi	r25, 0x00	; 0
    3fc8:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <bootmagic_scan_key>
    3fcc:	88 23       	and	r24, r24
    3fce:	b1 f1       	breq	.+108    	; 0x403c <bootmagic+0xe2>
        if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    3fd0:	8b e1       	ldi	r24, 0x1B	; 27
    3fd2:	90 e0       	ldi	r25, 0x00	; 0
    3fd4:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <bootmagic_scan_key>
    3fd8:	88 23       	and	r24, r24
    3fda:	51 f0       	breq	.+20     	; 0x3ff0 <bootmagic+0x96>
            debug_config.matrix = !debug_config.matrix;
    3fdc:	90 91 c1 01 	lds	r25, 0x01C1
    3fe0:	91 fb       	bst	r25, 1
    3fe2:	88 27       	eor	r24, r24
    3fe4:	80 f9       	bld	r24, 0
    3fe6:	21 e0       	ldi	r18, 0x01	; 1
    3fe8:	82 27       	eor	r24, r18
    3fea:	80 fb       	bst	r24, 0
    3fec:	91 f9       	bld	r25, 1
    3fee:	24 c0       	rjmp	.+72     	; 0x4038 <bootmagic+0xde>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    3ff0:	8e e0       	ldi	r24, 0x0E	; 14
    3ff2:	90 e0       	ldi	r25, 0x00	; 0
    3ff4:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <bootmagic_scan_key>
    3ff8:	88 23       	and	r24, r24
    3ffa:	51 f0       	breq	.+20     	; 0x4010 <bootmagic+0xb6>
            debug_config.keyboard = !debug_config.keyboard;
    3ffc:	90 91 c1 01 	lds	r25, 0x01C1
    4000:	92 fb       	bst	r25, 2
    4002:	88 27       	eor	r24, r24
    4004:	80 f9       	bld	r24, 0
    4006:	21 e0       	ldi	r18, 0x01	; 1
    4008:	82 27       	eor	r24, r18
    400a:	80 fb       	bst	r24, 0
    400c:	92 f9       	bld	r25, 2
    400e:	14 c0       	rjmp	.+40     	; 0x4038 <bootmagic+0xde>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    4010:	80 e1       	ldi	r24, 0x10	; 16
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <bootmagic_scan_key>
    4018:	90 91 c1 01 	lds	r25, 0x01C1
    401c:	88 23       	and	r24, r24
    401e:	41 f0       	breq	.+16     	; 0x4030 <bootmagic+0xd6>
            debug_config.mouse = !debug_config.mouse;
    4020:	93 fb       	bst	r25, 3
    4022:	88 27       	eor	r24, r24
    4024:	80 f9       	bld	r24, 0
    4026:	21 e0       	ldi	r18, 0x01	; 1
    4028:	82 27       	eor	r24, r18
    402a:	80 fb       	bst	r24, 0
    402c:	93 f9       	bld	r25, 3
    402e:	04 c0       	rjmp	.+8      	; 0x4038 <bootmagic+0xde>
        } else {
            debug_config.enable = !debug_config.enable;
    4030:	89 2f       	mov	r24, r25
    4032:	80 95       	com	r24
    4034:	80 fb       	bst	r24, 0
    4036:	90 f9       	bld	r25, 0
    4038:	90 93 c1 01 	sts	0x01C1, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    403c:	80 91 c1 01 	lds	r24, 0x01C1
    4040:	0e 94 22 21 	call	0x4244	; 0x4244 <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    4044:	0e 94 30 21 	call	0x4260	; 0x4260 <eeconfig_read_keymap>
    4048:	80 93 df 01 	sts	0x01DF, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    404c:	80 ee       	ldi	r24, 0xE0	; 224
    404e:	90 e0       	ldi	r25, 0x00	; 0
    4050:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <bootmagic_scan_key>
    4054:	88 23       	and	r24, r24
    4056:	41 f0       	breq	.+16     	; 0x4068 <bootmagic+0x10e>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    4058:	80 91 df 01 	lds	r24, 0x01DF
    405c:	98 2f       	mov	r25, r24
    405e:	90 95       	com	r25
    4060:	90 fb       	bst	r25, 0
    4062:	80 f9       	bld	r24, 0
    4064:	80 93 df 01 	sts	0x01DF, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    4068:	89 e3       	ldi	r24, 0x39	; 57
    406a:	90 e0       	ldi	r25, 0x00	; 0
    406c:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <bootmagic_scan_key>
    4070:	88 23       	and	r24, r24
    4072:	59 f0       	breq	.+22     	; 0x408a <bootmagic+0x130>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    4074:	90 91 df 01 	lds	r25, 0x01DF
    4078:	91 fb       	bst	r25, 1
    407a:	88 27       	eor	r24, r24
    407c:	80 f9       	bld	r24, 0
    407e:	21 e0       	ldi	r18, 0x01	; 1
    4080:	82 27       	eor	r24, r18
    4082:	80 fb       	bst	r24, 0
    4084:	91 f9       	bld	r25, 1
    4086:	90 93 df 01 	sts	0x01DF, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    408a:	82 ee       	ldi	r24, 0xE2	; 226
    408c:	90 e0       	ldi	r25, 0x00	; 0
    408e:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <bootmagic_scan_key>
    4092:	88 23       	and	r24, r24
    4094:	59 f0       	breq	.+22     	; 0x40ac <bootmagic+0x152>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    4096:	90 91 df 01 	lds	r25, 0x01DF
    409a:	92 fb       	bst	r25, 2
    409c:	88 27       	eor	r24, r24
    409e:	80 f9       	bld	r24, 0
    40a0:	21 e0       	ldi	r18, 0x01	; 1
    40a2:	82 27       	eor	r24, r18
    40a4:	80 fb       	bst	r24, 0
    40a6:	92 f9       	bld	r25, 2
    40a8:	90 93 df 01 	sts	0x01DF, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    40ac:	86 ee       	ldi	r24, 0xE6	; 230
    40ae:	90 e0       	ldi	r25, 0x00	; 0
    40b0:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <bootmagic_scan_key>
    40b4:	88 23       	and	r24, r24
    40b6:	59 f0       	breq	.+22     	; 0x40ce <bootmagic+0x174>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    40b8:	90 91 df 01 	lds	r25, 0x01DF
    40bc:	93 fb       	bst	r25, 3
    40be:	88 27       	eor	r24, r24
    40c0:	80 f9       	bld	r24, 0
    40c2:	21 e0       	ldi	r18, 0x01	; 1
    40c4:	82 27       	eor	r24, r18
    40c6:	80 fb       	bst	r24, 0
    40c8:	93 f9       	bld	r25, 3
    40ca:	90 93 df 01 	sts	0x01DF, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
    40ce:	83 ee       	ldi	r24, 0xE3	; 227
    40d0:	90 e0       	ldi	r25, 0x00	; 0
    40d2:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <bootmagic_scan_key>
    40d6:	88 23       	and	r24, r24
    40d8:	59 f0       	breq	.+22     	; 0x40f0 <bootmagic+0x196>
        keymap_config.no_gui = !keymap_config.no_gui;
    40da:	90 91 df 01 	lds	r25, 0x01DF
    40de:	94 fb       	bst	r25, 4
    40e0:	88 27       	eor	r24, r24
    40e2:	80 f9       	bld	r24, 0
    40e4:	21 e0       	ldi	r18, 0x01	; 1
    40e6:	82 27       	eor	r24, r18
    40e8:	80 fb       	bst	r24, 0
    40ea:	94 f9       	bld	r25, 4
    40ec:	90 93 df 01 	sts	0x01DF, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    40f0:	85 e3       	ldi	r24, 0x35	; 53
    40f2:	90 e0       	ldi	r25, 0x00	; 0
    40f4:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <bootmagic_scan_key>
    40f8:	88 23       	and	r24, r24
    40fa:	59 f0       	breq	.+22     	; 0x4112 <bootmagic+0x1b8>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    40fc:	90 91 df 01 	lds	r25, 0x01DF
    4100:	95 fb       	bst	r25, 5
    4102:	88 27       	eor	r24, r24
    4104:	80 f9       	bld	r24, 0
    4106:	21 e0       	ldi	r18, 0x01	; 1
    4108:	82 27       	eor	r24, r18
    410a:	80 fb       	bst	r24, 0
    410c:	95 f9       	bld	r25, 5
    410e:	90 93 df 01 	sts	0x01DF, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    4112:	81 e3       	ldi	r24, 0x31	; 49
    4114:	90 e0       	ldi	r25, 0x00	; 0
    4116:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <bootmagic_scan_key>
    411a:	88 23       	and	r24, r24
    411c:	59 f0       	breq	.+22     	; 0x4134 <bootmagic+0x1da>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    411e:	90 91 df 01 	lds	r25, 0x01DF
    4122:	96 fb       	bst	r25, 6
    4124:	88 27       	eor	r24, r24
    4126:	80 f9       	bld	r24, 0
    4128:	21 e0       	ldi	r18, 0x01	; 1
    412a:	82 27       	eor	r24, r18
    412c:	80 fb       	bst	r24, 0
    412e:	96 f9       	bld	r25, 6
    4130:	90 93 df 01 	sts	0x01DF, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
    4134:	81 e1       	ldi	r24, 0x11	; 17
    4136:	90 e0       	ldi	r25, 0x00	; 0
    4138:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <bootmagic_scan_key>
    413c:	88 23       	and	r24, r24
    413e:	59 f0       	breq	.+22     	; 0x4156 <bootmagic+0x1fc>
        keymap_config.nkro = !keymap_config.nkro;
    4140:	90 91 df 01 	lds	r25, 0x01DF
    4144:	97 fb       	bst	r25, 7
    4146:	88 27       	eor	r24, r24
    4148:	80 f9       	bld	r24, 0
    414a:	21 e0       	ldi	r18, 0x01	; 1
    414c:	82 27       	eor	r24, r18
    414e:	80 fb       	bst	r24, 0
    4150:	97 f9       	bld	r25, 7
    4152:	90 93 df 01 	sts	0x01DF, r25
    }
    eeconfig_write_keymap(keymap_config.raw);
    4156:	80 91 df 01 	lds	r24, 0x01DF
    415a:	0e 94 34 21 	call	0x4268	; 0x4268 <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    415e:	80 91 df 01 	lds	r24, 0x01DF
    4162:	87 fb       	bst	r24, 7
    4164:	88 27       	eor	r24, r24
    4166:	80 f9       	bld	r24, 0
    4168:	80 93 0c 01 	sts	0x010C, r24
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    416c:	87 e2       	ldi	r24, 0x27	; 39
    416e:	90 e0       	ldi	r25, 0x00	; 0
    4170:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <bootmagic_scan_key>
    4174:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    4176:	8e e1       	ldi	r24, 0x1E	; 30
    4178:	90 e0       	ldi	r25, 0x00	; 0
    417a:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <bootmagic_scan_key>
    417e:	81 11       	cpse	r24, r1
    4180:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    4182:	8f e1       	ldi	r24, 0x1F	; 31
    4184:	90 e0       	ldi	r25, 0x00	; 0
    4186:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <bootmagic_scan_key>
    418a:	81 11       	cpse	r24, r1
    418c:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    418e:	80 e2       	ldi	r24, 0x20	; 32
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <bootmagic_scan_key>
    4196:	81 11       	cpse	r24, r1
    4198:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    419a:	81 e2       	ldi	r24, 0x21	; 33
    419c:	90 e0       	ldi	r25, 0x00	; 0
    419e:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <bootmagic_scan_key>
    41a2:	81 11       	cpse	r24, r1
    41a4:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    41a6:	82 e2       	ldi	r24, 0x22	; 34
    41a8:	90 e0       	ldi	r25, 0x00	; 0
    41aa:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <bootmagic_scan_key>
    41ae:	81 11       	cpse	r24, r1
    41b0:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    41b2:	83 e2       	ldi	r24, 0x23	; 35
    41b4:	90 e0       	ldi	r25, 0x00	; 0
    41b6:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <bootmagic_scan_key>
    41ba:	81 11       	cpse	r24, r1
    41bc:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    41be:	84 e2       	ldi	r24, 0x24	; 36
    41c0:	90 e0       	ldi	r25, 0x00	; 0
    41c2:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <bootmagic_scan_key>
    41c6:	88 23       	and	r24, r24
    41c8:	11 f0       	breq	.+4      	; 0x41ce <bootmagic+0x274>
    41ca:	c0 68       	ori	r28, 0x80	; 128
    41cc:	02 c0       	rjmp	.+4      	; 0x41d2 <bootmagic+0x278>
    if (default_layer) {
    41ce:	cc 23       	and	r28, r28
    41d0:	29 f0       	breq	.+10     	; 0x41dc <bootmagic+0x282>
        eeconfig_write_default_layer(default_layer);
    41d2:	8c 2f       	mov	r24, r28
    41d4:	0e 94 2b 21 	call	0x4256	; 0x4256 <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    41d8:	6c 2f       	mov	r22, r28
    41da:	03 c0       	rjmp	.+6      	; 0x41e2 <bootmagic+0x288>
    } else {
        default_layer = eeconfig_read_default_layer();
    41dc:	0e 94 27 21 	call	0x424e	; 0x424e <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    41e0:	68 2f       	mov	r22, r24
    41e2:	70 e0       	ldi	r23, 0x00	; 0
    41e4:	80 e0       	ldi	r24, 0x00	; 0
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    41e8:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    41ea:	0c 94 bc 1a 	jmp	0x3578	; 0x3578 <default_layer_set>
    }
}
    41ee:	cf 91       	pop	r28
    41f0:	08 95       	ret

000041f2 <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    41f2:	6d ee       	ldi	r22, 0xED	; 237
    41f4:	7e ef       	ldi	r23, 0xFE	; 254
    41f6:	80 e0       	ldi	r24, 0x00	; 0
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	0e 94 75 2a 	call	0x54ea	; 0x54ea <__eewr_word_m32u4>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    41fe:	60 e0       	ldi	r22, 0x00	; 0
    4200:	82 e0       	ldi	r24, 0x02	; 2
    4202:	90 e0       	ldi	r25, 0x00	; 0
    4204:	0e 94 67 2a 	call	0x54ce	; 0x54ce <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    4208:	60 e0       	ldi	r22, 0x00	; 0
    420a:	83 e0       	ldi	r24, 0x03	; 3
    420c:	90 e0       	ldi	r25, 0x00	; 0
    420e:	0e 94 67 2a 	call	0x54ce	; 0x54ce <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    4212:	60 e0       	ldi	r22, 0x00	; 0
    4214:	84 e0       	ldi	r24, 0x04	; 4
    4216:	90 e0       	ldi	r25, 0x00	; 0
    4218:	0e 94 67 2a 	call	0x54ce	; 0x54ce <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    421c:	60 e0       	ldi	r22, 0x00	; 0
    421e:	85 e0       	ldi	r24, 0x05	; 5
    4220:	90 e0       	ldi	r25, 0x00	; 0
    4222:	0c 94 67 2a 	jmp	0x54ce	; 0x54ce <__eewr_byte_m32u4>

00004226 <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    4226:	80 e0       	ldi	r24, 0x00	; 0
    4228:	90 e0       	ldi	r25, 0x00	; 0
    422a:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <__eerd_word_m32u4>
    422e:	21 e0       	ldi	r18, 0x01	; 1
    4230:	8d 3e       	cpi	r24, 0xED	; 237
    4232:	9e 4f       	sbci	r25, 0xFE	; 254
    4234:	09 f0       	breq	.+2      	; 0x4238 <eeconfig_is_enabled+0x12>
    4236:	20 e0       	ldi	r18, 0x00	; 0
}
    4238:	82 2f       	mov	r24, r18
    423a:	08 95       	ret

0000423c <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    423c:	82 e0       	ldi	r24, 0x02	; 2
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	0c 94 59 2a 	jmp	0x54b2	; 0x54b2 <__eerd_byte_m32u4>

00004244 <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    4244:	68 2f       	mov	r22, r24
    4246:	82 e0       	ldi	r24, 0x02	; 2
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	0c 94 67 2a 	jmp	0x54ce	; 0x54ce <__eewr_byte_m32u4>

0000424e <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    424e:	83 e0       	ldi	r24, 0x03	; 3
    4250:	90 e0       	ldi	r25, 0x00	; 0
    4252:	0c 94 59 2a 	jmp	0x54b2	; 0x54b2 <__eerd_byte_m32u4>

00004256 <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    4256:	68 2f       	mov	r22, r24
    4258:	83 e0       	ldi	r24, 0x03	; 3
    425a:	90 e0       	ldi	r25, 0x00	; 0
    425c:	0c 94 67 2a 	jmp	0x54ce	; 0x54ce <__eewr_byte_m32u4>

00004260 <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    4260:	84 e0       	ldi	r24, 0x04	; 4
    4262:	90 e0       	ldi	r25, 0x00	; 0
    4264:	0c 94 59 2a 	jmp	0x54b2	; 0x54b2 <__eerd_byte_m32u4>

00004268 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    4268:	68 2f       	mov	r22, r24
    426a:	84 e0       	ldi	r24, 0x04	; 4
    426c:	90 e0       	ldi	r25, 0x00	; 0
    426e:	0c 94 67 2a 	jmp	0x54ce	; 0x54ce <__eewr_byte_m32u4>

00004272 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4272:	80 91 c9 01 	lds	r24, 0x01C9
    4276:	80 ff       	sbrs	r24, 0
    4278:	0b c0       	rjmp	.+22     	; 0x4290 <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    427a:	60 91 12 01 	lds	r22, 0x0112
    427e:	85 e0       	ldi	r24, 0x05	; 5
    4280:	68 9f       	mul	r22, r24
    4282:	b0 01       	movw	r22, r0
    4284:	11 24       	eor	r1, r1
    4286:	75 95       	asr	r23
    4288:	67 95       	ror	r22
    428a:	75 95       	asr	r23
    428c:	67 95       	ror	r22
    428e:	2a c0       	rjmp	.+84     	; 0x42e4 <move_unit+0x72>
    } else if (mousekey_accel & (1<<1)) {
    4290:	81 ff       	sbrs	r24, 1
    4292:	09 c0       	rjmp	.+18     	; 0x42a6 <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    4294:	60 91 12 01 	lds	r22, 0x0112
    4298:	85 e0       	ldi	r24, 0x05	; 5
    429a:	68 9f       	mul	r22, r24
    429c:	b0 01       	movw	r22, r0
    429e:	11 24       	eor	r1, r1
    42a0:	75 95       	asr	r23
    42a2:	67 95       	ror	r22
    42a4:	1f c0       	rjmp	.+62     	; 0x42e4 <move_unit+0x72>
    } else if (mousekey_accel & (1<<2)) {
    42a6:	82 ff       	sbrs	r24, 2
    42a8:	07 c0       	rjmp	.+14     	; 0x42b8 <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    42aa:	60 91 12 01 	lds	r22, 0x0112
    42ae:	85 e0       	ldi	r24, 0x05	; 5
    42b0:	68 9f       	mul	r22, r24
    42b2:	b0 01       	movw	r22, r0
    42b4:	11 24       	eor	r1, r1
    42b6:	16 c0       	rjmp	.+44     	; 0x42e4 <move_unit+0x72>
    } else if (mousekey_repeat == 0) {
    42b8:	40 91 ca 01 	lds	r20, 0x01CA
    42bc:	44 23       	and	r20, r20
    42be:	c9 f0       	breq	.+50     	; 0x42f2 <move_unit+0x80>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    42c0:	60 91 11 01 	lds	r22, 0x0111
    42c4:	46 17       	cp	r20, r22
    42c6:	88 f7       	brcc	.-30     	; 0x42aa <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    42c8:	20 91 12 01 	lds	r18, 0x0112
    42cc:	85 e0       	ldi	r24, 0x05	; 5
    42ce:	28 9f       	mul	r18, r24
    42d0:	90 01       	movw	r18, r0
    42d2:	11 24       	eor	r1, r1
    42d4:	42 9f       	mul	r20, r18
    42d6:	c0 01       	movw	r24, r0
    42d8:	43 9f       	mul	r20, r19
    42da:	90 0d       	add	r25, r0
    42dc:	11 24       	eor	r1, r1
    42de:	70 e0       	ldi	r23, 0x00	; 0
    42e0:	0e 94 2b 2a 	call	0x5456	; 0x5456 <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    42e4:	60 38       	cpi	r22, 0x80	; 128
    42e6:	71 05       	cpc	r23, r1
    42e8:	40 f4       	brcc	.+16     	; 0x42fa <move_unit+0x88>
    42ea:	61 15       	cp	r22, r1
    42ec:	71 05       	cpc	r23, r1
    42ee:	39 f0       	breq	.+14     	; 0x42fe <move_unit+0x8c>
    42f0:	02 c0       	rjmp	.+4      	; 0x42f6 <move_unit+0x84>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    42f2:	65 e0       	ldi	r22, 0x05	; 5
    42f4:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    42f6:	86 2f       	mov	r24, r22
    42f8:	08 95       	ret
    42fa:	8f e7       	ldi	r24, 0x7F	; 127
    42fc:	08 95       	ret
    42fe:	81 e0       	ldi	r24, 0x01	; 1
}
    4300:	08 95       	ret

00004302 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4302:	80 91 c9 01 	lds	r24, 0x01C9
    4306:	80 ff       	sbrs	r24, 0
    4308:	08 c0       	rjmp	.+16     	; 0x431a <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    430a:	60 91 10 01 	lds	r22, 0x0110
    430e:	70 e0       	ldi	r23, 0x00	; 0
    4310:	75 95       	asr	r23
    4312:	67 95       	ror	r22
    4314:	75 95       	asr	r23
    4316:	67 95       	ror	r22
    4318:	21 c0       	rjmp	.+66     	; 0x435c <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    431a:	81 ff       	sbrs	r24, 1
    431c:	06 c0       	rjmp	.+12     	; 0x432a <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    431e:	60 91 10 01 	lds	r22, 0x0110
    4322:	70 e0       	ldi	r23, 0x00	; 0
    4324:	75 95       	asr	r23
    4326:	67 95       	ror	r22
    4328:	19 c0       	rjmp	.+50     	; 0x435c <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    432a:	82 ff       	sbrs	r24, 2
    432c:	04 c0       	rjmp	.+8      	; 0x4336 <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    432e:	60 91 10 01 	lds	r22, 0x0110
    4332:	70 e0       	ldi	r23, 0x00	; 0
    4334:	10 c0       	rjmp	.+32     	; 0x4356 <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    4336:	80 91 ca 01 	lds	r24, 0x01CA
    433a:	88 23       	and	r24, r24
    433c:	c1 f0       	breq	.+48     	; 0x436e <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    433e:	60 91 0f 01 	lds	r22, 0x010F
    4342:	86 17       	cp	r24, r22
    4344:	a0 f7       	brcc	.-24     	; 0x432e <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    4346:	90 91 10 01 	lds	r25, 0x0110
    434a:	98 9f       	mul	r25, r24
    434c:	c0 01       	movw	r24, r0
    434e:	11 24       	eor	r1, r1
    4350:	70 e0       	ldi	r23, 0x00	; 0
    4352:	0e 94 2b 2a 	call	0x5456	; 0x5456 <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    4356:	60 38       	cpi	r22, 0x80	; 128
    4358:	71 05       	cpc	r23, r1
    435a:	28 f4       	brcc	.+10     	; 0x4366 <wheel_unit+0x64>
    435c:	61 15       	cp	r22, r1
    435e:	71 05       	cpc	r23, r1
    4360:	21 f0       	breq	.+8      	; 0x436a <wheel_unit+0x68>
    4362:	86 2f       	mov	r24, r22
    4364:	08 95       	ret
    4366:	8f e7       	ldi	r24, 0x7F	; 127
    4368:	08 95       	ret
    436a:	81 e0       	ldi	r24, 0x01	; 1
    436c:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    436e:	61 e0       	ldi	r22, 0x01	; 1
    4370:	70 e0       	ldi	r23, 0x00	; 0
    4372:	f4 cf       	rjmp	.-24     	; 0x435c <wheel_unit+0x5a>

00004374 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    4374:	80 3f       	cpi	r24, 0xF0	; 240
    4376:	21 f4       	brne	.+8      	; 0x4380 <mousekey_on+0xc>
    4378:	0e 94 39 21 	call	0x4272	; 0x4272 <move_unit>
    437c:	81 95       	neg	r24
    437e:	04 c0       	rjmp	.+8      	; 0x4388 <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    4380:	81 3f       	cpi	r24, 0xF1	; 241
    4382:	29 f4       	brne	.+10     	; 0x438e <mousekey_on+0x1a>
    4384:	0e 94 39 21 	call	0x4272	; 0x4272 <move_unit>
    4388:	80 93 cd 01 	sts	0x01CD, r24
    438c:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    438e:	82 3f       	cpi	r24, 0xF2	; 242
    4390:	21 f4       	brne	.+8      	; 0x439a <mousekey_on+0x26>
    4392:	0e 94 39 21 	call	0x4272	; 0x4272 <move_unit>
    4396:	81 95       	neg	r24
    4398:	04 c0       	rjmp	.+8      	; 0x43a2 <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    439a:	83 3f       	cpi	r24, 0xF3	; 243
    439c:	29 f4       	brne	.+10     	; 0x43a8 <mousekey_on+0x34>
    439e:	0e 94 39 21 	call	0x4272	; 0x4272 <move_unit>
    43a2:	80 93 cc 01 	sts	0x01CC, r24
    43a6:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    43a8:	89 3f       	cpi	r24, 0xF9	; 249
    43aa:	19 f4       	brne	.+6      	; 0x43b2 <mousekey_on+0x3e>
    43ac:	0e 94 81 21 	call	0x4302	; 0x4302 <wheel_unit>
    43b0:	05 c0       	rjmp	.+10     	; 0x43bc <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    43b2:	8a 3f       	cpi	r24, 0xFA	; 250
    43b4:	31 f4       	brne	.+12     	; 0x43c2 <mousekey_on+0x4e>
    43b6:	0e 94 81 21 	call	0x4302	; 0x4302 <wheel_unit>
    43ba:	81 95       	neg	r24
    43bc:	80 93 ce 01 	sts	0x01CE, r24
    43c0:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    43c2:	8b 3f       	cpi	r24, 0xFB	; 251
    43c4:	21 f4       	brne	.+8      	; 0x43ce <mousekey_on+0x5a>
    43c6:	0e 94 81 21 	call	0x4302	; 0x4302 <wheel_unit>
    43ca:	81 95       	neg	r24
    43cc:	04 c0       	rjmp	.+8      	; 0x43d6 <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    43ce:	8c 3f       	cpi	r24, 0xFC	; 252
    43d0:	29 f4       	brne	.+10     	; 0x43dc <mousekey_on+0x68>
    43d2:	0e 94 81 21 	call	0x4302	; 0x4302 <wheel_unit>
    43d6:	80 93 cf 01 	sts	0x01CF, r24
    43da:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    43dc:	84 3f       	cpi	r24, 0xF4	; 244
    43de:	21 f4       	brne	.+8      	; 0x43e8 <mousekey_on+0x74>
    43e0:	80 91 cb 01 	lds	r24, 0x01CB
    43e4:	81 60       	ori	r24, 0x01	; 1
    43e6:	17 c0       	rjmp	.+46     	; 0x4416 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    43e8:	85 3f       	cpi	r24, 0xF5	; 245
    43ea:	21 f4       	brne	.+8      	; 0x43f4 <mousekey_on+0x80>
    43ec:	80 91 cb 01 	lds	r24, 0x01CB
    43f0:	82 60       	ori	r24, 0x02	; 2
    43f2:	11 c0       	rjmp	.+34     	; 0x4416 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    43f4:	86 3f       	cpi	r24, 0xF6	; 246
    43f6:	21 f4       	brne	.+8      	; 0x4400 <mousekey_on+0x8c>
    43f8:	80 91 cb 01 	lds	r24, 0x01CB
    43fc:	84 60       	ori	r24, 0x04	; 4
    43fe:	0b c0       	rjmp	.+22     	; 0x4416 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    4400:	87 3f       	cpi	r24, 0xF7	; 247
    4402:	21 f4       	brne	.+8      	; 0x440c <mousekey_on+0x98>
    4404:	80 91 cb 01 	lds	r24, 0x01CB
    4408:	88 60       	ori	r24, 0x08	; 8
    440a:	05 c0       	rjmp	.+10     	; 0x4416 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    440c:	88 3f       	cpi	r24, 0xF8	; 248
    440e:	31 f4       	brne	.+12     	; 0x441c <mousekey_on+0xa8>
    4410:	80 91 cb 01 	lds	r24, 0x01CB
    4414:	80 61       	ori	r24, 0x10	; 16
    4416:	80 93 cb 01 	sts	0x01CB, r24
    441a:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    441c:	8d 3f       	cpi	r24, 0xFD	; 253
    441e:	21 f4       	brne	.+8      	; 0x4428 <mousekey_on+0xb4>
    4420:	80 91 c9 01 	lds	r24, 0x01C9
    4424:	81 60       	ori	r24, 0x01	; 1
    4426:	0b c0       	rjmp	.+22     	; 0x443e <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    4428:	8e 3f       	cpi	r24, 0xFE	; 254
    442a:	21 f4       	brne	.+8      	; 0x4434 <mousekey_on+0xc0>
    442c:	80 91 c9 01 	lds	r24, 0x01C9
    4430:	82 60       	ori	r24, 0x02	; 2
    4432:	05 c0       	rjmp	.+10     	; 0x443e <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    4434:	8f 3f       	cpi	r24, 0xFF	; 255
    4436:	29 f4       	brne	.+10     	; 0x4442 <mousekey_on+0xce>
    4438:	80 91 c9 01 	lds	r24, 0x01C9
    443c:	84 60       	ori	r24, 0x04	; 4
    443e:	80 93 c9 01 	sts	0x01C9, r24
    4442:	08 95       	ret

00004444 <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    4444:	80 3f       	cpi	r24, 0xF0	; 240
    4446:	39 f4       	brne	.+14     	; 0x4456 <mousekey_off+0x12>
    4448:	80 91 cd 01 	lds	r24, 0x01CD
    444c:	87 ff       	sbrs	r24, 7
    444e:	6c c0       	rjmp	.+216    	; 0x4528 <mousekey_off+0xe4>
    4450:	10 92 cd 01 	sts	0x01CD, r1
    4454:	69 c0       	rjmp	.+210    	; 0x4528 <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    4456:	81 3f       	cpi	r24, 0xF1	; 241
    4458:	29 f4       	brne	.+10     	; 0x4464 <mousekey_off+0x20>
    445a:	80 91 cd 01 	lds	r24, 0x01CD
    445e:	18 16       	cp	r1, r24
    4460:	bc f3       	brlt	.-18     	; 0x4450 <mousekey_off+0xc>
    4462:	62 c0       	rjmp	.+196    	; 0x4528 <mousekey_off+0xe4>
    4464:	90 91 cc 01 	lds	r25, 0x01CC
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    4468:	82 3f       	cpi	r24, 0xF2	; 242
    446a:	29 f4       	brne	.+10     	; 0x4476 <mousekey_off+0x32>
    446c:	97 ff       	sbrs	r25, 7
    446e:	5c c0       	rjmp	.+184    	; 0x4528 <mousekey_off+0xe4>
    4470:	10 92 cc 01 	sts	0x01CC, r1
    4474:	59 c0       	rjmp	.+178    	; 0x4528 <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    4476:	83 3f       	cpi	r24, 0xF3	; 243
    4478:	19 f4       	brne	.+6      	; 0x4480 <mousekey_off+0x3c>
    447a:	19 16       	cp	r1, r25
    447c:	cc f3       	brlt	.-14     	; 0x4470 <mousekey_off+0x2c>
    447e:	54 c0       	rjmp	.+168    	; 0x4528 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    4480:	89 3f       	cpi	r24, 0xF9	; 249
    4482:	41 f4       	brne	.+16     	; 0x4494 <mousekey_off+0x50>
    4484:	80 91 ce 01 	lds	r24, 0x01CE
    4488:	18 16       	cp	r1, r24
    448a:	0c f0       	brlt	.+2      	; 0x448e <mousekey_off+0x4a>
    448c:	4d c0       	rjmp	.+154    	; 0x4528 <mousekey_off+0xe4>
    448e:	10 92 ce 01 	sts	0x01CE, r1
    4492:	4a c0       	rjmp	.+148    	; 0x4528 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    4494:	8a 3f       	cpi	r24, 0xFA	; 250
    4496:	29 f4       	brne	.+10     	; 0x44a2 <mousekey_off+0x5e>
    4498:	80 91 ce 01 	lds	r24, 0x01CE
    449c:	87 ff       	sbrs	r24, 7
    449e:	44 c0       	rjmp	.+136    	; 0x4528 <mousekey_off+0xe4>
    44a0:	f6 cf       	rjmp	.-20     	; 0x448e <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    44a2:	8b 3f       	cpi	r24, 0xFB	; 251
    44a4:	39 f4       	brne	.+14     	; 0x44b4 <mousekey_off+0x70>
    44a6:	80 91 cf 01 	lds	r24, 0x01CF
    44aa:	87 ff       	sbrs	r24, 7
    44ac:	3d c0       	rjmp	.+122    	; 0x4528 <mousekey_off+0xe4>
    44ae:	10 92 cf 01 	sts	0x01CF, r1
    44b2:	3a c0       	rjmp	.+116    	; 0x4528 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    44b4:	8c 3f       	cpi	r24, 0xFC	; 252
    44b6:	29 f4       	brne	.+10     	; 0x44c2 <mousekey_off+0x7e>
    44b8:	80 91 cf 01 	lds	r24, 0x01CF
    44bc:	18 16       	cp	r1, r24
    44be:	bc f3       	brlt	.-18     	; 0x44ae <mousekey_off+0x6a>
    44c0:	33 c0       	rjmp	.+102    	; 0x4528 <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    44c2:	84 3f       	cpi	r24, 0xF4	; 244
    44c4:	21 f4       	brne	.+8      	; 0x44ce <mousekey_off+0x8a>
    44c6:	80 91 cb 01 	lds	r24, 0x01CB
    44ca:	8e 7f       	andi	r24, 0xFE	; 254
    44cc:	17 c0       	rjmp	.+46     	; 0x44fc <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    44ce:	85 3f       	cpi	r24, 0xF5	; 245
    44d0:	21 f4       	brne	.+8      	; 0x44da <mousekey_off+0x96>
    44d2:	80 91 cb 01 	lds	r24, 0x01CB
    44d6:	8d 7f       	andi	r24, 0xFD	; 253
    44d8:	11 c0       	rjmp	.+34     	; 0x44fc <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    44da:	86 3f       	cpi	r24, 0xF6	; 246
    44dc:	21 f4       	brne	.+8      	; 0x44e6 <mousekey_off+0xa2>
    44de:	80 91 cb 01 	lds	r24, 0x01CB
    44e2:	8b 7f       	andi	r24, 0xFB	; 251
    44e4:	0b c0       	rjmp	.+22     	; 0x44fc <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    44e6:	87 3f       	cpi	r24, 0xF7	; 247
    44e8:	21 f4       	brne	.+8      	; 0x44f2 <mousekey_off+0xae>
    44ea:	80 91 cb 01 	lds	r24, 0x01CB
    44ee:	87 7f       	andi	r24, 0xF7	; 247
    44f0:	05 c0       	rjmp	.+10     	; 0x44fc <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    44f2:	88 3f       	cpi	r24, 0xF8	; 248
    44f4:	31 f4       	brne	.+12     	; 0x4502 <mousekey_off+0xbe>
    44f6:	80 91 cb 01 	lds	r24, 0x01CB
    44fa:	8f 7e       	andi	r24, 0xEF	; 239
    44fc:	80 93 cb 01 	sts	0x01CB, r24
    4500:	13 c0       	rjmp	.+38     	; 0x4528 <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    4502:	8d 3f       	cpi	r24, 0xFD	; 253
    4504:	21 f4       	brne	.+8      	; 0x450e <mousekey_off+0xca>
    4506:	80 91 c9 01 	lds	r24, 0x01C9
    450a:	8e 7f       	andi	r24, 0xFE	; 254
    450c:	0b c0       	rjmp	.+22     	; 0x4524 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    450e:	8e 3f       	cpi	r24, 0xFE	; 254
    4510:	21 f4       	brne	.+8      	; 0x451a <mousekey_off+0xd6>
    4512:	80 91 c9 01 	lds	r24, 0x01C9
    4516:	8d 7f       	andi	r24, 0xFD	; 253
    4518:	05 c0       	rjmp	.+10     	; 0x4524 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    451a:	8f 3f       	cpi	r24, 0xFF	; 255
    451c:	29 f4       	brne	.+10     	; 0x4528 <mousekey_off+0xe4>
    451e:	80 91 c9 01 	lds	r24, 0x01C9
    4522:	8b 7f       	andi	r24, 0xFB	; 251
    4524:	80 93 c9 01 	sts	0x01C9, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4528:	80 91 cc 01 	lds	r24, 0x01CC
    452c:	81 11       	cpse	r24, r1
    452e:	0e c0       	rjmp	.+28     	; 0x454c <mousekey_off+0x108>
    4530:	80 91 cd 01 	lds	r24, 0x01CD
    4534:	81 11       	cpse	r24, r1
    4536:	0a c0       	rjmp	.+20     	; 0x454c <mousekey_off+0x108>
    4538:	80 91 ce 01 	lds	r24, 0x01CE
    453c:	81 11       	cpse	r24, r1
    453e:	06 c0       	rjmp	.+12     	; 0x454c <mousekey_off+0x108>
    4540:	80 91 cf 01 	lds	r24, 0x01CF
    4544:	81 11       	cpse	r24, r1
    4546:	02 c0       	rjmp	.+4      	; 0x454c <mousekey_off+0x108>
        mousekey_repeat = 0;
    4548:	10 92 ca 01 	sts	0x01CA, r1
    454c:	08 95       	ret

0000454e <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    454e:	80 91 c1 01 	lds	r24, 0x01C1
    4552:	83 ff       	sbrs	r24, 3
    4554:	7e c0       	rjmp	.+252    	; 0x4652 <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    4556:	80 ee       	ldi	r24, 0xE0	; 224
    4558:	94 e0       	ldi	r25, 0x04	; 4
    455a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    phex(mouse_report.buttons); print("|");
    455e:	80 91 cb 01 	lds	r24, 0x01CB
    4562:	1f 92       	push	r1
    4564:	8f 93       	push	r24
    4566:	8b ed       	ldi	r24, 0xDB	; 219
    4568:	94 e0       	ldi	r25, 0x04	; 4
    456a:	9f 93       	push	r25
    456c:	8f 93       	push	r24
    456e:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4572:	89 ed       	ldi	r24, 0xD9	; 217
    4574:	94 e0       	ldi	r25, 0x04	; 4
    4576:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print_decs(mouse_report.x); print(" ");
    457a:	20 91 cc 01 	lds	r18, 0x01CC
    457e:	82 2f       	mov	r24, r18
    4580:	99 27       	eor	r25, r25
    4582:	87 fd       	sbrc	r24, 7
    4584:	90 95       	com	r25
    4586:	9f 93       	push	r25
    4588:	2f 93       	push	r18
    458a:	86 ed       	ldi	r24, 0xD6	; 214
    458c:	94 e0       	ldi	r25, 0x04	; 4
    458e:	9f 93       	push	r25
    4590:	8f 93       	push	r24
    4592:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4596:	84 ed       	ldi	r24, 0xD4	; 212
    4598:	94 e0       	ldi	r25, 0x04	; 4
    459a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print_decs(mouse_report.y); print(" ");
    459e:	20 91 cd 01 	lds	r18, 0x01CD
    45a2:	82 2f       	mov	r24, r18
    45a4:	99 27       	eor	r25, r25
    45a6:	87 fd       	sbrc	r24, 7
    45a8:	90 95       	com	r25
    45aa:	9f 93       	push	r25
    45ac:	2f 93       	push	r18
    45ae:	81 ed       	ldi	r24, 0xD1	; 209
    45b0:	94 e0       	ldi	r25, 0x04	; 4
    45b2:	9f 93       	push	r25
    45b4:	8f 93       	push	r24
    45b6:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    45ba:	8f ec       	ldi	r24, 0xCF	; 207
    45bc:	94 e0       	ldi	r25, 0x04	; 4
    45be:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print_decs(mouse_report.v); print(" ");
    45c2:	20 91 ce 01 	lds	r18, 0x01CE
    45c6:	82 2f       	mov	r24, r18
    45c8:	99 27       	eor	r25, r25
    45ca:	87 fd       	sbrc	r24, 7
    45cc:	90 95       	com	r25
    45ce:	9f 93       	push	r25
    45d0:	2f 93       	push	r18
    45d2:	8c ec       	ldi	r24, 0xCC	; 204
    45d4:	94 e0       	ldi	r25, 0x04	; 4
    45d6:	9f 93       	push	r25
    45d8:	8f 93       	push	r24
    45da:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    45de:	8a ec       	ldi	r24, 0xCA	; 202
    45e0:	94 e0       	ldi	r25, 0x04	; 4
    45e2:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print_decs(mouse_report.h); print("](");
    45e6:	20 91 cf 01 	lds	r18, 0x01CF
    45ea:	82 2f       	mov	r24, r18
    45ec:	99 27       	eor	r25, r25
    45ee:	87 fd       	sbrc	r24, 7
    45f0:	90 95       	com	r25
    45f2:	9f 93       	push	r25
    45f4:	2f 93       	push	r18
    45f6:	87 ec       	ldi	r24, 0xC7	; 199
    45f8:	94 e0       	ldi	r25, 0x04	; 4
    45fa:	9f 93       	push	r25
    45fc:	8f 93       	push	r24
    45fe:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4602:	84 ec       	ldi	r24, 0xC4	; 196
    4604:	94 e0       	ldi	r25, 0x04	; 4
    4606:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print_dec(mousekey_repeat); print("/");
    460a:	80 91 ca 01 	lds	r24, 0x01CA
    460e:	1f 92       	push	r1
    4610:	8f 93       	push	r24
    4612:	81 ec       	ldi	r24, 0xC1	; 193
    4614:	94 e0       	ldi	r25, 0x04	; 4
    4616:	9f 93       	push	r25
    4618:	8f 93       	push	r24
    461a:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    461e:	8f eb       	ldi	r24, 0xBF	; 191
    4620:	94 e0       	ldi	r25, 0x04	; 4
    4622:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print_dec(mousekey_accel); print(")\n");
    4626:	80 91 c9 01 	lds	r24, 0x01C9
    462a:	1f 92       	push	r1
    462c:	8f 93       	push	r24
    462e:	8c eb       	ldi	r24, 0xBC	; 188
    4630:	94 e0       	ldi	r25, 0x04	; 4
    4632:	9f 93       	push	r25
    4634:	8f 93       	push	r24
    4636:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    463a:	89 eb       	ldi	r24, 0xB9	; 185
    463c:	94 e0       	ldi	r25, 0x04	; 4
    463e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4642:	8d b7       	in	r24, 0x3d	; 61
    4644:	9e b7       	in	r25, 0x3e	; 62
    4646:	4c 96       	adiw	r24, 0x1c	; 28
    4648:	0f b6       	in	r0, 0x3f	; 63
    464a:	f8 94       	cli
    464c:	9e bf       	out	0x3e, r25	; 62
    464e:	0f be       	out	0x3f, r0	; 63
    4650:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    4652:	8b ec       	ldi	r24, 0xCB	; 203
    4654:	91 e0       	ldi	r25, 0x01	; 1
    4656:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <host_mouse_send>
    last_timer = timer_read();
    465a:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <timer_read>
    465e:	90 93 c8 01 	sts	0x01C8, r25
    4662:	80 93 c7 01 	sts	0x01C7, r24
    4666:	08 95       	ret

00004668 <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    4668:	1f 93       	push	r17
    466a:	cf 93       	push	r28
    466c:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    466e:	80 91 c7 01 	lds	r24, 0x01C7
    4672:	90 91 c8 01 	lds	r25, 0x01C8
    4676:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <timer_elapsed>
    467a:	40 91 ca 01 	lds	r20, 0x01CA
    467e:	44 23       	and	r20, r20
    4680:	21 f0       	breq	.+8      	; 0x468a <mousekey_task+0x22>
    4682:	20 91 13 01 	lds	r18, 0x0113
    4686:	30 e0       	ldi	r19, 0x00	; 0
    4688:	06 c0       	rjmp	.+12     	; 0x4696 <mousekey_task+0x2e>
    468a:	20 91 14 01 	lds	r18, 0x0114
    468e:	5a e0       	ldi	r21, 0x0A	; 10
    4690:	25 9f       	mul	r18, r21
    4692:	90 01       	movw	r18, r0
    4694:	11 24       	eor	r1, r1
    4696:	82 17       	cp	r24, r18
    4698:	93 07       	cpc	r25, r19
    469a:	08 f4       	brcc	.+2      	; 0x469e <mousekey_task+0x36>
    469c:	82 c0       	rjmp	.+260    	; 0x47a2 <mousekey_task+0x13a>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    469e:	80 91 cc 01 	lds	r24, 0x01CC
    46a2:	10 91 cd 01 	lds	r17, 0x01CD
    46a6:	d0 91 ce 01 	lds	r29, 0x01CE
    46aa:	c0 91 cf 01 	lds	r28, 0x01CF
    46ae:	81 11       	cpse	r24, r1
    46b0:	07 c0       	rjmp	.+14     	; 0x46c0 <mousekey_task+0x58>
    46b2:	11 11       	cpse	r17, r1
    46b4:	05 c0       	rjmp	.+10     	; 0x46c0 <mousekey_task+0x58>
    46b6:	d1 11       	cpse	r29, r1
    46b8:	03 c0       	rjmp	.+6      	; 0x46c0 <mousekey_task+0x58>
    46ba:	cc 23       	and	r28, r28
    46bc:	09 f4       	brne	.+2      	; 0x46c0 <mousekey_task+0x58>
    46be:	71 c0       	rjmp	.+226    	; 0x47a2 <mousekey_task+0x13a>
        return;

    if (mousekey_repeat != UINT8_MAX)
    46c0:	4f 3f       	cpi	r20, 0xFF	; 255
    46c2:	19 f0       	breq	.+6      	; 0x46ca <mousekey_task+0x62>
        mousekey_repeat++;
    46c4:	4f 5f       	subi	r20, 0xFF	; 255
    46c6:	40 93 ca 01 	sts	0x01CA, r20


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    46ca:	18 16       	cp	r1, r24
    46cc:	24 f4       	brge	.+8      	; 0x46d6 <mousekey_task+0x6e>
    46ce:	0e 94 39 21 	call	0x4272	; 0x4272 <move_unit>
    46d2:	80 93 cc 01 	sts	0x01CC, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    46d6:	80 91 cc 01 	lds	r24, 0x01CC
    46da:	87 ff       	sbrs	r24, 7
    46dc:	05 c0       	rjmp	.+10     	; 0x46e8 <mousekey_task+0x80>
    46de:	0e 94 39 21 	call	0x4272	; 0x4272 <move_unit>
    46e2:	81 95       	neg	r24
    46e4:	80 93 cc 01 	sts	0x01CC, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    46e8:	11 16       	cp	r1, r17
    46ea:	24 f4       	brge	.+8      	; 0x46f4 <mousekey_task+0x8c>
    46ec:	0e 94 39 21 	call	0x4272	; 0x4272 <move_unit>
    46f0:	80 93 cd 01 	sts	0x01CD, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    46f4:	80 91 cd 01 	lds	r24, 0x01CD
    46f8:	87 ff       	sbrs	r24, 7
    46fa:	05 c0       	rjmp	.+10     	; 0x4706 <mousekey_task+0x9e>
    46fc:	0e 94 39 21 	call	0x4272	; 0x4272 <move_unit>
    4700:	81 95       	neg	r24
    4702:	80 93 cd 01 	sts	0x01CD, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    4706:	60 91 cc 01 	lds	r22, 0x01CC
    470a:	66 23       	and	r22, r22
    470c:	39 f1       	breq	.+78     	; 0x475c <mousekey_task+0xf4>
    470e:	10 91 cd 01 	lds	r17, 0x01CD
    4712:	11 23       	and	r17, r17
    4714:	19 f1       	breq	.+70     	; 0x475c <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    4716:	77 27       	eor	r23, r23
    4718:	67 fd       	sbrc	r22, 7
    471a:	70 95       	com	r23
    471c:	87 2f       	mov	r24, r23
    471e:	97 2f       	mov	r25, r23
    4720:	0e 94 30 29 	call	0x5260	; 0x5260 <__floatsisf>
    4724:	23 e3       	ldi	r18, 0x33	; 51
    4726:	33 e3       	ldi	r19, 0x33	; 51
    4728:	43 e3       	ldi	r20, 0x33	; 51
    472a:	5f e3       	ldi	r21, 0x3F	; 63
    472c:	0e 94 94 29 	call	0x5328	; 0x5328 <__mulsf3>
    4730:	0e 94 fd 28 	call	0x51fa	; 0x51fa <__fixsfsi>
    4734:	60 93 cc 01 	sts	0x01CC, r22
        mouse_report.y *= 0.7;
    4738:	61 2f       	mov	r22, r17
    473a:	77 27       	eor	r23, r23
    473c:	67 fd       	sbrc	r22, 7
    473e:	70 95       	com	r23
    4740:	87 2f       	mov	r24, r23
    4742:	97 2f       	mov	r25, r23
    4744:	0e 94 30 29 	call	0x5260	; 0x5260 <__floatsisf>
    4748:	23 e3       	ldi	r18, 0x33	; 51
    474a:	33 e3       	ldi	r19, 0x33	; 51
    474c:	43 e3       	ldi	r20, 0x33	; 51
    474e:	5f e3       	ldi	r21, 0x3F	; 63
    4750:	0e 94 94 29 	call	0x5328	; 0x5328 <__mulsf3>
    4754:	0e 94 fd 28 	call	0x51fa	; 0x51fa <__fixsfsi>
    4758:	60 93 cd 01 	sts	0x01CD, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    475c:	1d 16       	cp	r1, r29
    475e:	24 f4       	brge	.+8      	; 0x4768 <mousekey_task+0x100>
    4760:	0e 94 81 21 	call	0x4302	; 0x4302 <wheel_unit>
    4764:	80 93 ce 01 	sts	0x01CE, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    4768:	80 91 ce 01 	lds	r24, 0x01CE
    476c:	87 ff       	sbrs	r24, 7
    476e:	05 c0       	rjmp	.+10     	; 0x477a <mousekey_task+0x112>
    4770:	0e 94 81 21 	call	0x4302	; 0x4302 <wheel_unit>
    4774:	81 95       	neg	r24
    4776:	80 93 ce 01 	sts	0x01CE, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    477a:	1c 16       	cp	r1, r28
    477c:	24 f4       	brge	.+8      	; 0x4786 <mousekey_task+0x11e>
    477e:	0e 94 81 21 	call	0x4302	; 0x4302 <wheel_unit>
    4782:	80 93 cf 01 	sts	0x01CF, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    4786:	80 91 cf 01 	lds	r24, 0x01CF
    478a:	87 ff       	sbrs	r24, 7
    478c:	05 c0       	rjmp	.+10     	; 0x4798 <mousekey_task+0x130>
    478e:	0e 94 81 21 	call	0x4302	; 0x4302 <wheel_unit>
    4792:	81 95       	neg	r24
    4794:	80 93 cf 01 	sts	0x01CF, r24

    mousekey_send();
}
    4798:	df 91       	pop	r29
    479a:	cf 91       	pop	r28
    479c:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    479e:	0c 94 a7 22 	jmp	0x454e	; 0x454e <mousekey_send>
}
    47a2:	df 91       	pop	r29
    47a4:	cf 91       	pop	r28
    47a6:	1f 91       	pop	r17
    47a8:	08 95       	ret

000047aa <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    47aa:	eb ec       	ldi	r30, 0xCB	; 203
    47ac:	f1 e0       	ldi	r31, 0x01	; 1
    47ae:	85 e0       	ldi	r24, 0x05	; 5
    47b0:	df 01       	movw	r26, r30
    47b2:	1d 92       	st	X+, r1
    47b4:	8a 95       	dec	r24
    47b6:	e9 f7       	brne	.-6      	; 0x47b2 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    47b8:	10 92 ca 01 	sts	0x01CA, r1
    mousekey_accel = 0;
    47bc:	10 92 c9 01 	sts	0x01C9, r1
    47c0:	08 95       	ret

000047c2 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    47c2:	83 e0       	ldi	r24, 0x03	; 3
    47c4:	97 e0       	ldi	r25, 0x07	; 7
    47c6:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    47ca:	1f 92       	push	r1
    47cc:	81 e0       	ldi	r24, 0x01	; 1
    47ce:	8f 93       	push	r24
    47d0:	1f 92       	push	r1
    47d2:	85 e0       	ldi	r24, 0x05	; 5
    47d4:	8f 93       	push	r24
    47d6:	85 eb       	ldi	r24, 0xB5	; 181
    47d8:	96 e0       	ldi	r25, 0x06	; 6
    47da:	9f 93       	push	r25
    47dc:	8f 93       	push	r24
    47de:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    47e2:	0f 90       	pop	r0
    47e4:	0f 90       	pop	r0
    47e6:	0f 90       	pop	r0
    47e8:	0f 90       	pop	r0
    47ea:	0f 90       	pop	r0
    47ec:	0f 90       	pop	r0
    47ee:	08 95       	ret

000047f0 <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    47f0:	83 30       	cpi	r24, 0x03	; 3
    47f2:	e9 f1       	breq	.+122    	; 0x486e <mousekey_param_inc+0x7e>
    47f4:	28 f4       	brcc	.+10     	; 0x4800 <mousekey_param_inc+0x10>
    47f6:	81 30       	cpi	r24, 0x01	; 1
    47f8:	61 f0       	breq	.+24     	; 0x4812 <mousekey_param_inc+0x22>
    47fa:	82 30       	cpi	r24, 0x02	; 2
    47fc:	09 f1       	breq	.+66     	; 0x4840 <mousekey_param_inc+0x50>
    47fe:	08 95       	ret
    4800:	85 30       	cpi	r24, 0x05	; 5
    4802:	09 f4       	brne	.+2      	; 0x4806 <mousekey_param_inc+0x16>
    4804:	62 c0       	rjmp	.+196    	; 0x48ca <mousekey_param_inc+0xda>
    4806:	08 f4       	brcc	.+2      	; 0x480a <mousekey_param_inc+0x1a>
    4808:	49 c0       	rjmp	.+146    	; 0x489c <mousekey_param_inc+0xac>
    480a:	86 30       	cpi	r24, 0x06	; 6
    480c:	09 f4       	brne	.+2      	; 0x4810 <mousekey_param_inc+0x20>
    480e:	74 c0       	rjmp	.+232    	; 0x48f8 <mousekey_param_inc+0x108>
    4810:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    4812:	20 91 14 01 	lds	r18, 0x0114
    4816:	86 2f       	mov	r24, r22
    4818:	90 e0       	ldi	r25, 0x00	; 0
    481a:	82 0f       	add	r24, r18
    481c:	91 1d       	adc	r25, r1
    481e:	8f 3f       	cpi	r24, 0xFF	; 255
    4820:	91 05       	cpc	r25, r1
    4822:	20 f4       	brcc	.+8      	; 0x482c <mousekey_param_inc+0x3c>
                mk_delay += inc;
    4824:	62 0f       	add	r22, r18
    4826:	60 93 14 01 	sts	0x0114, r22
    482a:	03 c0       	rjmp	.+6      	; 0x4832 <mousekey_param_inc+0x42>
            else
                mk_delay = UINT8_MAX;
    482c:	8f ef       	ldi	r24, 0xFF	; 255
    482e:	80 93 14 01 	sts	0x0114, r24
            PRINT_SET_VAL(mk_delay);
    4832:	80 91 14 01 	lds	r24, 0x0114
    4836:	1f 92       	push	r1
    4838:	8f 93       	push	r24
    483a:	8e ee       	ldi	r24, 0xEE	; 238
    483c:	95 e0       	ldi	r25, 0x05	; 5
    483e:	72 c0       	rjmp	.+228    	; 0x4924 <mousekey_param_inc+0x134>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    4840:	20 91 13 01 	lds	r18, 0x0113
    4844:	86 2f       	mov	r24, r22
    4846:	90 e0       	ldi	r25, 0x00	; 0
    4848:	82 0f       	add	r24, r18
    484a:	91 1d       	adc	r25, r1
    484c:	8f 3f       	cpi	r24, 0xFF	; 255
    484e:	91 05       	cpc	r25, r1
    4850:	20 f4       	brcc	.+8      	; 0x485a <mousekey_param_inc+0x6a>
                mk_interval += inc;
    4852:	62 0f       	add	r22, r18
    4854:	60 93 13 01 	sts	0x0113, r22
    4858:	03 c0       	rjmp	.+6      	; 0x4860 <mousekey_param_inc+0x70>
            else
                mk_interval = UINT8_MAX;
    485a:	8f ef       	ldi	r24, 0xFF	; 255
    485c:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_interval);
    4860:	80 91 13 01 	lds	r24, 0x0113
    4864:	1f 92       	push	r1
    4866:	8f 93       	push	r24
    4868:	8c ed       	ldi	r24, 0xDC	; 220
    486a:	95 e0       	ldi	r25, 0x05	; 5
    486c:	5b c0       	rjmp	.+182    	; 0x4924 <mousekey_param_inc+0x134>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    486e:	20 91 12 01 	lds	r18, 0x0112
    4872:	86 2f       	mov	r24, r22
    4874:	90 e0       	ldi	r25, 0x00	; 0
    4876:	82 0f       	add	r24, r18
    4878:	91 1d       	adc	r25, r1
    487a:	8f 3f       	cpi	r24, 0xFF	; 255
    487c:	91 05       	cpc	r25, r1
    487e:	20 f4       	brcc	.+8      	; 0x4888 <mousekey_param_inc+0x98>
                mk_max_speed += inc;
    4880:	62 0f       	add	r22, r18
    4882:	60 93 12 01 	sts	0x0112, r22
    4886:	03 c0       	rjmp	.+6      	; 0x488e <mousekey_param_inc+0x9e>
            else
                mk_max_speed = UINT8_MAX;
    4888:	8f ef       	ldi	r24, 0xFF	; 255
    488a:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_max_speed);
    488e:	80 91 12 01 	lds	r24, 0x0112
    4892:	1f 92       	push	r1
    4894:	8f 93       	push	r24
    4896:	89 ec       	ldi	r24, 0xC9	; 201
    4898:	95 e0       	ldi	r25, 0x05	; 5
    489a:	44 c0       	rjmp	.+136    	; 0x4924 <mousekey_param_inc+0x134>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    489c:	20 91 11 01 	lds	r18, 0x0111
    48a0:	86 2f       	mov	r24, r22
    48a2:	90 e0       	ldi	r25, 0x00	; 0
    48a4:	82 0f       	add	r24, r18
    48a6:	91 1d       	adc	r25, r1
    48a8:	8f 3f       	cpi	r24, 0xFF	; 255
    48aa:	91 05       	cpc	r25, r1
    48ac:	20 f4       	brcc	.+8      	; 0x48b6 <mousekey_param_inc+0xc6>
                mk_time_to_max += inc;
    48ae:	62 0f       	add	r22, r18
    48b0:	60 93 11 01 	sts	0x0111, r22
    48b4:	03 c0       	rjmp	.+6      	; 0x48bc <mousekey_param_inc+0xcc>
            else
                mk_time_to_max = UINT8_MAX;
    48b6:	8f ef       	ldi	r24, 0xFF	; 255
    48b8:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_time_to_max);
    48bc:	80 91 11 01 	lds	r24, 0x0111
    48c0:	1f 92       	push	r1
    48c2:	8f 93       	push	r24
    48c4:	84 eb       	ldi	r24, 0xB4	; 180
    48c6:	95 e0       	ldi	r25, 0x05	; 5
    48c8:	2d c0       	rjmp	.+90     	; 0x4924 <mousekey_param_inc+0x134>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    48ca:	20 91 10 01 	lds	r18, 0x0110
    48ce:	86 2f       	mov	r24, r22
    48d0:	90 e0       	ldi	r25, 0x00	; 0
    48d2:	82 0f       	add	r24, r18
    48d4:	91 1d       	adc	r25, r1
    48d6:	8f 3f       	cpi	r24, 0xFF	; 255
    48d8:	91 05       	cpc	r25, r1
    48da:	20 f4       	brcc	.+8      	; 0x48e4 <mousekey_param_inc+0xf4>
                mk_wheel_max_speed += inc;
    48dc:	62 0f       	add	r22, r18
    48de:	60 93 10 01 	sts	0x0110, r22
    48e2:	03 c0       	rjmp	.+6      	; 0x48ea <mousekey_param_inc+0xfa>
            else
                mk_wheel_max_speed = UINT8_MAX;
    48e4:	8f ef       	ldi	r24, 0xFF	; 255
    48e6:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    48ea:	80 91 10 01 	lds	r24, 0x0110
    48ee:	1f 92       	push	r1
    48f0:	8f 93       	push	r24
    48f2:	8b e9       	ldi	r24, 0x9B	; 155
    48f4:	95 e0       	ldi	r25, 0x05	; 5
    48f6:	16 c0       	rjmp	.+44     	; 0x4924 <mousekey_param_inc+0x134>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    48f8:	20 91 0f 01 	lds	r18, 0x010F
    48fc:	86 2f       	mov	r24, r22
    48fe:	90 e0       	ldi	r25, 0x00	; 0
    4900:	82 0f       	add	r24, r18
    4902:	91 1d       	adc	r25, r1
    4904:	8f 3f       	cpi	r24, 0xFF	; 255
    4906:	91 05       	cpc	r25, r1
    4908:	20 f4       	brcc	.+8      	; 0x4912 <mousekey_param_inc+0x122>
                mk_wheel_time_to_max += inc;
    490a:	62 0f       	add	r22, r18
    490c:	60 93 0f 01 	sts	0x010F, r22
    4910:	03 c0       	rjmp	.+6      	; 0x4918 <mousekey_param_inc+0x128>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    4912:	8f ef       	ldi	r24, 0xFF	; 255
    4914:	80 93 0f 01 	sts	0x010F, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4918:	80 91 0f 01 	lds	r24, 0x010F
    491c:	1f 92       	push	r1
    491e:	8f 93       	push	r24
    4920:	80 e8       	ldi	r24, 0x80	; 128
    4922:	95 e0       	ldi	r25, 0x05	; 5
    4924:	9f 93       	push	r25
    4926:	8f 93       	push	r24
    4928:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
            break;
    492c:	0f 90       	pop	r0
    492e:	0f 90       	pop	r0
    4930:	0f 90       	pop	r0
    4932:	0f 90       	pop	r0
    4934:	08 95       	ret

00004936 <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    4936:	83 30       	cpi	r24, 0x03	; 3
    4938:	81 f1       	breq	.+96     	; 0x499a <mousekey_param_dec+0x64>
    493a:	28 f4       	brcc	.+10     	; 0x4946 <mousekey_param_dec+0x10>
    493c:	81 30       	cpi	r24, 0x01	; 1
    493e:	59 f0       	breq	.+22     	; 0x4956 <mousekey_param_dec+0x20>
    4940:	82 30       	cpi	r24, 0x02	; 2
    4942:	d1 f0       	breq	.+52     	; 0x4978 <mousekey_param_dec+0x42>
    4944:	08 95       	ret
    4946:	85 30       	cpi	r24, 0x05	; 5
    4948:	09 f4       	brne	.+2      	; 0x494c <mousekey_param_dec+0x16>
    494a:	49 c0       	rjmp	.+146    	; 0x49de <mousekey_param_dec+0xa8>
    494c:	b8 f1       	brcs	.+110    	; 0x49bc <mousekey_param_dec+0x86>
    494e:	86 30       	cpi	r24, 0x06	; 6
    4950:	09 f4       	brne	.+2      	; 0x4954 <mousekey_param_dec+0x1e>
    4952:	56 c0       	rjmp	.+172    	; 0x4a00 <mousekey_param_dec+0xca>
    4954:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    4956:	80 91 14 01 	lds	r24, 0x0114
    495a:	68 17       	cp	r22, r24
    495c:	20 f4       	brcc	.+8      	; 0x4966 <mousekey_param_dec+0x30>
                mk_delay -= dec;
    495e:	86 1b       	sub	r24, r22
    4960:	80 93 14 01 	sts	0x0114, r24
    4964:	02 c0       	rjmp	.+4      	; 0x496a <mousekey_param_dec+0x34>
            else
                mk_delay = 0;
    4966:	10 92 14 01 	sts	0x0114, r1
            PRINT_SET_VAL(mk_delay);
    496a:	80 91 14 01 	lds	r24, 0x0114
    496e:	1f 92       	push	r1
    4970:	8f 93       	push	r24
    4972:	81 e7       	ldi	r24, 0x71	; 113
    4974:	95 e0       	ldi	r25, 0x05	; 5
    4976:	54 c0       	rjmp	.+168    	; 0x4a20 <mousekey_param_dec+0xea>
            break;
        case 2:
            if (mk_interval > dec)
    4978:	80 91 13 01 	lds	r24, 0x0113
    497c:	68 17       	cp	r22, r24
    497e:	20 f4       	brcc	.+8      	; 0x4988 <mousekey_param_dec+0x52>
                mk_interval -= dec;
    4980:	86 1b       	sub	r24, r22
    4982:	80 93 13 01 	sts	0x0113, r24
    4986:	02 c0       	rjmp	.+4      	; 0x498c <mousekey_param_dec+0x56>
            else
                mk_interval = 0;
    4988:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_interval);
    498c:	80 91 13 01 	lds	r24, 0x0113
    4990:	1f 92       	push	r1
    4992:	8f 93       	push	r24
    4994:	8f e5       	ldi	r24, 0x5F	; 95
    4996:	95 e0       	ldi	r25, 0x05	; 5
    4998:	43 c0       	rjmp	.+134    	; 0x4a20 <mousekey_param_dec+0xea>
            break;
        case 3:
            if (mk_max_speed > dec)
    499a:	80 91 12 01 	lds	r24, 0x0112
    499e:	68 17       	cp	r22, r24
    49a0:	20 f4       	brcc	.+8      	; 0x49aa <mousekey_param_dec+0x74>
                mk_max_speed -= dec;
    49a2:	86 1b       	sub	r24, r22
    49a4:	80 93 12 01 	sts	0x0112, r24
    49a8:	02 c0       	rjmp	.+4      	; 0x49ae <mousekey_param_dec+0x78>
            else
                mk_max_speed = 0;
    49aa:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_max_speed);
    49ae:	80 91 12 01 	lds	r24, 0x0112
    49b2:	1f 92       	push	r1
    49b4:	8f 93       	push	r24
    49b6:	8c e4       	ldi	r24, 0x4C	; 76
    49b8:	95 e0       	ldi	r25, 0x05	; 5
    49ba:	32 c0       	rjmp	.+100    	; 0x4a20 <mousekey_param_dec+0xea>
            break;
        case 4:
            if (mk_time_to_max > dec)
    49bc:	80 91 11 01 	lds	r24, 0x0111
    49c0:	68 17       	cp	r22, r24
    49c2:	20 f4       	brcc	.+8      	; 0x49cc <mousekey_param_dec+0x96>
                mk_time_to_max -= dec;
    49c4:	86 1b       	sub	r24, r22
    49c6:	80 93 11 01 	sts	0x0111, r24
    49ca:	02 c0       	rjmp	.+4      	; 0x49d0 <mousekey_param_dec+0x9a>
            else
                mk_time_to_max = 0;
    49cc:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_time_to_max);
    49d0:	80 91 11 01 	lds	r24, 0x0111
    49d4:	1f 92       	push	r1
    49d6:	8f 93       	push	r24
    49d8:	87 e3       	ldi	r24, 0x37	; 55
    49da:	95 e0       	ldi	r25, 0x05	; 5
    49dc:	21 c0       	rjmp	.+66     	; 0x4a20 <mousekey_param_dec+0xea>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    49de:	80 91 10 01 	lds	r24, 0x0110
    49e2:	68 17       	cp	r22, r24
    49e4:	20 f4       	brcc	.+8      	; 0x49ee <mousekey_param_dec+0xb8>
                mk_wheel_max_speed -= dec;
    49e6:	86 1b       	sub	r24, r22
    49e8:	80 93 10 01 	sts	0x0110, r24
    49ec:	02 c0       	rjmp	.+4      	; 0x49f2 <mousekey_param_dec+0xbc>
            else
                mk_wheel_max_speed = 0;
    49ee:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    49f2:	80 91 10 01 	lds	r24, 0x0110
    49f6:	1f 92       	push	r1
    49f8:	8f 93       	push	r24
    49fa:	8e e1       	ldi	r24, 0x1E	; 30
    49fc:	95 e0       	ldi	r25, 0x05	; 5
    49fe:	10 c0       	rjmp	.+32     	; 0x4a20 <mousekey_param_dec+0xea>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    4a00:	80 91 0f 01 	lds	r24, 0x010F
    4a04:	68 17       	cp	r22, r24
    4a06:	20 f4       	brcc	.+8      	; 0x4a10 <mousekey_param_dec+0xda>
                mk_wheel_time_to_max -= dec;
    4a08:	86 1b       	sub	r24, r22
    4a0a:	80 93 0f 01 	sts	0x010F, r24
    4a0e:	02 c0       	rjmp	.+4      	; 0x4a14 <mousekey_param_dec+0xde>
            else
                mk_wheel_time_to_max = 0;
    4a10:	10 92 0f 01 	sts	0x010F, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4a14:	80 91 0f 01 	lds	r24, 0x010F
    4a18:	1f 92       	push	r1
    4a1a:	8f 93       	push	r24
    4a1c:	83 e0       	ldi	r24, 0x03	; 3
    4a1e:	95 e0       	ldi	r25, 0x05	; 5
    4a20:	9f 93       	push	r25
    4a22:	8f 93       	push	r24
    4a24:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
            break;
    4a28:	0f 90       	pop	r0
    4a2a:	0f 90       	pop	r0
    4a2c:	0f 90       	pop	r0
    4a2e:	0f 90       	pop	r0
    4a30:	08 95       	ret

00004a32 <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    4a32:	cf 93       	push	r28
    4a34:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    4a36:	1f 92       	push	r1
    4a38:	8f 93       	push	r24
    4a3a:	28 e0       	ldi	r18, 0x08	; 8
    4a3c:	38 e0       	ldi	r19, 0x08	; 8
    4a3e:	3f 93       	push	r19
    4a40:	2f 93       	push	r18
    4a42:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    default_layer_set(1UL<<layer);
    4a46:	61 e0       	ldi	r22, 0x01	; 1
    4a48:	70 e0       	ldi	r23, 0x00	; 0
    4a4a:	80 e0       	ldi	r24, 0x00	; 0
    4a4c:	90 e0       	ldi	r25, 0x00	; 0
    4a4e:	04 c0       	rjmp	.+8      	; 0x4a58 <switch_default_layer+0x26>
    4a50:	66 0f       	add	r22, r22
    4a52:	77 1f       	adc	r23, r23
    4a54:	88 1f       	adc	r24, r24
    4a56:	99 1f       	adc	r25, r25
    4a58:	ca 95       	dec	r28
    4a5a:	d2 f7       	brpl	.-12     	; 0x4a50 <switch_default_layer+0x1e>
    4a5c:	0e 94 bc 1a 	call	0x3578	; 0x3578 <default_layer_set>
    clear_keyboard();
    4a60:	0f 90       	pop	r0
    4a62:	0f 90       	pop	r0
    4a64:	0f 90       	pop	r0
    4a66:	0f 90       	pop	r0
}
    4a68:	cf 91       	pop	r28

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
    4a6a:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <clear_keyboard>

00004a6e <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    4a6e:	cf 93       	push	r28
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4a70:	8b 31       	cpi	r24, 0x1B	; 27
    4a72:	09 f4       	brne	.+2      	; 0x4a76 <command_common+0x8>
    4a74:	cb c1       	rjmp	.+918    	; 0x4e0c <command_common+0x39e>
    4a76:	08 f0       	brcs	.+2      	; 0x4a7a <command_common+0xc>
    4a78:	49 c0       	rjmp	.+146    	; 0x4b0c <command_common+0x9e>
    4a7a:	8e 30       	cpi	r24, 0x0E	; 14
    4a7c:	09 f4       	brne	.+2      	; 0x4a80 <command_common+0x12>
    4a7e:	d9 c1       	rjmp	.+946    	; 0x4e32 <command_common+0x3c4>
    4a80:	00 f5       	brcc	.+64     	; 0x4ac2 <command_common+0x54>
    4a82:	87 30       	cpi	r24, 0x07	; 7
    4a84:	09 f4       	brne	.+2      	; 0x4a88 <command_common+0x1a>
    4a86:	a9 c1       	rjmp	.+850    	; 0x4dda <command_common+0x36c>
    4a88:	a8 f4       	brcc	.+42     	; 0x4ab4 <command_common+0x46>
    4a8a:	86 30       	cpi	r24, 0x06	; 6
    4a8c:	09 f0       	breq	.+2      	; 0x4a90 <command_common+0x22>
    4a8e:	57 c2       	rjmp	.+1198   	; 0x4f3e <command_common+0x4d0>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    4a90:	80 91 c1 01 	lds	r24, 0x01C1
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    4a94:	81 7f       	andi	r24, 0xF1	; 241
    4a96:	8e 7f       	andi	r24, 0xFE	; 254
    4a98:	80 93 c1 01 	sts	0x01C1, r24
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4a9c:	8d e0       	ldi	r24, 0x0D	; 13
    4a9e:	98 e0       	ldi	r25, 0x08	; 8
    4aa0:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
    4aa4:	87 e4       	ldi	r24, 0x47	; 71
    4aa6:	9c e0       	ldi	r25, 0x0C	; 12
    4aa8:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
            command_state = CONSOLE;
    4aac:	81 e0       	ldi	r24, 0x01	; 1
    4aae:	80 93 d1 01 	sts	0x01D1, r24
    4ab2:	91 c1       	rjmp	.+802    	; 0x4dd6 <command_common+0x368>
static bool command_common(uint8_t code)
{
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4ab4:	88 30       	cpi	r24, 0x08	; 8
    4ab6:	09 f4       	brne	.+2      	; 0x4aba <command_common+0x4c>
    4ab8:	5b c0       	rjmp	.+182    	; 0x4b70 <command_common+0x102>
    4aba:	8b 30       	cpi	r24, 0x0B	; 11
    4abc:	09 f4       	brne	.+2      	; 0x4ac0 <command_common+0x52>
    4abe:	87 c1       	rjmp	.+782    	; 0x4dce <command_common+0x360>
    4ac0:	3e c2       	rjmp	.+1148   	; 0x4f3e <command_common+0x4d0>
    4ac2:	81 31       	cpi	r24, 0x11	; 17
    4ac4:	09 f4       	brne	.+2      	; 0x4ac8 <command_common+0x5a>
    4ac6:	23 c2       	rjmp	.+1094   	; 0x4f0e <command_common+0x4a0>
    4ac8:	20 f4       	brcc	.+8      	; 0x4ad2 <command_common+0x64>
    4aca:	80 31       	cpi	r24, 0x10	; 16
    4acc:	09 f4       	brne	.+2      	; 0x4ad0 <command_common+0x62>
    4ace:	c4 c1       	rjmp	.+904    	; 0x4e58 <command_common+0x3ea>
    4ad0:	36 c2       	rjmp	.+1132   	; 0x4f3e <command_common+0x4d0>
    4ad2:	86 31       	cpi	r24, 0x16	; 22
    4ad4:	09 f4       	brne	.+2      	; 0x4ad8 <command_common+0x6a>
    4ad6:	da c1       	rjmp	.+948    	; 0x4e8c <command_common+0x41e>
    4ad8:	89 31       	cpi	r24, 0x19	; 25
    4ada:	09 f0       	breq	.+2      	; 0x4ade <command_common+0x70>
    4adc:	30 c2       	rjmp	.+1120   	; 0x4f3e <command_common+0x4d0>
            } else {
                print("\nmouse: off\n");
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    4ade:	8b eb       	ldi	r24, 0xBB	; 187
    4ae0:	9b e0       	ldi	r25, 0x0B	; 11
    4ae2:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    4ae6:	8f e8       	ldi	r24, 0x8F	; 143
    4ae8:	9b e0       	ldi	r25, 0x0B	; 11
    4aea:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    4aee:	8f e4       	ldi	r24, 0x4F	; 79
    4af0:	9b e0       	ldi	r25, 0x0B	; 11
    4af2:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    4af6:	82 e2       	ldi	r24, 0x22	; 34
    4af8:	9b e0       	ldi	r25, 0x0B	; 11
    4afa:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
            /* build options */
            print("OPTIONS:"
    4afe:	8d ed       	ldi	r24, 0xDD	; 221
    4b00:	9a e0       	ldi	r25, 0x0A	; 10
    4b02:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4b06:	8f ea       	ldi	r24, 0xAF	; 175
    4b08:	9a e0       	ldi	r25, 0x0A	; 10
    4b0a:	63 c1       	rjmp	.+710    	; 0x4dd2 <command_common+0x364>
static bool command_common(uint8_t code)
{
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4b0c:	85 33       	cpi	r24, 0x35	; 53
    4b0e:	09 f4       	brne	.+2      	; 0x4b12 <command_common+0xa4>
    4b10:	10 c2       	rjmp	.+1056   	; 0x4f32 <command_common+0x4c4>
    4b12:	68 f4       	brcc	.+26     	; 0x4b2e <command_common+0xc0>
    4b14:	87 32       	cpi	r24, 0x27	; 39
    4b16:	09 f4       	brne	.+2      	; 0x4b1a <command_common+0xac>
    4b18:	0c c2       	rjmp	.+1048   	; 0x4f32 <command_common+0x4c4>
    4b1a:	28 f4       	brcc	.+10     	; 0x4b26 <command_common+0xb8>
    4b1c:	8e 31       	cpi	r24, 0x1E	; 30
    4b1e:	08 f4       	brcc	.+2      	; 0x4b22 <command_common+0xb4>
    4b20:	0e c2       	rjmp	.+1052   	; 0x4f3e <command_common+0x4d0>
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    4b22:	8d 51       	subi	r24, 0x1D	; 29
    4b24:	09 c2       	rjmp	.+1042   	; 0x4f38 <command_common+0x4ca>
static bool command_common(uint8_t code)
{
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4b26:	89 32       	cpi	r24, 0x29	; 41
    4b28:	09 f4       	brne	.+2      	; 0x4b2c <command_common+0xbe>
    4b2a:	03 c2       	rjmp	.+1030   	; 0x4f32 <command_common+0x4c4>
    4b2c:	08 c2       	rjmp	.+1040   	; 0x4f3e <command_common+0x4d0>
    4b2e:	83 34       	cpi	r24, 0x43	; 67
    4b30:	38 f4       	brcc	.+14     	; 0x4b40 <command_common+0xd2>
    4b32:	8a 33       	cpi	r24, 0x3A	; 58
    4b34:	08 f0       	brcs	.+2      	; 0x4b38 <command_common+0xca>
    4b36:	ff c1       	rjmp	.+1022   	; 0x4f36 <command_common+0x4c8>
    4b38:	88 33       	cpi	r24, 0x38	; 56
    4b3a:	09 f4       	brne	.+2      	; 0x4b3e <command_common+0xd0>
    4b3c:	48 c1       	rjmp	.+656    	; 0x4dce <command_common+0x360>
    4b3e:	ff c1       	rjmp	.+1022   	; 0x4f3e <command_common+0x4d0>
    4b40:	83 34       	cpi	r24, 0x43	; 67
    4b42:	09 f4       	brne	.+2      	; 0x4b46 <command_common+0xd8>
    4b44:	f6 c1       	rjmp	.+1004   	; 0x4f32 <command_common+0x4c4>
    4b46:	88 34       	cpi	r24, 0x48	; 72
    4b48:	09 f0       	breq	.+2      	; 0x4b4c <command_common+0xde>
    4b4a:	f9 c1       	rjmp	.+1010   	; 0x4f3e <command_common+0x4d0>
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    4b4c:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <clear_keyboard>
            print("\n\nbootloader... ");
    4b50:	86 e3       	ldi	r24, 0x36	; 54
    4b52:	9c e0       	ldi	r25, 0x0C	; 12
    4b54:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4b58:	9f ef       	ldi	r25, 0xFF	; 255
    4b5a:	23 ed       	ldi	r18, 0xD3	; 211
    4b5c:	80 e3       	ldi	r24, 0x30	; 48
    4b5e:	91 50       	subi	r25, 0x01	; 1
    4b60:	20 40       	sbci	r18, 0x00	; 0
    4b62:	80 40       	sbci	r24, 0x00	; 0
    4b64:	e1 f7       	brne	.-8      	; 0x4b5e <command_common+0xf0>
    4b66:	00 c0       	rjmp	.+0      	; 0x4b68 <command_common+0xfa>
    4b68:	00 00       	nop
            wait_ms(1000);
            bootloader_jump(); // not return
    4b6a:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <bootloader_jump>
    4b6e:	33 c1       	rjmp	.+614    	; 0x4dd6 <command_common+0x368>
            led_set(host_keyboard_leds());
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    4b70:	8b e4       	ldi	r24, 0x4B	; 75
    4b72:	9c e0       	ldi	r25, 0x0C	; 12
    4b74:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4b78:	8c e0       	ldi	r24, 0x0C	; 12
    4b7a:	9a e0       	ldi	r25, 0x0A	; 10
    4b7c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4b80:	0e 94 27 21 	call	0x424e	; 0x424e <eeconfig_read_default_layer>
    4b84:	1f 92       	push	r1
    4b86:	8f 93       	push	r24
    4b88:	89 e0       	ldi	r24, 0x09	; 9
    4b8a:	9a e0       	ldi	r25, 0x0A	; 10
    4b8c:	9f 93       	push	r25
    4b8e:	8f 93       	push	r24
    4b90:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4b94:	87 e0       	ldi	r24, 0x07	; 7
    4b96:	9a e0       	ldi	r25, 0x0A	; 10
    4b98:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    4b9c:	0e 94 1e 21 	call	0x423c	; 0x423c <eeconfig_read_debug>
    4ba0:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4ba2:	84 ef       	ldi	r24, 0xF4	; 244
    4ba4:	99 e0       	ldi	r25, 0x09	; 9
    4ba6:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4baa:	1f 92       	push	r1
    4bac:	cf 93       	push	r28
    4bae:	2f ee       	ldi	r18, 0xEF	; 239
    4bb0:	39 e0       	ldi	r19, 0x09	; 9
    4bb2:	3f 93       	push	r19
    4bb4:	2f 93       	push	r18
    4bb6:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4bba:	8d ee       	ldi	r24, 0xED	; 237
    4bbc:	99 e0       	ldi	r25, 0x09	; 9
    4bbe:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4bc2:	83 ee       	ldi	r24, 0xE3	; 227
    4bc4:	99 e0       	ldi	r25, 0x09	; 9
    4bc6:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4bca:	8c 2f       	mov	r24, r28
    4bcc:	81 70       	andi	r24, 0x01	; 1
    4bce:	1f 92       	push	r1
    4bd0:	8f 93       	push	r24
    4bd2:	20 ee       	ldi	r18, 0xE0	; 224
    4bd4:	39 e0       	ldi	r19, 0x09	; 9
    4bd6:	3f 93       	push	r19
    4bd8:	2f 93       	push	r18
    4bda:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4bde:	8e ed       	ldi	r24, 0xDE	; 222
    4be0:	99 e0       	ldi	r25, 0x09	; 9
    4be2:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4be6:	84 ed       	ldi	r24, 0xD4	; 212
    4be8:	99 e0       	ldi	r25, 0x09	; 9
    4bea:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4bee:	c1 fb       	bst	r28, 1
    4bf0:	88 27       	eor	r24, r24
    4bf2:	80 f9       	bld	r24, 0
    4bf4:	1f 92       	push	r1
    4bf6:	8f 93       	push	r24
    4bf8:	21 ed       	ldi	r18, 0xD1	; 209
    4bfa:	39 e0       	ldi	r19, 0x09	; 9
    4bfc:	3f 93       	push	r19
    4bfe:	2f 93       	push	r18
    4c00:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4c04:	8f ec       	ldi	r24, 0xCF	; 207
    4c06:	99 e0       	ldi	r25, 0x09	; 9
    4c08:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4c0c:	83 ec       	ldi	r24, 0xC3	; 195
    4c0e:	99 e0       	ldi	r25, 0x09	; 9
    4c10:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4c14:	c2 fb       	bst	r28, 2
    4c16:	88 27       	eor	r24, r24
    4c18:	80 f9       	bld	r24, 0
    4c1a:	1f 92       	push	r1
    4c1c:	8f 93       	push	r24
    4c1e:	20 ec       	ldi	r18, 0xC0	; 192
    4c20:	39 e0       	ldi	r19, 0x09	; 9
    4c22:	3f 93       	push	r19
    4c24:	2f 93       	push	r18
    4c26:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4c2a:	8e eb       	ldi	r24, 0xBE	; 190
    4c2c:	99 e0       	ldi	r25, 0x09	; 9
    4c2e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4c32:	85 eb       	ldi	r24, 0xB5	; 181
    4c34:	99 e0       	ldi	r25, 0x09	; 9
    4c36:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4c3a:	c3 fb       	bst	r28, 3
    4c3c:	cc 27       	eor	r28, r28
    4c3e:	c0 f9       	bld	r28, 0
    4c40:	1f 92       	push	r1
    4c42:	cf 93       	push	r28
    4c44:	82 eb       	ldi	r24, 0xB2	; 178
    4c46:	99 e0       	ldi	r25, 0x09	; 9
    4c48:	9f 93       	push	r25
    4c4a:	8f 93       	push	r24
    4c4c:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4c50:	80 eb       	ldi	r24, 0xB0	; 176
    4c52:	99 e0       	ldi	r25, 0x09	; 9
    4c54:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    4c58:	0e 94 30 21 	call	0x4260	; 0x4260 <eeconfig_read_keymap>
    4c5c:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4c5e:	8c e9       	ldi	r24, 0x9C	; 156
    4c60:	99 e0       	ldi	r25, 0x09	; 9
    4c62:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4c66:	1f 92       	push	r1
    4c68:	cf 93       	push	r28
    4c6a:	27 e9       	ldi	r18, 0x97	; 151
    4c6c:	39 e0       	ldi	r19, 0x09	; 9
    4c6e:	3f 93       	push	r19
    4c70:	2f 93       	push	r18
    4c72:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4c76:	85 e9       	ldi	r24, 0x95	; 149
    4c78:	99 e0       	ldi	r25, 0x09	; 9
    4c7a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    4c7e:	8c e7       	ldi	r24, 0x7C	; 124
    4c80:	99 e0       	ldi	r25, 0x09	; 9
    4c82:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4c86:	8c 2f       	mov	r24, r28
    4c88:	81 70       	andi	r24, 0x01	; 1
    4c8a:	1f 92       	push	r1
    4c8c:	8f 93       	push	r24
    4c8e:	29 e7       	ldi	r18, 0x79	; 121
    4c90:	39 e0       	ldi	r19, 0x09	; 9
    4c92:	3f 93       	push	r19
    4c94:	2f 93       	push	r18
    4c96:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4c9a:	8d b7       	in	r24, 0x3d	; 61
    4c9c:	9e b7       	in	r25, 0x3e	; 62
    4c9e:	80 96       	adiw	r24, 0x20	; 32
    4ca0:	0f b6       	in	r0, 0x3f	; 63
    4ca2:	f8 94       	cli
    4ca4:	9e bf       	out	0x3e, r25	; 62
    4ca6:	0f be       	out	0x3f, r0	; 63
    4ca8:	8d bf       	out	0x3d, r24	; 61
    4caa:	87 e7       	ldi	r24, 0x77	; 119
    4cac:	99 e0       	ldi	r25, 0x09	; 9
    4cae:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    4cb2:	80 e6       	ldi	r24, 0x60	; 96
    4cb4:	99 e0       	ldi	r25, 0x09	; 9
    4cb6:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4cba:	c1 fb       	bst	r28, 1
    4cbc:	88 27       	eor	r24, r24
    4cbe:	80 f9       	bld	r24, 0
    4cc0:	1f 92       	push	r1
    4cc2:	8f 93       	push	r24
    4cc4:	2d e5       	ldi	r18, 0x5D	; 93
    4cc6:	39 e0       	ldi	r19, 0x09	; 9
    4cc8:	3f 93       	push	r19
    4cca:	2f 93       	push	r18
    4ccc:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4cd0:	8b e5       	ldi	r24, 0x5B	; 91
    4cd2:	99 e0       	ldi	r25, 0x09	; 9
    4cd4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    4cd8:	89 e4       	ldi	r24, 0x49	; 73
    4cda:	99 e0       	ldi	r25, 0x09	; 9
    4cdc:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4ce0:	c2 fb       	bst	r28, 2
    4ce2:	88 27       	eor	r24, r24
    4ce4:	80 f9       	bld	r24, 0
    4ce6:	1f 92       	push	r1
    4ce8:	8f 93       	push	r24
    4cea:	26 e4       	ldi	r18, 0x46	; 70
    4cec:	39 e0       	ldi	r19, 0x09	; 9
    4cee:	3f 93       	push	r19
    4cf0:	2f 93       	push	r18
    4cf2:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4cf6:	84 e4       	ldi	r24, 0x44	; 68
    4cf8:	99 e0       	ldi	r25, 0x09	; 9
    4cfa:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    4cfe:	82 e3       	ldi	r24, 0x32	; 50
    4d00:	99 e0       	ldi	r25, 0x09	; 9
    4d02:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4d06:	c3 fb       	bst	r28, 3
    4d08:	88 27       	eor	r24, r24
    4d0a:	80 f9       	bld	r24, 0
    4d0c:	1f 92       	push	r1
    4d0e:	8f 93       	push	r24
    4d10:	2f e2       	ldi	r18, 0x2F	; 47
    4d12:	39 e0       	ldi	r19, 0x09	; 9
    4d14:	3f 93       	push	r19
    4d16:	2f 93       	push	r18
    4d18:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4d1c:	8d e2       	ldi	r24, 0x2D	; 45
    4d1e:	99 e0       	ldi	r25, 0x09	; 9
    4d20:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    4d24:	83 e2       	ldi	r24, 0x23	; 35
    4d26:	99 e0       	ldi	r25, 0x09	; 9
    4d28:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4d2c:	c4 fb       	bst	r28, 4
    4d2e:	88 27       	eor	r24, r24
    4d30:	80 f9       	bld	r24, 0
    4d32:	1f 92       	push	r1
    4d34:	8f 93       	push	r24
    4d36:	20 e2       	ldi	r18, 0x20	; 32
    4d38:	39 e0       	ldi	r19, 0x09	; 9
    4d3a:	3f 93       	push	r19
    4d3c:	2f 93       	push	r18
    4d3e:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4d42:	8e e1       	ldi	r24, 0x1E	; 30
    4d44:	99 e0       	ldi	r25, 0x09	; 9
    4d46:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    4d4a:	8c e0       	ldi	r24, 0x0C	; 12
    4d4c:	99 e0       	ldi	r25, 0x09	; 9
    4d4e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4d52:	c5 fb       	bst	r28, 5
    4d54:	88 27       	eor	r24, r24
    4d56:	80 f9       	bld	r24, 0
    4d58:	1f 92       	push	r1
    4d5a:	8f 93       	push	r24
    4d5c:	29 e0       	ldi	r18, 0x09	; 9
    4d5e:	39 e0       	ldi	r19, 0x09	; 9
    4d60:	3f 93       	push	r19
    4d62:	2f 93       	push	r18
    4d64:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4d68:	87 e0       	ldi	r24, 0x07	; 7
    4d6a:	99 e0       	ldi	r25, 0x09	; 9
    4d6c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    4d70:	8b ee       	ldi	r24, 0xEB	; 235
    4d72:	98 e0       	ldi	r25, 0x08	; 8
    4d74:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4d78:	c6 fb       	bst	r28, 6
    4d7a:	88 27       	eor	r24, r24
    4d7c:	80 f9       	bld	r24, 0
    4d7e:	1f 92       	push	r1
    4d80:	8f 93       	push	r24
    4d82:	28 ee       	ldi	r18, 0xE8	; 232
    4d84:	38 e0       	ldi	r19, 0x08	; 8
    4d86:	3f 93       	push	r19
    4d88:	2f 93       	push	r18
    4d8a:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4d8e:	86 ee       	ldi	r24, 0xE6	; 230
    4d90:	98 e0       	ldi	r25, 0x08	; 8
    4d92:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    4d96:	8e ed       	ldi	r24, 0xDE	; 222
    4d98:	98 e0       	ldi	r25, 0x08	; 8
    4d9a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4d9e:	c7 fb       	bst	r28, 7
    4da0:	cc 27       	eor	r28, r28
    4da2:	c0 f9       	bld	r28, 0
    4da4:	1f 92       	push	r1
    4da6:	cf 93       	push	r28
    4da8:	8b ed       	ldi	r24, 0xDB	; 219
    4daa:	98 e0       	ldi	r25, 0x08	; 8
    4dac:	9f 93       	push	r25
    4dae:	8f 93       	push	r24
    4db0:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4db4:	89 ed       	ldi	r24, 0xD9	; 217
    4db6:	98 e0       	ldi	r25, 0x08	; 8
    4db8:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4dbc:	8d b7       	in	r24, 0x3d	; 61
    4dbe:	9e b7       	in	r25, 0x3e	; 62
    4dc0:	4c 96       	adiw	r24, 0x1c	; 28
    4dc2:	0f b6       	in	r0, 0x3f	; 63
    4dc4:	f8 94       	cli
    4dc6:	9e bf       	out	0x3e, r25	; 62
    4dc8:	0f be       	out	0x3f, r0	; 63
    4dca:	8d bf       	out	0x3d, r24	; 61
    4dcc:	04 c0       	rjmp	.+8      	; 0x4dd6 <command_common+0x368>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    4dce:	84 e3       	ldi	r24, 0x34	; 52
    4dd0:	98 e0       	ldi	r25, 0x08	; 8
    4dd2:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    4dd6:	c1 e0       	ldi	r28, 0x01	; 1
    4dd8:	b7 c0       	rjmp	.+366    	; 0x4f48 <command_common+0x4da>
            print("\n\nbootloader... ");
            wait_ms(1000);
            bootloader_jump(); // not return
            break;
        case KC_D:
            if (debug_enable) {
    4dda:	80 91 c1 01 	lds	r24, 0x01C1
    4dde:	c8 2f       	mov	r28, r24
    4de0:	c1 70       	andi	r28, 0x01	; 1
    4de2:	80 ff       	sbrs	r24, 0
    4de4:	09 c0       	rjmp	.+18     	; 0x4df8 <command_common+0x38a>
                print("\ndebug: off\n");
    4de6:	89 e2       	ldi	r24, 0x29	; 41
    4de8:	9c e0       	ldi	r25, 0x0C	; 12
    4dea:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
                debug_matrix   = false;
    4dee:	80 91 c1 01 	lds	r24, 0x01C1
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    4df2:	81 7f       	andi	r24, 0xF1	; 241
    4df4:	8e 7f       	andi	r24, 0xFE	; 254
    4df6:	44 c0       	rjmp	.+136    	; 0x4e80 <command_common+0x412>
            } else {
                print("\ndebug: on\n");
    4df8:	8d e1       	ldi	r24, 0x1D	; 29
    4dfa:	9c e0       	ldi	r25, 0x0C	; 12
    4dfc:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
                debug_enable   = true;
    4e00:	80 91 c1 01 	lds	r24, 0x01C1
    4e04:	81 60       	ori	r24, 0x01	; 1
    4e06:	80 93 c1 01 	sts	0x01C1, r24
    4e0a:	e5 cf       	rjmp	.-54     	; 0x4dd6 <command_common+0x368>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    4e0c:	80 91 c1 01 	lds	r24, 0x01C1
    4e10:	81 fb       	bst	r24, 1
    4e12:	cc 27       	eor	r28, r28
    4e14:	c0 f9       	bld	r28, 0
    4e16:	91 e0       	ldi	r25, 0x01	; 1
    4e18:	c9 27       	eor	r28, r25
    4e1a:	c0 fb       	bst	r28, 0
    4e1c:	81 f9       	bld	r24, 1
    4e1e:	80 93 c1 01 	sts	0x01C1, r24
            if (debug_matrix) {
    4e22:	cc 23       	and	r28, r28
    4e24:	19 f0       	breq	.+6      	; 0x4e2c <command_common+0x3be>
                print("\nmatrix: on\n");
    4e26:	80 e1       	ldi	r24, 0x10	; 16
    4e28:	9c e0       	ldi	r25, 0x0C	; 12
    4e2a:	25 c0       	rjmp	.+74     	; 0x4e76 <command_common+0x408>
                debug_enable = true;
            } else {
                print("\nmatrix: off\n");
    4e2c:	82 e0       	ldi	r24, 0x02	; 2
    4e2e:	9c e0       	ldi	r25, 0x0C	; 12
    4e30:	d0 cf       	rjmp	.-96     	; 0x4dd2 <command_common+0x364>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    4e32:	80 91 c1 01 	lds	r24, 0x01C1
    4e36:	82 fb       	bst	r24, 2
    4e38:	cc 27       	eor	r28, r28
    4e3a:	c0 f9       	bld	r28, 0
    4e3c:	91 e0       	ldi	r25, 0x01	; 1
    4e3e:	c9 27       	eor	r28, r25
    4e40:	c0 fb       	bst	r28, 0
    4e42:	82 f9       	bld	r24, 2
    4e44:	80 93 c1 01 	sts	0x01C1, r24
            if (debug_keyboard) {
    4e48:	cc 23       	and	r28, r28
    4e4a:	19 f0       	breq	.+6      	; 0x4e52 <command_common+0x3e4>
                print("\nkeyboard: on\n");
    4e4c:	83 ef       	ldi	r24, 0xF3	; 243
    4e4e:	9b e0       	ldi	r25, 0x0B	; 11
    4e50:	12 c0       	rjmp	.+36     	; 0x4e76 <command_common+0x408>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    4e52:	83 ee       	ldi	r24, 0xE3	; 227
    4e54:	9b e0       	ldi	r25, 0x0B	; 11
    4e56:	bd cf       	rjmp	.-134    	; 0x4dd2 <command_common+0x364>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    4e58:	80 91 c1 01 	lds	r24, 0x01C1
    4e5c:	83 fb       	bst	r24, 3
    4e5e:	cc 27       	eor	r28, r28
    4e60:	c0 f9       	bld	r28, 0
    4e62:	91 e0       	ldi	r25, 0x01	; 1
    4e64:	c9 27       	eor	r28, r25
    4e66:	c0 fb       	bst	r28, 0
    4e68:	83 f9       	bld	r24, 3
    4e6a:	80 93 c1 01 	sts	0x01C1, r24
            if (debug_mouse) {
    4e6e:	cc 23       	and	r28, r28
    4e70:	51 f0       	breq	.+20     	; 0x4e86 <command_common+0x418>
                print("\nmouse: on\n");
    4e72:	87 ed       	ldi	r24, 0xD7	; 215
    4e74:	9b e0       	ldi	r25, 0x0B	; 11
    4e76:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
                debug_enable = true;
    4e7a:	80 91 c1 01 	lds	r24, 0x01C1
    4e7e:	81 60       	ori	r24, 0x01	; 1
    4e80:	80 93 c1 01 	sts	0x01C1, r24
    4e84:	61 c0       	rjmp	.+194    	; 0x4f48 <command_common+0x4da>
            } else {
                print("\nmouse: off\n");
    4e86:	8a ec       	ldi	r24, 0xCA	; 202
    4e88:	9b e0       	ldi	r25, 0x0B	; 11
    4e8a:	a3 cf       	rjmp	.-186    	; 0x4dd2 <command_common+0x364>
            // TODO
            );
#endif
            break;
        case KC_S:
            print("\n\t- Status -\n");
    4e8c:	81 ea       	ldi	r24, 0xA1	; 161
    4e8e:	9a e0       	ldi	r25, 0x0A	; 10
    4e90:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
            print_val_hex8(host_keyboard_leds());
    4e94:	0e 94 98 10 	call	0x2130	; 0x2130 <host_keyboard_leds>
    4e98:	1f 92       	push	r1
    4e9a:	8f 93       	push	r24
    4e9c:	87 e8       	ldi	r24, 0x87	; 135
    4e9e:	9a e0       	ldi	r25, 0x0A	; 10
    4ea0:	9f 93       	push	r25
    4ea2:	8f 93       	push	r24
    4ea4:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
            print_val_hex8(keyboard_protocol);
    4ea8:	80 91 0b 01 	lds	r24, 0x010B
    4eac:	1f 92       	push	r1
    4eae:	8f 93       	push	r24
    4eb0:	80 e7       	ldi	r24, 0x70	; 112
    4eb2:	9a e0       	ldi	r25, 0x0A	; 10
    4eb4:	9f 93       	push	r25
    4eb6:	8f 93       	push	r24
    4eb8:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
            print_val_hex8(keyboard_idle);
    4ebc:	80 91 5e 01 	lds	r24, 0x015E
    4ec0:	1f 92       	push	r1
    4ec2:	8f 93       	push	r24
    4ec4:	8d e5       	ldi	r24, 0x5D	; 93
    4ec6:	9a e0       	ldi	r25, 0x0A	; 10
    4ec8:	9f 93       	push	r25
    4eca:	8f 93       	push	r24
    4ecc:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
    4ed0:	80 91 0c 01 	lds	r24, 0x010C
    4ed4:	1f 92       	push	r1
    4ed6:	8f 93       	push	r24
    4ed8:	8a e4       	ldi	r24, 0x4A	; 74
    4eda:	9a e0       	ldi	r25, 0x0A	; 10
    4edc:	9f 93       	push	r25
    4ede:	8f 93       	push	r24
    4ee0:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
#endif
            print_val_hex32(timer_read32());
    4ee4:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <timer_read32>
    4ee8:	9f 93       	push	r25
    4eea:	8f 93       	push	r24
    4eec:	7f 93       	push	r23
    4eee:	6f 93       	push	r22
    4ef0:	83 e3       	ldi	r24, 0x33	; 51
    4ef2:	9a e0       	ldi	r25, 0x0A	; 10
    4ef4:	9f 93       	push	r25
    4ef6:	8f 93       	push	r24
    4ef8:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    4efc:	8d b7       	in	r24, 0x3d	; 61
    4efe:	9e b7       	in	r25, 0x3e	; 62
    4f00:	46 96       	adiw	r24, 0x16	; 22
    4f02:	0f b6       	in	r0, 0x3f	; 63
    4f04:	f8 94       	cli
    4f06:	9e bf       	out	0x3e, r25	; 62
    4f08:	0f be       	out	0x3f, r0	; 63
    4f0a:	8d bf       	out	0x3d, r24	; 61
    4f0c:	64 cf       	rjmp	.-312    	; 0x4dd6 <command_common+0x368>
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    4f0e:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    4f12:	c0 91 0c 01 	lds	r28, 0x010C
    4f16:	81 e0       	ldi	r24, 0x01	; 1
    4f18:	c8 27       	eor	r28, r24
    4f1a:	c0 93 0c 01 	sts	0x010C, r28
            if (keyboard_nkro) {
    4f1e:	cc 23       	and	r28, r28
    4f20:	29 f0       	breq	.+10     	; 0x4f2c <command_common+0x4be>
                print("NKRO: on\n");
    4f22:	89 e2       	ldi	r24, 0x29	; 41
    4f24:	9a e0       	ldi	r25, 0x0A	; 10
    4f26:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4f2a:	0e c0       	rjmp	.+28     	; 0x4f48 <command_common+0x4da>
            } else {
                print("NKRO: off\n");
    4f2c:	8e e1       	ldi	r24, 0x1E	; 30
    4f2e:	9a e0       	ldi	r25, 0x0A	; 10
    4f30:	50 cf       	rjmp	.-352    	; 0x4dd2 <command_common+0x364>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    4f32:	80 e0       	ldi	r24, 0x00	; 0
    4f34:	01 c0       	rjmp	.+2      	; 0x4f38 <command_common+0x4ca>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    4f36:	89 53       	subi	r24, 0x39	; 57
    4f38:	0e 94 19 25 	call	0x4a32	; 0x4a32 <switch_default_layer>
    4f3c:	4c cf       	rjmp	.-360    	; 0x4dd6 <command_common+0x368>
            break;
        default:
            print("?");
    4f3e:	8c e1       	ldi	r24, 0x1C	; 28
    4f40:	9a e0       	ldi	r25, 0x0A	; 10
    4f42:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
            return false;
    4f46:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    4f48:	8c 2f       	mov	r24, r28
    4f4a:	cf 91       	pop	r28
    4f4c:	08 95       	ret

00004f4e <command_extra>:
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    (void)code;
    return false;
}
    4f4e:	80 e0       	ldi	r24, 0x00	; 0
    4f50:	08 95       	ret

00004f52 <command_console_extra>:
bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    (void)code;
    return false;
}
    4f52:	80 e0       	ldi	r24, 0x00	; 0
    4f54:	08 95       	ret

00004f56 <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    4f56:	cf 93       	push	r28
    4f58:	c8 2f       	mov	r28, r24
    switch (command_state) {
    4f5a:	80 91 d1 01 	lds	r24, 0x01D1
    4f5e:	81 30       	cpi	r24, 0x01	; 1
    4f60:	71 f0       	breq	.+28     	; 0x4f7e <command_proc+0x28>
    4f62:	20 f0       	brcs	.+8      	; 0x4f6c <command_proc+0x16>
    4f64:	82 30       	cpi	r24, 0x02	; 2
    4f66:	09 f4       	brne	.+2      	; 0x4f6a <command_proc+0x14>
    4f68:	48 c0       	rjmp	.+144    	; 0x4ffa <command_proc+0xa4>
    4f6a:	3f c1       	rjmp	.+638    	; 0x51ea <command_proc+0x294>
        case ONESHOT:
            if (!IS_COMMAND())
    4f6c:	a0 91 0d 01 	lds	r26, 0x010D
    4f70:	b0 91 0e 01 	lds	r27, 0x010E
    4f74:	8c 91       	ld	r24, X
    4f76:	82 32       	cpi	r24, 0x22	; 34
    4f78:	09 f0       	breq	.+2      	; 0x4f7c <command_proc+0x26>
    4f7a:	39 c1       	rjmp	.+626    	; 0x51ee <command_proc+0x298>
    4f7c:	07 c0       	rjmp	.+14     	; 0x4f8c <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    4f7e:	a0 91 0d 01 	lds	r26, 0x010D
    4f82:	b0 91 0e 01 	lds	r27, 0x010E
    4f86:	8c 91       	ld	r24, X
    4f88:	82 32       	cpi	r24, 0x22	; 34
    4f8a:	49 f4       	brne	.+18     	; 0x4f9e <command_proc+0x48>
                return (command_extra(code) || command_common(code));
    4f8c:	8c 2f       	mov	r24, r28
    4f8e:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <command_extra>
    4f92:	81 11       	cpse	r24, r1
    4f94:	2f c0       	rjmp	.+94     	; 0x4ff4 <command_proc+0x9e>
    4f96:	8c 2f       	mov	r24, r28
    4f98:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <command_common>
    4f9c:	2c c0       	rjmp	.+88     	; 0x4ff6 <command_proc+0xa0>
            else
                return (command_console_extra(code) || command_console(code));
    4f9e:	8c 2f       	mov	r24, r28
    4fa0:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <command_console_extra>
    4fa4:	81 11       	cpse	r24, r1
    4fa6:	26 c0       	rjmp	.+76     	; 0x4ff4 <command_proc+0x9e>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4fa8:	c4 31       	cpi	r28, 0x14	; 20
    4faa:	e1 f0       	breq	.+56     	; 0x4fe4 <command_proc+0x8e>
    4fac:	70 f4       	brcc	.+28     	; 0x4fca <command_proc+0x74>
    4fae:	cb 30       	cpi	r28, 0x0B	; 11
    4fb0:	81 f0       	breq	.+32     	; 0x4fd2 <command_proc+0x7c>
    4fb2:	c0 31       	cpi	r28, 0x10	; 16
    4fb4:	d1 f4       	brne	.+52     	; 0x4fea <command_proc+0x94>
        case KC_ESC:
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    4fb6:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <mousekey_console_help>
            print("M> ");
    4fba:	80 e0       	ldi	r24, 0x00	; 0
    4fbc:	98 e0       	ldi	r25, 0x08	; 8
    4fbe:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
            command_state = MOUSEKEY;
    4fc2:	82 e0       	ldi	r24, 0x02	; 2
    4fc4:	80 93 d1 01 	sts	0x01D1, r24
    4fc8:	15 c0       	rjmp	.+42     	; 0x4ff4 <command_proc+0x9e>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4fca:	c9 32       	cpi	r28, 0x29	; 41
    4fcc:	59 f0       	breq	.+22     	; 0x4fe4 <command_proc+0x8e>
    4fce:	c8 33       	cpi	r28, 0x38	; 56
    4fd0:	61 f4       	brne	.+24     	; 0x4fea <command_proc+0x94>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4fd2:	8d e0       	ldi	r24, 0x0D	; 13
    4fd4:	98 e0       	ldi	r25, 0x08	; 8
    4fd6:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    4fda:	84 e0       	ldi	r24, 0x04	; 4
    4fdc:	98 e0       	ldi	r25, 0x08	; 8
    4fde:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4fe2:	08 c0       	rjmp	.+16     	; 0x4ff4 <command_proc+0x9e>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    4fe4:	10 92 d1 01 	sts	0x01D1, r1
    4fe8:	04 c1       	rjmp	.+520    	; 0x51f2 <command_proc+0x29c>
            print("M> ");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    4fea:	8e ef       	ldi	r24, 0xFE	; 254
    4fec:	97 e0       	ldi	r25, 0x07	; 7
    4fee:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4ff2:	ff c0       	rjmp	.+510    	; 0x51f2 <command_proc+0x29c>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    4ff4:	81 e0       	ldi	r24, 0x01	; 1
    4ff6:	81 70       	andi	r24, 0x01	; 1
    4ff8:	fe c0       	rjmp	.+508    	; 0x51f6 <command_proc+0x2a0>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    4ffa:	c4 32       	cpi	r28, 0x24	; 36
    4ffc:	28 f5       	brcc	.+74     	; 0x5048 <command_proc+0xf2>
    4ffe:	ce 31       	cpi	r28, 0x1E	; 30
    5000:	08 f0       	brcs	.+2      	; 0x5004 <command_proc+0xae>
    5002:	c1 c0       	rjmp	.+386    	; 0x5186 <command_proc+0x230>
    5004:	cb 30       	cpi	r28, 0x0B	; 11
    5006:	a1 f1       	breq	.+104    	; 0x5070 <command_proc+0x11a>
    5008:	d0 f4       	brcc	.+52     	; 0x503e <command_proc+0xe8>
    500a:	c7 30       	cpi	r28, 0x07	; 7
    500c:	09 f0       	breq	.+2      	; 0x5010 <command_proc+0xba>
    500e:	d3 c0       	rjmp	.+422    	; 0x51b6 <command_proc+0x260>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    5010:	8e e1       	ldi	r24, 0x1E	; 30
    5012:	80 93 14 01 	sts	0x0114, r24
            mk_interval = MOUSEKEY_INTERVAL;
    5016:	82 e3       	ldi	r24, 0x32	; 50
    5018:	80 93 13 01 	sts	0x0113, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    501c:	8a e0       	ldi	r24, 0x0A	; 10
    501e:	80 93 12 01 	sts	0x0112, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    5022:	84 e1       	ldi	r24, 0x14	; 20
    5024:	80 93 11 01 	sts	0x0111, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    5028:	88 e0       	ldi	r24, 0x08	; 8
    502a:	80 93 10 01 	sts	0x0110, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    502e:	88 e2       	ldi	r24, 0x28	; 40
    5030:	80 93 0f 01 	sts	0x010F, r24
            print("set default\n");
    5034:	84 ea       	ldi	r24, 0xA4	; 164
    5036:	96 e0       	ldi	r25, 0x06	; 6
    5038:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    503c:	bf c0       	rjmp	.+382    	; 0x51bc <command_proc+0x266>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    503e:	c3 31       	cpi	r28, 0x13	; 19
    5040:	49 f1       	breq	.+82     	; 0x5094 <command_proc+0x13e>
    5042:	c4 31       	cpi	r28, 0x14	; 20
    5044:	c1 f0       	breq	.+48     	; 0x5076 <command_proc+0x120>
    5046:	b7 c0       	rjmp	.+366    	; 0x51b6 <command_proc+0x260>
    5048:	cb 34       	cpi	r28, 0x4B	; 75
    504a:	09 f4       	brne	.+2      	; 0x504e <command_proc+0xf8>
    504c:	a9 c0       	rjmp	.+338    	; 0x51a0 <command_proc+0x24a>
    504e:	28 f4       	brcc	.+10     	; 0x505a <command_proc+0x104>
    5050:	c9 32       	cpi	r28, 0x29	; 41
    5052:	89 f0       	breq	.+34     	; 0x5076 <command_proc+0x120>
    5054:	c8 33       	cpi	r28, 0x38	; 56
    5056:	61 f0       	breq	.+24     	; 0x5070 <command_proc+0x11a>
    5058:	ae c0       	rjmp	.+348    	; 0x51b6 <command_proc+0x260>
    505a:	c1 35       	cpi	r28, 0x51	; 81
    505c:	09 f4       	brne	.+2      	; 0x5060 <command_proc+0x10a>
    505e:	9e c0       	rjmp	.+316    	; 0x519c <command_proc+0x246>
    5060:	c2 35       	cpi	r28, 0x52	; 82
    5062:	09 f4       	brne	.+2      	; 0x5066 <command_proc+0x110>
    5064:	99 c0       	rjmp	.+306    	; 0x5198 <command_proc+0x242>
    5066:	ce 34       	cpi	r28, 0x4E	; 78
    5068:	09 f0       	breq	.+2      	; 0x506c <command_proc+0x116>
    506a:	a5 c0       	rjmp	.+330    	; 0x51b6 <command_proc+0x260>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    506c:	6a e0       	ldi	r22, 0x0A	; 10
    506e:	9e c0       	rjmp	.+316    	; 0x51ac <command_proc+0x256>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    5070:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <mousekey_console_help>
    5074:	a3 c0       	rjmp	.+326    	; 0x51bc <command_proc+0x266>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    5076:	80 91 d0 01 	lds	r24, 0x01D0
    507a:	88 23       	and	r24, r24
    507c:	19 f0       	breq	.+6      	; 0x5084 <command_proc+0x12e>
                mousekey_param = 0;
    507e:	10 92 d0 01 	sts	0x01D0, r1
    5082:	9c c0       	rjmp	.+312    	; 0x51bc <command_proc+0x266>
            } else {
                print("C> ");
    5084:	81 eb       	ldi	r24, 0xB1	; 177
    5086:	96 e0       	ldi	r25, 0x06	; 6
    5088:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
                command_state = CONSOLE;
    508c:	81 e0       	ldi	r24, 0x01	; 1
    508e:	80 93 d1 01 	sts	0x01D1, r24
    5092:	b1 c0       	rjmp	.+354    	; 0x51f6 <command_proc+0x2a0>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    5094:	8b e8       	ldi	r24, 0x8B	; 139
    5096:	96 e0       	ldi	r25, 0x06	; 6
    5098:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    509c:	89 e7       	ldi	r24, 0x79	; 121
    509e:	96 e0       	ldi	r25, 0x06	; 6
    50a0:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    50a4:	80 91 14 01 	lds	r24, 0x0114
    50a8:	1f 92       	push	r1
    50aa:	8f 93       	push	r24
    50ac:	86 e7       	ldi	r24, 0x76	; 118
    50ae:	96 e0       	ldi	r25, 0x06	; 6
    50b0:	9f 93       	push	r25
    50b2:	8f 93       	push	r24
    50b4:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    50b8:	84 e7       	ldi	r24, 0x74	; 116
    50ba:	96 e0       	ldi	r25, 0x06	; 6
    50bc:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    50c0:	82 e6       	ldi	r24, 0x62	; 98
    50c2:	96 e0       	ldi	r25, 0x06	; 6
    50c4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    50c8:	80 91 13 01 	lds	r24, 0x0113
    50cc:	1f 92       	push	r1
    50ce:	8f 93       	push	r24
    50d0:	8f e5       	ldi	r24, 0x5F	; 95
    50d2:	96 e0       	ldi	r25, 0x06	; 6
    50d4:	9f 93       	push	r25
    50d6:	8f 93       	push	r24
    50d8:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    50dc:	8d e5       	ldi	r24, 0x5D	; 93
    50de:	96 e0       	ldi	r25, 0x06	; 6
    50e0:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    50e4:	8e e4       	ldi	r24, 0x4E	; 78
    50e6:	96 e0       	ldi	r25, 0x06	; 6
    50e8:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    50ec:	80 91 12 01 	lds	r24, 0x0112
    50f0:	1f 92       	push	r1
    50f2:	8f 93       	push	r24
    50f4:	8b e4       	ldi	r24, 0x4B	; 75
    50f6:	96 e0       	ldi	r25, 0x06	; 6
    50f8:	9f 93       	push	r25
    50fa:	8f 93       	push	r24
    50fc:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    5100:	89 e4       	ldi	r24, 0x49	; 73
    5102:	96 e0       	ldi	r25, 0x06	; 6
    5104:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    5108:	88 e3       	ldi	r24, 0x38	; 56
    510a:	96 e0       	ldi	r25, 0x06	; 6
    510c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    5110:	80 91 11 01 	lds	r24, 0x0111
    5114:	1f 92       	push	r1
    5116:	8f 93       	push	r24
    5118:	85 e3       	ldi	r24, 0x35	; 53
    511a:	96 e0       	ldi	r25, 0x06	; 6
    511c:	9f 93       	push	r25
    511e:	8f 93       	push	r24
    5120:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    5124:	83 e3       	ldi	r24, 0x33	; 51
    5126:	96 e0       	ldi	r25, 0x06	; 6
    5128:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    512c:	8e e1       	ldi	r24, 0x1E	; 30
    512e:	96 e0       	ldi	r25, 0x06	; 6
    5130:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    5134:	80 91 10 01 	lds	r24, 0x0110
    5138:	1f 92       	push	r1
    513a:	8f 93       	push	r24
    513c:	8b e1       	ldi	r24, 0x1B	; 27
    513e:	96 e0       	ldi	r25, 0x06	; 6
    5140:	9f 93       	push	r25
    5142:	8f 93       	push	r24
    5144:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    5148:	89 e1       	ldi	r24, 0x19	; 25
    514a:	96 e0       	ldi	r25, 0x06	; 6
    514c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    5150:	82 e0       	ldi	r24, 0x02	; 2
    5152:	96 e0       	ldi	r25, 0x06	; 6
    5154:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    5158:	80 91 0f 01 	lds	r24, 0x010F
    515c:	1f 92       	push	r1
    515e:	8f 93       	push	r24
    5160:	8f ef       	ldi	r24, 0xFF	; 255
    5162:	95 e0       	ldi	r25, 0x05	; 5
    5164:	9f 93       	push	r25
    5166:	8f 93       	push	r24
    5168:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    516c:	8d ef       	ldi	r24, 0xFD	; 253
    516e:	95 e0       	ldi	r25, 0x05	; 5
    5170:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    5174:	8d b7       	in	r24, 0x3d	; 61
    5176:	9e b7       	in	r25, 0x3e	; 62
    5178:	48 96       	adiw	r24, 0x18	; 24
    517a:	0f b6       	in	r0, 0x3f	; 63
    517c:	f8 94       	cli
    517e:	9e bf       	out	0x3e, r25	; 62
    5180:	0f be       	out	0x3f, r0	; 63
    5182:	8d bf       	out	0x3d, r24	; 61
    5184:	1b c0       	rjmp	.+54     	; 0x51bc <command_proc+0x266>
    5186:	ce 51       	subi	r28, 0x1E	; 30
    5188:	ec 2f       	mov	r30, r28
    518a:	f0 e0       	ldi	r31, 0x00	; 0
    518c:	e2 5d       	subi	r30, 0xD2	; 210
    518e:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    5190:	80 81       	ld	r24, Z
    5192:	80 93 d0 01 	sts	0x01D0, r24
    5196:	12 c0       	rjmp	.+36     	; 0x51bc <command_proc+0x266>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    5198:	61 e0       	ldi	r22, 0x01	; 1
    519a:	03 c0       	rjmp	.+6      	; 0x51a2 <command_proc+0x24c>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    519c:	61 e0       	ldi	r22, 0x01	; 1
    519e:	06 c0       	rjmp	.+12     	; 0x51ac <command_proc+0x256>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    51a0:	6a e0       	ldi	r22, 0x0A	; 10
    51a2:	80 91 d0 01 	lds	r24, 0x01D0
    51a6:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <mousekey_param_inc>
    51aa:	08 c0       	rjmp	.+16     	; 0x51bc <command_proc+0x266>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    51ac:	80 91 d0 01 	lds	r24, 0x01D0
    51b0:	0e 94 9b 24 	call	0x4936	; 0x4936 <mousekey_param_dec>
    51b4:	03 c0       	rjmp	.+6      	; 0x51bc <command_proc+0x266>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default\n");
            break;
        default:
            print("?");
    51b6:	82 ea       	ldi	r24, 0xA2	; 162
    51b8:	96 e0       	ldi	r25, 0x06	; 6
    51ba:	13 c0       	rjmp	.+38     	; 0x51e2 <command_proc+0x28c>
            return false;
    }
    if (mousekey_param) {
    51bc:	80 91 d0 01 	lds	r24, 0x01D0
    51c0:	88 23       	and	r24, r24
    51c2:	69 f0       	breq	.+26     	; 0x51de <command_proc+0x288>
        xprintf("M%d> ", mousekey_param);
    51c4:	1f 92       	push	r1
    51c6:	8f 93       	push	r24
    51c8:	8c e9       	ldi	r24, 0x9C	; 156
    51ca:	96 e0       	ldi	r25, 0x06	; 6
    51cc:	9f 93       	push	r25
    51ce:	8f 93       	push	r24
    51d0:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    51d4:	0f 90       	pop	r0
    51d6:	0f 90       	pop	r0
    51d8:	0f 90       	pop	r0
    51da:	0f 90       	pop	r0
    51dc:	04 c0       	rjmp	.+8      	; 0x51e6 <command_proc+0x290>
    } else {
        print("M>" );
    51de:	89 e9       	ldi	r24, 0x99	; 153
    51e0:	96 e0       	ldi	r25, 0x06	; 6
    51e2:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    51e6:	81 e0       	ldi	r24, 0x01	; 1
    51e8:	06 c0       	rjmp	.+12     	; 0x51f6 <command_proc+0x2a0>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    51ea:	10 92 d1 01 	sts	0x01D1, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    51ee:	80 e0       	ldi	r24, 0x00	; 0
    51f0:	02 c0       	rjmp	.+4      	; 0x51f6 <command_proc+0x2a0>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    51f2:	80 e0       	ldi	r24, 0x00	; 0
    51f4:	00 cf       	rjmp	.-512    	; 0x4ff6 <command_proc+0xa0>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    51f6:	cf 91       	pop	r28
    51f8:	08 95       	ret

000051fa <__fixsfsi>:
    51fa:	04 d0       	rcall	.+8      	; 0x5204 <__fixunssfsi>
    51fc:	68 94       	set
    51fe:	b1 11       	cpse	r27, r1
    5200:	8d c0       	rjmp	.+282    	; 0x531c <__fp_szero>
    5202:	08 95       	ret

00005204 <__fixunssfsi>:
    5204:	70 d0       	rcall	.+224    	; 0x52e6 <__fp_splitA>
    5206:	88 f0       	brcs	.+34     	; 0x522a <__fixunssfsi+0x26>
    5208:	9f 57       	subi	r25, 0x7F	; 127
    520a:	90 f0       	brcs	.+36     	; 0x5230 <__fixunssfsi+0x2c>
    520c:	b9 2f       	mov	r27, r25
    520e:	99 27       	eor	r25, r25
    5210:	b7 51       	subi	r27, 0x17	; 23
    5212:	a0 f0       	brcs	.+40     	; 0x523c <__fixunssfsi+0x38>
    5214:	d1 f0       	breq	.+52     	; 0x524a <__fixunssfsi+0x46>
    5216:	66 0f       	add	r22, r22
    5218:	77 1f       	adc	r23, r23
    521a:	88 1f       	adc	r24, r24
    521c:	99 1f       	adc	r25, r25
    521e:	1a f0       	brmi	.+6      	; 0x5226 <__fixunssfsi+0x22>
    5220:	ba 95       	dec	r27
    5222:	c9 f7       	brne	.-14     	; 0x5216 <__fixunssfsi+0x12>
    5224:	12 c0       	rjmp	.+36     	; 0x524a <__fixunssfsi+0x46>
    5226:	b1 30       	cpi	r27, 0x01	; 1
    5228:	81 f0       	breq	.+32     	; 0x524a <__fixunssfsi+0x46>
    522a:	77 d0       	rcall	.+238    	; 0x531a <__fp_zero>
    522c:	b1 e0       	ldi	r27, 0x01	; 1
    522e:	08 95       	ret
    5230:	74 c0       	rjmp	.+232    	; 0x531a <__fp_zero>
    5232:	67 2f       	mov	r22, r23
    5234:	78 2f       	mov	r23, r24
    5236:	88 27       	eor	r24, r24
    5238:	b8 5f       	subi	r27, 0xF8	; 248
    523a:	39 f0       	breq	.+14     	; 0x524a <__fixunssfsi+0x46>
    523c:	b9 3f       	cpi	r27, 0xF9	; 249
    523e:	cc f3       	brlt	.-14     	; 0x5232 <__fixunssfsi+0x2e>
    5240:	86 95       	lsr	r24
    5242:	77 95       	ror	r23
    5244:	67 95       	ror	r22
    5246:	b3 95       	inc	r27
    5248:	d9 f7       	brne	.-10     	; 0x5240 <__fixunssfsi+0x3c>
    524a:	3e f4       	brtc	.+14     	; 0x525a <__fixunssfsi+0x56>
    524c:	90 95       	com	r25
    524e:	80 95       	com	r24
    5250:	70 95       	com	r23
    5252:	61 95       	neg	r22
    5254:	7f 4f       	sbci	r23, 0xFF	; 255
    5256:	8f 4f       	sbci	r24, 0xFF	; 255
    5258:	9f 4f       	sbci	r25, 0xFF	; 255
    525a:	08 95       	ret

0000525c <__floatunsisf>:
    525c:	e8 94       	clt
    525e:	09 c0       	rjmp	.+18     	; 0x5272 <__floatsisf+0x12>

00005260 <__floatsisf>:
    5260:	97 fb       	bst	r25, 7
    5262:	3e f4       	brtc	.+14     	; 0x5272 <__floatsisf+0x12>
    5264:	90 95       	com	r25
    5266:	80 95       	com	r24
    5268:	70 95       	com	r23
    526a:	61 95       	neg	r22
    526c:	7f 4f       	sbci	r23, 0xFF	; 255
    526e:	8f 4f       	sbci	r24, 0xFF	; 255
    5270:	9f 4f       	sbci	r25, 0xFF	; 255
    5272:	99 23       	and	r25, r25
    5274:	a9 f0       	breq	.+42     	; 0x52a0 <__floatsisf+0x40>
    5276:	f9 2f       	mov	r31, r25
    5278:	96 e9       	ldi	r25, 0x96	; 150
    527a:	bb 27       	eor	r27, r27
    527c:	93 95       	inc	r25
    527e:	f6 95       	lsr	r31
    5280:	87 95       	ror	r24
    5282:	77 95       	ror	r23
    5284:	67 95       	ror	r22
    5286:	b7 95       	ror	r27
    5288:	f1 11       	cpse	r31, r1
    528a:	f8 cf       	rjmp	.-16     	; 0x527c <__floatsisf+0x1c>
    528c:	fa f4       	brpl	.+62     	; 0x52cc <__floatsisf+0x6c>
    528e:	bb 0f       	add	r27, r27
    5290:	11 f4       	brne	.+4      	; 0x5296 <__floatsisf+0x36>
    5292:	60 ff       	sbrs	r22, 0
    5294:	1b c0       	rjmp	.+54     	; 0x52cc <__floatsisf+0x6c>
    5296:	6f 5f       	subi	r22, 0xFF	; 255
    5298:	7f 4f       	sbci	r23, 0xFF	; 255
    529a:	8f 4f       	sbci	r24, 0xFF	; 255
    529c:	9f 4f       	sbci	r25, 0xFF	; 255
    529e:	16 c0       	rjmp	.+44     	; 0x52cc <__floatsisf+0x6c>
    52a0:	88 23       	and	r24, r24
    52a2:	11 f0       	breq	.+4      	; 0x52a8 <__floatsisf+0x48>
    52a4:	96 e9       	ldi	r25, 0x96	; 150
    52a6:	11 c0       	rjmp	.+34     	; 0x52ca <__floatsisf+0x6a>
    52a8:	77 23       	and	r23, r23
    52aa:	21 f0       	breq	.+8      	; 0x52b4 <__floatsisf+0x54>
    52ac:	9e e8       	ldi	r25, 0x8E	; 142
    52ae:	87 2f       	mov	r24, r23
    52b0:	76 2f       	mov	r23, r22
    52b2:	05 c0       	rjmp	.+10     	; 0x52be <__floatsisf+0x5e>
    52b4:	66 23       	and	r22, r22
    52b6:	71 f0       	breq	.+28     	; 0x52d4 <__floatsisf+0x74>
    52b8:	96 e8       	ldi	r25, 0x86	; 134
    52ba:	86 2f       	mov	r24, r22
    52bc:	70 e0       	ldi	r23, 0x00	; 0
    52be:	60 e0       	ldi	r22, 0x00	; 0
    52c0:	2a f0       	brmi	.+10     	; 0x52cc <__floatsisf+0x6c>
    52c2:	9a 95       	dec	r25
    52c4:	66 0f       	add	r22, r22
    52c6:	77 1f       	adc	r23, r23
    52c8:	88 1f       	adc	r24, r24
    52ca:	da f7       	brpl	.-10     	; 0x52c2 <__floatsisf+0x62>
    52cc:	88 0f       	add	r24, r24
    52ce:	96 95       	lsr	r25
    52d0:	87 95       	ror	r24
    52d2:	97 f9       	bld	r25, 7
    52d4:	08 95       	ret

000052d6 <__fp_split3>:
    52d6:	57 fd       	sbrc	r21, 7
    52d8:	90 58       	subi	r25, 0x80	; 128
    52da:	44 0f       	add	r20, r20
    52dc:	55 1f       	adc	r21, r21
    52de:	59 f0       	breq	.+22     	; 0x52f6 <__fp_splitA+0x10>
    52e0:	5f 3f       	cpi	r21, 0xFF	; 255
    52e2:	71 f0       	breq	.+28     	; 0x5300 <__fp_splitA+0x1a>
    52e4:	47 95       	ror	r20

000052e6 <__fp_splitA>:
    52e6:	88 0f       	add	r24, r24
    52e8:	97 fb       	bst	r25, 7
    52ea:	99 1f       	adc	r25, r25
    52ec:	61 f0       	breq	.+24     	; 0x5306 <__fp_splitA+0x20>
    52ee:	9f 3f       	cpi	r25, 0xFF	; 255
    52f0:	79 f0       	breq	.+30     	; 0x5310 <__fp_splitA+0x2a>
    52f2:	87 95       	ror	r24
    52f4:	08 95       	ret
    52f6:	12 16       	cp	r1, r18
    52f8:	13 06       	cpc	r1, r19
    52fa:	14 06       	cpc	r1, r20
    52fc:	55 1f       	adc	r21, r21
    52fe:	f2 cf       	rjmp	.-28     	; 0x52e4 <__fp_split3+0xe>
    5300:	46 95       	lsr	r20
    5302:	f1 df       	rcall	.-30     	; 0x52e6 <__fp_splitA>
    5304:	08 c0       	rjmp	.+16     	; 0x5316 <__fp_splitA+0x30>
    5306:	16 16       	cp	r1, r22
    5308:	17 06       	cpc	r1, r23
    530a:	18 06       	cpc	r1, r24
    530c:	99 1f       	adc	r25, r25
    530e:	f1 cf       	rjmp	.-30     	; 0x52f2 <__fp_splitA+0xc>
    5310:	86 95       	lsr	r24
    5312:	71 05       	cpc	r23, r1
    5314:	61 05       	cpc	r22, r1
    5316:	08 94       	sec
    5318:	08 95       	ret

0000531a <__fp_zero>:
    531a:	e8 94       	clt

0000531c <__fp_szero>:
    531c:	bb 27       	eor	r27, r27
    531e:	66 27       	eor	r22, r22
    5320:	77 27       	eor	r23, r23
    5322:	cb 01       	movw	r24, r22
    5324:	97 f9       	bld	r25, 7
    5326:	08 95       	ret

00005328 <__mulsf3>:
    5328:	0b d0       	rcall	.+22     	; 0x5340 <__mulsf3x>
    532a:	78 c0       	rjmp	.+240    	; 0x541c <__fp_round>
    532c:	69 d0       	rcall	.+210    	; 0x5400 <__fp_pscA>
    532e:	28 f0       	brcs	.+10     	; 0x533a <__mulsf3+0x12>
    5330:	6e d0       	rcall	.+220    	; 0x540e <__fp_pscB>
    5332:	18 f0       	brcs	.+6      	; 0x533a <__mulsf3+0x12>
    5334:	95 23       	and	r25, r21
    5336:	09 f0       	breq	.+2      	; 0x533a <__mulsf3+0x12>
    5338:	5a c0       	rjmp	.+180    	; 0x53ee <__fp_inf>
    533a:	5f c0       	rjmp	.+190    	; 0x53fa <__fp_nan>
    533c:	11 24       	eor	r1, r1
    533e:	ee cf       	rjmp	.-36     	; 0x531c <__fp_szero>

00005340 <__mulsf3x>:
    5340:	ca df       	rcall	.-108    	; 0x52d6 <__fp_split3>
    5342:	a0 f3       	brcs	.-24     	; 0x532c <__mulsf3+0x4>

00005344 <__mulsf3_pse>:
    5344:	95 9f       	mul	r25, r21
    5346:	d1 f3       	breq	.-12     	; 0x533c <__mulsf3+0x14>
    5348:	95 0f       	add	r25, r21
    534a:	50 e0       	ldi	r21, 0x00	; 0
    534c:	55 1f       	adc	r21, r21
    534e:	62 9f       	mul	r22, r18
    5350:	f0 01       	movw	r30, r0
    5352:	72 9f       	mul	r23, r18
    5354:	bb 27       	eor	r27, r27
    5356:	f0 0d       	add	r31, r0
    5358:	b1 1d       	adc	r27, r1
    535a:	63 9f       	mul	r22, r19
    535c:	aa 27       	eor	r26, r26
    535e:	f0 0d       	add	r31, r0
    5360:	b1 1d       	adc	r27, r1
    5362:	aa 1f       	adc	r26, r26
    5364:	64 9f       	mul	r22, r20
    5366:	66 27       	eor	r22, r22
    5368:	b0 0d       	add	r27, r0
    536a:	a1 1d       	adc	r26, r1
    536c:	66 1f       	adc	r22, r22
    536e:	82 9f       	mul	r24, r18
    5370:	22 27       	eor	r18, r18
    5372:	b0 0d       	add	r27, r0
    5374:	a1 1d       	adc	r26, r1
    5376:	62 1f       	adc	r22, r18
    5378:	73 9f       	mul	r23, r19
    537a:	b0 0d       	add	r27, r0
    537c:	a1 1d       	adc	r26, r1
    537e:	62 1f       	adc	r22, r18
    5380:	83 9f       	mul	r24, r19
    5382:	a0 0d       	add	r26, r0
    5384:	61 1d       	adc	r22, r1
    5386:	22 1f       	adc	r18, r18
    5388:	74 9f       	mul	r23, r20
    538a:	33 27       	eor	r19, r19
    538c:	a0 0d       	add	r26, r0
    538e:	61 1d       	adc	r22, r1
    5390:	23 1f       	adc	r18, r19
    5392:	84 9f       	mul	r24, r20
    5394:	60 0d       	add	r22, r0
    5396:	21 1d       	adc	r18, r1
    5398:	82 2f       	mov	r24, r18
    539a:	76 2f       	mov	r23, r22
    539c:	6a 2f       	mov	r22, r26
    539e:	11 24       	eor	r1, r1
    53a0:	9f 57       	subi	r25, 0x7F	; 127
    53a2:	50 40       	sbci	r21, 0x00	; 0
    53a4:	8a f0       	brmi	.+34     	; 0x53c8 <__mulsf3_pse+0x84>
    53a6:	e1 f0       	breq	.+56     	; 0x53e0 <__mulsf3_pse+0x9c>
    53a8:	88 23       	and	r24, r24
    53aa:	4a f0       	brmi	.+18     	; 0x53be <__mulsf3_pse+0x7a>
    53ac:	ee 0f       	add	r30, r30
    53ae:	ff 1f       	adc	r31, r31
    53b0:	bb 1f       	adc	r27, r27
    53b2:	66 1f       	adc	r22, r22
    53b4:	77 1f       	adc	r23, r23
    53b6:	88 1f       	adc	r24, r24
    53b8:	91 50       	subi	r25, 0x01	; 1
    53ba:	50 40       	sbci	r21, 0x00	; 0
    53bc:	a9 f7       	brne	.-22     	; 0x53a8 <__mulsf3_pse+0x64>
    53be:	9e 3f       	cpi	r25, 0xFE	; 254
    53c0:	51 05       	cpc	r21, r1
    53c2:	70 f0       	brcs	.+28     	; 0x53e0 <__mulsf3_pse+0x9c>
    53c4:	14 c0       	rjmp	.+40     	; 0x53ee <__fp_inf>
    53c6:	aa cf       	rjmp	.-172    	; 0x531c <__fp_szero>
    53c8:	5f 3f       	cpi	r21, 0xFF	; 255
    53ca:	ec f3       	brlt	.-6      	; 0x53c6 <__mulsf3_pse+0x82>
    53cc:	98 3e       	cpi	r25, 0xE8	; 232
    53ce:	dc f3       	brlt	.-10     	; 0x53c6 <__mulsf3_pse+0x82>
    53d0:	86 95       	lsr	r24
    53d2:	77 95       	ror	r23
    53d4:	67 95       	ror	r22
    53d6:	b7 95       	ror	r27
    53d8:	f7 95       	ror	r31
    53da:	e7 95       	ror	r30
    53dc:	9f 5f       	subi	r25, 0xFF	; 255
    53de:	c1 f7       	brne	.-16     	; 0x53d0 <__mulsf3_pse+0x8c>
    53e0:	fe 2b       	or	r31, r30
    53e2:	88 0f       	add	r24, r24
    53e4:	91 1d       	adc	r25, r1
    53e6:	96 95       	lsr	r25
    53e8:	87 95       	ror	r24
    53ea:	97 f9       	bld	r25, 7
    53ec:	08 95       	ret

000053ee <__fp_inf>:
    53ee:	97 f9       	bld	r25, 7
    53f0:	9f 67       	ori	r25, 0x7F	; 127
    53f2:	80 e8       	ldi	r24, 0x80	; 128
    53f4:	70 e0       	ldi	r23, 0x00	; 0
    53f6:	60 e0       	ldi	r22, 0x00	; 0
    53f8:	08 95       	ret

000053fa <__fp_nan>:
    53fa:	9f ef       	ldi	r25, 0xFF	; 255
    53fc:	80 ec       	ldi	r24, 0xC0	; 192
    53fe:	08 95       	ret

00005400 <__fp_pscA>:
    5400:	00 24       	eor	r0, r0
    5402:	0a 94       	dec	r0
    5404:	16 16       	cp	r1, r22
    5406:	17 06       	cpc	r1, r23
    5408:	18 06       	cpc	r1, r24
    540a:	09 06       	cpc	r0, r25
    540c:	08 95       	ret

0000540e <__fp_pscB>:
    540e:	00 24       	eor	r0, r0
    5410:	0a 94       	dec	r0
    5412:	12 16       	cp	r1, r18
    5414:	13 06       	cpc	r1, r19
    5416:	14 06       	cpc	r1, r20
    5418:	05 06       	cpc	r0, r21
    541a:	08 95       	ret

0000541c <__fp_round>:
    541c:	09 2e       	mov	r0, r25
    541e:	03 94       	inc	r0
    5420:	00 0c       	add	r0, r0
    5422:	11 f4       	brne	.+4      	; 0x5428 <__fp_round+0xc>
    5424:	88 23       	and	r24, r24
    5426:	52 f0       	brmi	.+20     	; 0x543c <__fp_round+0x20>
    5428:	bb 0f       	add	r27, r27
    542a:	40 f4       	brcc	.+16     	; 0x543c <__fp_round+0x20>
    542c:	bf 2b       	or	r27, r31
    542e:	11 f4       	brne	.+4      	; 0x5434 <__fp_round+0x18>
    5430:	60 ff       	sbrs	r22, 0
    5432:	04 c0       	rjmp	.+8      	; 0x543c <__fp_round+0x20>
    5434:	6f 5f       	subi	r22, 0xFF	; 255
    5436:	7f 4f       	sbci	r23, 0xFF	; 255
    5438:	8f 4f       	sbci	r24, 0xFF	; 255
    543a:	9f 4f       	sbci	r25, 0xFF	; 255
    543c:	08 95       	ret

0000543e <__udivmodqi4>:
    543e:	99 1b       	sub	r25, r25
    5440:	79 e0       	ldi	r23, 0x09	; 9
    5442:	04 c0       	rjmp	.+8      	; 0x544c <__udivmodqi4_ep>

00005444 <__udivmodqi4_loop>:
    5444:	99 1f       	adc	r25, r25
    5446:	96 17       	cp	r25, r22
    5448:	08 f0       	brcs	.+2      	; 0x544c <__udivmodqi4_ep>
    544a:	96 1b       	sub	r25, r22

0000544c <__udivmodqi4_ep>:
    544c:	88 1f       	adc	r24, r24
    544e:	7a 95       	dec	r23
    5450:	c9 f7       	brne	.-14     	; 0x5444 <__udivmodqi4_loop>
    5452:	80 95       	com	r24
    5454:	08 95       	ret

00005456 <__divmodhi4>:
    5456:	97 fb       	bst	r25, 7
    5458:	07 2e       	mov	r0, r23
    545a:	16 f4       	brtc	.+4      	; 0x5460 <__divmodhi4+0xa>
    545c:	00 94       	com	r0
    545e:	07 d0       	rcall	.+14     	; 0x546e <__divmodhi4_neg1>
    5460:	77 fd       	sbrc	r23, 7
    5462:	09 d0       	rcall	.+18     	; 0x5476 <__divmodhi4_neg2>
    5464:	0e 94 45 2a 	call	0x548a	; 0x548a <__udivmodhi4>
    5468:	07 fc       	sbrc	r0, 7
    546a:	05 d0       	rcall	.+10     	; 0x5476 <__divmodhi4_neg2>
    546c:	3e f4       	brtc	.+14     	; 0x547c <__divmodhi4_exit>

0000546e <__divmodhi4_neg1>:
    546e:	90 95       	com	r25
    5470:	81 95       	neg	r24
    5472:	9f 4f       	sbci	r25, 0xFF	; 255
    5474:	08 95       	ret

00005476 <__divmodhi4_neg2>:
    5476:	70 95       	com	r23
    5478:	61 95       	neg	r22
    547a:	7f 4f       	sbci	r23, 0xFF	; 255

0000547c <__divmodhi4_exit>:
    547c:	08 95       	ret

0000547e <__tablejump2__>:
    547e:	ee 0f       	add	r30, r30
    5480:	ff 1f       	adc	r31, r31

00005482 <__tablejump__>:
    5482:	05 90       	lpm	r0, Z+
    5484:	f4 91       	lpm	r31, Z
    5486:	e0 2d       	mov	r30, r0
    5488:	09 94       	ijmp

0000548a <__udivmodhi4>:
    548a:	aa 1b       	sub	r26, r26
    548c:	bb 1b       	sub	r27, r27
    548e:	51 e1       	ldi	r21, 0x11	; 17
    5490:	07 c0       	rjmp	.+14     	; 0x54a0 <__udivmodhi4_ep>

00005492 <__udivmodhi4_loop>:
    5492:	aa 1f       	adc	r26, r26
    5494:	bb 1f       	adc	r27, r27
    5496:	a6 17       	cp	r26, r22
    5498:	b7 07       	cpc	r27, r23
    549a:	10 f0       	brcs	.+4      	; 0x54a0 <__udivmodhi4_ep>
    549c:	a6 1b       	sub	r26, r22
    549e:	b7 0b       	sbc	r27, r23

000054a0 <__udivmodhi4_ep>:
    54a0:	88 1f       	adc	r24, r24
    54a2:	99 1f       	adc	r25, r25
    54a4:	5a 95       	dec	r21
    54a6:	a9 f7       	brne	.-22     	; 0x5492 <__udivmodhi4_loop>
    54a8:	80 95       	com	r24
    54aa:	90 95       	com	r25
    54ac:	bc 01       	movw	r22, r24
    54ae:	cd 01       	movw	r24, r26
    54b0:	08 95       	ret

000054b2 <__eerd_byte_m32u4>:
    54b2:	f9 99       	sbic	0x1f, 1	; 31
    54b4:	fe cf       	rjmp	.-4      	; 0x54b2 <__eerd_byte_m32u4>
    54b6:	92 bd       	out	0x22, r25	; 34
    54b8:	81 bd       	out	0x21, r24	; 33
    54ba:	f8 9a       	sbi	0x1f, 0	; 31
    54bc:	99 27       	eor	r25, r25
    54be:	80 b5       	in	r24, 0x20	; 32
    54c0:	08 95       	ret

000054c2 <__eerd_word_m32u4>:
    54c2:	a8 e1       	ldi	r26, 0x18	; 24
    54c4:	b0 e0       	ldi	r27, 0x00	; 0
    54c6:	42 e0       	ldi	r20, 0x02	; 2
    54c8:	50 e0       	ldi	r21, 0x00	; 0
    54ca:	0c 94 7c 2a 	jmp	0x54f8	; 0x54f8 <__eerd_blraw_m32u4>

000054ce <__eewr_byte_m32u4>:
    54ce:	26 2f       	mov	r18, r22

000054d0 <__eewr_r18_m32u4>:
    54d0:	f9 99       	sbic	0x1f, 1	; 31
    54d2:	fe cf       	rjmp	.-4      	; 0x54d0 <__eewr_r18_m32u4>
    54d4:	1f ba       	out	0x1f, r1	; 31
    54d6:	92 bd       	out	0x22, r25	; 34
    54d8:	81 bd       	out	0x21, r24	; 33
    54da:	20 bd       	out	0x20, r18	; 32
    54dc:	0f b6       	in	r0, 0x3f	; 63
    54de:	f8 94       	cli
    54e0:	fa 9a       	sbi	0x1f, 2	; 31
    54e2:	f9 9a       	sbi	0x1f, 1	; 31
    54e4:	0f be       	out	0x3f, r0	; 63
    54e6:	01 96       	adiw	r24, 0x01	; 1
    54e8:	08 95       	ret

000054ea <__eewr_word_m32u4>:
    54ea:	0e 94 67 2a 	call	0x54ce	; 0x54ce <__eewr_byte_m32u4>
    54ee:	27 2f       	mov	r18, r23
    54f0:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__eewr_r18_m32u4>

000054f4 <__eerd_block_m32u4>:
    54f4:	dc 01       	movw	r26, r24
    54f6:	cb 01       	movw	r24, r22

000054f8 <__eerd_blraw_m32u4>:
    54f8:	fc 01       	movw	r30, r24
    54fa:	f9 99       	sbic	0x1f, 1	; 31
    54fc:	fe cf       	rjmp	.-4      	; 0x54fa <__eerd_blraw_m32u4+0x2>
    54fe:	06 c0       	rjmp	.+12     	; 0x550c <__eerd_blraw_m32u4+0x14>
    5500:	f2 bd       	out	0x22, r31	; 34
    5502:	e1 bd       	out	0x21, r30	; 33
    5504:	f8 9a       	sbi	0x1f, 0	; 31
    5506:	31 96       	adiw	r30, 0x01	; 1
    5508:	00 b4       	in	r0, 0x20	; 32
    550a:	0d 92       	st	X+, r0
    550c:	41 50       	subi	r20, 0x01	; 1
    550e:	50 40       	sbci	r21, 0x00	; 0
    5510:	b8 f7       	brcc	.-18     	; 0x5500 <__eerd_blraw_m32u4+0x8>
    5512:	08 95       	ret

00005514 <_exit>:
    5514:	f8 94       	cli

00005516 <__stop_program>:
    5516:	ff cf       	rjmp	.-2      	; 0x5516 <__stop_program>
